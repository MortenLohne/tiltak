use std::{array, mem};

use half::f16;

use crate::{
    evaluation::policy_eval::sigmoid,
    position::{num_line_symmetries, num_square_symmetries, Komi},
};

use super::policy_eval::policy_offset;

pub const NUM_VALUE_FEATURES_4S: usize = 272;
pub const NUM_POLICY_FEATURES_4S: usize = 176;

pub const NUM_VALUE_FEATURES_5S: usize = 352;
pub const NUM_POLICY_FEATURES_5S: usize = 200;

pub const NUM_VALUE_FEATURES_6S: usize = 368;
pub const NUM_POLICY_FEATURES_6S: usize = 208;

const fn value_padding<const S: usize>() -> usize {
    match S {
        4 => 4,
        5 => 4,
        6 => 0,
        _ => unimplemented!(),
    }
}

const fn policy_padding<const S: usize>() -> usize {
    match S {
        4 => 7,
        5 => 3,
        6 => 1,
        _ => unimplemented!(),
    }
}

#[derive(Clone, Copy)]
pub struct IndexPair {
    start: usize,
    length: usize,
}

impl IndexPair {
    pub const fn next(start: usize, length: usize) -> (Self, usize) {
        (Self { start, length }, start + length)
    }

    pub fn as_slice<'a, T>(&self, slice: &'a [T]) -> &'a [T] {
        &slice[self.start..self.start + self.length]
    }

    pub fn as_mut_slice<'a, T>(&self, slice: &'a mut [T]) -> &'a mut [T] {
        &mut slice[self.start..self.start + self.length]
    }
}

pub struct ValueIndexes<const S: usize> {
    pub first_ply: IndexPair,
    pub second_ply: IndexPair,
    pub flat_psqt: IndexPair,
    pub wall_psqt: IndexPair,
    pub cap_psqt: IndexPair,
    pub supports_psqt: IndexPair,
    pub captives_psqt: IndexPair,
    pub flat_win_this_ply: IndexPair,
    pub flat_win_next_ply: IndexPair,
    pub shallow_supports_per_piece: IndexPair,
    pub deep_supports_per_piece: IndexPair,
    pub shallow_captives_per_piece: IndexPair,
    pub deep_captives_per_piece: IndexPair,
    pub us_to_move_opening_flatstone_lead: IndexPair,
    pub them_to_move_opening_flatstone_lead: IndexPair,
    pub us_to_move_middlegame_flatstone_lead: IndexPair,
    pub them_to_move_middlegame_flatstone_lead: IndexPair,
    pub us_to_move_endgame_flatstone_lead: IndexPair,
    pub them_to_move_endgame_flatstone_lead: IndexPair,
    pub i_number_of_groups: IndexPair,
    pub critical_squares: IndexPair,
    pub critical_square_cap_attack: IndexPair,
    pub flat_next_to_our_stack: IndexPair,
    pub wall_next_to_our_stack: IndexPair,
    pub cap_next_to_our_stack: IndexPair,
    pub num_lines_occupied: IndexPair,
    pub line_control_empty: IndexPair,
    pub line_control_their_blocking_piece: IndexPair,
    pub line_control_other: IndexPair,
    pub sidelined_cap: IndexPair,
    pub fully_isolated_cap: IndexPair,
    pub semi_isolated_cap: IndexPair,
    pub padding: IndexPair,
}

impl<const S: usize> ValueIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;

        let (first_ply, i) = IndexPair::next(i, 1);
        let (second_ply, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (supports_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (captives_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_win_this_ply, i) = IndexPair::next(i, 1);
        let (flat_win_next_ply, i) = IndexPair::next(i, 2);
        let (shallow_supports_per_piece, i) = IndexPair::next(i, 4);
        let (deep_supports_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece, i) = IndexPair::next(i, 4);
        let (deep_captives_per_piece, i) = IndexPair::next(i, 4);
        let (us_to_move_opening_flatstone_lead, i) = IndexPair::next(i, 7);
        let (them_to_move_opening_flatstone_lead, i) = IndexPair::next(i, 7);
        let (us_to_move_middlegame_flatstone_lead, i) = IndexPair::next(i, 7);
        let (them_to_move_middlegame_flatstone_lead, i) = IndexPair::next(i, 7);
        let (us_to_move_endgame_flatstone_lead, i) = IndexPair::next(i, 7);
        let (them_to_move_endgame_flatstone_lead, i) = IndexPair::next(i, 7);
        let (i_number_of_groups, i) = IndexPair::next(i, 3);
        let (critical_squares, i) = IndexPair::next(i, 4);
        let (critical_square_cap_attack, i) = IndexPair::next(i, 6);
        let (flat_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (wall_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (cap_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (num_lines_occupied, i) = IndexPair::next(i, S + 1);
        let (line_control_empty, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_their_blocking_piece, i) =
            IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_other, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (sidelined_cap, i) = IndexPair::next(i, 3);
        let (fully_isolated_cap, i) = IndexPair::next(i, 3);
        let (semi_isolated_cap, i) = IndexPair::next(i, 3);
        let (padding, i) = IndexPair::next(i, value_padding::<S>() / 2);

        assert!(i == num_value_features::<S>() / 2);

        ValueIndexes {
            first_ply,
            second_ply,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            supports_psqt,
            captives_psqt,
            flat_win_this_ply,
            flat_win_next_ply,
            shallow_supports_per_piece,
            deep_supports_per_piece,
            shallow_captives_per_piece,
            deep_captives_per_piece,
            us_to_move_opening_flatstone_lead,
            them_to_move_opening_flatstone_lead,
            us_to_move_middlegame_flatstone_lead,
            them_to_move_middlegame_flatstone_lead,
            us_to_move_endgame_flatstone_lead,
            them_to_move_endgame_flatstone_lead,
            i_number_of_groups,
            critical_squares,
            critical_square_cap_attack,
            flat_next_to_our_stack,
            wall_next_to_our_stack,
            cap_next_to_our_stack,
            num_lines_occupied,
            line_control_empty,
            line_control_their_blocking_piece,
            line_control_other,
            sidelined_cap,
            fully_isolated_cap,
            semi_isolated_cap,
            padding,
        }
    }
}

pub const VALUE_INDEXES_4S: ValueIndexes<4> = ValueIndexes::new();
pub const VALUE_INDEXES_5S: ValueIndexes<5> = ValueIndexes::new();
pub const VALUE_INDEXES_6S: ValueIndexes<6> = ValueIndexes::new();

impl<const S: usize> ValueIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> ValueIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn value_indexes<const S: usize>() -> ValueIndexes<S> {
    match S {
        4 => VALUE_INDEXES_4S.downcast_size(),
        5 => VALUE_INDEXES_5S.downcast_size(),
        6 => VALUE_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

pub struct PolicyIndexes<const S: usize> {
    pub flat_psqt_white: IndexPair,
    pub flat_psqt_black: IndexPair,
    pub wall_psqt_white: IndexPair,
    pub wall_psqt_black: IndexPair,
    pub cap_psqt_white: IndexPair,
    pub cap_psqt_black: IndexPair,
    pub move_role_bonus_white: IndexPair,
    pub move_role_bonus_black: IndexPair,
    pub decline_win: IndexPair,
    pub place_to_win: IndexPair,
    pub place_to_draw: IndexPair,
    pub place_to_loss: IndexPair,
    pub place_to_allow_opponent_to_end: IndexPair,
    pub two_flats_left: IndexPair,
    pub three_flats_left: IndexPair,
    pub our_road_stones_in_line: IndexPair,
    pub their_road_stones_in_line: IndexPair,
    pub extend_single_group_base: IndexPair,
    pub extend_single_group_linear: IndexPair,
    pub extend_single_group_to_new_line_base: IndexPair,
    pub extend_single_group_to_new_line_linear: IndexPair,
    pub merge_two_groups_base: IndexPair,
    pub merge_two_groups_linear: IndexPair,
    pub block_merger_base: IndexPair,
    pub block_merger_linear: IndexPair,
    pub place_our_critical_square: IndexPair,
    pub place_their_critical_square: IndexPair,
    pub ignore_their_critical_square: IndexPair,
    pub next_to_our_last_stone: IndexPair,
    pub next_to_their_last_stone: IndexPair,
    pub diagonal_to_our_last_stone: IndexPair,
    pub diagonal_to_their_last_stone: IndexPair,
    pub attack_strong_flats: IndexPair,
    pub blocking_stone_blocks_extensions_of_two_flats: IndexPair,
    pub attack_strong_stack_with_wall: IndexPair,
    pub attack_strong_stack_with_cap: IndexPair,
    pub attack_last_movement: IndexPair,
    pub place_last_movement: IndexPair,
    pub simple_movement: IndexPair,
    pub simple_capture: IndexPair,
    pub simple_self_capture: IndexPair,
    pub pure_spread: IndexPair,
    pub fcd_highest_board: IndexPair,
    pub fcd_highest_stack: IndexPair,
    pub fcd_other: IndexPair,
    pub stack_captured_by_movement: IndexPair,
    pub stack_capture_in_strong_line: IndexPair,
    pub stack_capture_in_strong_line_cap: IndexPair,
    pub move_cap_onto_strong_line: IndexPair,
    pub move_cap_onto_strong_line_with_critical_square: IndexPair,
    pub recapture_stack_pure: IndexPair,
    pub recapture_stack_impure: IndexPair,
    pub move_last_placement: IndexPair,
    pub continue_spread: IndexPair,
    pub move_onto_critical_square: IndexPair,
    pub spread_that_connects_groups_to_win: IndexPair,
    pub padding: IndexPair,
}

pub const POLICY_INDEXES_4S: PolicyIndexes<4> = PolicyIndexes::new();
pub const POLICY_INDEXES_5S: PolicyIndexes<5> = PolicyIndexes::new();
pub const POLICY_INDEXES_6S: PolicyIndexes<6> = PolicyIndexes::new();

impl<const S: usize> PolicyIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> PolicyIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn policy_indexes<const S: usize>() -> PolicyIndexes<S> {
    match S {
        4 => POLICY_INDEXES_4S.downcast_size(),
        5 => POLICY_INDEXES_5S.downcast_size(),
        6 => POLICY_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

impl<const S: usize> PolicyIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;
        let (flat_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (move_role_bonus_white, i) = IndexPair::next(i, 3);
        let (move_role_bonus_black, i) = IndexPair::next(i, 3);
        let (decline_win, i) = IndexPair::next(i, 1);
        let (place_to_win, i) = IndexPair::next(i, 1);
        let (place_to_draw, i) = IndexPair::next(i, 1);
        let (place_to_loss, i) = IndexPair::next(i, 1);
        let (place_to_allow_opponent_to_end, i) = IndexPair::next(i, 3);
        let (two_flats_left, i) = IndexPair::next(i, 2);
        let (three_flats_left, i) = IndexPair::next(i, 2);
        let (our_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (their_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (extend_single_group_to_new_line_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_to_new_line_linear, i) = IndexPair::next(i, 3);
        let (extend_single_group_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_linear, i) = IndexPair::next(i, 3);
        let (merge_two_groups_base, i) = IndexPair::next(i, 3);
        let (merge_two_groups_linear, i) = IndexPair::next(i, 3);
        let (block_merger_base, i) = IndexPair::next(i, 3);
        let (block_merger_linear, i) = IndexPair::next(i, 3);
        let (place_our_critical_square, i) = IndexPair::next(i, 1);
        let (place_their_critical_square, i) = IndexPair::next(i, 4);
        let (ignore_their_critical_square, i) = IndexPair::next(i, 2);
        let (next_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (next_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (attack_strong_flats, i) = IndexPair::next(i, 1);
        let (blocking_stone_blocks_extensions_of_two_flats, i) = IndexPair::next(i, 1);
        let (attack_strong_stack_with_wall, i) = IndexPair::next(i, 6);
        let (attack_strong_stack_with_cap, i) = IndexPair::next(i, 6);
        let (attack_last_movement, i) = IndexPair::next(i, 4);
        let (place_last_movement, i) = IndexPair::next(i, 3);
        let (simple_movement, i) = IndexPair::next(i, 3);
        let (simple_capture, i) = IndexPair::next(i, 4);
        let (simple_self_capture, i) = IndexPair::next(i, 4);
        let (pure_spread, i) = IndexPair::next(i, 2);
        let (fcd_highest_board, i) = IndexPair::next(i, 6);
        let (fcd_highest_stack, i) = IndexPair::next(i, 6);
        let (fcd_other, i) = IndexPair::next(i, 8);
        let (stack_captured_by_movement, i) = IndexPair::next(i, 1);
        let (stack_capture_in_strong_line, i) = IndexPair::next(i, S - 3);
        let (stack_capture_in_strong_line_cap, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line_with_critical_square, i) = IndexPair::next(i, S - 3);
        let (recapture_stack_pure, i) = IndexPair::next(i, 3);
        let (recapture_stack_impure, i) = IndexPair::next(i, 3);
        let (move_last_placement, i) = IndexPair::next(i, 3);
        let (continue_spread, i) = IndexPair::next(i, 3);
        let (move_onto_critical_square, i) = IndexPair::next(i, 3);
        let (spread_that_connects_groups_to_win, i) = IndexPair::next(i, 1);
        let (padding, i) = IndexPair::next(i, policy_padding::<S>());

        assert!(i == num_policy_features::<S>());

        PolicyIndexes {
            flat_psqt_white,
            flat_psqt_black,
            wall_psqt_white,
            wall_psqt_black,
            cap_psqt_white,
            cap_psqt_black,
            move_role_bonus_white,
            move_role_bonus_black,
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            attack_strong_stack_with_wall,
            attack_strong_stack_with_cap,
            attack_last_movement,
            place_last_movement,
            simple_movement,
            simple_capture,
            simple_self_capture,
            pure_spread,
            fcd_highest_board,
            fcd_highest_stack,
            fcd_other,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            recapture_stack_pure,
            recapture_stack_impure,
            move_last_placement,
            continue_spread,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
            padding,
        }
    }
}

pub trait ValueApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn finish(&mut self) -> f32;
}

#[derive(Debug, Clone)]
pub struct Value<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for Value<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Value {
            features: vec![f16::ZERO; num_value_features::<S>() / 2],
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn finish(&mut self) -> f32 {
        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>();

        self.features.fill(f16::ZERO);

        total_value
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalValue<const S: usize> {
    val: f32,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for IncrementalValue<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalValue {
            val: 0.0,
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn finish(&mut self) -> f32 {
        let total_value = self.val;

        self.val = 0.0;

        total_value
    }
}

pub trait PolicyApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn eval_one(&mut self, index_pair: IndexPair, index: usize) {
        self.eval_i8(index_pair, index, 1)
    }
    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.eval(index_pair, index, f16::from(val))
    }
    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.eval(index_pair, index, f16::from_f32(val))
    }
    fn set_immediate_win(&mut self);
    fn has_immediate_win(&self) -> bool;
    fn finish(&mut self, num_moves: usize) -> f16;
}

#[derive(Debug, Clone)]
pub struct Policy<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for Policy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Policy {
            features: vec![f16::ZERO; num_policy_features::<S>()],
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);

        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>() + offset;

        self.features.fill(f16::ZERO);
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalPolicy<const S: usize> {
    val: f32,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for IncrementalPolicy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalPolicy {
            val: 0.0,
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.val += index_pair.as_slice(self.parameters)[index] * val as f32
    }

    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.val += index_pair.as_slice(self.parameters)[index] * val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);
        let total_value = self.val + offset;

        self.val = 0.0;
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

pub const fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub const fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn value_features_4s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_4S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_4S_0KOMI,
        4 => &VALUE_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn policy_features_4s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_4S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_4S_0KOMI,
        4 => &POLICY_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn value_features_5s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_5S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_5S_0KOMI,
        4 => &VALUE_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn policy_features_5s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_5S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_5S_0KOMI,
        4 => &POLICY_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn value_features_6s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_6S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_6S_0KOMI,
        4 => &VALUE_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

pub fn policy_features_6s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_6S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_6S_0KOMI,
        4 => &POLICY_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_0KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    1.9521688,
    2.5563939,
    2.0303018,
    1.4272298,
    0.7482157,
    1.5062737,
    0.855792,
    0.03852085,
    0.116390236,
    0.120113105,
    -0.0059250165,
    -0.00050385203,
    -0.00651386,
    0.04244786,
    0.24110673,
    0.26454943,
    -0.1977569,
    -0.55613214,
    -0.42241934,
    0.0046239593,
    0.0073768054,
    0.011918747,
    0.26942426,
    0.1919267,
    0.0060586967,
    -0.008598236,
    0.03658084,
    0.053460527,
    0.005802648,
    0.005024814,
    0.5579481,
    0.5408477,
    -0.00024717767,
    -0.0034531043,
    0.035459947,
    0.03524274,
    0.0030333688,
    -0.005124028,
    -0.0084681,
    0.002912603,
    0.018658437,
    0.20398723,
    0.038707428,
    -0.0002972075,
    -0.0034128411,
    -0.005655582,
    0.0036914514,
    -0.006914158,
    0.0021684594,
    0.1725864,
    0.03397043,
    0.015036689,
    -0.0032660286,
    -0.00470117,
    0.022334805,
    0.03242852,
    0.03318487,
    0.028725918,
    0.0056432737,
    -0.007019419,
    0.0042479173,
    -0.00048429787,
    0.01952237,
    0.037918504,
    0.03953122,
    0.03336546,
    -0.007508096,
    -0.0074004536,
    0.009718999,
    0.024037661,
    0.016567402,
    0.007748406,
    0.0072452375,
    0.00080912065,
    -0.004818514,
    -0.0062382556,
    -0.0009851198,
    0.0039389585,
    0.02318741,
    0.023497684,
    1.0173272,
    0.6043568,
    0.21855535,
    0.16127312,
    0.0379181,
    0.28725028,
    0.101509705,
    0.0032768678,
    0.0059308577,
    0.0015515061,
    -0.0011021066,
    -0.0057374667,
    0.00015021767,
    0.40045068,
    0.37824014,
    -0.00078115705,
    -0.008816252,
    0.16692638,
    0.47859606,
    0.64771795,
    0.30363765,
    0.46133813,
    0.48547533,
    0.15286261,
    0.037239477,
    0.37497795,
    0.4545804,
    0.16413203,
    0.037873045,
    0.073469944,
    0.093857124,
    0.07486923,
    0.036657527,
    0.13053508,
    0.21537152,
    0.11836918,
    0.032058388,
    0.6405176,
    0.74737704,
    0.30051568,
    0.11968439,
    0.48952052,
    0.77848625,
    0.37438914,
    0.085716866,
    0.0021942016,
    -0.0044462606,
    0.005722007,
    0.0051122922,
    0.0010959748,
    0.0020771455,
    0.0074368455,
    -0.0066757104,
    0.004355209,
    -0.0077824043,
    0.0070885587,
    0.008410923,
    0.0043121455,
    -0.008000903,
    0.0010137418,
    0.5892934,
    1.1399478,
    0.55359155,
    0.061232895,
    0.17557754,
    0.1797984,
    -0.007463541,
    -0.009312019,
    0.008915393,
    0.04603574,
    0.13979313,
    0.08314135,
    -0.16554478,
    -0.5552646,
    -0.3785299,
    0.0005403058,
    -8.7601686e-5,
    -0.00819309,
    0.14627321,
    0.060440436,
    -0.0039176345,
    0.0039970186,
    0.006119531,
    0.03902207,
    0.00952702,
    0.0032783058,
    0.7223547,
    0.3346285,
    -0.0077192923,
    -0.009022991,
    0.015037213,
    0.04285714,
    -0.006355319,
    0.001523626,
    0.00752681,
    0.036708023,
    0.17628483,
    0.014781158,
    0.008531908,
    0.0044294326,
    0.009283821,
    0.0042841155,
    0.016383123,
    0.037973296,
    0.19287758,
    0.019387832,
    -0.0015671479,
    -0.007953666,
    0.036747772,
    0.02608528,
    0.024957191,
    0.016406307,
    -0.0032869037,
    0.005188959,
    -0.0078036217,
    0.0041230745,
    0.020652402,
    0.03973985,
    0.026704693,
    0.0316042,
    0.010577686,
    -0.009010323,
    0.02294458,
    0.021471294,
    0.0048982543,
    -0.0036891638,
    0.003044248,
    -0.0028171341,
    -0.010641778,
    0.017145945,
    0.014644908,
    0.008811492,
    0.014051799,
    0.011274723,
    -0.0112145655,
    0.0029778765,
    0.9701788,
    0.5561994,
    0.1579149,
    0.04864297,
    0.0007944884,
    0.08639799,
    0.00945593,
    -0.0041113687,
    -0.00031996984,
    0.009882869,
    -0.0012246752,
    0.00716334,
    -0.000495675,
    1.0877098,
    0.23479956,
    0.0038303593,
    0.0038839234,
    0.37741512,
    0.5913479,
    0.529436,
    0.115916714,
    0.45550123,
    0.40887806,
    0.13279854,
    0.013709166,
    0.37379855,
    0.28538927,
    0.09853269,
    0.023597395,
    0.0936763,
    0.063675836,
    0.04093505,
    0.018527374,
    0.18432045,
    0.13801295,
    0.030592434,
    -0.0055463007,
    0.87464565,
    0.9298734,
    0.1939178,
    0.042129952,
    0.8864718,
    0.9842894,
    0.24324407,
    0.016610734,
    -0.001817584,
    -0.009368448,
    -0.006632633,
    -0.00079724286,
    -0.001203401,
    -0.001678803,
    0.008264789,
    0.0015326263,
    -0.006872382,
    -0.0035781572,
    0.0023975773,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_0KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    -0.06596815,
    0.14143576,
    0.2643506,
    0.14499849,
    0.107681885,
    0.11073599,
    -0.19013828,
    -0.40654242,
    0.3318426,
    -0.16691944,
    -0.3575065,
    0.23800719,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.33601677,
    -0.041274536,
    0.0013449714,
    -0.29418692,
    -0.54222,
    0.0075244084,
    -2.7454162,
    1.2056162,
    0.74540424,
    -3.2504718,
    -2.7729948,
    0.068721116,
    0.47504744,
    -0.16477276,
    0.18019468,
    -0.13531236,
    0.14152104,
    0.032580495,
    -0.22254677,
    0.49075425,
    1.1202906,
    -0.07768215,
    -0.10285486,
    -0.28730598,
    -0.60267043,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    0.1747276,
    -0.3360676,
    0.35788158,
    1.2172985,
    -0.7322632,
    -0.5023849,
    -0.49644548,
    0.63201225,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    0.6639308,
    0.34448573,
    -0.0077813696,
    -1.4789531,
    -0.5449256,
    0.0020160126,
    0.20559156,
    -0.025478715,
    -0.0057330895,
    0.48247886,
    0.27221236,
    0.0008187201,
    0.79267675,
    1.5803065,
    -0.002397363,
    0.2934291,
    -0.9169082,
    0.00303144,
    0.18601592,
    0.47252977,
    -0.008103551,
    -0.54003847,
    -0.6874615,
    -0.009149382,
    2.5997837,
    0.21279974,
    1.0009149,
    0.00917124,
    0.5581906,
    -3.4829595,
    -0.7885469,
    0.29876935,
    1.3653431,
    0.3458327,
    0.23525056,
    0.27667275,
    0.6695998,
    0.2019845,
    0.33065692,
    -0.2599935,
    0.50598747,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.32448876,
    0.06516934,
    -0.00813673,
    -0.009886575,
    0.04560957,
    -0.2841685,
    0.00021132734,
    -1.8742533,
    -1.0128005,
    0.0011727996,
    0.07729849,
    0.14006491,
    -0.008626261,
    -0.006473,
    -1.0160459,
    -0.7020004,
    -0.0051336214,
    -0.0013411185,
    0.15417725,
    -1.3802054,
    0.25305972,
    1.4399757,
    1.8268988,
    1.968561,
    2.796725,
    1.1202828,
    -1.7660865,
    -0.804423,
    0.20100431,
    1.3501571,
    0.9508624,
    0.054124333,
    -1.1339825,
    -1.1712068,
    -2.0318532,
    -1.4227827,
    -2.0454004,
    -0.13430345,
    -1.5658052,
    -1.0156312,
    0.39389312,
    -0.0530978,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.397977,
    0.7746763,
    -0.002408173,
    0.22021821,
    1.53287,
    0.0077593178,
    0.2637508,
    0.88056475,
    -0.0054027913,
    0.3666799,
    0.14289705,
    0.0036244253,
    -0.39640427,
    -0.31697965,
    0.16356713,
    3.3073342,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_2KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    0.6371614,
    0.80866414,
    0.14492401,
    -0.18177378,
    1.4198287,
    1.561164,
    1.5648998,
    0.094859906,
    0.7480351,
    1.2371825,
    -0.0059250165,
    -0.00050385203,
    -0.00651386,
    0.43416104,
    0.71292883,
    0.71080023,
    0.32828057,
    0.5385422,
    0.5012717,
    3.3302562,
    0.29727846,
    1.9096979,
    0.6994313,
    1.3250529,
    0.0060586967,
    -0.008598236,
    0.1949128,
    -0.3582253,
    0.005802648,
    0.005024814,
    -0.5058198,
    -0.14085428,
    -0.00024717767,
    -0.0034531043,
    -0.5631043,
    -0.1651192,
    0.0030333688,
    -0.005124028,
    1.3655597,
    0.09657856,
    0.81066936,
    -0.11967264,
    -0.14176577,
    -0.63804877,
    -0.12966059,
    -0.0071817976,
    2.0374413,
    -0.060965918,
    0.2805962,
    -0.80124116,
    -0.89979595,
    -1.2252696,
    1.0161766,
    0.67765415,
    0.21486738,
    0.27565572,
    -0.10507966,
    -0.49631494,
    -0.7351214,
    -0.3104927,
    0.27399975,
    0.20401959,
    -0.48284662,
    -0.46195462,
    -0.6515104,
    -1.1150466,
    -0.7247857,
    -0.7800174,
    -0.8254063,
    -0.35649708,
    0.64362645,
    1.3859832,
    2.5600474,
    -0.21294738,
    -0.7263458,
    -1.4372325,
    -0.76572746,
    0.09779973,
    0.69740045,
    1.4399059,
    -0.31941804,
    0.1527144,
    0.1195582,
    0.31655353,
    0.23029453,
    0.10667612,
    0.06887209,
    0.0032768678,
    0.0059308577,
    0.0015515061,
    -0.0011021066,
    -0.0057374667,
    0.00015021767,
    -0.006256615,
    -0.13721454,
    -0.00078115705,
    -0.21887173,
    -0.43560216,
    -0.23305957,
    0.100033484,
    0.5120697,
    0.01854898,
    -0.43031198,
    0.28064862,
    0.8088496,
    0.087448604,
    -0.25407463,
    0.2493102,
    0.6227316,
    -0.6780532,
    -0.66843027,
    -0.12022762,
    0.26677182,
    -0.6749453,
    -0.5557421,
    -0.11904936,
    0.42826462,
    -0.44851625,
    -0.32687375,
    0.14358272,
    0.6507247,
    -0.7529921,
    -0.36836743,
    0.13226645,
    0.73414,
    0.0021942016,
    -0.0044462606,
    0.005722007,
    0.0051122922,
    0.0010959748,
    0.0020771455,
    0.0074368455,
    -0.0066757104,
    0.004355209,
    -0.0077824043,
    0.0070885587,
    0.008410923,
    0.0043121455,
    -0.008000903,
    0.0010137418,
    -1.6996895,
    -1.6944325,
    -1.6106619,
    -0.9256986,
    -1.5331922,
    -1.8990078,
    -0.007463541,
    -0.009312019,
    0.008915393,
    -0.602616,
    -0.69082355,
    -0.6711985,
    -0.15378797,
    -0.3844985,
    -0.4107507,
    -2.1662016,
    -0.35491505,
    -1.1645831,
    -0.7933703,
    -1.1814039,
    -0.0039176345,
    0.0039970186,
    -0.19327393,
    0.1862891,
    0.00952702,
    0.0032783058,
    0.45577228,
    0.19611219,
    -0.0077192923,
    -0.009022991,
    0.2805741,
    0.032113936,
    -0.006355319,
    0.001523626,
    -0.00079395995,
    0.0012055086,
    -0.0018659113,
    0.004368524,
    0.0076929503,
    -0.0085540535,
    -0.63600403,
    0.0029043844,
    0.008424118,
    -0.0050589656,
    -0.0051581357,
    0.007047029,
    -0.00092186296,
    1.2456731,
    0.0054334905,
    -0.006010456,
    -0.0055280733,
    -0.00014412233,
    0.015387562,
    -1.0622416,
    -1.519464,
    -0.0075576873,
    -0.00044307671,
    0.0042860033,
    -0.0044544837,
    0.01145322,
    0.3452618,
    0.5093144,
    0.0056339707,
    0.005903894,
    -0.0017206976,
    -0.0016018818,
    0.032597397,
    0.150013,
    -1.1021686,
    0.0092722215,
    0.0030306866,
    -0.00916178,
    -0.00013652814,
    0.009693164,
    0.29305214,
    1.6044409,
    0.21359834,
    0.03202368,
    -0.09378924,
    -0.10309795,
    -0.11559588,
    -0.10991426,
    0.19067782,
    -0.0041113687,
    -0.00031996984,
    0.009882869,
    -0.0012246752,
    0.00716334,
    -0.000495675,
    -0.012682302,
    0.31695604,
    0.0038303593,
    0.3142753,
    0.122105345,
    0.0021923194,
    -0.1819264,
    -0.50213695,
    0.01271196,
    0.40723965,
    -0.09545562,
    -0.8335042,
    0.0862693,
    0.40179408,
    -0.11711902,
    -0.4878876,
    0.3062023,
    0.22798303,
    0.09767471,
    -0.27861974,
    0.033044104,
    0.10239789,
    -0.276662,
    -0.45330295,
    0.3590983,
    0.29021117,
    -0.21227324,
    -0.7399993,
    0.65700346,
    0.3764196,
    -0.19399486,
    -0.59566015,
    -0.001817584,
    -0.009368448,
    -0.006632633,
    -0.00079724286,
    -0.001203401,
    -0.001678803,
    0.008264789,
    0.0015326263,
    -0.006872382,
    -0.0035781572,
    0.0023975773,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_2KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    0.3835006,
    0.21164729,
    0.5567637,
    0.14972319,
    0.008378243,
    -0.43465084,
    -0.7308303,
    -0.8912839,
    0.46212968,
    -0.43907836,
    0.26626498,
    0.5782282,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.4975553,
    0.15077943,
    0.0013449714,
    -0.4241401,
    -0.4088393,
    0.0075244084,
    -3.2364414,
    0.9161514,
    0.5318693,
    -2.230449,
    -4.504568,
    -0.487717,
    0.6291668,
    -0.73886293,
    0.26118273,
    -0.27261165,
    0.12881532,
    0.1777136,
    -0.011507088,
    0.41689792,
    1.1819894,
    -0.14281727,
    -0.12822403,
    -0.4899795,
    -0.7057814,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    -0.038640175,
    -0.48866045,
    0.18388642,
    2.1011872,
    -0.47701856,
    -0.35595262,
    -0.5488175,
    -0.12425026,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    -0.0737323,
    1.6342262,
    -0.0077813696,
    0.8013023,
    -0.2317711,
    0.0020160126,
    0.59806335,
    -0.9970204,
    -0.0057330895,
    0.07285249,
    0.6827554,
    0.0008187201,
    0.9157639,
    0.626506,
    -0.002397363,
    -0.088837735,
    0.38987082,
    0.00303144,
    0.2895544,
    -0.16646424,
    -0.008103551,
    -0.26244026,
    -0.4901274,
    -0.009149382,
    2.3455992,
    -0.7211382,
    1.9804211,
    0.00917124,
    0.5224504,
    -4.4372244,
    -0.8496559,
    0.4749193,
    1.473498,
    0.45706263,
    0.046547048,
    0.25537905,
    0.77724373,
    0.07417753,
    0.39354962,
    -0.6581425,
    0.71233255,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.5941038,
    -0.046199616,
    -0.00813673,
    -0.009886575,
    0.1387866,
    -0.22598192,
    0.00021132734,
    -2.1441894,
    -1.8108326,
    0.0011727996,
    -0.16316642,
    0.30345392,
    -0.008626261,
    -0.006473,
    -1.3621367,
    -0.119089246,
    -0.0051336214,
    -0.0013411185,
    0.010755843,
    -1.2026048,
    0.38548076,
    1.398525,
    1.9160999,
    2.1099184,
    2.0770369,
    1.4328448,
    -1.7100422,
    -0.6515236,
    0.332164,
    0.62545145,
    0.0065994086,
    -0.005360393,
    -0.9618395,
    -1.1140851,
    -1.7814239,
    -0.5971449,
    -1.9552374,
    -0.23968147,
    -1.2191556,
    -1.1778564,
    0.42183256,
    -0.11105158,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.4999874,
    0.31543893,
    -0.002408173,
    -0.93778354,
    1.1441715,
    0.0077593178,
    0.79672486,
    0.83366203,
    -0.0054027913,
    0.49028045,
    0.045144238,
    0.0036244253,
    -0.30533037,
    -0.3648391,
    0.09491095,
    3.3036993,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_0KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    1.2578912,
    1.834648,
    1.3010054,
    1.4926254,
    0.9313617,
    0.92618203,
    0.9697076,
    1.6034157,
    1.6497132,
    1.5718113,
    1.5653721,
    1.5292722,
    1.468157,
    0.0032726058,
    0.5457167,
    0.64128494,
    1.1021467,
    1.2107052,
    1.4700452,
    -0.3573573,
    0.47962698,
    0.6791375,
    1.3037571,
    1.5773777,
    1.9069632,
    0.70101064,
    0.7568882,
    0.7569371,
    0.79829377,
    0.85944325,
    0.9657679,
    0.37469196,
    0.5197773,
    0.5137362,
    0.58723474,
    0.59728503,
    0.60920936,
    2.0945141,
    0.5409595,
    1.4830669,
    0.6815517,
    1.0844814,
    1.9189279,
    1.4459589,
    0.26831704,
    -0.15025064,
    -0.39194223,
    -0.03668104,
    -0.5493388,
    -0.19892111,
    -0.22265424,
    -0.10933032,
    -0.43795383,
    -0.4655208,
    -0.730499,
    -0.5158566,
    0.22053151,
    0.36775252,
    0.5708619,
    0.6972516,
    0.85460216,
    1.12268,
    0.45598412,
    -0.022757214,
    -0.31025118,
    -0.8298348,
    -0.6321787,
    -0.4672751,
    -0.33426404,
    0.1501831,
    1.0068325,
    0.84161335,
    0.69948804,
    0.5703528,
    0.40540504,
    0.2879858,
    0.08012664,
    -0.22101739,
    -0.26203114,
    -0.38415682,
    -0.5240953,
    -0.6907355,
    -0.8410955,
    -1.0109862,
    0.21320908,
    0.37063012,
    0.46220303,
    0.52821857,
    0.6836053,
    0.75150716,
    0.87560236,
    -1.1566893,
    -1.0259831,
    -0.883369,
    -0.8062115,
    -0.73829556,
    -0.5837349,
    -0.46243012,
    -0.24397375,
    -0.13778266,
    0.0055040186,
    0.33389452,
    0.22402902,
    0.16951221,
    0.033279326,
    2.3110404,
    1.2578539,
    0.09149099,
    0.1924884,
    -0.017733175,
    -0.25401047,
    0.013287673,
    -0.16318029,
    -0.13419682,
    -0.0016911505,
    -0.7371528,
    -0.30395433,
    -0.010688471,
    0.33925596,
    0.7541774,
    0.0551553,
    -0.2473589,
    0.13181785,
    0.64764386,
    1.0219452,
    0.019417893,
    -0.39519572,
    0.12343646,
    0.65881455,
    0.99477005,
    0.008947213,
    -0.59603673,
    -0.07255649,
    0.58426476,
    1.0254233,
    -0.598326,
    -0.7310569,
    -0.45255426,
    -0.2218471,
    0.25621057,
    -0.84260535,
    -0.8550028,
    -0.4196664,
    0.094010495,
    0.6771006,
    -0.83680826,
    -0.7905241,
    -0.31623694,
    0.21684241,
    0.74207044,
    -0.14727812,
    -0.23545264,
    -0.087388754,
    0.23738088,
    0.46884373,
    -0.5395998,
    -0.6275458,
    -0.16217315,
    0.417838,
    0.9137002,
    -0.6979512,
    -0.6420679,
    -0.14588694,
    0.44705462,
    1.0899193,
    -0.3122238,
    -0.08825989,
    -0.046397157,
    -1.0503678,
    -0.4926472,
    -0.37653744,
    -0.42180002,
    -0.16767648,
    -0.32662377,
    -0.00079395995,
    0.0012055086,
    -0.0018659113,
    0.004368524,
    0.0076928716,
    0.004360006,
    0.009378757,
    0.0029043844,
    0.008424118,
    -1.6256479,
    -1.5282823,
    -1.5487874,
    -1.5789922,
    -1.5787965,
    -1.448074,
    -0.19275063,
    -0.5196107,
    -0.7497293,
    -1.0731846,
    -1.2382737,
    -1.3020481,
    -0.118333854,
    -0.3912884,
    -0.42837924,
    -1.2857487,
    -1.5164737,
    -1.8096907,
    -0.6386356,
    -0.79947543,
    -0.80858105,
    -0.78401816,
    -0.80165154,
    -0.8324999,
    -0.39339694,
    -0.48002905,
    -0.44507092,
    -0.58183736,
    -0.57829636,
    -0.5771621,
    -2.08266,
    -0.75319195,
    -1.3939067,
    -0.68460524,
    -1.0134078,
    -1.5459056,
    -1.3936139,
    -0.23168127,
    0.17078425,
    -0.045487627,
    0.057822354,
    0.56068015,
    0.25173414,
    -0.010335108,
    0.1597048,
    0.36670387,
    0.43067396,
    1.0162727,
    0.28467795,
    0.13702403,
    -0.3346855,
    -0.4636272,
    -0.6195342,
    -0.8412286,
    -0.32329547,
    -0.021787893,
    0.46297622,
    1.117407,
    0.85174376,
    0.70369476,
    0.5748647,
    0.3696304,
    0.2309538,
    -1.0080168,
    -0.8446961,
    -0.6756254,
    -0.5113882,
    -0.3821001,
    -0.26810247,
    -0.22619492,
    0.088790536,
    0.29344946,
    0.40244955,
    0.5698602,
    0.7016976,
    0.85496145,
    1.0141995,
    -0.46173352,
    -0.5771046,
    -0.7468829,
    -0.8118883,
    -0.89272326,
    -1.0273366,
    -1.1526307,
    0.8849674,
    0.7514883,
    0.67080224,
    0.52136344,
    0.46715856,
    0.35967758,
    0.21275656,
    0.2687584,
    0.14990923,
    -0.0120641785,
    -0.18818246,
    -0.06768508,
    -0.11501213,
    -0.049650494,
    -1.1023635,
    -0.73709065,
    -0.08181853,
    -0.14450435,
    -0.024273649,
    0.30172646,
    -0.014430304,
    0.16729619,
    0.13515998,
    0.0043790904,
    0.6571291,
    0.39176753,
    0.060092933,
    -0.3319169,
    -0.7660033,
    0.05444155,
    0.3118514,
    -0.014947418,
    -0.5581588,
    -1.0768691,
    0.012718073,
    0.45863432,
    -0.106120236,
    -0.6371524,
    -1.0257682,
    0.0039212503,
    0.59223086,
    0.076506235,
    -0.5741746,
    -0.97799385,
    0.6713189,
    0.83483404,
    0.4776523,
    0.20385323,
    -0.089747004,
    0.78899723,
    0.8853117,
    0.38593724,
    -0.06917451,
    -0.59999233,
    0.7986596,
    0.747869,
    0.27792165,
    -0.16813855,
    -0.7462004,
    0.043319944,
    0.24830453,
    0.068334974,
    -0.3864724,
    -0.7179717,
    0.5031961,
    0.6238399,
    0.16904613,
    -0.41513938,
    -0.8959548,
    0.69136167,
    0.6810625,
    0.12709399,
    -0.4894661,
    -1.0107732,
    0.19638129,
    0.3132555,
    0.2187369,
    0.6093612,
    0.4278734,
    0.45152268,
    0.37644386,
    0.15649317,
    0.35753354,
    0.00917124,
    0.002854581,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_0KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    -0.21254763,
    0.23103847,
    -0.033314772,
    0.28951204,
    0.08258201,
    -0.20170505,
    -0.083164066,
    0.039200466,
    -0.00088396505,
    0.3021171,
    0.11830643,
    -0.081436746,
    -0.40565103,
    -0.37145954,
    -0.18355277,
    0.06397571,
    0.20453936,
    0.55752325,
    -0.12067064,
    -0.30509105,
    -0.22406316,
    0.04068911,
    0.06334039,
    0.038877312,
    -2.746777,
    -0.87377214,
    -0.65470624,
    0.73748547,
    1.1899408,
    2.4166262,
    -0.82226,
    -1.3962785,
    -1.4452674,
    0.5082308,
    1.2789531,
    2.7618878,
    -0.3863811,
    0.031400807,
    -0.102757595,
    -0.38964626,
    -0.14711878,
    -0.31159613,
    -2.9462645,
    1.2216566,
    0.49116233,
    -4.1368756,
    -3.0489886,
    0.14062,
    0.4538722,
    -0.20252825,
    0.1369588,
    -0.058979962,
    0.08831377,
    0.02167715,
    -0.26413515,
    0.028735323,
    0.47112805,
    0.67481583,
    -0.037136614,
    -0.023578765,
    0.06294667,
    -0.05659834,
    -1.2630483,
    0.25168982,
    0.096158154,
    0.43390813,
    1.3263559,
    -0.38228187,
    0.30753988,
    -0.17709245,
    0.021742836,
    0.3967858,
    0.37994313,
    -0.5040257,
    -0.60063547,
    -0.5784962,
    -0.09444315,
    0.42124468,
    -0.95363337,
    -0.8204556,
    -0.515455,
    0.36224493,
    3.6014647,
    0.6930546,
    -0.022836408,
    1.229127,
    -0.20067202,
    -0.88029164,
    -1.945374,
    0.27076137,
    0.24485452,
    -0.2529798,
    0.3806981,
    -0.1388048,
    -0.43375793,
    1.5184788,
    0.4213168,
    1.0030801,
    -0.12647864,
    -0.28902504,
    -0.68267906,
    0.3738028,
    0.69471484,
    1.1517682,
    -0.16151088,
    -0.5155371,
    -0.17652579,
    2.4710944,
    0.30520877,
    2.0582628,
    1.0057538,
    0.5753131,
    -4.1801777,
    -0.5127082,
    0.45404467,
    1.4079078,
    0.3417027,
    0.39399534,
    0.1540643,
    0.2801745,
    0.3059642,
    0.2046346,
    -0.05043553,
    0.38525426,
    0.006237678,
    0.3969141,
    0.18871525,
    -1.5612092,
    -0.39385808,
    0.7173354,
    -0.24273492,
    -0.060208935,
    0.20501433,
    0.06431221,
    0.007810466,
    -0.006842167,
    0.25922537,
    0.22373736,
    1.4958718,
    -2.2605436,
    -1.6751494,
    -1.7748834,
    -0.15428533,
    -0.13730817,
    0.3625118,
    0.7318449,
    -2.1013966,
    -1.6390495,
    -0.58728755,
    0.705842,
    0.05825597,
    -1.3842419,
    0.5513746,
    1.3413002,
    1.6110371,
    1.1969258,
    1.6104766,
    0.26784024,
    -0.82374805,
    -0.27678168,
    0.63337976,
    1.37859,
    1.5559744,
    -0.2600439,
    -1.5502057,
    -0.7311096,
    -0.89582264,
    -0.8938125,
    -1.1783751,
    -0.29525974,
    -1.3265866,
    -2.8699765,
    0.3670057,
    -0.02602606,
    -0.094160676,
    0.038038492,
    0.18733682,
    0.1730221,
    0.4983536,
    -0.6600161,
    0.07679693,
    1.6442226,
    0.74923706,
    1.2906911,
    -0.0030353356,
    1.5110451,
    1.8540987,
    0.46657535,
    1.0854816,
    0.6397842,
    0.38965192,
    0.4017657,
    0.15735355,
    0.2403061,
    0.20836167,
    0.8231178,
    3.0737865,
    -0.0031571696,
    -0.0045039677,
    -0.0037830565,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_2KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    0.865492,
    1.0010048,
    0.24746792,
    0.35957572,
    -0.066069454,
    -0.23214823,
    0.077542424,
    1.4468361,
    1.4148259,
    1.5101211,
    1.437616,
    1.4848919,
    1.3158873,
    0.26310387,
    0.46841794,
    0.45779502,
    0.67390543,
    0.8063747,
    0.7697929,
    0.4086916,
    0.5524308,
    0.67493665,
    1.2380428,
    1.5377733,
    1.6303847,
    0.6784836,
    0.7445915,
    0.8118415,
    0.81012315,
    0.8876557,
    0.90736604,
    0.36557442,
    0.44527608,
    0.4462488,
    0.546433,
    0.58900404,
    0.5269701,
    3.8587391,
    0.59985554,
    1.8716284,
    0.5571793,
    0.87656283,
    1.8287517,
    1.2368141,
    0.017625526,
    -0.38484177,
    0.89276105,
    -0.20277743,
    -0.46993107,
    -0.11764323,
    -0.1538945,
    -0.062221356,
    -0.440658,
    -0.3435177,
    -0.94675976,
    -0.4129965,
    -0.22408412,
    -0.30317405,
    -0.17644307,
    0.23460253,
    0.50022936,
    0.56042415,
    0.97316706,
    -0.0010204456,
    -0.27546996,
    -0.32714775,
    -0.3640609,
    0.03274091,
    0.22275554,
    0.28936896,
    1.3168484,
    0.84053665,
    0.7015678,
    0.15672562,
    -0.17726181,
    -0.5858213,
    -1.0719901,
    0.66758776,
    0.42645937,
    0.08731038,
    -0.088375315,
    -0.68223226,
    -0.98466325,
    -1.5055851,
    -0.041454546,
    0.11200304,
    0.20349552,
    0.321685,
    0.5754325,
    0.61157984,
    0.8155646,
    -0.92124265,
    -0.67686796,
    -0.50828373,
    -0.4160695,
    -0.2831886,
    -0.103535235,
    -0.0046708053,
    -0.2768804,
    -0.13107121,
    0.017956808,
    0.23620468,
    0.083877355,
    0.1112924,
    0.047158405,
    4.0529094,
    1.1054591,
    0.10860359,
    0.1858789,
    -0.0349186,
    -0.30773208,
    0.012443449,
    -0.13339235,
    -0.12030155,
    -0.0016911505,
    -0.71045303,
    -0.3589412,
    -0.097965844,
    0.2919701,
    0.71592635,
    -0.06373963,
    -0.5164635,
    -0.056497056,
    0.53705215,
    1.0178087,
    -0.025784437,
    -0.5645269,
    -0.028649189,
    0.53123146,
    0.97238696,
    -0.034448024,
    -0.5684704,
    -0.11209405,
    0.5614363,
    0.9923649,
    -0.78564817,
    -0.8225214,
    -0.41736552,
    -0.046831354,
    0.38249117,
    -0.8176139,
    -0.84998107,
    -0.37505692,
    0.13925704,
    0.6946588,
    -0.76275736,
    -0.7779694,
    -0.32824847,
    0.18426897,
    0.6648428,
    -0.121094525,
    -0.32154414,
    -0.07318449,
    0.31102693,
    0.67201126,
    -0.5812068,
    -0.6036177,
    -0.15808941,
    0.3995762,
    0.9225178,
    -0.66671973,
    -0.66308993,
    -0.12163375,
    0.45540726,
    0.9924779,
    -0.37248293,
    -0.48138613,
    -0.44596967,
    -0.645817,
    -0.32562125,
    -0.18018943,
    -0.193958,
    0.017770203,
    -0.42386928,
    -0.00079395995,
    0.0012055086,
    -0.0018659113,
    0.004368524,
    0.0076928716,
    0.004360006,
    0.009378757,
    0.0029043844,
    0.008424118,
    -1.5543152,
    -1.5950514,
    -1.524414,
    -1.5184009,
    -1.4999468,
    -1.432743,
    -0.54939324,
    -0.9566948,
    -0.9411663,
    -1.3442091,
    -1.4281249,
    -1.4868124,
    0.10834847,
    -0.48030114,
    -0.48390195,
    -1.1973027,
    -1.4162116,
    -1.7005825,
    -0.594984,
    -0.7717369,
    -0.8592782,
    -0.7538065,
    -0.83900535,
    -0.80067736,
    -0.3367319,
    -0.44516927,
    -0.4741011,
    -0.4970425,
    -0.54481,
    -0.5246834,
    -3.5625713,
    -0.64841866,
    -2.2427466,
    -0.57745725,
    -0.94768363,
    -1.7550395,
    -1.2647974,
    -0.16919607,
    0.20628497,
    -0.36806932,
    0.23527068,
    0.50085056,
    0.1760425,
    0.32512087,
    0.08501067,
    0.24625447,
    0.3737627,
    0.8664617,
    0.25335497,
    -0.0035235141,
    0.0071501285,
    -0.0013148449,
    0.008539425,
    -0.009318193,
    -0.000783661,
    -0.44431067,
    0.00928643,
    -0.008366895,
    0.0031465264,
    0.00024766196,
    -0.002034571,
    0.011398502,
    1.5726479,
    0.002645051,
    0.0040497207,
    -0.0012312435,
    0.005849132,
    -0.02083221,
    -1.482486,
    -0.5695426,
    0.00948292,
    0.0035818908,
    -0.0029666012,
    -0.004107154,
    0.08352276,
    0.13931745,
    0.98536944,
    -0.00845824,
    0.0033929774,
    0.012479608,
    0.14165927,
    -0.36408532,
    -1.2203866,
    -1.4920481,
    0.008264789,
    0.003088326,
    0.06270314,
    0.27045017,
    0.6284289,
    1.3334224,
    0.2751237,
    0.23087369,
    0.16337314,
    0.022326453,
    -0.20102347,
    -0.063134745,
    -0.14563474,
    0.0681498,
    -1.778375,
    -0.5358491,
    -0.047468606,
    -0.115997806,
    -0.0025018703,
    0.16162,
    -0.022042835,
    0.20277543,
    0.1856192,
    0.0024552317,
    0.6231531,
    0.32275227,
    -0.0036011077,
    -0.36527026,
    -0.7651464,
    -0.06445347,
    0.2537851,
    -0.07896775,
    -0.44613516,
    -0.8943698,
    -0.03248384,
    0.38321796,
    -0.077341825,
    -0.54474056,
    -0.9090453,
    -0.039473865,
    0.5026371,
    0.08243147,
    -0.43468803,
    -0.9963908,
    0.36452115,
    0.52002114,
    0.27004486,
    0.06596179,
    -0.47351846,
    0.6433595,
    0.693873,
    0.2592953,
    -0.16264232,
    -0.6039687,
    0.71718144,
    0.6435541,
    0.24007404,
    -0.18859783,
    -0.8150369,
    0.26559448,
    0.31628767,
    0.10604418,
    -0.1822503,
    -0.35502166,
    0.53635126,
    0.5333669,
    0.12615669,
    -0.36000127,
    -0.80921113,
    0.66404474,
    0.6119462,
    0.14809689,
    -0.39002338,
    -0.9169367,
    0.14146484,
    0.060601052,
    0.0025484653,
    0.51577586,
    0.06894997,
    0.31083015,
    0.088915534,
    0.005569404,
    0.20334429,
    0.00917124,
    0.002854581,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_2KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    0.13053814,
    0.2594758,
    0.24701957,
    0.32714072,
    0.2772792,
    -0.13828218,
    -0.10215987,
    0.098732464,
    0.019896906,
    -0.056102987,
    -0.07790267,
    -0.42510068,
    -0.30549508,
    -0.45333365,
    -0.52566814,
    -0.29246622,
    -0.28865135,
    -0.26258516,
    0.11082738,
    0.17156202,
    -0.038298223,
    0.46970895,
    0.49330792,
    0.45982635,
    -1.5306015,
    -0.70623446,
    -1.6051459,
    1.1686573,
    1.569235,
    2.0058358,
    -2.5606222,
    -1.2750763,
    -2.0411723,
    0.8546261,
    1.8828146,
    2.5776637,
    -0.54405427,
    0.17359827,
    -0.07840562,
    -0.24876921,
    -0.18755311,
    -0.26911703,
    -3.0770643,
    1.1082592,
    0.26119882,
    -2.5300553,
    -2.871422,
    0.03775389,
    0.4238567,
    -0.33088768,
    0.10647789,
    -0.13209525,
    0.08560816,
    0.0468911,
    -0.21627295,
    0.05250266,
    0.38945135,
    0.81790227,
    -0.23717421,
    -0.22604689,
    -0.19218688,
    -0.20800717,
    -0.033787068,
    0.122389324,
    -0.10022763,
    -0.073142864,
    0.6767682,
    -0.04690488,
    0.33146432,
    -0.22365022,
    -0.0036192038,
    0.46967515,
    0.51455325,
    -0.2567931,
    -0.40734252,
    -0.42442977,
    -0.001470779,
    0.22078364,
    -1.2574711,
    -0.85755,
    -0.74906814,
    -0.17770536,
    3.6172705,
    0.54112595,
    0.6423261,
    0.9667451,
    0.199188,
    -1.3389384,
    0.16624917,
    0.19690222,
    -0.4323959,
    -0.23050337,
    0.34784153,
    0.61946857,
    -0.7219571,
    1.2463146,
    0.5738733,
    2.0701928,
    0.049495548,
    -0.42689493,
    -1.0372397,
    0.26199716,
    0.7308859,
    1.6175814,
    -0.0076032556,
    -0.68225515,
    0.12284207,
    2.349499,
    0.1210995,
    2.3559947,
    1.0110165,
    0.4826661,
    -4.137684,
    -0.87189615,
    0.58148867,
    1.5087106,
    0.51515806,
    0.27801824,
    0.1363943,
    0.39705855,
    0.3311712,
    0.13834442,
    -0.009231192,
    0.37948412,
    0.013899716,
    0.34986228,
    0.20538929,
    -1.3363253,
    -0.6954224,
    -0.26191995,
    -0.23036456,
    -0.17417376,
    0.21034743,
    0.08639803,
    0.009099964,
    0.0013535284,
    0.37892112,
    0.085819654,
    1.4048743,
    -2.3133554,
    -1.2493757,
    -1.597994,
    -0.20851141,
    -0.025360083,
    0.2432856,
    0.7032871,
    -1.9057463,
    -1.1427703,
    -0.49652052,
    0.84754634,
    0.08384458,
    -1.2245532,
    0.5221889,
    1.2940357,
    1.6118815,
    1.3088297,
    1.4081663,
    -0.2697331,
    -0.76520354,
    -0.34188744,
    0.6127755,
    1.3039353,
    1.4138254,
    0.12542252,
    -1.4124713,
    -0.9411064,
    -0.9240627,
    -0.92811567,
    -1.1624233,
    -0.3372181,
    -1.4078445,
    -2.251844,
    0.36175016,
    -0.023277655,
    -0.08955618,
    0.0533145,
    0.14049543,
    -0.019719895,
    -0.007010526,
    -0.096855216,
    -0.22378309,
    1.7177029,
    0.7570125,
    1.2928087,
    0.07078977,
    1.540554,
    1.9195119,
    0.41963235,
    0.9632119,
    0.60895467,
    0.32042414,
    0.36884412,
    0.16893406,
    0.3075245,
    -0.011423582,
    0.7850744,
    3.0451703,
    0.0,
    0.0,
    0.0,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_0KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.6390439,
    1.3869809,
    0.8437073,
    0.865174,
    0.44262755,
    0.27549765,
    0.122904085,
    1.6687267,
    1.6420958,
    1.6756711,
    1.7243826,
    1.7474287,
    1.7127836,
    0.41348714,
    0.7112828,
    0.7809425,
    1.0425985,
    1.1008983,
    1.2171966,
    -0.18768229,
    0.5589641,
    0.72631574,
    1.0419865,
    1.3715501,
    1.655574,
    0.5143614,
    0.59856457,
    0.6158411,
    0.6769085,
    0.7309727,
    0.7697136,
    0.3554831,
    0.47105488,
    0.49411607,
    0.56253636,
    0.6072541,
    0.6281506,
    3.1430094,
    0.6077536,
    1.8740871,
    0.68706846,
    0.98389417,
    1.0378183,
    1.2059577,
    0.3480511,
    -0.26468486,
    0.0024145395,
    -0.112133496,
    -0.53341883,
    -0.12739903,
    0.14747591,
    -0.093044445,
    -0.32263651,
    -0.30921096,
    -1.5224018,
    -0.38604635,
    -0.036767352,
    0.27309918,
    0.41063032,
    0.49291828,
    0.62297297,
    0.9669606,
    0.7629437,
    -0.015080819,
    -0.36484098,
    -0.85048383,
    -0.659379,
    -0.5329476,
    -0.42833364,
    -0.039808635,
    0.88068205,
    0.7537465,
    0.5786123,
    0.5191143,
    0.41027972,
    0.30960742,
    0.19283523,
    -0.21833299,
    -0.16547966,
    -0.32307014,
    -0.5005903,
    -0.5695273,
    -0.6702784,
    -0.8070398,
    0.5266334,
    0.53467363,
    0.5438694,
    0.48148367,
    0.42968124,
    0.41356242,
    0.3852208,
    -0.608497,
    -0.5761291,
    -0.56596977,
    -0.55618554,
    -0.63022566,
    -0.66902816,
    -0.71565676,
    -0.23271732,
    -0.20310254,
    0.019761385,
    0.2597664,
    0.101424925,
    0.187432,
    0.07434568,
    2.1818252,
    0.94120705,
    0.04881452,
    0.13135187,
    0.045900002,
    -0.23373185,
    0.030404484,
    -0.13255961,
    -0.11415494,
    -0.0016911505,
    -0.3480278,
    -0.20103939,
    -0.12779346,
    -0.020686768,
    0.2013711,
    0.4526588,
    0.04466082,
    -0.23852801,
    -0.070070036,
    0.16951813,
    0.56574464,
    0.8593781,
    0.022328041,
    -0.20254758,
    0.012115597,
    0.2304346,
    0.63644964,
    0.8064442,
    -0.010591684,
    -0.29527298,
    -0.022511477,
    0.25346297,
    0.6220177,
    0.79262334,
    -0.5394483,
    -0.5812653,
    -0.45179373,
    -0.31900543,
    -0.10650932,
    0.116419695,
    -0.6976245,
    -0.73290014,
    -0.5202793,
    -0.24929765,
    -0.052369792,
    0.2769324,
    -0.69929236,
    -0.6831227,
    -0.43574896,
    -0.1553456,
    0.1179571,
    0.44238794,
    -0.020374602,
    -0.15863128,
    -0.16064675,
    -0.036710337,
    0.26021627,
    0.54440016,
    -0.38179132,
    -0.3677025,
    -0.1806107,
    0.06313852,
    0.42911834,
    0.7848321,
    -0.55281854,
    -0.48003337,
    -0.26184002,
    0.05444148,
    0.45009637,
    0.76178676,
    -0.53638947,
    -0.1470454,
    -0.26121935,
    -0.60390115,
    -0.8498232,
    -0.33986807,
    -0.44589955,
    -0.24348076,
    -0.1600997,
    -0.0051581357,
    0.007047029,
    -0.0010688612,
    -0.007828684,
    0.0054334905,
    -0.006010456,
    -0.0055280733,
    -1.7122849,
    -1.6823491,
    -1.6606672,
    -1.6775858,
    -1.7199692,
    -1.7487558,
    -0.2977679,
    -0.43833956,
    -0.6961207,
    -0.78825873,
    -0.9734406,
    -1.159803,
    -0.12354035,
    -0.44439837,
    -0.570481,
    -0.97900355,
    -1.2610692,
    -1.6992861,
    -0.57917225,
    -0.6367799,
    -0.69778365,
    -0.6750321,
    -0.79242873,
    -0.817331,
    -0.45645478,
    -0.47816542,
    -0.47273332,
    -0.5972888,
    -0.61218977,
    -0.6296863,
    -3.3945043,
    -0.95306224,
    -1.9012237,
    -0.6054406,
    -0.92222,
    -1.697499,
    -1.1154197,
    -0.16750918,
    0.23521121,
    -0.14559618,
    0.2278106,
    0.5536657,
    0.16010834,
    0.40894455,
    0.099946685,
    0.34123334,
    0.5770224,
    0.71281534,
    0.4017063,
    -0.05781105,
    -0.4327583,
    -0.5277371,
    -0.65730727,
    -0.84302646,
    -0.3641232,
    -0.019869048,
    0.7646525,
    0.97722644,
    0.62192893,
    0.5073557,
    0.41821656,
    0.2576114,
    -0.025015317,
    -0.8031302,
    -0.68295556,
    -0.56000024,
    -0.49126276,
    -0.31977513,
    -0.16713732,
    -0.22414754,
    0.1901988,
    0.30212083,
    0.4057648,
    0.5162354,
    0.5780374,
    0.7559335,
    0.8903528,
    -0.7049327,
    -0.66745317,
    -0.63302267,
    -0.5528323,
    -0.57654554,
    -0.5769638,
    -0.6059327,
    0.39020583,
    0.41146946,
    0.42589223,
    0.47068164,
    0.54932165,
    0.5203168,
    0.5230597,
    0.28701964,
    0.22041415,
    0.00432003,
    -0.19268228,
    -0.08064896,
    -0.1673237,
    -0.054140627,
    -1.9834698,
    -0.7383067,
    -0.05349432,
    -0.1181489,
    -0.04322038,
    0.19281006,
    -0.034218356,
    0.13842611,
    0.12457755,
    -0.0024085473,
    0.2721826,
    0.25250277,
    0.15840022,
    -0.028698375,
    -0.24676745,
    -0.46018252,
    0.04261236,
    0.26217026,
    0.10436877,
    -0.14796682,
    -0.44827676,
    -0.7746024,
    0.012801833,
    0.24863769,
    0.049845226,
    -0.17248736,
    -0.547995,
    -0.7230897,
    -0.01777985,
    0.3210322,
    0.10238702,
    -0.14994006,
    -0.52336985,
    -0.82685673,
    0.41706693,
    0.4171404,
    0.34670517,
    0.15351018,
    -0.090071335,
    -0.14569627,
    0.5804822,
    0.5989957,
    0.40952948,
    0.13308045,
    -0.08204772,
    -0.20467481,
    0.59010714,
    0.60953236,
    0.39714152,
    0.13458587,
    -0.14383116,
    -0.47651702,
    0.10367055,
    0.19700795,
    0.16003983,
    0.040605016,
    -0.2323848,
    -0.5194525,
    0.3049556,
    0.35280743,
    0.15735029,
    -0.1082552,
    -0.42897245,
    -0.69918674,
    0.4567972,
    0.46858263,
    0.21309502,
    -0.09786304,
    -0.4633618,
    -0.6980736,
    0.20139486,
    0.12503313,
    0.16414165,
    0.43901527,
    0.06961359,
    0.38265362,
    0.38567355,
    -0.06286038,
    0.278155,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_0KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.071415216,
    0.12442188,
    -0.09566238,
    0.025814263,
    0.39882815,
    0.16391489,
    -0.008581701,
    -0.13815464,
    -0.13051334,
    0.02532715,
    0.32889652,
    0.20524831,
    -0.49096164,
    -0.30895254,
    -0.23303136,
    0.23083706,
    0.2964616,
    0.24874644,
    -0.2457537,
    -0.20580663,
    -0.20578788,
    0.22220248,
    0.24823901,
    0.27056095,
    -1.7412964,
    -1.2658727,
    -0.9884221,
    0.21221639,
    0.76972306,
    2.9932423,
    -0.8941595,
    -1.4919809,
    -0.6434117,
    0.1866445,
    0.6302275,
    3.7471368,
    -0.19908637,
    -0.05053481,
    -0.22026536,
    -0.20168278,
    -0.06375163,
    -0.34524786,
    -2.9306319,
    1.2972493,
    0.24407394,
    -3.5354817,
    -2.9933457,
    -0.10331253,
    0.47185874,
    -0.14110662,
    0.10932957,
    0.0013340656,
    0.07475349,
    -0.016720613,
    -0.23927939,
    -0.011462316,
    0.34377918,
    0.72500736,
    0.85285324,
    -0.110500894,
    -0.105389334,
    -0.017042588,
    0.10457068,
    0.0042217867,
    -0.21249798,
    -0.085640766,
    -0.45459425,
    -0.16079083,
    0.55052006,
    2.0902095,
    -0.37665167,
    0.27560315,
    -0.059153534,
    0.035410654,
    0.26979086,
    0.5431667,
    0.5761751,
    -0.40052012,
    -0.44486472,
    -0.42993188,
    -0.155777,
    0.3429057,
    0.74014395,
    -0.7196886,
    -0.66130596,
    -0.5823512,
    -0.061252877,
    1.1902641,
    2.376007,
    0.48015076,
    -0.05263098,
    0.55019283,
    0.35582376,
    -0.3000633,
    -0.9577861,
    0.37041304,
    0.1807514,
    -0.058853548,
    0.19539088,
    0.03101509,
    -1.0235001,
    1.6822823,
    0.46977645,
    0.50950366,
    -0.1764842,
    -0.2133276,
    -1.0270724,
    0.4235578,
    0.47018492,
    0.59907496,
    -0.095802486,
    -0.2432442,
    -0.01910542,
    2.5890062,
    0.13449658,
    2.3261929,
    0.96748704,
    0.44940996,
    -4.1517406,
    -1.059962,
    0.81751895,
    1.4057382,
    0.43485394,
    0.52264935,
    0.0902257,
    0.27415887,
    0.29622847,
    0.18442348,
    -0.011864232,
    0.33198798,
    0.008446357,
    0.29941043,
    0.24493904,
    -1.3369043,
    0.41626275,
    0.329823,
    -0.10362355,
    0.111990936,
    0.22666475,
    0.06236524,
    0.0052082036,
    -0.0012640925,
    0.34226802,
    -0.037712023,
    1.718424,
    -2.2861829,
    -1.5476025,
    -1.518054,
    -0.16363169,
    0.14955013,
    0.6014917,
    1.1120517,
    -1.9437062,
    -1.5143054,
    -0.46494117,
    0.6082318,
    0.21189173,
    -1.3022004,
    0.3113392,
    1.2015941,
    1.7875376,
    1.4595233,
    1.7871752,
    0.90693253,
    -0.98388606,
    -0.55907655,
    0.42635015,
    1.2506536,
    1.9478662,
    0.16841666,
    -1.632099,
    -0.78296155,
    -1.2520697,
    -1.1554351,
    -1.4457918,
    -0.38163397,
    -1.3265272,
    -2.6471865,
    0.33752015,
    -0.024949715,
    -0.024228316,
    -0.09096827,
    0.036369875,
    0.06127662,
    0.20753954,
    -0.15602651,
    0.38449815,
    0.44087142,
    -0.1416285,
    -0.72993124,
    0.1605913,
    1.8260558,
    1.4085311,
    1.6873645,
    -0.23067553,
    1.8025221,
    2.1915245,
    0.68259877,
    1.5146484,
    0.60728025,
    0.6007257,
    0.6491273,
    0.2172983,
    0.6351415,
    0.4959009,
    0.77732676,
    2.8963873,
    0.00053430814,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_2KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.22043286,
    0.3287494,
    -0.14660047,
    -0.3719815,
    -0.74116874,
    -0.89613545,
    -0.8784282,
    1.545902,
    1.507522,
    1.5204669,
    1.5425917,
    1.5982726,
    1.5761623,
    0.11316037,
    0.31827518,
    0.51470995,
    0.71357054,
    0.886211,
    0.9766186,
    0.38444582,
    0.43142134,
    0.7091175,
    1.113406,
    1.4799589,
    1.810702,
    0.4523745,
    0.5948189,
    0.6696259,
    0.70563436,
    0.79034406,
    0.8521365,
    0.36179024,
    0.4148047,
    0.45100784,
    0.53695846,
    0.58061296,
    0.6073767,
    3.3616688,
    0.9006027,
    1.864864,
    0.59500974,
    0.83477366,
    1.3792838,
    1.0586587,
    0.23326187,
    -0.30551347,
    0.2160106,
    0.035456225,
    -0.54048,
    -0.119116105,
    -0.22409546,
    -0.09185474,
    -0.25084308,
    -0.34259853,
    -1.0040276,
    -0.4076606,
    -0.16484836,
    -0.7131954,
    -0.19343549,
    0.12505136,
    0.5495852,
    1.1162404,
    0.40670145,
    -0.09279289,
    -0.108497515,
    -1.0621516,
    -0.45634106,
    -0.061571077,
    0.30120048,
    0.87801725,
    0.8768844,
    0.5631952,
    0.284198,
    0.06864839,
    -0.032531247,
    -0.2641453,
    -0.510951,
    0.28276423,
    0.39543495,
    0.05834401,
    -0.1749916,
    -0.42737424,
    -0.49782476,
    -0.82043624,
    0.46611276,
    0.4580269,
    0.4064012,
    0.35325634,
    0.4083869,
    0.33529395,
    0.3679321,
    -0.44309273,
    -0.40857205,
    -0.4037106,
    -0.44840476,
    -0.4776365,
    -0.4656396,
    -0.5244198,
    -0.25823385,
    -0.21728134,
    -0.0017516027,
    0.21872981,
    0.04566205,
    0.15246025,
    0.016686784,
    1.6195743,
    0.826867,
    0.056456324,
    0.13585405,
    0.016108194,
    -0.22703204,
    0.027388683,
    -0.10607706,
    -0.11090449,
    -0.0016911505,
    -0.31342345,
    -0.21809027,
    -0.17001271,
    -0.022034205,
    0.1853459,
    0.42005125,
    -0.06154072,
    -0.2983859,
    -0.14247185,
    0.16701886,
    0.5181918,
    0.8145289,
    -0.017489124,
    -0.30212113,
    -0.06681438,
    0.19608825,
    0.5316983,
    0.702918,
    -0.046476968,
    -0.42798936,
    -0.14619221,
    0.14875033,
    0.5320497,
    0.7801182,
    -0.5380061,
    -0.5826915,
    -0.40074843,
    -0.23153481,
    -0.04571649,
    0.30272892,
    -0.67049754,
    -0.6967489,
    -0.45400798,
    -0.19466782,
    0.11459884,
    0.38934174,
    -0.6042299,
    -0.63985264,
    -0.39635205,
    -0.12156292,
    0.15708064,
    0.5487049,
    -0.039598495,
    -0.24358034,
    -0.20032357,
    -0.030345907,
    0.24174245,
    0.4987948,
    -0.3382709,
    -0.40400314,
    -0.19019163,
    0.0623123,
    0.41665885,
    0.64857376,
    -0.55939245,
    -0.50832134,
    -0.25423974,
    0.0852955,
    0.4488251,
    0.75270844,
    -0.39794657,
    -0.33899876,
    -0.3539352,
    -0.7447453,
    -0.69494903,
    -0.24252409,
    -0.41164905,
    -0.2807278,
    -0.32309633,
    -0.0051581357,
    0.007047029,
    -0.0010688612,
    -0.007828684,
    0.0054334905,
    -0.006010456,
    -0.0055280733,
    -1.5902098,
    -1.5834589,
    -1.616216,
    -1.6229706,
    -1.6612785,
    -1.6260964,
    -0.46901068,
    -0.8042435,
    -0.95795846,
    -1.0649601,
    -1.2502856,
    -1.355638,
    -0.19968408,
    -0.49368286,
    -0.80202013,
    -1.1089504,
    -1.5115056,
    -1.8099948,
    -0.5585617,
    -0.5984939,
    -0.65063876,
    -0.7471292,
    -0.7542192,
    -0.8105498,
    -0.3464829,
    -0.42370576,
    -0.4575693,
    -0.5269274,
    -0.5800426,
    -0.5864715,
    -3.0070689,
    -0.52553165,
    -1.9419128,
    -0.5892913,
    -0.92234635,
    -1.469995,
    -1.0906588,
    -0.34452823,
    0.35112494,
    -0.05611212,
    0.010061011,
    0.53957105,
    0.16375393,
    0.24116778,
    0.09139249,
    0.26039237,
    0.47167394,
    0.6984155,
    0.4637518,
    -0.008366895,
    0.0031465264,
    0.00024766196,
    -0.002034571,
    0.009508491,
    0.003244547,
    -0.61965406,
    0.004003441,
    0.0071725287,
    0.0049608946,
    0.008243782,
    0.0015487336,
    -0.007857392,
    1.1372476,
    0.0035818908,
    -0.0050729346,
    0.0018847773,
    -0.0317678,
    -0.13358395,
    -0.4665775,
    -0.5466383,
    -0.001817584,
    -0.009368448,
    -0.0066297892,
    0.001205127,
    -0.019480115,
    0.0027773988,
    1.0123949,
    0.0440424,
    0.0067930603,
    -0.16342661,
    -0.65412,
    -0.8547315,
    -0.7778287,
    -0.7681941,
    0.03755038,
    0.097201705,
    0.34141496,
    0.8358886,
    0.6052105,
    0.4192055,
    0.4347498,
    0.23957537,
    0.23149242,
    0.0024457304,
    -0.21478267,
    -0.050719395,
    -0.15621974,
    -0.028804023,
    -1.4821362,
    -0.5966526,
    -0.02625813,
    -0.08476226,
    -0.089673005,
    0.19865908,
    -0.027517868,
    0.1530942,
    0.12214554,
    -0.0024085473,
    0.31285465,
    0.21596354,
    0.10756429,
    -0.05642339,
    -0.243751,
    -0.46342415,
    -0.063588336,
    0.104622856,
    -0.03854487,
    -0.27749994,
    -0.5854146,
    -0.78364617,
    -0.027015563,
    0.1618914,
    -0.018846463,
    -0.21943733,
    -0.511424,
    -0.6918324,
    -0.05366525,
    0.3072425,
    0.07762079,
    -0.19837305,
    -0.57521075,
    -0.8166463,
    0.43952334,
    0.5704866,
    0.42650738,
    0.30359384,
    0.042146537,
    -0.1926817,
    0.5595734,
    0.61380035,
    0.41469854,
    0.20782128,
    -0.06849472,
    -0.44306952,
    0.5581626,
    0.55204225,
    0.32952556,
    0.0958524,
    -0.14410233,
    -0.485244,
    0.08012958,
    0.19284324,
    0.16989926,
    0.031995673,
    -0.22266617,
    -0.46057376,
    0.31659168,
    0.3457499,
    0.1759032,
    -0.07562139,
    -0.35726184,
    -0.65056264,
    0.5332526,
    0.4714111,
    0.25925443,
    -0.029036859,
    -0.39676628,
    -0.73894596,
    0.33351755,
    0.12798396,
    0.06433733,
    0.53793687,
    0.22443074,
    0.012348606,
    0.2317838,
    -0.032913342,
    0.16926108,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_2KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.19618513,
    -0.12603372,
    -0.015536889,
    0.1261336,
    0.39343518,
    0.54471564,
    -0.15491426,
    -0.27759033,
    -0.0069163186,
    -0.0036204353,
    0.2059794,
    0.3110437,
    -0.42611456,
    -0.6068721,
    -0.49104723,
    -0.05461399,
    0.1272986,
    -0.00822559,
    0.1884023,
    -0.13636926,
    -0.13377881,
    0.30591944,
    0.487582,
    0.54234695,
    -1.3201939,
    -0.9234476,
    -0.88198483,
    0.3082681,
    0.94588137,
    2.3325715,
    -1.9623413,
    -0.81226206,
    -1.1284567,
    -0.12128122,
    1.1671778,
    3.1298351,
    -0.39097193,
    0.07514274,
    -0.06557368,
    -0.20560668,
    -0.13817734,
    -0.15567772,
    -1.6164923,
    1.0326616,
    0.21477142,
    -2.8077223,
    -2.551806,
    -0.13339965,
    0.38691,
    -0.30760485,
    0.06981112,
    -0.06082517,
    0.08143008,
    0.050636236,
    -0.19882275,
    0.03367009,
    0.3332777,
    0.6907215,
    0.6812265,
    -0.115635045,
    -0.117798366,
    -0.006480599,
    0.08968755,
    -0.014623408,
    -0.24321537,
    -0.06481637,
    -0.4970192,
    -0.21534547,
    0.51982844,
    1.7268767,
    0.004423392,
    0.30211067,
    -0.06706835,
    0.03738013,
    0.28384575,
    0.4953554,
    0.5341444,
    -0.38101324,
    -0.4474343,
    -0.41911015,
    -0.14857827,
    0.30844328,
    0.6750072,
    -0.97720045,
    -0.56535405,
    -0.17083597,
    0.54298985,
    1.5395478,
    1.096076,
    0.45582753,
    0.016415296,
    -0.33029875,
    0.44426945,
    -0.32968402,
    0.9531575,
    0.41011214,
    0.1216629,
    0.6917996,
    0.18339105,
    0.065131195,
    -0.6355726,
    1.5640646,
    0.46537867,
    1.1751071,
    -0.08667284,
    -0.22987743,
    -0.7127392,
    0.4810418,
    0.8214628,
    0.9918113,
    -0.09119934,
    -0.27208114,
    -0.13251854,
    2.426638,
    -0.104075655,
    2.1405137,
    3.3990076,
    0.45329964,
    -4.655621,
    -0.74131274,
    0.7973329,
    1.3661869,
    0.46773735,
    0.5741953,
    0.087222114,
    0.30638045,
    0.33453366,
    0.08256739,
    0.04432858,
    0.3225368,
    -0.021882322,
    0.32148007,
    0.31549633,
    -1.5004859,
    -0.13966632,
    0.45546106,
    -0.40373558,
    -0.24551375,
    0.18895926,
    0.07625407,
    0.0052082036,
    -0.0012640925,
    0.34141248,
    0.15663096,
    2.02077,
    -2.6822398,
    -1.6883273,
    -1.9041578,
    -0.1886726,
    0.25378472,
    0.5179474,
    1.0816803,
    -2.2359698,
    -1.5015856,
    -0.5805032,
    0.79634327,
    0.31051883,
    -1.2014942,
    0.25040248,
    1.1517992,
    1.6989455,
    1.3853481,
    1.6036713,
    0.7625884,
    -0.92504823,
    -0.5216621,
    0.36561957,
    1.1321492,
    1.6092598,
    0.61432403,
    -2.0228667,
    -0.8177022,
    -1.254545,
    -1.1593713,
    -1.2931123,
    -0.3154228,
    -1.1602424,
    -1.9565928,
    0.32626602,
    -0.028468128,
    -0.036849245,
    -0.112456985,
    0.043217946,
    0.08309858,
    0.24185763,
    -0.17654309,
    0.23051652,
    0.17497836,
    0.30518794,
    -0.17468643,
    -0.17940004,
    1.8823787,
    1.3385825,
    1.6534553,
    0.046787873,
    1.9449157,
    1.957238,
    0.5685186,
    1.369992,
    0.49561453,
    0.5704975,
    0.5515624,
    0.14864062,
    0.68902594,
    0.98338044,
    0.8225161,
    2.7357512,
    0.00053430814,
];
