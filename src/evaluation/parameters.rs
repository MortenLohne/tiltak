use crate::position::{num_line_symmetries, num_square_symmetries};

pub const NUM_VALUE_FEATURES_4S: usize = 254;
pub const NUM_POLICY_FEATURES_4S: usize = 169;

pub const NUM_VALUE_FEATURES_5S: usize = 334;
pub const NUM_POLICY_FEATURES_5S: usize = 197;

pub const NUM_VALUE_FEATURES_6S: usize = 342;
pub const NUM_POLICY_FEATURES_6S: usize = 207;

#[derive(Debug)]
pub struct ValueFeatures<'a> {
    pub first_ply: &'a mut [f32],
    pub second_ply: &'a mut [f32],
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub supports_psqt: &'a mut [f32],
    pub captives_psqt: &'a mut [f32],
    pub shallow_supports_per_piece: &'a mut [f32],
    pub deep_supports_per_piece: &'a mut [f32],
    pub shallow_captives_per_piece: &'a mut [f32],
    pub deep_captives_per_piece: &'a mut [f32],
    pub us_to_move_opening_flatstone_lead: &'a mut [f32],
    pub them_to_move_opening_flatstone_lead: &'a mut [f32],
    pub us_to_move_middlegame_flatstone_lead: &'a mut [f32],
    pub them_to_move_middlegame_flatstone_lead: &'a mut [f32],
    pub us_to_move_endgame_flatstone_lead: &'a mut [f32],
    pub them_to_move_endgame_flatstone_lead: &'a mut [f32],
    pub i_number_of_groups: &'a mut [f32],
    pub critical_squares: &'a mut [f32],
    pub flat_next_to_our_stack: &'a mut [f32],
    pub wall_next_to_our_stack: &'a mut [f32],
    pub cap_next_to_our_stack: &'a mut [f32],
    pub num_lines_occupied: &'a mut [f32],
    pub line_control_empty: &'a mut [f32],
    pub line_control_their_blocking_piece: &'a mut [f32],
    pub line_control_other: &'a mut [f32],
    pub sidelined_cap: &'a mut [f32],
    pub fully_isolated_cap: &'a mut [f32],
    pub semi_isolated_cap: &'a mut [f32],
}

impl<'a> ValueFeatures<'a> {
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> Self {
        assert_eq!(coefficients.len(), num_value_features::<S>() / 2);

        let (first_ply, coefficients) = coefficients.split_at_mut(1);
        let (second_ply, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (supports_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (captives_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (shallow_supports_per_piece, coefficients) = coefficients.split_at_mut(4);
        let (deep_supports_per_piece, coefficients) = coefficients.split_at_mut(4);
        let (shallow_captives_per_piece, coefficients) = coefficients.split_at_mut(4);
        let (deep_captives_per_piece, coefficients) = coefficients.split_at_mut(4);
        let (us_to_move_opening_flatstone_lead, coefficients) = coefficients.split_at_mut(7);
        let (them_to_move_opening_flatstone_lead, coefficients) = coefficients.split_at_mut(7);
        let (us_to_move_middlegame_flatstone_lead, coefficients) = coefficients.split_at_mut(7);
        let (them_to_move_middlegame_flatstone_lead, coefficients) = coefficients.split_at_mut(7);
        let (us_to_move_endgame_flatstone_lead, coefficients) = coefficients.split_at_mut(7);
        let (them_to_move_endgame_flatstone_lead, coefficients) = coefficients.split_at_mut(7);
        let (i_number_of_groups, coefficients) = coefficients.split_at_mut(3);
        let (critical_squares, coefficients) = coefficients.split_at_mut(6);
        let (flat_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (wall_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (cap_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (num_lines_occupied, coefficients) = coefficients.split_at_mut(S + 1);
        let (line_control_empty, coefficients) =
            coefficients.split_at_mut(S * num_line_symmetries::<S>());
        let (line_control_their_blocking_piece, coefficients) =
            coefficients.split_at_mut(S * num_line_symmetries::<S>());
        let (line_control_other, coefficients) =
            coefficients.split_at_mut(S * num_line_symmetries::<S>());
        let (sidelined_cap, coefficients) = coefficients.split_at_mut(3);
        let (fully_isolated_cap, coefficients) = coefficients.split_at_mut(3);
        let (semi_isolated_cap, coefficients) = coefficients.split_at_mut(3);

        assert!(coefficients.is_empty());

        ValueFeatures {
            first_ply,
            second_ply,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            supports_psqt,
            captives_psqt,
            shallow_supports_per_piece,
            deep_supports_per_piece,
            shallow_captives_per_piece,
            deep_captives_per_piece,
            us_to_move_opening_flatstone_lead,
            them_to_move_opening_flatstone_lead,
            us_to_move_middlegame_flatstone_lead,
            them_to_move_middlegame_flatstone_lead,
            us_to_move_endgame_flatstone_lead,
            them_to_move_endgame_flatstone_lead,
            i_number_of_groups,
            critical_squares,
            flat_next_to_our_stack,
            wall_next_to_our_stack,
            cap_next_to_our_stack,
            num_lines_occupied,
            line_control_empty,
            line_control_their_blocking_piece,
            line_control_other,
            sidelined_cap,
            fully_isolated_cap,
            semi_isolated_cap,
        }
    }
}

#[derive(Debug)]
pub struct PolicyFeatures<'a> {
    pub flat_psqt_white: &'a mut [f32],
    pub flat_psqt_black: &'a mut [f32],
    pub wall_psqt_white: &'a mut [f32],
    pub wall_psqt_black: &'a mut [f32],
    pub cap_psqt_white: &'a mut [f32],
    pub cap_psqt_black: &'a mut [f32],
    pub move_role_bonus_white: &'a mut [f32],
    pub move_role_bonus_black: &'a mut [f32],
    pub decline_win: &'a mut [f32],
    pub place_to_win: &'a mut [f32],
    pub place_to_draw: &'a mut [f32],
    pub place_to_loss: &'a mut [f32],
    pub place_to_allow_opponent_to_end: &'a mut [f32],
    pub two_flats_left: &'a mut [f32],
    pub three_flats_left: &'a mut [f32],
    pub our_road_stones_in_line: &'a mut [f32],
    pub their_road_stones_in_line: &'a mut [f32],
    pub extend_single_group_base: &'a mut [f32],
    pub extend_single_group_linear: &'a mut [f32],
    pub extend_single_group_to_new_line_base: &'a mut [f32],
    pub extend_single_group_to_new_line_linear: &'a mut [f32],
    pub merge_two_groups_base: &'a mut [f32],
    pub merge_two_groups_linear: &'a mut [f32],
    pub block_merger_base: &'a mut [f32],
    pub block_merger_linear: &'a mut [f32],
    pub place_our_critical_square: &'a mut [f32],
    pub place_their_critical_square: &'a mut [f32],
    pub ignore_their_critical_square: &'a mut [f32],
    pub next_to_our_last_stone: &'a mut [f32],
    pub next_to_their_last_stone: &'a mut [f32],
    pub diagonal_to_our_last_stone: &'a mut [f32],
    pub diagonal_to_their_last_stone: &'a mut [f32],
    pub attack_strong_flats: &'a mut [f32],
    pub blocking_stone_blocks_extensions_of_two_flats: &'a mut [f32],
    pub attack_strong_stack_with_wall: &'a mut [f32],
    pub attack_strong_stack_with_cap: &'a mut [f32],
    pub attack_last_movement: &'a mut [f32],
    pub place_last_movement: &'a mut [f32],
    pub simple_movement: &'a mut [f32],
    pub simple_capture: &'a mut [f32],
    pub simple_self_capture: &'a mut [f32],
    pub pure_spread: &'a mut [f32],
    pub fcd_highest_board: &'a mut [f32],
    pub fcd_highest_stack: &'a mut [f32],
    pub fcd_other: &'a mut [f32],
    pub stack_captured_by_movement: &'a mut [f32],
    pub stack_capture_in_strong_line: &'a mut [f32],
    pub stack_capture_in_strong_line_cap: &'a mut [f32],
    pub move_cap_onto_strong_line: &'a mut [f32],
    pub move_cap_onto_strong_line_with_critical_square: &'a mut [f32],
    pub recapture_stack_pure: &'a mut [f32],
    pub recapture_stack_impure: &'a mut [f32],
    pub move_last_placement: &'a mut [f32],
    pub continue_spread: &'a mut [f32],
    pub move_onto_critical_square: &'a mut [f32],
    pub spread_that_connects_groups_to_win: &'a mut [f32],
}

impl<'a> PolicyFeatures<'a> {
    #[inline(never)]
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> PolicyFeatures<'a> {
        assert_eq!(coefficients.len(), num_policy_features::<S>());

        let (flat_psqt_white, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (flat_psqt_black, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt_white, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt_black, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt_white, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt_black, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (move_role_bonus_white, coefficients) = coefficients.split_at_mut(3);
        let (move_role_bonus_black, coefficients) = coefficients.split_at_mut(3);
        let (decline_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_draw, coefficients) = coefficients.split_at_mut(1);
        let (place_to_loss, coefficients) = coefficients.split_at_mut(1);
        let (place_to_allow_opponent_to_end, coefficients) = coefficients.split_at_mut(3);
        let (two_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (three_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (our_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (their_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (extend_single_group_to_new_line_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_to_new_line_linear, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_linear, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_base, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_linear, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_base, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_linear, coefficients) = coefficients.split_at_mut(3);
        let (place_our_critical_square, coefficients) = coefficients.split_at_mut(1);
        let (place_their_critical_square, coefficients) = coefficients.split_at_mut(4);
        let (ignore_their_critical_square, coefficients) = coefficients.split_at_mut(2);
        let (next_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (next_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (attack_strong_flats, coefficients) = coefficients.split_at_mut(1);
        let (blocking_stone_blocks_extensions_of_two_flats, coefficients) =
            coefficients.split_at_mut(1);
        let (attack_strong_stack_with_wall, coefficients) = coefficients.split_at_mut(6);
        let (attack_strong_stack_with_cap, coefficients) = coefficients.split_at_mut(6);
        let (attack_last_movement, coefficients) = coefficients.split_at_mut(4);
        let (place_last_movement, coefficients) = coefficients.split_at_mut(3);
        let (simple_movement, coefficients) = coefficients.split_at_mut(3);
        let (simple_capture, coefficients) = coefficients.split_at_mut(4);
        let (simple_self_capture, coefficients) = coefficients.split_at_mut(4);
        let (pure_spread, coefficients) = coefficients.split_at_mut(2);
        let (fcd_highest_board, coefficients) = coefficients.split_at_mut(6);
        let (fcd_highest_stack, coefficients) = coefficients.split_at_mut(6);
        let (fcd_other, coefficients) = coefficients.split_at_mut(8);
        let (stack_captured_by_movement, coefficients) = coefficients.split_at_mut(1);
        let (stack_capture_in_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (stack_capture_in_strong_line_cap, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line_with_critical_square, coefficients) =
            coefficients.split_at_mut(S - 3);
        let (recapture_stack_pure, coefficients) = coefficients.split_at_mut(3);
        let (recapture_stack_impure, coefficients) = coefficients.split_at_mut(3);
        let (move_last_placement, coefficients) = coefficients.split_at_mut(3);
        let (continue_spread, coefficients) = coefficients.split_at_mut(3);
        let (move_onto_critical_square, coefficients) = coefficients.split_at_mut(3);
        let (spread_that_connects_groups_to_win, coefficients) = coefficients.split_at_mut(1);

        assert!(coefficients.is_empty());

        PolicyFeatures {
            flat_psqt_white,
            flat_psqt_black,
            wall_psqt_white,
            wall_psqt_black,
            cap_psqt_white,
            cap_psqt_black,
            move_role_bonus_white,
            move_role_bonus_black,
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            attack_strong_stack_with_wall,
            attack_strong_stack_with_cap,
            attack_last_movement,
            place_last_movement,
            simple_movement,
            simple_capture,
            simple_self_capture,
            pure_spread,
            fcd_highest_board,
            fcd_highest_stack,
            fcd_other,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            recapture_stack_pure,
            recapture_stack_impure,
            move_last_placement,
            continue_spread,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
        }
    }
}

pub fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S: [f32; NUM_VALUE_FEATURES_4S] = [
    -2.9367454,
    -2.8866637,
    -3.1445684,
    -2.643071,
    1.8028008,
    1.8185256,
    2.0202208,
    -0.8220098,
    -1.3889936,
    -2.1818,
    0.4358358,
    0.49590623,
    0.46649364,
    0.71089697,
    0.90124315,
    1.1630988,
    1.078581,
    1.1572442,
    1.5150288,
    0.3544312,
    0.8724424,
    0.005999675,
    -0.0073812627,
    -0.41172907,
    -0.61999995,
    -0.008598236,
    0.0018530292,
    0.3321143,
    0.28434426,
    0.005024814,
    0.0038007405,
    0.14294685,
    0.8758792,
    4.296007,
    1.3260128,
    1.3606148,
    1.5926558,
    1.7179449,
    0.45323065,
    -0.062024415,
    -1.0215701,
    -1.4353919,
    0.069316015,
    -0.22758989,
    -0.49961156,
    0.34286657,
    -1.163143,
    -1.7755086,
    -2.7851794,
    0.59571916,
    3.482964,
    2.400573,
    1.7756554,
    0.64224356,
    -0.10186929,
    -0.69168043,
    0.047423124,
    0.11287885,
    2.580737,
    0.79271144,
    0.20431083,
    -0.55717534,
    -1.5160308,
    0.1110692,
    0.4397921,
    1.9422646,
    -0.61810976,
    -0.18924335,
    -1.0558838,
    1.7506708,
    -0.10622363,
    -0.026326114,
    -0.7945333,
    0.3780862,
    -1.8967265,
    -1.7833325,
    -1.2700632,
    -0.02097358,
    -0.0074185603,
    0.47442418,
    0.32589197,
    -0.20745805,
    0.10226152,
    0.056124695,
    -0.00023208652,
    0.008934194,
    -0.056085214,
    -0.16444787,
    -0.051262457,
    -1.5100819,
    -1.2921357,
    -0.94857454,
    -0.6354272,
    -0.1774072,
    -0.22314538,
    -0.7010159,
    0.06954779,
    0.92948896,
    -0.5868749,
    -0.23214413,
    0.4751329,
    0.9055694,
    -0.9751701,
    -0.77983016,
    -0.45688236,
    0.1886233,
    -1.1793071,
    -0.95509833,
    -0.44539958,
    0.0519885,
    -0.9448067,
    -0.6173714,
    0.08178912,
    0.7007644,
    -0.42046964,
    -0.2772996,
    0.54333824,
    0.9543175,
    -0.30016592,
    1.3719442,
    1.3996212,
    1.2660044,
    0.92664075,
    2.0581422,
    0.096440665,
    -0.18568857,
    -0.06007227,
    -0.32495067,
    -0.15810497,
    -0.04672917,
    0.3588054,
    -1.9618891,
    -2.1867588,
    -2.3548825,
    -1.3378524,
    -1.4272386,
    -1.5985185,
    0.47924975,
    0.2775319,
    0.11263576,
    -0.65187794,
    -0.7611913,
    -0.9066977,
    -0.3831883,
    -0.45535713,
    -0.42624462,
    -0.5126877,
    -1.5692844,
    -0.15620223,
    -0.19624043,
    0.3161406,
    0.17691703,
    0.87294245,
    -0.11969389,
    0.059770145,
    -0.07855101,
    -0.13189088,
    -0.19179933,
    0.15807651,
    0.35984048,
    -0.62237453,
    -0.07130004,
    -1.5696024,
    -2.260396,
    -0.95461136,
    -1.1198655,
    -0.0070628235,
    -0.0077676517,
    0.31346816,
    0.10425639,
    -1.9005793,
    -1.3572385,
    -0.042693805,
    -0.1766934,
    0.4705492,
    2.0038073,
    0.39857256,
    1.0302184,
    0.66566724,
    0.13977452,
    -0.23535055,
    -0.5085241,
    -0.79648155,
    1.8459202,
    2.4593697,
    1.7110448,
    1.1856396,
    0.664903,
    0.4107958,
    1.44392,
    -0.44697285,
    -0.824989,
    -2.34988,
    -1.8470016,
    -0.47756538,
    -0.11597214,
    0.01054622,
    0.9003227,
    0.9808008,
    1.1542228,
    -1.4916205,
    -0.69565505,
    -0.09630942,
    1.7464079,
    0.14715365,
    0.15280949,
    0.08869219,
    -0.27714524,
    0.18603756,
    -0.1364764,
    0.8011376,
    -0.16391811,
    0.0076200105,
    0.07854148,
    0.29250652,
    -0.007937893,
    0.33228216,
    0.41232067,
    0.20950806,
    -0.13977504,
    -0.72135025,
    -0.22313173,
    0.38438007,
    -0.37568942,
    -0.777148,
    0.065532915,
    -0.108291626,
    -0.8538483,
    -1.0729996,
    0.6652359,
    0.89014655,
    1.2897749,
    -0.7671177,
    1.4894782,
    1.5221418,
    1.3120722,
    -0.5749097,
    0.548471,
    0.071677886,
    -0.6436663,
    -1.2170316,
    0.091061756,
    -0.08488529,
    -0.6454855,
    -0.99351865,
    0.008934194,
    -0.0025578667,
    -0.0025578667,
    -0.0025578667,
    -0.0025578667,
    -0.0025578667,
    -0.0025578667,
    -0.0025578667,
    -0.0025578667,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S: [f32; NUM_POLICY_FEATURES_4S] = [
    0.13344148,
    0.048345864,
    0.6931786,
    0.032266907,
    -0.13050374,
    -0.115607925,
    -1.0028241,
    -1.045592,
    -1.0402985,
    0.6124307,
    0.51348203,
    1.7712632,
    -0.001678803,
    0.008264789,
    0.0015326263,
    -0.006872382,
    -0.0035781572,
    0.0023975773,
    -0.39934248,
    -0.52881694,
    -0.0031730435,
    0.08537813,
    -0.17427473,
    0.0021412876,
    0.029944161,
    -0.80178815,
    -0.5888178,
    -0.53073967,
    -0.20666386,
    -0.57624984,
    -1.9642756,
    -0.3807612,
    0.06934722,
    -0.4174424,
    0.112085514,
    -0.010105048,
    -0.031957664,
    0.41266093,
    0.9308142,
    0.09726815,
    -0.038930852,
    0.19005382,
    -0.59070975,
    -0.0035659648,
    -0.0024085473,
    0.00952634,
    0.0013488671,
    0.11940771,
    -0.18972278,
    0.37151253,
    0.9897976,
    -0.5012799,
    -0.4522976,
    -0.09285661,
    0.7336665,
    -0.0059215473,
    -0.0042123506,
    -0.0038043214,
    0.007477794,
    -0.2547972,
    1.4171761,
    -0.0015040664,
    1.9182318,
    -2.5214646,
    0.009884633,
    0.6016887,
    -1.6451161,
    0.008157708,
    -0.12051012,
    1.0112667,
    0.009757778,
    0.7300331,
    -0.81027156,
    0.005344481,
    0.22302698,
    0.18587457,
    -0.00041950494,
    -0.12750725,
    0.2607102,
    0.0056207534,
    -0.19240268,
    -0.42142686,
    0.005889902,
    2.467247,
    0.5738701,
    1.724536,
    0.00303144,
    0.24475338,
    -3.983281,
    -0.5111632,
    0.5408578,
    1.0271997,
    0.31120944,
    0.2546693,
    0.23512086,
    0.51307887,
    0.17595024,
    -0.0993198,
    -0.03186465,
    0.10594114,
    0.0023710895,
    -0.0043152166,
    0.008186011,
    -0.0090307,
    0.0028009461,
    0.008272812,
    0.0077627413,
    0.0017063711,
    0.3046023,
    0.22460021,
    0.0049233297,
    0.0010997606,
    0.15093221,
    -0.65645593,
    0.008852346,
    -1.1969306,
    -0.749357,
    0.0061481707,
    -0.16499402,
    -0.36851233,
    -0.00813673,
    -0.009886575,
    -0.30561614,
    -0.6902029,
    0.00021132734,
    -0.0017882753,
    0.4015109,
    -1.4115264,
    0.10149106,
    1.1930145,
    1.7153848,
    1.5572815,
    1.7422014,
    0.75430316,
    -0.70158976,
    -0.5039065,
    0.1087571,
    0.8024533,
    0.1410093,
    -0.019634794,
    -0.040539384,
    -0.19457588,
    -1.6070931,
    -1.5468643,
    -2.0660906,
    -0.3068856,
    -1.3381832,
    -0.8207547,
    0.33216485,
    -0.118598394,
    -0.0025408124,
    0.004261763,
    -0.002740257,
    1.4772594,
    1.1829083,
    0.0028358363,
    -0.0356134,
    1.7366725,
    0.0024795057,
    0.18105546,
    1.3109301,
    -0.0075867055,
    0.50029147,
    0.4608253,
    0.0065161474,
    0.30213022,
    -0.03336984,
    0.61130196,
    2.8785355,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S: [f32; NUM_VALUE_FEATURES_5S] = [
    0.9576048,
    1.0841619,
    0.3780696,
    0.45378298,
    0.02916664,
    -0.21192087,
    -0.29556197,
    1.4930935,
    1.4615986,
    1.5215328,
    1.499797,
    1.5159218,
    1.3635213,
    0.27702,
    0.5382675,
    0.55821234,
    0.6538777,
    0.91528744,
    0.98612463,
    0.39557648,
    0.5977974,
    0.75167793,
    1.1875995,
    1.6324513,
    1.8419882,
    0.46911594,
    0.5383509,
    0.5841685,
    0.58646685,
    0.6866496,
    0.701747,
    0.3665948,
    0.48273185,
    0.45786157,
    0.53943056,
    0.6355887,
    0.5692503,
    0.79480666,
    1.0982713,
    2.0681791,
    1.4843044,
    0.2624178,
    -0.16402379,
    -1.9562291,
    -0.039935675,
    -0.47794256,
    -0.1286795,
    -0.048079193,
    -0.017940288,
    -0.42545626,
    -0.3612452,
    -1.2768433,
    -0.34523562,
    -0.73694515,
    -0.058147762,
    0.1059695,
    0.39006642,
    0.6492279,
    0.69176483,
    0.66237634,
    -0.6065814,
    -0.8428912,
    -0.086267374,
    -0.01892811,
    0.24314001,
    0.4668209,
    0.5499141,
    1.280484,
    0.61614144,
    0.5403652,
    -0.0021812047,
    -0.33181193,
    -0.7687136,
    -1.1445667,
    0.9630693,
    0.2572554,
    -0.19325063,
    -0.26789713,
    -0.8439605,
    -1.1554192,
    -1.6809334,
    0.069118895,
    0.22775011,
    0.31435692,
    0.4154473,
    0.73447233,
    0.86105835,
    1.0125461,
    -0.9008931,
    -0.56152296,
    -0.47995493,
    -0.35800803,
    -0.24667677,
    -0.02031217,
    0.17890008,
    -0.27386823,
    -0.14309557,
    0.007119131,
    0.31364974,
    0.17335309,
    0.13252604,
    0.026481066,
    0.088660814,
    -0.12220215,
    0.010174569,
    -0.12703109,
    -0.12767555,
    -0.9549428,
    -0.14758445,
    0.020731006,
    0.08562342,
    0.27779427,
    0.49853504,
    -0.08512912,
    -0.49200678,
    -0.05036602,
    0.55414164,
    0.99980617,
    -0.050322793,
    -0.5115399,
    0.025977757,
    0.53936094,
    0.9666763,
    -0.06435577,
    -0.52486295,
    -0.05601803,
    0.57532185,
    0.93751246,
    -0.9023189,
    -0.7359218,
    -0.37538752,
    -0.05142323,
    0.3797759,
    -0.9422043,
    -0.77989143,
    -0.3359955,
    0.17245863,
    0.65658396,
    -0.9588381,
    -0.76813763,
    -0.30566138,
    0.19367728,
    0.7310583,
    -0.24875724,
    -0.28852382,
    -0.057124197,
    0.28738257,
    0.68034786,
    -0.7284242,
    -0.5463123,
    -0.13096724,
    0.39016736,
    0.9215243,
    -0.8030903,
    -0.61768705,
    -0.062273633,
    0.48222873,
    1.0346321,
    -0.31919554,
    -0.42085925,
    -0.44721845,
    -0.83133596,
    -0.4127462,
    -0.312626,
    -0.30192456,
    0.09646648,
    -0.49319115,
    -0.0077517964,
    -0.0077192923,
    -0.009022991,
    -0.0027733874,
    0.009177124,
    -0.006355319,
    0.001523626,
    -1.6072552,
    -1.6273986,
    -1.5729334,
    -1.5774136,
    -1.571549,
    -1.485391,
    -0.5769634,
    -1.0158969,
    -0.8962273,
    -1.4407736,
    -1.4502375,
    -1.4506472,
    0.095757976,
    -0.4379582,
    -0.5127444,
    -1.3072802,
    -1.3944402,
    -1.628739,
    -0.5601044,
    -0.7320798,
    -0.82889503,
    -0.76449794,
    -0.8006296,
    -0.74127066,
    -0.3231812,
    -0.43480128,
    -0.4587092,
    -0.5469982,
    -0.5334591,
    -0.5326326,
    -0.6148084,
    -1.0079314,
    -1.9838952,
    -1.2972008,
    -0.17781281,
    0.24808091,
    0.20911597,
    0.20409255,
    0.4940875,
    0.1788778,
    0.2859297,
    0.08975817,
    0.17639597,
    0.36243606,
    1.0376446,
    0.21832286,
    -0.002883594,
    0.0066047586,
    -0.0040109972,
    -0.0039588884,
    0.0011708908,
    0.173981,
    -0.4794843,
    0.00716334,
    -0.000495675,
    -0.00897359,
    0.0012100942,
    0.012158075,
    0.08036299,
    1.6343149,
    -0.0013137183,
    0.008603485,
    -0.41086957,
    -0.63797134,
    0.13320532,
    -1.850822,
    -0.16068894,
    0.0031470694,
    0.00031933072,
    0.0009459482,
    -0.46322495,
    -1.4198009,
    0.7401977,
    1.3455313,
    0.008264251,
    0.0062631676,
    -0.7445458,
    0.24027723,
    0.585249,
    -1.0786117,
    -1.3866062,
    -0.0047164634,
    0.005221012,
    0.025311338,
    -0.26801208,
    1.7707253,
    1.8371395,
    0.26365617,
    0.18942393,
    0.14465722,
    0.050488688,
    -0.25254285,
    -0.108749144,
    -0.11779048,
    0.121132284,
    -0.07154758,
    -0.024392236,
    -0.02089896,
    0.19251224,
    0.17705558,
    0.57824177,
    0.23294379,
    0.066767015,
    -0.12259434,
    -0.34979558,
    -0.61631227,
    -0.09871251,
    0.18502747,
    -0.14193042,
    -0.47259712,
    -0.8588347,
    -0.050952755,
    0.3843377,
    -0.07940993,
    -0.49444464,
    -0.84930307,
    -0.067103915,
    0.47737983,
    0.089869685,
    -0.37922335,
    -0.92660445,
    0.44708216,
    0.4889066,
    0.22093873,
    0.06962905,
    -0.50784653,
    0.7217989,
    0.66580427,
    0.23991801,
    -0.18013595,
    -0.71844524,
    0.7502791,
    0.525109,
    0.17504752,
    -0.23247409,
    -0.9235706,
    0.35594195,
    0.27866,
    0.08921056,
    -0.17938311,
    -0.30321234,
    0.6043635,
    0.47722104,
    0.09690479,
    -0.37684503,
    -0.83398145,
    0.76775384,
    0.6179645,
    0.16911879,
    -0.35453594,
    -0.8599512,
    0.20443301,
    0.11315557,
    0.0021700254,
    0.5272895,
    0.060495093,
    0.36501202,
    0.051024795,
    -0.08350881,
    0.20085889,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S: [f32; NUM_POLICY_FEATURES_5S] = [
    0.13053814,
    0.2594758,
    0.24701957,
    0.32714072,
    0.2772792,
    -0.13828218,
    -0.10215987,
    0.098732464,
    0.019896906,
    -0.056102987,
    -0.07790267,
    -0.42510068,
    -0.30549508,
    -0.45333365,
    -0.52566814,
    -0.29246622,
    -0.28865135,
    -0.26258516,
    0.11082738,
    0.17156202,
    -0.038298223,
    0.46970895,
    0.49330792,
    0.45982635,
    -1.5306015,
    -0.70623446,
    -1.6051459,
    1.1686573,
    1.569235,
    2.0058358,
    -2.5606222,
    -1.2750763,
    -2.0411723,
    0.8546261,
    1.8828146,
    2.5776637,
    -0.54405427,
    0.17359827,
    -0.07840562,
    -0.24876921,
    -0.18755311,
    -0.26911703,
    -3.0770643,
    1.1082592,
    0.26119882,
    -2.5300553,
    -2.871422,
    0.03775389,
    0.4238567,
    -0.33088768,
    0.10647789,
    -0.13209525,
    0.08560816,
    0.0468911,
    -0.21627295,
    0.05250266,
    0.38945135,
    0.81790227,
    -0.23717421,
    -0.22604689,
    -0.19218688,
    -0.20800717,
    -0.033787068,
    0.122389324,
    -0.10022763,
    -0.073142864,
    0.6767682,
    -0.04690488,
    0.33146432,
    -0.22365022,
    -0.0036192038,
    0.46967515,
    0.51455325,
    -0.2567931,
    -0.40734252,
    -0.42442977,
    -0.001470779,
    0.22078364,
    -1.2574711,
    -0.85755,
    -0.74906814,
    -0.17770536,
    3.6172705,
    0.54112595,
    0.6423261,
    0.9667451,
    0.199188,
    -1.3389384,
    0.16624917,
    0.19690222,
    -0.4323959,
    -0.23050337,
    0.34784153,
    0.61946857,
    -0.7219571,
    1.2463146,
    0.5738733,
    2.0701928,
    0.049495548,
    -0.42689493,
    -1.0372397,
    0.26199716,
    0.7308859,
    1.6175814,
    -0.0076032556,
    -0.68225515,
    0.12284207,
    2.349499,
    0.1210995,
    2.3559947,
    1.0110165,
    0.4826661,
    -4.137684,
    -0.87189615,
    0.58148867,
    1.5087106,
    0.51515806,
    0.27801824,
    0.1363943,
    0.39705855,
    0.3311712,
    0.13834442,
    -0.009231192,
    0.37948412,
    0.013899716,
    0.34986228,
    0.20538929,
    -1.3363253,
    -0.6954224,
    -0.26191995,
    -0.23036456,
    -0.17417376,
    0.21034743,
    0.08639803,
    0.009099964,
    0.0013535284,
    0.37892112,
    0.085819654,
    1.4048743,
    -2.3133554,
    -1.2493757,
    -1.597994,
    -0.20851141,
    -0.025360083,
    0.2432856,
    0.7032871,
    -1.9057463,
    -1.1427703,
    -0.49652052,
    0.84754634,
    0.08384458,
    -1.2245532,
    0.5221889,
    1.2940357,
    1.6118815,
    1.3088297,
    1.4081663,
    -0.2697331,
    -0.76520354,
    -0.34188744,
    0.6127755,
    1.3039353,
    1.4138254,
    0.12542252,
    -1.4124713,
    -0.9411064,
    -0.9240627,
    -0.92811567,
    -1.1624233,
    -0.3372181,
    -1.4078445,
    -2.251844,
    0.36175016,
    -0.023277655,
    -0.08955618,
    0.0533145,
    0.14049543,
    -0.019719895,
    -0.007010526,
    -0.096855216,
    -0.22378309,
    1.7177029,
    0.7570125,
    1.2928087,
    0.07078977,
    1.540554,
    1.9195119,
    0.41963235,
    0.9632119,
    0.60895467,
    0.32042414,
    0.36884412,
    0.16893406,
    0.3075245,
    -0.011423582,
    0.7850744,
    3.0451703,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S: [f32; NUM_VALUE_FEATURES_6S] = [
    0.606187,
    0.5446117,
    0.54406977,
    0.59712934,
    0.6192196,
    0.5680083,
    0.22529893,
    0.61106944,
    0.6726761,
    0.9916199,
    1.1298188,
    1.2645868,
    0.039187424,
    0.5010584,
    0.65021455,
    1.2168105,
    1.5609205,
    1.8391675,
    0.51993597,
    0.62568444,
    0.68589634,
    0.70032203,
    0.77488726,
    0.75653815,
    0.36954045,
    0.44124892,
    0.44977257,
    0.54283947,
    0.57422334,
    0.5616728,
    0.6143715,
    0.85462576,
    1.4853287,
    1.0700635,
    0.2920155,
    -0.09491774,
    -0.098030955,
    -0.06769711,
    -0.55631524,
    -0.19200288,
    -0.17672306,
    -0.10198288,
    -0.401936,
    -0.4650831,
    -0.6883258,
    -0.3670923,
    1.0906948,
    0.86482877,
    1.0072992,
    1.4386058,
    0.88296574,
    1.1679748,
    -0.24030001,
    -0.19869824,
    -0.017924381,
    0.2546107,
    0.08701127,
    0.15877694,
    0.007067374,
    0.114150904,
    -0.02626372,
    0.022606345,
    -0.12556247,
    -0.12852018,
    0.93810076,
    -0.7260433,
    -0.52561533,
    -0.3214629,
    -0.0750549,
    0.2225322,
    0.50376153,
    -0.0038658213,
    -0.08316135,
    -0.017130688,
    0.12659669,
    0.36212754,
    0.5770378,
    -0.0026799915,
    -0.19310333,
    -0.068640575,
    0.13180655,
    0.3814123,
    0.46170714,
    -0.00032685045,
    -0.25205535,
    -0.104866266,
    0.07662872,
    0.3767714,
    0.5692452,
    -0.18182907,
    -0.44210964,
    -0.37306374,
    -0.2778329,
    -0.15621454,
    -0.023055106,
    -0.34905314,
    -0.46918887,
    -0.32652503,
    -0.17533821,
    -0.013424231,
    0.23628815,
    -0.34334445,
    -0.4333364,
    -0.2837256,
    -0.112828605,
    0.0774326,
    0.28103772,
    0.21040379,
    -0.06204036,
    -0.095324166,
    -0.011239963,
    0.1648674,
    0.2713752,
    -0.11068617,
    -0.24071796,
    -0.12877242,
    0.035447612,
    0.3048336,
    0.5276468,
    -0.26604328,
    -0.35593826,
    -0.1926967,
    0.025967682,
    0.33114037,
    0.61982065,
    -0.20731127,
    -0.10293561,
    -0.22141515,
    -0.54256046,
    -0.53815967,
    -0.1566519,
    -0.34156847,
    -0.004189716,
    -0.21910878,
    0.606187,
    0.5446117,
    0.54406977,
    0.59712934,
    0.6192196,
    0.5680083,
    0.22529893,
    0.61106944,
    0.6726761,
    0.9916199,
    1.1298188,
    1.2645868,
    0.039187424,
    0.5010584,
    0.65021455,
    1.2168105,
    1.5609205,
    1.8391675,
    0.51993597,
    0.62568444,
    0.68589634,
    0.70032203,
    0.77488726,
    0.75653815,
    0.36954045,
    0.44124892,
    0.44977257,
    0.54283947,
    0.57422334,
    0.5616728,
    0.6143715,
    0.85462576,
    1.4853287,
    1.0700635,
    0.2920155,
    -0.09491774,
    -0.098030955,
    -0.06769711,
    -0.55631524,
    -0.19200288,
    -0.17672306,
    -0.10198288,
    -0.401936,
    -0.4650831,
    -0.6883258,
    -0.3670923,
    1.0906948,
    0.86482877,
    1.0072992,
    1.4386058,
    0.88296574,
    1.1679748,
    -0.24030001,
    -0.19869824,
    -0.017924381,
    0.2546107,
    0.08701127,
    0.15877694,
    0.007067374,
    0.114150904,
    -0.02626372,
    0.022606345,
    -0.12556247,
    -0.12852018,
    0.93810076,
    -0.7260433,
    -0.52561533,
    -0.3214629,
    -0.0750549,
    0.2225322,
    0.50376153,
    -0.0038658213,
    -0.08316135,
    -0.017130688,
    0.12659669,
    0.36212754,
    0.5770378,
    -0.0026799915,
    -0.19310333,
    -0.068640575,
    0.13180655,
    0.3814123,
    0.46170714,
    -0.00032685045,
    -0.25205535,
    -0.104866266,
    0.07662872,
    0.3767714,
    0.5692452,
    -0.18182907,
    -0.44210964,
    -0.37306374,
    -0.2778329,
    -0.15621454,
    -0.023055106,
    -0.34905314,
    -0.46918887,
    -0.32652503,
    -0.17533821,
    -0.013424231,
    0.23628815,
    -0.34334445,
    -0.4333364,
    -0.2837256,
    -0.112828605,
    0.0774326,
    0.28103772,
    0.21040379,
    -0.06204036,
    -0.095324166,
    -0.011239963,
    0.1648674,
    0.2713752,
    -0.11068617,
    -0.24071796,
    -0.12877242,
    0.035447612,
    0.3048336,
    0.5276468,
    -0.26604328,
    -0.35593826,
    -0.1926967,
    0.025967682,
    0.33114037,
    0.61982065,
    -0.20731127,
    -0.10293561,
    -0.22141515,
    -0.54256046,
    -0.53815967,
    -0.1566519,
    -0.34156847,
    -0.004189716,
    -0.21910878,
    0.47924975,
    0.2775319,
    0.11263576,
    -0.29312187,
    -0.07105412,
    0.29844272,
    -0.043196183,
    -0.49799013,
    0.0073049776,
    0.018298991,
    -0.08374308,
    -0.15620223,
    -0.19624043,
    0.2391469,
    0.4914242,
    0.87294245,
    -0.11969389,
    0.09471762,
    0.13143727,
    -0.13189088,
    -0.19179933,
    -0.10541538,
    -0.35254002,
    -0.62237453,
    -0.07130004,
    0.1635002,
    0.10333933,
    -0.16391811,
    0.0076200105,
    0.0061870757,
    -0.0077467104,
    -0.007937893,
    0.0076041985,
    -0.00032685045,
    -0.00023208652,
    0.008934194,
    -0.0025578667,
    -0.16391811,
    0.0076200105,
    0.0061870757,
    -0.0077467104,
    -0.007937893,
    0.0076041985,
    -0.00032685045,
    -0.00023208652,
    0.008934194,
    -0.0025578667,
    -0.0025578667,
    -0.0025578667,
    -0.16391811,
    0.0076200105,
    0.0061870757,
    -0.0077467104,
    -0.007937893,
    0.0076041985,
    -0.00032685045,
    -0.00023208652,
    0.008934194,
    -0.0025578667,
    -0.0025578667,
    -0.0025578667,
    -0.0025578667,
    -0.0025578667,
    -0.16391811,
    0.0076200105,
    0.0061870757,
    -0.0077467104,
    -0.007937893,
    0.0076041985,
    -0.00032685045,
    -0.00023208652,
    0.008934194,
    -0.0025578667,
    -0.0025578667,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S: [f32; NUM_POLICY_FEATURES_6S] = [
    -2.5490334,
    1.0907768,
    0.40533957,
    -2.1783361,
    -1.9656186,
    -0.11910041,
    0.3827465,
    -0.36281496,
    0.098670766,
    -0.061386336,
    0.07916245,
    -0.15045542,
    -0.05818011,
    -0.14055887,
    0.39565188,
    0.47307792,
    0.22034885,
    -0.29811528,
    -0.38566157,
    -0.32027248,
    0.17612194,
    0.31480277,
    0.37420526,
    -0.6160203,
    -0.99503464,
    -1.022247,
    -0.07620941,
    0.78106326,
    2.4153337,
    0.00958837,
    -0.24925435,
    -0.04037198,
    0.31065497,
    0.7048428,
    0.72551566,
    -0.19162245,
    -0.1526411,
    -0.025610907,
    0.015240486,
    0.02938831,
    -0.022778459,
    0.06385909,
    -0.23192704,
    0.25468063,
    0.49240685,
    0.45987254,
    -0.030208213,
    0.28996384,
    -0.059312735,
    0.035686687,
    0.271284,
    0.5214734,
    0.41869536,
    -0.37601113,
    -0.41671708,
    -0.39533865,
    -0.16467261,
    0.31418929,
    0.6781199,
    -1.0295482,
    -0.8719054,
    -0.48587862,
    0.40959165,
    1.2584724,
    1.6943147,
    0.54985595,
    -0.059545174,
    0.29058963,
    0.28040853,
    -0.2037632,
    0.053092442,
    0.39260617,
    0.09004204,
    0.22084866,
    0.1891087,
    0.21848248,
    -0.1416304,
    1.6414697,
    0.4064402,
    0.89881027,
    -0.106248684,
    -0.06722416,
    0.009552879,
    0.48911083,
    0.7436944,
    1.29594,
    -0.11115018,
    -0.24099883,
    -0.31982017,
    2.4572527,
    -0.09656046,
    2.1200073,
    1.8064114,
    0.53237724,
    -3.4268725,
    -0.6832289,
    0.72508657,
    1.391271,
    0.45646173,
    0.5518005,
    0.089685425,
    0.3283857,
    0.2916723,
    0.15119004,
    -0.014768326,
    0.3255551,
    -0.023082325,
    0.32838264,
    -0.3280263,
    -0.49792236,
    0.2521321,
    0.20311585,
    -0.19233644,
    -0.025560826,
    0.21606599,
    0.03086127,
    0.008243782,
    0.0015487336,
    0.2508647,
    0.07878296,
    1.8220797,
    -0.39295647,
    -0.14058624,
    -0.19435617,
    -1.3175937,
    -0.33471224,
    -0.50426483,
    -0.1613428,
    0.15429756,
    0.41458473,
    1.0414675,
    -1.0505555,
    -0.38385266,
    -0.119135685,
    0.10721053,
    0.3579779,
    -1.0944275,
    0.25238204,
    0.9679204,
    1.4556767,
    1.1631404,
    1.005055,
    -0.05970869,
    -0.86475164,
    -0.68896854,
    0.34479606,
    0.99089825,
    0.90510124,
    0.05941692,
    -0.50955284,
    -0.4415106,
    -1.2831217,
    -0.97601056,
    -0.8631987,
    -0.20892455,
    -0.75021267,
    -1.2193079,
    0.3239967,
    -0.026010232,
    -0.039476912,
    -0.12664902,
    0.009535544,
    0.08939319,
    0.21373276,
    -0.19362865,
    0.22576427,
    -0.0027303232,
    -0.077628,
    -0.11106214,
    0.00735133,
    1.9378375,
    1.5150657,
    1.7657595,
    -0.025828417,
    0.5442169,
    1.6175965,
    0.67236245,
    1.4253153,
    0.8264834,
    0.49127612,
    0.57544136,
    -0.038903136,
    0.53424984,
    2.821259,
    0.94532365,
    3.0151558,
    -2.5490334,
    1.0907768,
    0.00735133,
    1.9378375,
    1.5150657,
    1.7657595,
    -0.025828417,
    0.5442169,
    1.6175965,
    0.67236245,
    1.4253153,
    0.8264834,
    0.49127612,
    0.57544136,
    -0.038903136,
    0.53424984,
    2.821259,
    0.94532365,
    3.0151558,
    -2.5490334,
    1.0907768,
];
