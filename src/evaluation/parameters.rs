use std::{array, mem};

use half::f16;

use crate::{
    evaluation::policy_eval::sigmoid,
    position::{num_line_symmetries, num_square_symmetries, Komi},
};

use super::policy_eval::policy_offset;

pub const NUM_VALUE_FEATURES_4S: usize = 400;
pub const NUM_POLICY_FEATURES_4S: usize = 184;

pub const NUM_VALUE_FEATURES_5S: usize = 536;
pub const NUM_POLICY_FEATURES_5S: usize = 216;

pub const NUM_VALUE_FEATURES_6S: usize = 560;
pub const NUM_POLICY_FEATURES_6S: usize = 224;

const fn value_padding<const S: usize>() -> usize {
    match S {
        4 => 14,
        5 => 10,
        6 => 14,
        _ => unimplemented!(),
    }
}

const fn policy_padding<const S: usize>() -> usize {
    match S {
        4 => 3,
        5 => 7,
        6 => 5,
        _ => unimplemented!(),
    }
}

#[derive(Debug, Clone, Copy)]
pub struct IndexPair {
    start: usize,
    length: usize,
}

impl IndexPair {
    pub const fn next(start: usize, length: usize) -> (Self, usize) {
        (Self { start, length }, start + length)
    }

    pub fn as_slice<'a, T>(&self, slice: &'a [T]) -> &'a [T] {
        &slice[self.start..self.start + self.length]
    }

    pub fn as_mut_slice<'a, T>(&self, slice: &'a mut [T]) -> &'a mut [T] {
        &mut slice[self.start..self.start + self.length]
    }
}

#[derive(Debug)]
pub struct ValueIndexes<const S: usize> {
    pub first_ply: IndexPair,
    pub second_ply: IndexPair,
    pub flat_psqt_opening: IndexPair,
    pub flat_psqt_middlegame: IndexPair,
    pub flat_psqt_endgame: IndexPair,
    pub wall_psqt_opening: IndexPair,
    pub wall_psqt_middlegame: IndexPair,
    pub wall_psqt_endgame: IndexPair,
    pub cap_psqt_opening: IndexPair,
    pub cap_psqt_middlegame: IndexPair,
    pub cap_psqt_endgame: IndexPair,
    pub supports_psqt_opening: IndexPair,
    pub supports_psqt_middlegame: IndexPair,
    pub supports_psqt_endgame: IndexPair,
    pub captives_psqt_opening: IndexPair,
    pub captives_psqt_middlegame: IndexPair,
    pub captives_psqt_endgame: IndexPair,
    pub flat_win_this_ply: IndexPair,
    pub flat_win_next_ply: IndexPair,
    pub flat_win_two_ply: IndexPair,
    pub flat_win_three_ply: IndexPair,
    pub one_reserve_left_us: IndexPair,
    pub one_reserve_left_them: IndexPair,
    pub shallow_supports_per_piece: IndexPair,
    pub shallow_supports_per_piece_mobility: IndexPair,
    pub shallow_supports_per_piece_mob_scaled: IndexPair,
    pub deep_supports_per_piece: IndexPair,
    pub shallow_captives_per_piece: IndexPair,
    pub shallow_captives_per_piece_mobility: IndexPair,
    pub shallow_captives_per_piece_mob_scaled: IndexPair,
    pub deep_captives_per_piece: IndexPair,
    pub to_move_opening_flatstone_lead: IndexPair,
    pub to_move_middlegame_flatstone_lead: IndexPair,
    pub to_move_endgame_flatstone_lead: IndexPair,
    pub i_number_of_groups: IndexPair,
    pub critical_squares: IndexPair,
    pub critical_square_cap_attack: IndexPair,
    pub winning_spread_to_move: IndexPair,
    pub winning_flat_spread_not_to_move: IndexPair,
    pub winning_cap_spread_not_to_move: IndexPair,
    pub flat_next_to_our_stack: IndexPair,
    pub wall_next_to_our_stack: IndexPair,
    pub cap_next_to_our_stack: IndexPair,
    pub num_lines_occupied: IndexPair,
    pub line_control_empty: IndexPair,
    pub line_control_their_blocking_piece: IndexPair,
    pub line_control_other: IndexPair,
    pub line_control_guarded_flat: IndexPair,
    pub line_control_guarded_wall: IndexPair,
    pub line_control_guarded_cap: IndexPair,
    pub sidelined_cap: IndexPair,
    pub fully_isolated_cap: IndexPair,
    pub semi_isolated_cap: IndexPair,
    pub padding: IndexPair,
}

impl<const S: usize> ValueIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;

        let (first_ply, i) = IndexPair::next(i, 1);
        let (second_ply, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt_opening, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt_middlegame, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt_endgame, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_opening, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_middlegame, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_endgame, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_opening, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_middlegame, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_endgame, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (supports_psqt_opening, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (supports_psqt_middlegame, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (supports_psqt_endgame, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (captives_psqt_opening, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (captives_psqt_middlegame, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (captives_psqt_endgame, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_win_this_ply, i) = IndexPair::next(i, 1);
        let (flat_win_next_ply, i) = IndexPair::next(i, 2);
        let (flat_win_two_ply, i) = IndexPair::next(i, 2);
        let (flat_win_three_ply, i) = IndexPair::next(i, 3);
        let (one_reserve_left_us, i) = IndexPair::next(i, 4);
        let (one_reserve_left_them, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece_mobility, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece_mob_scaled, i) = IndexPair::next(i, 4);
        let (deep_supports_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece_mobility, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece_mob_scaled, i) = IndexPair::next(i, 4);
        let (deep_captives_per_piece, i) = IndexPair::next(i, 4);
        let (to_move_opening_flatstone_lead, i) = IndexPair::next(i, 9);
        let (to_move_middlegame_flatstone_lead, i) = IndexPair::next(i, 9);
        let (to_move_endgame_flatstone_lead, i) = IndexPair::next(i, 9);
        let (i_number_of_groups, i) = IndexPair::next(i, 3);
        let (critical_squares, i) = IndexPair::next(i, 4);
        let (critical_square_cap_attack, i) = IndexPair::next(i, 6);
        let (winning_spread_to_move, i) = IndexPair::next(i, 2);
        let (winning_flat_spread_not_to_move, i) = IndexPair::next(i, 2);
        let (winning_cap_spread_not_to_move, i) = IndexPair::next(i, 2);
        let (flat_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (wall_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (cap_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (num_lines_occupied, i) = IndexPair::next(i, S + 1);
        let (line_control_empty, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_their_blocking_piece, i) =
            IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_other, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_guarded_flat, i) = IndexPair::next(i, 3);
        let (line_control_guarded_wall, i) = IndexPair::next(i, 3);
        let (line_control_guarded_cap, i) = IndexPair::next(i, 3);
        let (sidelined_cap, i) = IndexPair::next(i, 3);
        let (fully_isolated_cap, i) = IndexPair::next(i, 3);
        let (semi_isolated_cap, i) = IndexPair::next(i, 3);
        let (padding, i) = IndexPair::next(i, value_padding::<S>() / 2);

        assert!(i == num_value_features::<S>() / 2);

        ValueIndexes {
            first_ply,
            second_ply,
            flat_psqt_opening,
            flat_psqt_middlegame,
            flat_psqt_endgame,
            wall_psqt_opening,
            wall_psqt_middlegame,
            wall_psqt_endgame,
            cap_psqt_opening,
            cap_psqt_middlegame,
            cap_psqt_endgame,
            supports_psqt_opening,
            supports_psqt_middlegame,
            supports_psqt_endgame,
            captives_psqt_opening,
            captives_psqt_middlegame,
            captives_psqt_endgame,
            flat_win_this_ply,
            flat_win_next_ply,
            flat_win_two_ply,
            flat_win_three_ply,
            one_reserve_left_us,
            one_reserve_left_them,
            shallow_supports_per_piece,
            shallow_supports_per_piece_mobility,
            shallow_supports_per_piece_mob_scaled,
            deep_supports_per_piece,
            shallow_captives_per_piece,
            shallow_captives_per_piece_mobility,
            shallow_captives_per_piece_mob_scaled,
            deep_captives_per_piece,
            to_move_opening_flatstone_lead,
            to_move_middlegame_flatstone_lead,
            to_move_endgame_flatstone_lead,
            i_number_of_groups,
            critical_squares,
            critical_square_cap_attack,
            winning_spread_to_move,
            winning_flat_spread_not_to_move,
            winning_cap_spread_not_to_move,
            flat_next_to_our_stack,
            wall_next_to_our_stack,
            cap_next_to_our_stack,
            num_lines_occupied,
            line_control_empty,
            line_control_their_blocking_piece,
            line_control_other,
            line_control_guarded_flat,
            line_control_guarded_wall,
            line_control_guarded_cap,
            sidelined_cap,
            fully_isolated_cap,
            semi_isolated_cap,
            padding,
        }
    }
}

pub const VALUE_INDEXES_4S: ValueIndexes<4> = ValueIndexes::new();
pub const VALUE_INDEXES_5S: ValueIndexes<5> = ValueIndexes::new();
pub const VALUE_INDEXES_6S: ValueIndexes<6> = ValueIndexes::new();

impl<const S: usize> ValueIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> ValueIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn value_indexes<const S: usize>() -> ValueIndexes<S> {
    match S {
        4 => VALUE_INDEXES_4S.downcast_size(),
        5 => VALUE_INDEXES_5S.downcast_size(),
        6 => VALUE_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

#[derive(Debug)]
pub struct PolicyIndexes<const S: usize> {
    pub flat_psqt_white: IndexPair,
    pub flat_psqt_black: IndexPair,
    pub wall_psqt_white: IndexPair,
    pub wall_psqt_black: IndexPair,
    pub cap_psqt_white: IndexPair,
    pub cap_psqt_black: IndexPair,
    pub move_role_bonus_white: IndexPair,
    pub move_role_bonus_black: IndexPair,
    pub decline_win: IndexPair,
    pub place_to_win: IndexPair,
    pub place_to_draw: IndexPair,
    pub place_to_loss: IndexPair,
    pub place_to_allow_opponent_to_end: IndexPair,
    pub two_flats_left: IndexPair,
    pub three_flats_left: IndexPair,
    pub our_road_stones_in_line: IndexPair,
    pub their_road_stones_in_line: IndexPair,
    pub extend_single_group_base: IndexPair,
    pub extend_single_group_linear: IndexPair,
    pub extend_single_group_to_new_line_base: IndexPair,
    pub extend_single_group_to_new_line_linear: IndexPair,
    pub merge_two_groups_base: IndexPair,
    pub merge_two_groups_linear: IndexPair,
    pub block_merger_base: IndexPair,
    pub block_merger_linear: IndexPair,
    pub anchor_group_base: IndexPair,
    pub anchor_group_linear: IndexPair,
    pub block_anchoring_group_base: IndexPair,
    pub block_anchoring_group_linear: IndexPair,
    pub place_our_critical_square: IndexPair,
    pub place_their_critical_square: IndexPair,
    pub ignore_their_critical_square: IndexPair,
    pub next_to_our_last_stone: IndexPair,
    pub next_to_their_last_stone: IndexPair,
    pub diagonal_to_our_last_stone: IndexPair,
    pub diagonal_to_their_last_stone: IndexPair,
    pub attack_strong_flats: IndexPair,
    pub blocking_stone_blocks_extensions_of_two_flats: IndexPair,
    pub attack_strong_stack_with_wall: IndexPair,
    pub attack_strong_stack_with_cap: IndexPair,
    pub attack_last_movement: IndexPair,
    pub place_last_movement: IndexPair,
    pub simple_movement: IndexPair,
    pub simple_capture: IndexPair,
    pub simple_self_capture: IndexPair,
    pub pure_spread: IndexPair,
    pub fcd_highest_board: IndexPair,
    pub fcd_highest_stack: IndexPair,
    pub fcd_other: IndexPair,
    pub stack_captured_by_movement: IndexPair,
    pub stack_capture_in_strong_line: IndexPair,
    pub stack_capture_in_strong_line_cap: IndexPair,
    pub move_cap_onto_strong_line: IndexPair,
    pub move_cap_onto_strong_line_with_critical_square: IndexPair,
    pub recapture_stack_pure: IndexPair,
    pub recapture_stack_impure: IndexPair,
    pub move_last_placement: IndexPair,
    pub continue_spread: IndexPair,
    pub move_onto_critical_square: IndexPair,
    pub spread_that_connects_groups_to_win: IndexPair,
    pub padding: IndexPair,
}

pub const POLICY_INDEXES_4S: PolicyIndexes<4> = PolicyIndexes::new();
pub const POLICY_INDEXES_5S: PolicyIndexes<5> = PolicyIndexes::new();
pub const POLICY_INDEXES_6S: PolicyIndexes<6> = PolicyIndexes::new();

impl<const S: usize> PolicyIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> PolicyIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn policy_indexes<const S: usize>() -> PolicyIndexes<S> {
    match S {
        4 => POLICY_INDEXES_4S.downcast_size(),
        5 => POLICY_INDEXES_5S.downcast_size(),
        6 => POLICY_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

impl<const S: usize> PolicyIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;
        let (flat_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (move_role_bonus_white, i) = IndexPair::next(i, 3);
        let (move_role_bonus_black, i) = IndexPair::next(i, 3);
        let (decline_win, i) = IndexPair::next(i, 1);
        let (place_to_win, i) = IndexPair::next(i, 1);
        let (place_to_draw, i) = IndexPair::next(i, 1);
        let (place_to_loss, i) = IndexPair::next(i, 1);
        let (place_to_allow_opponent_to_end, i) = IndexPair::next(i, 3);
        let (two_flats_left, i) = IndexPair::next(i, 2);
        let (three_flats_left, i) = IndexPair::next(i, 2);
        let (our_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (their_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (extend_single_group_to_new_line_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_to_new_line_linear, i) = IndexPair::next(i, 3);
        let (extend_single_group_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_linear, i) = IndexPair::next(i, 3);
        let (merge_two_groups_base, i) = IndexPair::next(i, 3);
        let (merge_two_groups_linear, i) = IndexPair::next(i, 3);
        let (block_merger_base, i) = IndexPair::next(i, 3);
        let (block_merger_linear, i) = IndexPair::next(i, 3);
        let (anchor_group_base, i) = IndexPair::next(i, 3);
        let (anchor_group_linear, i) = IndexPair::next(i, 3);
        let (block_anchoring_group_base, i) = IndexPair::next(i, 3);
        let (block_anchoring_group_linear, i) = IndexPair::next(i, 3);
        let (place_our_critical_square, i) = IndexPair::next(i, 1);
        let (place_their_critical_square, i) = IndexPair::next(i, 4);
        let (ignore_their_critical_square, i) = IndexPair::next(i, 2);
        let (next_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (next_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (attack_strong_flats, i) = IndexPair::next(i, 1);
        let (blocking_stone_blocks_extensions_of_two_flats, i) = IndexPair::next(i, 1);
        let (attack_strong_stack_with_wall, i) = IndexPair::next(i, 6);
        let (attack_strong_stack_with_cap, i) = IndexPair::next(i, 6);
        let (attack_last_movement, i) = IndexPair::next(i, 4);
        let (place_last_movement, i) = IndexPair::next(i, 3);
        let (simple_movement, i) = IndexPair::next(i, 3);
        let (simple_capture, i) = IndexPair::next(i, 4);
        let (simple_self_capture, i) = IndexPair::next(i, 4);
        let (pure_spread, i) = IndexPair::next(i, 2);
        let (fcd_highest_board, i) = IndexPair::next(i, 6);
        let (fcd_highest_stack, i) = IndexPair::next(i, 6);
        let (fcd_other, i) = IndexPair::next(i, 8);
        let (stack_captured_by_movement, i) = IndexPair::next(i, 1);
        let (stack_capture_in_strong_line, i) = IndexPair::next(i, S - 3);
        let (stack_capture_in_strong_line_cap, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line_with_critical_square, i) = IndexPair::next(i, S - 3);
        let (recapture_stack_pure, i) = IndexPair::next(i, 3);
        let (recapture_stack_impure, i) = IndexPair::next(i, 3);
        let (move_last_placement, i) = IndexPair::next(i, 3);
        let (continue_spread, i) = IndexPair::next(i, 3);
        let (move_onto_critical_square, i) = IndexPair::next(i, 3);
        let (spread_that_connects_groups_to_win, i) = IndexPair::next(i, 1);
        let (padding, i) = IndexPair::next(i, policy_padding::<S>());

        assert!(i == num_policy_features::<S>());

        PolicyIndexes {
            flat_psqt_white,
            flat_psqt_black,
            wall_psqt_white,
            wall_psqt_black,
            cap_psqt_white,
            cap_psqt_black,
            move_role_bonus_white,
            move_role_bonus_black,
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            anchor_group_base,
            anchor_group_linear,
            block_anchoring_group_base,
            block_anchoring_group_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            attack_strong_stack_with_wall,
            attack_strong_stack_with_cap,
            attack_last_movement,
            place_last_movement,
            simple_movement,
            simple_capture,
            simple_self_capture,
            pure_spread,
            fcd_highest_board,
            fcd_highest_stack,
            fcd_other,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            recapture_stack_pure,
            recapture_stack_impure,
            move_last_placement,
            continue_spread,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
            padding,
        }
    }
}

pub trait ValueApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn finish(&mut self) -> f32;
}

#[derive(Debug, Clone)]
pub struct Value<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for Value<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Value {
            features: vec![f16::ZERO; num_value_features::<S>() / 2],
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn finish(&mut self) -> f32 {
        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>();

        self.features.fill(f16::ZERO);

        total_value
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalValue<const S: usize> {
    val: f32,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for IncrementalValue<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalValue {
            val: 0.0,
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn finish(&mut self) -> f32 {
        let total_value = self.val;

        self.val = 0.0;

        total_value
    }
}

pub trait PolicyApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn eval_one(&mut self, index_pair: IndexPair, index: usize) {
        self.eval_i8(index_pair, index, 1)
    }
    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.eval(index_pair, index, f16::from(val))
    }
    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.eval(index_pair, index, f16::from_f32(val))
    }
    fn set_immediate_win(&mut self);
    fn has_immediate_win(&self) -> bool;
    fn finish(&mut self, num_moves: usize) -> f16;
}

#[derive(Debug, Clone)]
pub struct Policy<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for Policy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Policy {
            features: vec![f16::ZERO; num_policy_features::<S>()],
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);

        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>() + offset;

        self.features.fill(f16::ZERO);
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalPolicy<const S: usize> {
    val: f32,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for IncrementalPolicy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalPolicy {
            val: 0.0,
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.val += index_pair.as_slice(self.parameters)[index] * val as f32
    }

    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.val += index_pair.as_slice(self.parameters)[index] * val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);
        let total_value = self.val + offset;

        self.val = 0.0;
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

pub const fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub const fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn value_features_4s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_4S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_4S_0KOMI,
        4 => &VALUE_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn policy_features_4s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_4S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_4S_0KOMI,
        4 => &POLICY_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn value_features_5s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_5S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_5S_0KOMI,
        4 => &VALUE_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn policy_features_5s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_5S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_5S_0KOMI,
        4 => &POLICY_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn value_features_6s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_6S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_6S_0KOMI,
        4 => &VALUE_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

pub fn policy_features_6s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_6S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_6S_0KOMI,
        4 => &POLICY_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_0KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    2.4297364,
    4.0146685,
    2.5906136,
    1.4466329,
    1.0158951,
    1.3225129,
    1.680718,
    2.5271606,
    2.0499218,
    1.5046408,
    2.161403,
    1.558434,
    0.8009551,
    -0.45659596,
    1.4142693,
    2.4969683,
    1.7237734,
    2.100048,
    2.8475945,
    0.26699722,
    0.83639365,
    0.8837669,
    -0.0073812627,
    0.004104538,
    0.0060586967,
    -0.008598236,
    0.0018530292,
    -0.004704423,
    0.005802648,
    0.005024814,
    0.0038007405,
    -0.55549616,
    0.60244006,
    1.3575288,
    0.21236539,
    0.6682225,
    0.97504485,
    0.20539062,
    0.14074662,
    0.16458511,
    -0.5853052,
    0.6541539,
    1.2290869,
    0.089258045,
    0.45798028,
    0.8309533,
    0.13464464,
    0.17768666,
    0.054146785,
    2.993088,
    0.35215592,
    1.5229279,
    0.14981659,
    1.5808123,
    0.009511317,
    0.8293106,
    0.69436496,
    -0.049093504,
    -0.07424403,
    -0.6821401,
    0.41539332,
    -0.341665,
    -0.3494459,
    -0.6089049,
    -0.24752432,
    1.4752119,
    0.774546,
    -0.00496279,
    0.007571606,
    -1.1456656,
    1.2757221,
    -0.0038658213,
    -0.00062850676,
    0.4992527,
    1.153685,
    -0.00188174,
    0.00081885327,
    1.0082864,
    0.5685085,
    0.0061870757,
    -0.0077467104,
    -0.7145048,
    -0.52704763,
    -0.00032685045,
    -0.00023208652,
    -1.6417491,
    -0.9024399,
    0.0032768678,
    0.0059308577,
    0.094654486,
    0.1545624,
    -0.0057374667,
    0.00015021767,
    -0.919009,
    -0.91454047,
    -0.00078115705,
    -0.008447227,
    -0.03158332,
    -0.14233959,
    -0.40541682,
    0.9298186,
    2.9339006,
    2.1309052,
    0.40075096,
    0.40582627,
    0.016099315,
    1.3458207,
    1.396734,
    1.2260834,
    1.3605995,
    1.3072904,
    1.7912179,
    1.9182872,
    2.9051747,
    2.1360333,
    1.277346,
    1.5719273,
    1.2870386,
    1.3445429,
    1.7327977,
    1.8946157,
    1.89032,
    1.4791465,
    1.3582758,
    -1.1542697,
    0.24280688,
    0.2691254,
    0.35578558,
    0.3914039,
    0.24382411,
    0.054770768,
    0.0074368455,
    -0.0066757104,
    0.004355209,
    -0.0077824043,
    0.0070885587,
    0.008410923,
    1.462033,
    2.2997391,
    -0.07246457,
    0.42000136,
    0.0031001903,
    -0.002478423,
    -0.03427232,
    -0.28108907,
    0.009418681,
    -0.461782,
    -0.30582905,
    0.05292655,
    0.3953347,
    0.83047086,
    0.05566318,
    -0.124831505,
    0.6953983,
    1.4424164,
    0.21031226,
    -0.5651478,
    0.46613085,
    1.5323257,
    -0.03612399,
    -0.18341905,
    0.0022022342,
    0.46326533,
    -1.1363717,
    -0.5808483,
    0.38730818,
    1.1689392,
    0.13688728,
    -0.09117828,
    0.35586533,
    0.967846,
    -1.4460305,
    -0.7947527,
    0.31318775,
    1.4924506,
    -0.10815189,
    0.044734478,
    0.75006104,
    -0.16322173,
    0.12834117,
    0.49304265,
    0.0029043844,
    0.008424118,
    -0.0050589656,
    -0.0051581357,
    0.007047029,
    -0.0010688612,
    -0.007828684,
    0.0054334905,
    -0.006010456,
    -0.0055280733,
    -0.00082149263,
    -0.005897157,
    0.0069459323,
    -0.0069796084,
    -0.0075576873,
    -0.00044307671,
    0.0042860033,
    -0.004753387,
    0.009866308,
    0.0054509398,
    -0.0066909315,
    0.0056339707,
    0.005903894,
    -1.524717,
    -1.2362134,
    -1.1596913,
    -2.418805,
    -1.9774376,
    -1.5163997,
    -2.4817305,
    -1.6779486,
    -0.6220989,
    -0.28350902,
    -0.3600248,
    0.7194921,
    -1.254957,
    -2.254246,
    -3.5524852,
    -0.53604335,
    -0.7438604,
    -0.9570924,
    -0.00401304,
    -0.0041113687,
    -0.00031996984,
    0.009882869,
    -0.0012246752,
    0.00716334,
    -0.000495675,
    -0.008976857,
    0.0011483384,
    0.09409927,
    -0.9796276,
    -0.8546019,
    -0.33173117,
    -0.57152873,
    -0.87375814,
    0.030712733,
    -0.2605535,
    -0.17489535,
    1.6802973,
    -0.9947554,
    -1.4245812,
    -0.31205544,
    -0.47609878,
    -0.7813887,
    -0.19216458,
    -0.28268346,
    -0.17937012,
    -2.3869414,
    -0.64719224,
    -1.5892441,
    -0.34750366,
    -1.2509183,
    -0.03617249,
    -0.562129,
    -0.5599357,
    -1.177682,
    -0.08144411,
    -0.28644833,
    0.029813187,
    -0.8878239,
    -0.17781451,
    -0.033171915,
    0.8542306,
    -1.0513787,
    -1.1452258,
    0.008264789,
    0.0015326263,
    0.06888147,
    -1.5178113,
    0.0023975773,
    -0.0020184517,
    -0.57448393,
    -0.76339763,
    0.0038830638,
    -0.0005412027,
    -1.0420805,
    -0.7107945,
    0.0028945897,
    -0.005422716,
    0.7068532,
    0.53416604,
    -0.0063391924,
    0.0013449714,
    0.93223715,
    0.57949203,
    0.0075244084,
    -0.003553629,
    0.026212126,
    -0.15284987,
    0.009908594,
    -0.00047137216,
    0.89026684,
    0.8847067,
    -0.0071793436,
    0.0004826784,
    0.14983757,
    0.42800686,
    -0.3181729,
    0.24019523,
    -1.309761,
    -0.7060233,
    -0.50283176,
    -0.041731257,
    0.0021977378,
    -1.4555286,
    -2.0483093,
    -2.043602,
    -2.4529133,
    -2.5711362,
    -2.766352,
    -2.522296,
    -2.7522287,
    -1.0808455,
    -0.41869462,
    -1.3205136,
    -1.3483278,
    -1.634689,
    -1.7899172,
    -1.6963987,
    -1.8397233,
    -1.963312,
    -1.4053695,
    0.7847561,
    -0.14414711,
    -0.19784987,
    -0.2813408,
    -0.07303514,
    -0.28582704,
    -0.087084256,
    -0.0057330895,
    0.009055974,
    0.0056207534,
    0.0008187201,
    0.009319432,
    0.005889902,
    -0.5199132,
    -2.1426044,
    0.16151,
    0.13167919,
    0.002234254,
    0.0092526,
    -0.0021307669,
    0.27170584,
    0.008827645,
    0.47762632,
    0.33172652,
    0.18522269,
    -0.09128785,
    -0.39606407,
    0.05047063,
    -0.19608384,
    -0.874363,
    -1.4980359,
    0.20190223,
    0.8836317,
    -0.21505708,
    -1.4853137,
    -0.24226567,
    -0.10537942,
    -0.38015285,
    -0.63705975,
    1.601081,
    0.66725045,
    -0.32970005,
    -1.2469447,
    -0.03340315,
    -0.06461967,
    -0.47053522,
    -1.0047358,
    1.6889338,
    0.9084269,
    -0.2368726,
    -1.4094272,
    0.15163475,
    -0.22223996,
    -0.7901063,
    0.23276292,
    -0.30013394,
    -0.38376638,
    0.0011727996,
    0.0015943982,
    0.009848841,
    -0.008626261,
    -0.006473,
    -0.00014788378,
    0.0038305689,
    -0.0051336214,
    -0.0013411185,
    0.00012495555,
    -0.004604163,
    0.0016861744,
    -0.0026721642,
    -0.0049328515,
    -0.008879824,
    0.0062810984,
    0.0053475164,
    -0.008328738,
    -0.005392799,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_0KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    -0.009136468,
    0.12872475,
    0.24317294,
    0.17685336,
    0.08850475,
    0.10275915,
    -0.04915588,
    -0.38613278,
    0.18805306,
    -0.08915241,
    -0.34461528,
    0.123874664,
    0.0024795057,
    -0.0011674287,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    -0.0036976123,
    -0.31353763,
    -0.030834718,
    -0.009099176,
    -0.27397802,
    -0.53728336,
    -0.0004463978,
    -2.8321173,
    1.2106104,
    0.8167197,
    -3.6046648,
    -2.7920058,
    0.093222186,
    0.47528526,
    -0.16478899,
    0.15992136,
    -0.10734243,
    0.1198434,
    0.04233924,
    -0.21123259,
    0.5013781,
    1.1198807,
    -0.03657026,
    -0.0838457,
    -0.22831933,
    -0.8092411,
    0.008436263,
    -0.0064912676,
    -0.009093427,
    -0.0021902225,
    0.19384634,
    -0.2872834,
    0.459761,
    1.0807669,
    -0.7669673,
    -0.46785668,
    -0.40418112,
    0.5027854,
    -0.009686177,
    -0.0044610286,
    0.00023165438,
    -0.0066721607,
    1.0498637,
    -0.14367034,
    0.0059434753,
    -2.563844,
    -0.27363962,
    -0.009553656,
    -0.080850296,
    0.45841566,
    -0.0015310142,
    0.8371439,
    0.46815103,
    0.00049108546,
    1.0617906,
    2.001952,
    0.0039425613,
    -0.66577286,
    -2.469627,
    -0.0027044103,
    1.1179079,
    1.1834215,
    -0.006842167,
    -4.120405,
    -3.4554143,
    -0.005462606,
    -0.4358825,
    0.01987371,
    0.0029457593,
    2.2217302,
    -1.7866014,
    0.0072805397,
    -0.16800106,
    -0.42152134,
    0.00075819716,
    0.17018744,
    0.5281821,
    -0.0076902844,
    2.4763875,
    0.69423634,
    1.3705229,
    -0.0066590877,
    0.5586046,
    -3.3922472,
    -0.7960433,
    0.27802107,
    1.3546782,
    0.3244514,
    0.2529641,
    0.29633898,
    0.78607255,
    0.21485266,
    0.3131111,
    -0.3221882,
    0.48722792,
    -0.002588279,
    0.003598757,
    0.0023489352,
    0.008467235,
    0.0053362483,
    0.005503459,
    0.009021362,
    -0.009674854,
    0.3244965,
    0.085323945,
    0.002391248,
    -0.009936645,
    0.033882,
    -0.30411252,
    0.0049333787,
    -1.7283373,
    -0.99543756,
    0.0012369892,
    0.082992755,
    0.17238437,
    -0.00012632087,
    0.0043307636,
    -0.78438294,
    -0.7810739,
    -0.00241462,
    0.0046542455,
    0.17102008,
    -1.3409975,
    0.24576469,
    1.4286964,
    1.8282772,
    1.9710218,
    2.8778822,
    2.0679152,
    -1.9226104,
    -0.81273174,
    0.18135166,
    1.3205421,
    0.29799315,
    0.009792265,
    -0.59308314,
    -1.2177317,
    -2.0256746,
    -1.4003166,
    -2.0636353,
    -0.13679819,
    -1.7168249,
    -1.4724668,
    0.3919976,
    -0.04523478,
    -0.0015463233,
    0.00464081,
    0.007903982,
    1.3977959,
    0.76626015,
    0.0018270491,
    0.127486,
    1.5125186,
    0.00027894042,
    0.264113,
    0.8692674,
    -0.007745032,
    0.37269455,
    0.14138642,
    -0.006727989,
    -0.432098,
    -0.52608645,
    0.1640911,
    3.3318973,
    0.0058683604,
    -0.0060774824,
    0.004691341,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_2KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    0.52525187,
    0.68951005,
    0.118255995,
    -0.14849867,
    1.7591666,
    1.3327732,
    0.97216195,
    2.4092698,
    1.5784233,
    0.53954166,
    3.0686808,
    1.8879869,
    0.78722537,
    -0.66361123,
    0.28973788,
    2.29642,
    1.2973657,
    1.8799173,
    1.8866334,
    0.55429775,
    0.60472155,
    0.96393263,
    -0.0073812627,
    0.004104538,
    0.0060586967,
    -0.008598236,
    0.0018530292,
    -0.004704423,
    0.005802648,
    0.005024814,
    0.0038007405,
    0.30823997,
    0.5456902,
    1.6897066,
    -0.30282688,
    0.14915824,
    0.25522095,
    0.10925647,
    0.29393807,
    0.13267629,
    -0.3753659,
    1.1657312,
    2.3202531,
    -0.10008486,
    0.15798727,
    0.040105626,
    -0.1896422,
    -0.17581661,
    -0.19062209,
    3.778261,
    0.7697736,
    1.6870061,
    0.49586606,
    1.6960427,
    0.15311494,
    0.8087468,
    0.57287574,
    0.3844483,
    -0.13094622,
    -0.07333737,
    -0.46446043,
    -0.039234836,
    -0.164911,
    -0.007361708,
    -0.9224975,
    1.0626014,
    0.92750317,
    -0.00496279,
    0.007571606,
    -0.9383325,
    -0.46982637,
    -0.0038658213,
    -0.00062850676,
    0.44305655,
    1.1900942,
    -0.00188174,
    0.00081885327,
    0.7777643,
    0.38778353,
    0.0061870757,
    -0.0077467104,
    -0.6771389,
    -0.54363513,
    -0.00032685045,
    -0.00023208652,
    -1.2162477,
    -0.24927859,
    0.0032768678,
    0.0059308577,
    0.10028002,
    0.059464667,
    -0.0057374667,
    0.00015021767,
    -0.84327954,
    -0.69216645,
    -0.00078115705,
    -0.008447227,
    -0.0114967255,
    0.01742178,
    -1.0537069,
    2.338401,
    1.4052104,
    1.6439728,
    1.0744855,
    1.7055484,
    0.039754704,
    0.148431,
    1.042753,
    0.8919349,
    1.2366179,
    1.4153318,
    1.4626195,
    1.052191,
    1.3504659,
    1.5093977,
    0.49827313,
    0.33003923,
    1.0109578,
    0.5654704,
    0.7440112,
    0.866389,
    1.3581356,
    1.6560048,
    2.2246933,
    -0.5452992,
    0.116769455,
    0.025235713,
    0.40390247,
    0.10942934,
    0.1505468,
    -0.00494893,
    0.0074368455,
    -0.0066757104,
    0.004355209,
    -0.0077824043,
    0.0070885587,
    0.008410923,
    1.7187611,
    2.5893004,
    -0.099147506,
    0.21423048,
    0.0031001903,
    -0.002478423,
    -0.04287103,
    -0.17039287,
    0.009418681,
    -0.26001292,
    -0.17895159,
    -0.25340825,
    -0.09706527,
    0.072061434,
    0.091748364,
    0.26746795,
    0.4304274,
    0.3368292,
    -0.04823091,
    -0.67922556,
    0.25389883,
    1.069248,
    0.6049769,
    0.3006292,
    0.09300095,
    -0.12511754,
    -1.447191,
    -0.6892165,
    0.15940753,
    1.08975,
    0.4369605,
    0.25538424,
    0.18628822,
    0.22938178,
    -1.7712433,
    -0.7410094,
    0.18611993,
    1.2082244,
    0.18412933,
    -0.08000751,
    -0.11695919,
    0.31120667,
    0.054189872,
    -0.2563781,
    0.0029043844,
    0.008424118,
    -0.0050589656,
    -0.0051581357,
    0.007047029,
    -0.0010688612,
    -0.007828684,
    0.0054334905,
    -0.006010456,
    -0.0055280733,
    -0.00082149263,
    -0.005897157,
    0.0069459323,
    -0.0069796084,
    -0.0075576873,
    -0.00044307671,
    0.0042860033,
    -0.004753387,
    0.009866308,
    0.0054509398,
    -0.0066909315,
    0.0056339707,
    0.005903894,
    -2.272847,
    -1.8706224,
    -0.78831613,
    -2.8142476,
    -1.7676762,
    -0.81185114,
    -3.1571827,
    -2.109214,
    -0.8213906,
    -0.2007454,
    -1.3227224,
    -1.649546,
    -1.5548195,
    -1.929163,
    -2.334464,
    -1.109758,
    -1.695012,
    -1.6895772,
    -0.00401304,
    -0.0041113687,
    -0.00031996984,
    0.009882869,
    -0.0012246752,
    0.00716334,
    -0.000495675,
    -0.008976857,
    0.0011483384,
    -2.1344213,
    -2.5843785,
    1.1945406,
    0.066085234,
    -0.20564196,
    -0.21861489,
    0.12320059,
    0.21801116,
    0.12656942,
    -0.47297105,
    -1.0256696,
    0.037634406,
    0.12077222,
    -0.14148106,
    -0.17297913,
    0.011867968,
    -0.07482663,
    -0.073418535,
    -2.6225135,
    -0.28750855,
    -1.7585392,
    -0.18308635,
    -1.163933,
    0.15633287,
    -0.65237767,
    -1.0453942,
    -0.83603674,
    -0.5756798,
    -0.14835131,
    -0.004011558,
    -0.8002168,
    -0.55535406,
    -0.09515114,
    0.0007980626,
    -0.9409815,
    -1.2067832,
    0.008264789,
    0.0015326263,
    0.9941272,
    0.026974415,
    0.0023975773,
    -0.0020184517,
    -0.6623293,
    -0.67081404,
    0.0038830638,
    -0.0005412027,
    -0.9356893,
    -0.3927391,
    0.0028945897,
    -0.005422716,
    0.38824996,
    0.62538123,
    -0.0063391924,
    0.0013449714,
    1.350936,
    0.0008298533,
    0.0075244084,
    -0.003553629,
    -0.013877698,
    -0.12196461,
    0.009908594,
    -0.00047137216,
    0.4373162,
    0.29993615,
    -0.0071793436,
    0.0004826784,
    0.46416116,
    -0.5774923,
    -0.36912704,
    -0.5143575,
    0.9768044,
    -1.1894265,
    -0.079493955,
    -0.0044750697,
    -0.0030395158,
    -1.3213454,
    -1.4089684,
    -1.1684248,
    -1.252602,
    -1.1893282,
    -1.5010495,
    -1.8891543,
    -1.2303467,
    -0.34436744,
    -1.3786842,
    -1.8914711,
    -1.7678406,
    -1.8827368,
    -2.433266,
    -1.7427,
    -1.6767193,
    -1.0847648,
    -0.36822158,
    0.7011577,
    -0.022943083,
    -0.11175347,
    -0.021679442,
    -0.009977195,
    -0.13916543,
    0.23725584,
    -0.0057330895,
    0.009055974,
    0.0056207534,
    0.0008187201,
    0.009319432,
    0.005889902,
    -0.2263873,
    -0.50676894,
    0.24534863,
    0.13336088,
    0.002234254,
    0.0092526,
    0.002529331,
    0.4291635,
    0.008827645,
    0.2964644,
    -0.1363078,
    -0.18457003,
    -0.25162697,
    -0.44523716,
    0.086556114,
    0.078648895,
    0.23682399,
    0.015778638,
    -0.05664102,
    0.77785337,
    -0.10690906,
    -0.9582665,
    -0.964888,
    -0.42768508,
    0.08482487,
    0.52449304,
    0.40691075,
    0.011572436,
    -0.73256737,
    -1.2635851,
    -0.5193554,
    -0.01976819,
    0.13001752,
    0.21148689,
    1.2854792,
    0.57078594,
    -0.31008917,
    -1.0536582,
    -0.01698104,
    0.17040232,
    0.38925144,
    0.20025072,
    0.20491023,
    0.3527331,
    0.0011727996,
    0.0015943982,
    0.009848841,
    -0.008626261,
    -0.006473,
    -0.00014788378,
    0.0038305689,
    -0.0051336214,
    -0.0013411185,
    0.00012495555,
    -0.004604163,
    0.0016861744,
    -0.0026721642,
    -0.0049328515,
    -0.008879824,
    0.0062810984,
    0.0053475164,
    -0.008328738,
    -0.005392799,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_2KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    0.3943136,
    0.18061145,
    0.58478254,
    0.20955108,
    -0.050858065,
    -0.35926175,
    -0.44653207,
    -0.73065656,
    0.09427513,
    -0.22169383,
    0.14253579,
    0.68573934,
    0.0024795057,
    -0.0011674287,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    -0.0036976123,
    -0.5301545,
    0.11928395,
    -0.009099176,
    -0.35860667,
    -0.3631283,
    -0.0004463978,
    -3.1725073,
    0.9073584,
    0.49323738,
    -1.9931884,
    -4.1197677,
    -0.41852495,
    0.605869,
    -0.565517,
    0.20833485,
    -0.22906801,
    0.111951925,
    0.13808498,
    -0.017681273,
    0.44554645,
    1.3429548,
    -0.084242895,
    -0.16468316,
    -0.22000237,
    -0.5266134,
    0.008436263,
    -0.0064912676,
    -0.009093427,
    -0.0021902225,
    0.03663564,
    -0.36105096,
    0.3467228,
    1.8812711,
    -0.4664851,
    -0.33598807,
    -0.22067831,
    0.048443887,
    -0.009686177,
    -0.0044610286,
    0.00023165438,
    -0.0066721607,
    1.3862629,
    0.4546716,
    0.0059434753,
    -2.2369518,
    0.27277353,
    -0.009553656,
    -0.7722251,
    -0.08133188,
    -0.0015310142,
    2.4371688,
    0.56703573,
    0.00049108546,
    0.91511387,
    0.97452575,
    0.0039425613,
    -0.44155678,
    -1.042733,
    -0.0027044103,
    1.1040425,
    0.23058835,
    -0.006842167,
    -4.172073,
    -1.582955,
    -0.005462606,
    -0.510833,
    -0.09080436,
    0.0029457593,
    2.091185,
    -2.4314613,
    0.0072805397,
    -0.0484018,
    -0.26912317,
    0.00075819716,
    -0.732989,
    0.5876334,
    -0.0076902844,
    2.1689034,
    0.12281019,
    1.8247634,
    -0.0066590877,
    0.46993285,
    -4.113217,
    -0.9047185,
    0.49407306,
    1.4291903,
    0.40730026,
    -0.009206254,
    0.28880513,
    0.84532565,
    0.19536288,
    0.23495507,
    -0.44976735,
    0.5735469,
    -0.002588279,
    0.003598757,
    0.0023489352,
    0.008467235,
    0.0053362483,
    0.005503459,
    0.009021362,
    -0.009674854,
    0.41431403,
    0.015798878,
    0.002391248,
    -0.009936645,
    0.14948043,
    0.0600065,
    0.0049333787,
    -2.2268815,
    -1.8622481,
    0.0012369892,
    -0.115365006,
    0.21826734,
    -0.00012632087,
    0.0043307636,
    -1.412484,
    -0.25487438,
    -0.00241462,
    0.0046542455,
    0.06649391,
    -1.21339,
    0.3594124,
    1.4046571,
    1.9304566,
    2.1321154,
    1.7925231,
    0.74336445,
    -1.6640275,
    -0.5832565,
    0.28721592,
    0.8524066,
    0.057864595,
    0.009905014,
    -0.6906233,
    -0.9760784,
    -1.831361,
    -0.6590513,
    -1.8417495,
    -0.21858276,
    -1.1291395,
    -1.0901203,
    0.42382523,
    -0.08523051,
    -0.0015463233,
    0.00464081,
    0.007903982,
    1.4365361,
    0.45041865,
    0.0018270491,
    -0.83433586,
    1.1144519,
    0.00027894042,
    0.73872536,
    0.8482265,
    -0.007745032,
    0.46524692,
    0.10096835,
    -0.006727989,
    -0.3250265,
    -0.16667265,
    0.13022223,
    3.2578,
    0.0058683604,
    -0.0060774824,
    0.004691341,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_0KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    1.196813,
    2.147385,
    1.2525518,
    1.5435321,
    0.8159286,
    0.8106252,
    0.85074157,
    0.7729565,
    0.7354641,
    0.752382,
    0.68609524,
    0.5597182,
    0.34420305,
    1.7311233,
    1.4710789,
    1.3606308,
    1.1174877,
    1.0405575,
    0.986831,
    2.5417347,
    2.2569497,
    2.042051,
    1.6993638,
    1.5961936,
    1.511021,
    -0.7229247,
    -0.87134296,
    -0.34269434,
    -0.5809322,
    0.53436047,
    0.4742004,
    1.1764612,
    1.2641997,
    1.2542868,
    1.7832735,
    1.8761928,
    2.325426,
    0.3739956,
    1.1419506,
    1.2222414,
    1.4338154,
    1.4690233,
    1.7089587,
    -1.0131919,
    0.02750925,
    0.99569803,
    0.38243267,
    0.9209924,
    1.1325895,
    -0.4943648,
    0.14929195,
    0.16952553,
    0.7989076,
    0.9860711,
    1.4728346,
    -0.47494355,
    -0.35763377,
    -0.3041266,
    -0.44564915,
    -0.27976885,
    -0.10452401,
    0.6208751,
    0.75141066,
    -0.42961642,
    -0.6578694,
    -0.32397678,
    -0.08449785,
    0.26282933,
    0.1368152,
    0.15049294,
    0.1883585,
    0.25649753,
    0.2975119,
    0.44370887,
    0.65818715,
    0.67739683,
    0.65580934,
    0.7113937,
    0.7773355,
    0.31339929,
    0.25404292,
    0.12783037,
    0.14472155,
    0.10002973,
    0.45982844,
    0.067110024,
    0.22108771,
    0.20441382,
    0.2948754,
    0.27667835,
    0.2833175,
    0.40560597,
    0.55626714,
    0.50669926,
    0.54098034,
    0.5464544,
    0.56810534,
    2.5406878,
    0.3025869,
    1.4303752,
    0.19180873,
    1.1396976,
    -0.06347446,
    0.39649057,
    0.7294534,
    0.52110064,
    -0.05510337,
    -0.13529108,
    -0.43168902,
    0.34662366,
    -0.08514227,
    -0.17021984,
    -0.6178272,
    0.9540677,
    1.1200078,
    1.2594148,
    1.0455025,
    0.302188,
    0.7769355,
    1.0804762,
    1.3262224,
    0.25850502,
    0.38742363,
    0.7546404,
    0.6244989,
    0.9041746,
    0.45073897,
    -1.3106656,
    0.6748463,
    -0.64763695,
    -0.6425281,
    -0.43057734,
    -0.560307,
    -0.69483566,
    0.40139782,
    0.3803799,
    -0.06292085,
    -0.055654455,
    -0.010150911,
    -0.027480328,
    0.093447514,
    -0.7730492,
    -0.85228205,
    -1.1018707,
    -0.80991507,
    0.04381438,
    -0.06466016,
    -0.012827134,
    0.9363372,
    0.9670888,
    1.1799208,
    1.3401917,
    0.4951423,
    0.08526957,
    1.0176783,
    1.2217879,
    1.3150336,
    1.3683263,
    1.4605994,
    1.5341598,
    1.705585,
    1.6629876,
    2.0530975,
    1.019812,
    0.8857418,
    1.1323825,
    1.3732207,
    1.6188091,
    1.9744984,
    2.0238097,
    2.32201,
    1.9295881,
    -0.3174071,
    -0.10993349,
    0.013884477,
    0.42196295,
    0.17963658,
    0.20416148,
    -0.0021617166,
    1.7686125,
    0.22426264,
    0.061349902,
    0.19913699,
    0.020851348,
    -0.069351755,
    2.3142107,
    2.9042602,
    -0.031618122,
    0.2664709,
    0.9420256,
    1.5510353,
    0.022029558,
    -0.22142822,
    -0.16721624,
    -0.0069796084,
    -0.9437429,
    -0.435119,
    -0.060073707,
    0.44011593,
    1.018721,
    0.073062584,
    -0.009989337,
    0.3955358,
    0.9444291,
    1.3182713,
    0.046033505,
    -0.91073114,
    -0.07425168,
    0.8090164,
    1.4404572,
    0.025818683,
    -1.1614962,
    -0.27209163,
    0.7805247,
    1.5584604,
    -0.031086922,
    -0.3843227,
    -0.16816096,
    -0.01864428,
    0.44556057,
    -1.178155,
    -1.06178,
    -0.3659792,
    0.4208466,
    1.2605121,
    -1.3277913,
    -1.0783472,
    -0.278178,
    0.61296564,
    1.4728854,
    0.18788007,
    -0.0605375,
    0.10896111,
    0.47454253,
    0.81806046,
    -1.0984803,
    -1.039684,
    -0.27460274,
    0.62693465,
    1.4486213,
    -1.4086338,
    -1.1196733,
    -0.2637025,
    0.7161684,
    1.7642037,
    -0.017652258,
    0.27439508,
    0.49912363,
    0.18142056,
    0.44559357,
    0.5669523,
    0.091077976,
    0.122591145,
    0.043361943,
    -0.22064613,
    -0.107763454,
    0.12772202,
    -0.93951863,
    -0.48010385,
    -0.46007398,
    -0.3579957,
    -0.21864966,
    -0.30650228,
    -0.006632633,
    -0.00079724286,
    -0.001203401,
    -0.001678803,
    0.008264789,
    0.0015326263,
    -0.006872382,
    -0.0035781572,
    0.0023975773,
    -0.0020184517,
    -0.00068451837,
    -0.0031730435,
    -0.59719783,
    -0.7169829,
    -0.4504656,
    -0.48829833,
    -0.37444133,
    -0.37073565,
    -1.8127528,
    -1.3393819,
    -1.4153965,
    -1.0793953,
    -1.1171643,
    -0.8953199,
    -2.6885939,
    -2.048247,
    -1.9652423,
    -1.6168728,
    -1.5272992,
    -1.4660542,
    0.8836757,
    0.6239415,
    -0.10675414,
    -0.64831555,
    -0.000117003634,
    0.5292693,
    -0.6006094,
    -1.0255533,
    -1.2132746,
    -1.7357997,
    -1.8923441,
    -2.0034897,
    -0.71376175,
    -0.83912104,
    -0.9931064,
    -1.2853303,
    -1.4485689,
    -1.3655131,
    0.7337959,
    0.5386345,
    0.50120294,
    -0.48208863,
    -0.6620747,
    -0.8864416,
    -0.019644657,
    -0.081187315,
    -0.061428227,
    -0.8423867,
    -1.2044727,
    -1.5505245,
    -0.38405898,
    -0.1585598,
    -0.14347242,
    -0.3321643,
    -0.26869565,
    -0.6661586,
    -0.13000467,
    -0.97031945,
    -0.5426394,
    0.19519529,
    0.8603658,
    0.014862907,
    -0.33315665,
    -0.44372496,
    -0.42823845,
    -0.3868975,
    -0.41059002,
    -0.27999705,
    -0.5407013,
    -0.73204476,
    -0.7601025,
    -0.70695287,
    -0.7202301,
    -0.8454061,
    -0.438591,
    -0.39496598,
    -0.004735442,
    -0.13257423,
    0.14615427,
    0.117169544,
    -0.1019094,
    -0.20011722,
    -0.08452672,
    -0.27107158,
    -0.29630283,
    -0.28160006,
    -0.46760178,
    -0.5101951,
    -0.5308713,
    -0.5956938,
    -0.5460678,
    -0.5906477,
    -2.4145792,
    -0.5045854,
    -1.2256825,
    -0.22259712,
    -0.95435256,
    0.03924498,
    -0.21294253,
    -0.3799368,
    -1.0756669,
    -0.013070454,
    0.29895473,
    0.08554671,
    -0.70322967,
    -0.04448177,
    0.3732324,
    0.58071166,
    -0.9124023,
    -0.9209816,
    -0.96066546,
    -1.499808,
    -0.09171549,
    -0.5642357,
    -0.30628252,
    -0.43701392,
    -0.2549299,
    -0.46845308,
    -0.8737495,
    -0.3650252,
    -0.69937474,
    -0.42542765,
    -1.3239977,
    -0.43602642,
    0.5959484,
    0.4784313,
    0.17991538,
    0.5476931,
    0.6363799,
    0.18790261,
    0.75138557,
    0.10528716,
    0.08687811,
    -0.029260278,
    -0.37032694,
    -0.09937968,
    0.7109928,
    0.727058,
    1.4309665,
    0.5682886,
    0.24913257,
    0.22204065,
    -0.60410225,
    -0.63919044,
    -0.90622383,
    -1.2710884,
    -0.302677,
    -0.12308367,
    0.0018291076,
    -1.0927283,
    -1.1233913,
    -1.2293359,
    -1.3698388,
    -1.3470405,
    -1.4552686,
    -1.5807644,
    -1.7043709,
    -2.0856297,
    -1.029768,
    -1.1572393,
    -1.3246717,
    -1.6468236,
    -1.9832667,
    -2.104935,
    -2.4153187,
    -2.4513664,
    -2.1084793,
    0.25921598,
    0.12541114,
    -0.04156143,
    -0.23071072,
    -0.102646194,
    -0.13608162,
    -0.023615586,
    -1.5928775,
    -0.352665,
    -0.0029025883,
    -0.08678213,
    -0.090199634,
    0.22445844,
    -1.5149714,
    -2.9121416,
    -0.05178563,
    -0.013168632,
    -0.21295045,
    -1.2297513,
    -0.030210463,
    0.22569647,
    0.17588963,
    0.016745556,
    0.9039596,
    0.5613608,
    0.07380435,
    -0.48720396,
    -1.0688034,
    0.07671167,
    0.1235085,
    -0.20781925,
    -0.71381265,
    -1.2384914,
    0.051861178,
    0.9691609,
    0.022767732,
    -0.8678577,
    -1.5677501,
    0.030598586,
    1.1607652,
    0.25351772,
    -0.7863478,
    -1.5588385,
    0.046705823,
    0.41578168,
    0.12910683,
    -0.0854443,
    -0.4135135,
    1.2515894,
    1.1576179,
    0.33219135,
    -0.4362205,
    -1.2898526,
    1.3040986,
    1.04525,
    0.22351176,
    -0.56744176,
    -1.481952,
    -0.28406838,
    0.09639718,
    -0.06640034,
    -0.5087065,
    -0.94579315,
    1.1917287,
    1.0865977,
    0.28797016,
    -0.65247655,
    -1.470224,
    1.4282557,
    1.1543663,
    0.22380283,
    -0.7750405,
    -1.6495152,
    -0.03463815,
    -0.42070848,
    -0.76835984,
    -0.10178234,
    -0.3349951,
    -0.63667834,
    0.12263701,
    -0.13314337,
    -0.13226153,
    0.15973982,
    0.3719807,
    0.17987633,
    0.6688497,
    0.4115776,
    0.48799163,
    0.364243,
    0.26315048,
    0.39107242,
    0.005306828,
    -0.00012632087,
    0.0043307636,
    0.0066054463,
    -0.0020516347,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_0KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    -0.11793497,
    0.21437576,
    -0.04883923,
    0.25927854,
    0.061903562,
    -0.18146506,
    -0.0075725405,
    0.03801567,
    -0.010113764,
    0.27113137,
    0.09478642,
    -0.062021665,
    -0.36709636,
    -0.32017314,
    -0.1402449,
    0.06541416,
    0.20641492,
    0.5151484,
    -0.054594677,
    -0.2500846,
    -0.19914313,
    0.070943646,
    0.08671777,
    0.03239712,
    -2.8437676,
    -0.95312124,
    -0.7688486,
    0.79342145,
    1.2734215,
    2.4247067,
    -0.9977136,
    -1.3795936,
    -1.4982532,
    0.61307234,
    1.3702607,
    2.7223184,
    -0.37494516,
    0.03549601,
    -0.09760828,
    -0.3794143,
    -0.14341561,
    -0.31428483,
    -2.9800484,
    1.2591075,
    0.5381112,
    -3.0349255,
    -2.9477236,
    0.18412289,
    0.49431384,
    -0.17507723,
    0.123433284,
    -0.02547962,
    0.07679289,
    0.039856795,
    -0.24362414,
    0.051281545,
    0.49054784,
    0.6617373,
    -0.15256308,
    -0.15994638,
    -0.08037143,
    -0.16542096,
    -0.25586674,
    0.18822104,
    0.009949234,
    0.34525353,
    1.3057432,
    -0.3730551,
    0.3118821,
    -0.16725719,
    0.046332907,
    0.45347622,
    0.3821705,
    -0.42868644,
    -0.48400784,
    -0.44190013,
    0.050842233,
    0.50024694,
    -0.893187,
    -0.7630204,
    -0.48632956,
    0.35441148,
    3.2719243,
    1.0869517,
    -0.31073424,
    0.85877234,
    -1.0883449,
    -0.49062216,
    -1.1001079,
    -0.030305615,
    0.5105574,
    0.12525618,
    0.9122733,
    -0.2732323,
    -1.3981465,
    1.6180842,
    0.73458505,
    0.8718207,
    -0.30648082,
    -1.0271443,
    -0.30988607,
    0.65519005,
    0.94614565,
    1.1009567,
    -1.0215496,
    -1.2488576,
    0.088731244,
    -0.42115593,
    0.18527831,
    0.35351327,
    1.2306124,
    -1.0974326,
    -0.2990367,
    -0.11601433,
    -0.15420517,
    -0.278151,
    0.42041886,
    0.22620167,
    2.5588825,
    2.349071,
    0.46296015,
    2.1869948,
    0.6870208,
    0.5711653,
    -4.0631833,
    -0.5277513,
    0.46074432,
    1.381454,
    0.34378892,
    0.38805613,
    0.15643194,
    0.32867536,
    0.3021466,
    0.20724532,
    -0.13958895,
    0.4083073,
    -0.00086154987,
    0.39879954,
    0.054775994,
    -1.3966501,
    -0.21905294,
    0.7421334,
    -0.25203884,
    -0.101422615,
    0.21036434,
    0.055442095,
    0.008049341,
    -0.0089264605,
    0.26847368,
    0.22165969,
    1.5350233,
    -2.1744208,
    -1.2768663,
    -1.5348227,
    -0.15130378,
    -0.1245368,
    0.3675113,
    0.7483129,
    -1.805354,
    -1.3316681,
    -0.6246149,
    0.61974305,
    0.091598615,
    -1.3525933,
    0.53083706,
    1.3176025,
    1.5907333,
    1.1803939,
    1.556569,
    0.23932259,
    -0.8922736,
    -0.32017213,
    0.6086812,
    1.351439,
    1.4361107,
    0.026633555,
    -1.2328862,
    -0.78114396,
    -0.9246081,
    -0.92170733,
    -1.2237592,
    -0.33377716,
    -1.298514,
    -3.1545963,
    0.36654273,
    -0.024093384,
    -0.09451959,
    0.03684486,
    0.1829067,
    0.17311259,
    0.47496745,
    -0.4593895,
    0.021282528,
    1.6392026,
    0.7739878,
    1.2871362,
    -0.094034925,
    1.5290914,
    1.8731074,
    0.46720943,
    1.0836908,
    0.61970013,
    0.38973257,
    0.40901425,
    0.16338988,
    0.21940354,
    0.12731749,
    0.82287467,
    3.0876734,
    0.005671896,
    0.00989354,
    -0.004792163,
    -0.006346903,
    0.0052919174,
    -0.009440007,
    1.08890235e-5,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_2KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    0.744421,
    0.88778675,
    0.18981418,
    0.2862533,
    -0.058998063,
    -0.17330426,
    0.074028395,
    0.7845727,
    0.6048966,
    0.626208,
    0.54475653,
    0.4562622,
    0.082769744,
    1.74634,
    1.3666561,
    1.4895221,
    1.0369438,
    1.1312525,
    0.92800456,
    2.3937767,
    1.8380368,
    1.8571601,
    1.2725054,
    1.2556088,
    1.3062816,
    -1.2137636,
    -0.83562547,
    -2.0052252,
    -1.1690018,
    -0.5234365,
    -0.34709084,
    0.9618222,
    1.084642,
    1.022162,
    1.3318293,
    1.5152484,
    1.3654702,
    0.33157194,
    0.599315,
    0.6151848,
    0.6973882,
    0.7310851,
    0.95719385,
    0.43382195,
    0.26700947,
    0.008446065,
    0.99933743,
    0.98524755,
    0.98493814,
    0.0806228,
    0.17379422,
    0.26464275,
    0.56021935,
    0.9846464,
    1.1222295,
    0.12776034,
    -0.4717977,
    -0.40562615,
    -0.6414424,
    -0.44087347,
    -0.26145622,
    0.65368724,
    0.5607279,
    0.31702635,
    -0.74098617,
    -0.26065114,
    -0.1269282,
    0.2665912,
    0.26773423,
    0.3442091,
    0.3925113,
    0.3999259,
    0.48486236,
    0.43040037,
    0.49894878,
    0.564583,
    0.5212924,
    0.60195416,
    0.47685096,
    0.17494495,
    0.14465174,
    0.26879606,
    0.3938066,
    0.23400177,
    0.40032423,
    0.12610342,
    0.21381436,
    0.18393128,
    0.27702487,
    0.3204278,
    0.2351231,
    0.23765653,
    0.25391853,
    0.2558927,
    0.31698757,
    0.34073994,
    0.29997724,
    3.089301,
    0.53449863,
    1.2918159,
    0.40113723,
    1.1024193,
    0.17060605,
    0.21864207,
    0.61604065,
    0.5344227,
    -0.055580087,
    -0.09383589,
    -0.17392153,
    0.16481912,
    -0.06207179,
    -0.06620441,
    -0.24377458,
    0.8397131,
    0.8445602,
    1.5661404,
    0.7679617,
    -0.37035972,
    0.57294464,
    -0.007953096,
    1.354521,
    0.25903484,
    0.38783583,
    0.58024687,
    0.45287362,
    0.51430756,
    0.13773961,
    0.68248796,
    0.30515945,
    -0.53776413,
    -0.4262115,
    -0.4688175,
    -0.4456564,
    -0.5759159,
    -0.22260056,
    0.58492684,
    -0.17645946,
    -0.059207883,
    0.06339653,
    0.008202185,
    0.10437323,
    -0.72766876,
    -0.6303598,
    -0.7223325,
    -0.70299816,
    0.025211371,
    -0.12206734,
    -0.24198774,
    0.9001239,
    1.2687281,
    1.3633974,
    1.178136,
    0.8082346,
    0.14055654,
    0.5660956,
    0.8936381,
    1.0511028,
    1.3132452,
    1.2796816,
    1.289973,
    1.2923594,
    1.2740294,
    1.3668749,
    1.0886523,
    1.0372819,
    1.0769991,
    1.0295774,
    1.1087018,
    1.3980274,
    1.4939495,
    1.7145919,
    1.9305323,
    -0.30735326,
    -0.09889909,
    0.0003220055,
    0.27798787,
    0.034652475,
    0.13984744,
    -0.012005497,
    1.8012823,
    0.30355674,
    0.031956647,
    0.12562132,
    0.048491966,
    -0.16146496,
    2.5794253,
    3.6987255,
    0.008829914,
    0.34637317,
    0.5668086,
    1.3701355,
    0.015819738,
    -0.17071486,
    -0.14785153,
    -0.0069796084,
    -0.7295656,
    -0.42786813,
    -0.11269894,
    0.36067978,
    0.8709615,
    -0.13262066,
    -0.19536945,
    0.10862384,
    0.54673153,
    0.8598621,
    0.056707274,
    -0.8965826,
    -0.16097462,
    0.6358394,
    1.3131495,
    0.026459135,
    -0.9140821,
    -0.20510238,
    0.73009384,
    1.3667091,
    -0.045369256,
    -0.40217578,
    -0.2227599,
    -0.08854404,
    0.1902847,
    -1.0764203,
    -0.96149087,
    -0.31518042,
    0.38785297,
    1.1435213,
    -1.0830243,
    -0.9459228,
    -0.2848101,
    0.43056408,
    1.1355504,
    0.35632733,
    -0.08038181,
    0.014696894,
    0.24234797,
    0.5592285,
    -1.0142434,
    -0.86357045,
    -0.21869119,
    0.56187165,
    1.3403852,
    -1.105331,
    -0.94999355,
    -0.18867342,
    0.5981654,
    1.3521897,
    -0.034198068,
    0.09746,
    0.26796356,
    -0.0026246773,
    0.04439071,
    0.27342275,
    -0.04317298,
    0.019473845,
    -0.007828881,
    -0.32712469,
    -0.49703285,
    -0.23127675,
    -0.5665348,
    -0.302965,
    -0.23688069,
    -0.13449545,
    -0.046174936,
    -0.40877584,
    -0.006632633,
    -0.00079724286,
    -0.001203401,
    -0.001678803,
    0.008264789,
    0.0015326263,
    -0.006872382,
    -0.0035781572,
    0.0023975773,
    -0.0020184517,
    -0.00068451837,
    -0.0031730435,
    -0.6890998,
    -0.8422213,
    -0.7386834,
    -0.3932265,
    -0.28177455,
    -0.18490753,
    -1.9067286,
    -1.4779525,
    -1.431873,
    -1.0258085,
    -1.0222512,
    -0.9747136,
    -2.5293505,
    -1.924936,
    -1.8385903,
    -1.2882059,
    -1.294973,
    -1.2079747,
    0.40012774,
    0.75190586,
    0.5110061,
    -0.44503614,
    -0.5784066,
    -0.038622703,
    -0.9823419,
    -1.3307447,
    -1.2927109,
    -1.7946016,
    -1.8335941,
    -1.8763372,
    -0.825324,
    -1.12254,
    -1.1253926,
    -1.3199674,
    -1.4413863,
    -1.4987608,
    0.27371582,
    0.4044831,
    0.53309673,
    -0.024436468,
    -0.2511689,
    -0.37582758,
    -0.13860494,
    -0.39867878,
    -0.27653322,
    -0.80177706,
    -1.011813,
    -1.4135803,
    -0.48891598,
    -0.29734626,
    -0.37990573,
    -0.1987239,
    -0.41437307,
    -0.42882216,
    -0.6022456,
    -1.0421313,
    -0.1582915,
    0.114152655,
    0.32787904,
    0.15919533,
    -0.13492517,
    -0.45579213,
    -0.537462,
    -0.39920998,
    -0.504219,
    -0.48965558,
    -0.37592462,
    -0.41367877,
    -0.4956509,
    -0.42401612,
    -0.46312618,
    -0.37125257,
    -0.002233495,
    -0.5795715,
    0.01374164,
    -0.054260116,
    0.039712403,
    -0.39108703,
    -0.07531973,
    -0.20618689,
    -0.21745306,
    -0.27325374,
    -0.31516618,
    -0.2630365,
    -0.27431017,
    -0.31168717,
    -0.35701105,
    -0.3068624,
    -0.3538997,
    -0.3325884,
    -2.7611673,
    -0.47310945,
    -1.7311555,
    -0.15729605,
    -1.040355,
    0.13515732,
    -0.33171695,
    -0.6078026,
    -1.0252293,
    -0.6661697,
    -0.34603974,
    -0.19738494,
    -0.8891,
    -0.5245224,
    -0.24980372,
    0.016606582,
    -0.81107867,
    -0.99732196,
    -1.6515212,
    -1.1417959,
    0.19855173,
    -0.46242657,
    -1.0172958,
    -0.8311344,
    -0.26351708,
    -0.27482694,
    -0.13788274,
    -0.3109098,
    -0.6970051,
    -0.26916215,
    -0.42706814,
    -0.3064,
    0.48570406,
    0.46850973,
    0.6564051,
    0.30427694,
    0.49796513,
    -0.13026854,
    -0.23146811,
    0.33738294,
    0.089694016,
    -0.022535278,
    -0.06637164,
    -0.07737743,
    0.47908857,
    0.5537233,
    0.81925374,
    0.49501723,
    0.045486353,
    -0.44635218,
    -0.10931311,
    0.026395878,
    -0.43754277,
    -0.5630856,
    -0.17119528,
    -0.06205942,
    -0.0065732417,
    -1.2759963,
    -1.1266135,
    -1.1517131,
    -1.2090644,
    -1.107018,
    -1.3281474,
    -1.6200341,
    -1.8610084,
    -1.0447512,
    -1.0338696,
    -1.3874451,
    -1.3862191,
    -1.5800074,
    -1.7262486,
    -1.7044166,
    -1.7430825,
    -1.7526973,
    -1.7826265,
    0.28257138,
    0.12672566,
    0.0030841678,
    -0.24566321,
    -0.02501938,
    -0.15867135,
    0.1032163,
    -0.933846,
    0.14618368,
    -0.024784926,
    -0.09912079,
    -0.046111096,
    0.099384725,
    -1.3249024,
    -2.2110765,
    0.05497332,
    0.016297346,
    -0.6877832,
    -1.1818271,
    -0.03194345,
    0.25894293,
    0.21984458,
    0.0046677087,
    0.6546359,
    0.39375478,
    0.0418807,
    -0.3606342,
    -0.7928083,
    -0.12897182,
    -0.21718425,
    -0.35359713,
    -0.52843857,
    -0.82305074,
    0.06253487,
    0.84164083,
    0.113564834,
    -0.66943085,
    -1.3027228,
    0.03123934,
    0.91864353,
    0.21222329,
    -0.5762596,
    -1.3860683,
    -0.52564937,
    -0.06011067,
    -0.068493955,
    -0.060986634,
    -0.47422525,
    1.0313395,
    0.8524793,
    0.20298935,
    -0.45689675,
    -1.1592506,
    1.1066505,
    0.82603735,
    0.17178519,
    -0.52049583,
    -1.3742176,
    -0.4236264,
    -0.1176367,
    -0.15337686,
    -0.257942,
    -0.27774143,
    1.1600782,
    0.88118297,
    0.21630758,
    -0.54974115,
    -1.2736688,
    1.2861251,
    0.9709121,
    0.23602588,
    -0.57850075,
    -1.3774083,
    -0.09392878,
    -0.17309879,
    -0.35164455,
    -0.06962184,
    -0.26754197,
    -0.11006782,
    -0.033609197,
    0.011213157,
    0.22195265,
    0.12318727,
    0.13267997,
    0.037741356,
    0.46160907,
    0.03149537,
    0.25664428,
    0.09757549,
    0.06850445,
    0.19736391,
    0.005306828,
    -0.00012632087,
    0.0043307636,
    0.0066054463,
    -0.0020516347,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_2KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    0.17661038,
    0.24649148,
    0.23894231,
    0.3067104,
    0.25984365,
    -0.14077653,
    -0.04630631,
    0.0917402,
    0.028654763,
    -0.060780603,
    -0.06939649,
    -0.4058417,
    -0.33354628,
    -0.46107665,
    -0.5490038,
    -0.30740386,
    -0.31801715,
    -0.30688688,
    0.09212885,
    0.18231872,
    -0.023758773,
    0.519808,
    0.53912234,
    0.5008239,
    -1.4427401,
    -0.54509526,
    -1.4383295,
    1.4281652,
    1.7821811,
    2.261059,
    -3.728571,
    -1.8645201,
    -2.4816272,
    1.1098973,
    2.1209862,
    2.8238394,
    -0.5298148,
    0.1824469,
    -0.07103234,
    -0.23897052,
    -0.1760404,
    -0.2640779,
    -3.29527,
    1.1508474,
    0.31949195,
    -2.42814,
    -3.3474925,
    0.07517031,
    0.45412636,
    -0.28490064,
    0.101369664,
    -0.09574341,
    0.083831295,
    0.04672612,
    -0.20723473,
    0.07090517,
    0.40287066,
    0.915216,
    -0.20158708,
    -0.21656896,
    -0.18878855,
    -0.20251,
    -0.2278879,
    0.1959823,
    -0.024452446,
    -0.0028454443,
    0.62562567,
    -0.77935636,
    0.3478002,
    -0.19998679,
    0.04453749,
    0.5624874,
    0.5005665,
    -0.3224123,
    -0.43166265,
    -0.44132322,
    0.00471621,
    0.16473931,
    -1.4061816,
    -1.0410186,
    -0.99031985,
    -0.45280537,
    3.9131315,
    0.9494158,
    0.072035275,
    1.1240323,
    -0.5396894,
    -0.88316214,
    0.5663828,
    -0.17020877,
    0.033189554,
    -0.6419815,
    0.97963685,
    0.66638553,
    0.09374334,
    1.2518594,
    0.75466925,
    1.7479606,
    0.12898539,
    -0.84059423,
    -0.039282706,
    0.52861893,
    1.0476724,
    1.4950726,
    -0.8920097,
    -1.5020694,
    0.69630593,
    -0.2964616,
    0.34628886,
    1.5140724,
    0.6301756,
    -1.852764,
    -2.425559,
    -0.04846165,
    -0.12268173,
    -0.43723372,
    0.15229218,
    0.29728967,
    3.370477,
    2.237656,
    0.3273497,
    2.486935,
    0.2949281,
    0.48234165,
    -4.5248756,
    -0.82536167,
    0.5777862,
    1.4931029,
    0.5061666,
    0.27251577,
    0.13577826,
    0.43011624,
    0.32543615,
    0.14661272,
    -0.10855395,
    0.40094942,
    0.009685473,
    0.34427014,
    0.17820528,
    -0.840961,
    0.3826559,
    0.58562243,
    -0.2996011,
    -0.16233656,
    0.21131018,
    0.08790922,
    0.008049341,
    -0.0089264605,
    0.395546,
    0.09694849,
    1.3865244,
    -2.4323747,
    -1.5170131,
    -1.9196242,
    -0.21400799,
    -0.02758022,
    0.25224364,
    0.7061005,
    -2.21496,
    -1.4054832,
    -0.5762039,
    0.68663645,
    0.112314366,
    -1.1965805,
    0.50381076,
    1.2721349,
    1.575477,
    1.2979151,
    1.4246314,
    -0.15289392,
    -0.66274375,
    -0.35935938,
    0.590911,
    1.2622321,
    1.4439147,
    0.67951304,
    -1.5842838,
    -0.92185,
    -0.9214341,
    -0.94965136,
    -1.1887834,
    -0.35840398,
    -1.577504,
    -2.4455132,
    0.36386544,
    -0.022446066,
    -0.09630904,
    0.0519066,
    0.13425647,
    -0.023754084,
    0.03208194,
    0.13133956,
    -0.050105304,
    1.7137936,
    0.7408801,
    1.2881265,
    -0.06049422,
    1.5455464,
    1.9007682,
    0.42004195,
    0.96065533,
    0.6151572,
    0.32228974,
    0.37553608,
    0.1668869,
    0.30978364,
    -0.29428196,
    0.79108864,
    3.0373583,
    0.005671896,
    0.00989354,
    -0.004792163,
    -0.006346903,
    0.0052919174,
    -0.009440007,
    1.08890235e-5,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_0KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.52595997,
    1.3535309,
    0.724029,
    0.74913675,
    0.3465033,
    0.22406225,
    0.10147476,
    0.51619333,
    0.52895916,
    0.63101655,
    0.5373952,
    0.6282629,
    0.57131356,
    1.5201395,
    1.3556314,
    1.3617207,
    1.3040144,
    1.2914932,
    1.2206461,
    2.233889,
    1.925945,
    1.866241,
    1.6920065,
    1.6267836,
    1.6153704,
    -0.39434454,
    -0.9424804,
    -0.1274271,
    0.16334726,
    -0.0032635003,
    0.94729453,
    0.9317901,
    1.2318139,
    1.2932904,
    1.4461478,
    1.4937698,
    1.5398873,
    0.8331274,
    1.0385038,
    0.90423673,
    1.2095138,
    1.2117862,
    1.3965455,
    -0.08656884,
    0.2187755,
    0.11128988,
    0.15423444,
    0.60006636,
    0.98438233,
    -1.1020019,
    0.039495148,
    0.28320768,
    0.39903596,
    0.68609923,
    0.9670127,
    -0.21783319,
    -0.047795523,
    -0.17414181,
    -0.06811051,
    0.15009587,
    0.33872402,
    -0.3164961,
    0.05545119,
    -0.10951722,
    0.12360749,
    0.11728147,
    -0.08912331,
    0.11507089,
    0.19572417,
    0.17194529,
    0.2570856,
    0.3066101,
    0.3675468,
    0.434712,
    0.5121179,
    0.5737471,
    0.5385083,
    0.614181,
    0.5963681,
    -0.15452181,
    0.007858729,
    0.009366114,
    0.135558,
    0.13910621,
    0.2639657,
    0.030736247,
    0.15222622,
    0.18794899,
    0.241139,
    0.2836103,
    0.31829506,
    0.34608325,
    0.44119486,
    0.41307902,
    0.48001048,
    0.5132451,
    0.5060837,
    1.5009851,
    0.4601835,
    0.99510497,
    0.14758614,
    0.8519268,
    -0.0623111,
    0.204336,
    0.58907086,
    0.6383172,
    -0.03405932,
    0.007825993,
    -0.30306336,
    0.36040404,
    0.0304293,
    -0.039017145,
    -0.5426542,
    0.8270301,
    1.0397471,
    0.1863184,
    1.0410641,
    0.35038254,
    0.4938865,
    0.22994144,
    0.7428441,
    0.13113812,
    0.20379113,
    0.7975095,
    0.27212426,
    0.76654464,
    0.18135105,
    0.028179264,
    0.39913267,
    -0.61256915,
    -0.45200872,
    0.085620835,
    -0.45015362,
    -0.6125517,
    -0.08466356,
    0.40042287,
    -0.10898262,
    -0.028807845,
    0.04793375,
    -0.24730067,
    0.06898127,
    -0.6154962,
    -0.6158076,
    -0.9350872,
    -0.6967203,
    -0.12582874,
    -0.08909451,
    0.2683344,
    0.3707741,
    0.3531516,
    0.5478455,
    1.0598999,
    0.5145541,
    0.22600923,
    0.645275,
    0.92331475,
    1.0003363,
    1.1224816,
    1.2468545,
    1.2218863,
    1.3560693,
    1.5221082,
    1.4420515,
    0.777979,
    0.8670666,
    1.0415566,
    1.2485416,
    1.3144068,
    1.4518961,
    1.5865961,
    1.5250385,
    1.8322215,
    -0.26544693,
    -0.08031994,
    0.058443584,
    0.3021199,
    0.10074443,
    0.20166846,
    0.07706084,
    0.88984835,
    0.42444652,
    0.014183425,
    0.12173109,
    0.08796081,
    -0.1845155,
    0.73860896,
    1.4294312,
    0.049636867,
    0.27900037,
    0.38718253,
    1.0870295,
    0.037029885,
    -0.17336018,
    -0.13881645,
    -0.0069796084,
    -0.4918545,
    -0.2977804,
    -0.18680893,
    -0.015400371,
    0.27685526,
    0.6062593,
    0.12692203,
    -0.20567316,
    -0.021743663,
    0.24276492,
    0.6301729,
    0.8846822,
    -0.0030065326,
    -0.5578576,
    -0.17462753,
    0.22136088,
    0.7977093,
    1.0955907,
    -0.013293327,
    -0.71375126,
    -0.26924333,
    0.23377712,
    0.79383934,
    1.1263008,
    -0.2129092,
    -0.38810018,
    -0.3254468,
    -0.26628155,
    -0.104903445,
    0.08428907,
    -0.9155419,
    -0.86683536,
    -0.5219443,
    -0.111488275,
    0.21340981,
    0.6599751,
    -1.0778109,
    -0.9164875,
    -0.4939913,
    -0.017692888,
    0.46735483,
    0.9586803,
    0.03656888,
    -0.17079112,
    -0.16513622,
    -0.02315218,
    0.30130392,
    0.6300154,
    -0.8058357,
    -0.6875018,
    -0.3304276,
    0.07327665,
    0.59714466,
    1.1155794,
    -1.0608811,
    -0.824427,
    -0.41426966,
    0.098101676,
    0.6969143,
    1.2202202,
    -0.087545715,
    0.085738935,
    0.5236707,
    0.03891224,
    0.0722697,
    0.47360983,
    -0.109618284,
    0.12605377,
    0.14081387,
    -0.48272377,
    -0.17237826,
    -0.1519421,
    -0.5277962,
    -0.787164,
    -0.376734,
    -0.37582815,
    -0.27601248,
    -0.13085866,
    -0.00068451837,
    -0.0031730435,
    0.0038830638,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    0.0065068007,
    -0.0063391924,
    0.0013449714,
    0.003440666,
    0.0040632943,
    -0.37729958,
    -0.5355814,
    -0.48418292,
    -0.5541029,
    -0.6043965,
    -0.56844634,
    -1.4992253,
    -1.3570195,
    -1.3196701,
    -1.286427,
    -1.3053985,
    -1.3406842,
    -2.1415884,
    -1.9341265,
    -1.8819685,
    -1.6961168,
    -1.7025375,
    -1.5841411,
    0.44847223,
    0.40578714,
    0.3013062,
    -0.13887002,
    0.30141732,
    0.027807768,
    -0.69935185,
    -0.73727256,
    -0.97036433,
    -1.1713092,
    -1.2781056,
    -1.461381,
    -0.7327349,
    -0.7709831,
    -0.97107375,
    -0.98473054,
    -1.1715224,
    -1.2917954,
    0.28165245,
    0.20952131,
    0.0028147853,
    -0.36671337,
    -0.54663587,
    -0.75431025,
    0.6179566,
    -0.019420432,
    0.08315486,
    -0.5812741,
    -0.72941446,
    -1.2487152,
    -0.13006257,
    0.14971836,
    0.08919717,
    0.16493735,
    -0.081960484,
    -0.4340465,
    0.048780773,
    -0.22780965,
    -0.118116714,
    -0.24644458,
    0.24327487,
    0.23497218,
    -0.027226051,
    -0.25048944,
    -0.26589665,
    -0.23658332,
    -0.38377675,
    -0.40695167,
    -0.62494546,
    -0.536662,
    -0.6224117,
    -0.60340583,
    -0.6932358,
    -0.66010636,
    0.49720323,
    -0.14793873,
    0.021341326,
    -0.16283648,
    0.0020036355,
    0.01888614,
    -0.13832524,
    -0.18528083,
    -0.14436235,
    -0.33784607,
    -0.31919658,
    -0.3712634,
    -0.5413,
    -0.48981908,
    -0.48792014,
    -0.5306076,
    -0.5544925,
    -0.564671,
    -1.5159595,
    -0.49724996,
    -0.91713613,
    -0.25128528,
    -0.9834398,
    0.11259969,
    -0.33365077,
    -0.57892495,
    -0.7994534,
    0.04887892,
    0.09706264,
    0.22203392,
    -0.39332128,
    -0.07120203,
    0.08207417,
    0.56104696,
    -0.7757935,
    -1.1174827,
    -1.4813718,
    -0.94221586,
    -0.31093457,
    -0.16781785,
    -0.5936949,
    -0.79039615,
    -0.122076236,
    -0.19640198,
    -0.31622756,
    -0.24848941,
    -0.5677756,
    -0.2576232,
    -0.045357026,
    -0.18639953,
    0.57796687,
    0.4415063,
    0.41853577,
    0.3464844,
    0.48938558,
    0.08354264,
    0.041218746,
    0.16449173,
    0.057190455,
    -0.06004644,
    0.093392454,
    -0.050953683,
    0.57780373,
    0.7994904,
    0.7262626,
    0.6153096,
    0.27305594,
    0.19591661,
    -0.7029559,
    -0.7573375,
    -0.93021494,
    -0.64342046,
    -0.27345696,
    -0.13956036,
    -0.07062561,
    -0.7972765,
    -0.82629347,
    -0.9359638,
    -0.97017753,
    -1.0144674,
    -1.195349,
    -1.2932758,
    -1.6114411,
    -1.7273937,
    -0.82193094,
    -0.94090205,
    -1.0653497,
    -1.219307,
    -1.2927066,
    -1.4451418,
    -1.667016,
    -1.5855582,
    -1.8575338,
    0.30803072,
    0.09286822,
    -0.016210658,
    -0.21986929,
    -0.0826025,
    -0.17875914,
    -0.048746817,
    -0.7356709,
    -0.2565407,
    -0.018596303,
    -0.09805993,
    -0.06880927,
    0.11313932,
    -0.7851041,
    -1.2167251,
    -0.09703437,
    -0.1947279,
    -0.3429672,
    -0.8502395,
    -0.041003298,
    0.18016687,
    0.14249268,
    -0.0038519236,
    0.46054682,
    0.3865031,
    0.1985188,
    -0.08817671,
    -0.3987287,
    -0.6887193,
    0.13683017,
    0.34637594,
    0.11279319,
    -0.20028925,
    -0.5112825,
    -0.7555057,
    -0.003588393,
    0.6011742,
    0.22969739,
    -0.17818612,
    -0.71598995,
    -1.0302234,
    -0.02169739,
    0.7898493,
    0.36687717,
    -0.108419925,
    -0.66999114,
    -1.1533068,
    0.25992006,
    0.325016,
    0.29938698,
    0.15113002,
    -0.07675234,
    -0.17470752,
    0.7958661,
    0.75006276,
    0.4010848,
    -0.019248677,
    -0.36840737,
    -0.6129127,
    0.87321454,
    0.78574497,
    0.40514886,
    -0.035521504,
    -0.4999801,
    -0.9782861,
    0.22885466,
    0.32313704,
    0.22999126,
    0.050458997,
    -0.23063628,
    -0.45962974,
    0.7040182,
    0.66424996,
    0.30989686,
    -0.11758618,
    -0.59181315,
    -1.0142381,
    0.9098042,
    0.7938104,
    0.34847206,
    -0.1490093,
    -0.71383566,
    -1.1522063,
    0.11936925,
    -0.09760121,
    -0.40220338,
    0.094898306,
    0.054537818,
    -0.24790093,
    0.15991648,
    0.057512786,
    -0.48700178,
    0.15846634,
    0.20569989,
    0.09523947,
    0.41577616,
    0.052331015,
    0.41131806,
    0.33205104,
    -0.024028663,
    0.28009635,
    -0.0033244444,
    -0.0040353606,
    0.006353423,
    0.0058200676,
    0.0057283062,
    0.005123331,
    0.0009506848,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_0KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.28177455,
    -0.2062781,
    -0.19989291,
    0.3300663,
    0.44413868,
    0.46064422,
    -0.23199958,
    -0.22568794,
    -0.23601761,
    0.18892242,
    0.3767979,
    0.52548003,
    -0.6799024,
    -0.4468091,
    -0.46865395,
    0.31221053,
    0.36373395,
    0.49622047,
    -0.09054777,
    -0.25289312,
    -0.20701183,
    0.23047738,
    0.27425018,
    0.31494862,
    -2.6088514,
    -1.03815,
    -0.92415285,
    0.43270957,
    0.87069577,
    2.9165,
    -1.4599617,
    -0.93337935,
    -1.150944,
    0.51529837,
    0.8953763,
    3.35636,
    -0.25672007,
    -0.0081481915,
    -0.12138792,
    -0.29289782,
    -0.07788469,
    -0.32055762,
    -3.199323,
    1.3393518,
    0.388247,
    -3.3169193,
    -3.1846037,
    0.046222422,
    0.5010694,
    -0.20180798,
    0.10098305,
    0.024615712,
    0.08091547,
    0.004016968,
    -0.27590886,
    -0.006967429,
    0.35699138,
    0.75144136,
    1.0271033,
    -0.18614696,
    -0.14082468,
    -0.01631756,
    0.13340217,
    -0.038578972,
    -0.07797316,
    0.09845611,
    -0.35596752,
    -0.030593323,
    0.4236799,
    1.9374031,
    -0.3243539,
    0.3156731,
    -0.004842346,
    0.10900902,
    0.36270848,
    0.580985,
    0.52938354,
    -0.42960063,
    -0.43784386,
    -0.42796028,
    -0.16121137,
    0.37984222,
    0.74377424,
    -1.1237512,
    -0.7751165,
    -0.30331585,
    0.19424647,
    1.4681902,
    2.2767255,
    0.7356743,
    -0.0998829,
    0.4974177,
    -0.09490141,
    -0.3560874,
    -0.11810789,
    0.17386833,
    0.1576379,
    -0.03437774,
    0.40306747,
    0.36900797,
    -0.99668366,
    1.6162082,
    0.5423172,
    0.8809693,
    -0.25647402,
    -0.2693838,
    -1.5362892,
    0.5929367,
    0.81114477,
    0.94627225,
    -0.45669845,
    -0.7990277,
    -0.6701698,
    -0.13103774,
    0.19247535,
    1.1974145,
    0.7196684,
    -1.10273,
    -1.5645331,
    0.021852355,
    -0.17570733,
    -0.41145492,
    0.55390376,
    0.42643666,
    1.9408138,
    2.5279834,
    0.04560218,
    2.226833,
    1.8227518,
    0.49176294,
    -4.3874836,
    -0.6461067,
    0.7541566,
    1.3060944,
    0.4574949,
    0.4992088,
    0.08869669,
    0.3863289,
    0.33027622,
    0.14359914,
    -0.02536121,
    0.35667205,
    -9.651203e-5,
    0.33461583,
    0.18207723,
    -1.0951653,
    0.08107692,
    0.8308548,
    -0.4986756,
    0.21542342,
    0.21056554,
    0.04256761,
    0.0021908544,
    -0.0050377534,
    0.26296547,
    0.19302286,
    1.8467025,
    -2.5008392,
    -1.4582266,
    -1.5724525,
    -0.17069641,
    0.23864459,
    0.5544435,
    1.0819594,
    -1.9382027,
    -1.3541329,
    -0.6183004,
    0.9026972,
    0.26077095,
    -1.3029253,
    0.3257704,
    1.2191551,
    1.7615279,
    1.4521575,
    1.7649901,
    0.64487517,
    -0.9370861,
    -0.41603366,
    0.42684808,
    1.2415367,
    1.7483929,
    0.59044755,
    -1.9890282,
    -0.8603724,
    -1.2905452,
    -1.0975947,
    -1.3459642,
    -0.27350786,
    -1.2892034,
    -2.728288,
    0.3247754,
    -0.021158414,
    -0.032301225,
    -0.13406043,
    0.050377525,
    0.09882382,
    0.20403782,
    -0.14425528,
    0.3162986,
    -0.020861968,
    -1.044271,
    -1.1355203,
    -0.28452435,
    1.8339943,
    1.3775377,
    1.6175537,
    -0.15758048,
    1.8779777,
    2.16467,
    0.6132204,
    1.4071342,
    0.5941867,
    0.59162223,
    0.57708275,
    0.17182551,
    0.6468191,
    0.9398013,
    0.8510203,
    2.9634454,
    0.0053829597,
    0.0034024976,
    0.008637523,
    0.00751807,
    0.006156098,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_2KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.31186366,
    0.3775278,
    -0.24196897,
    -0.35275528,
    -0.8089235,
    -0.843111,
    -0.7156322,
    0.85452354,
    0.9478291,
    0.9692355,
    0.86722726,
    0.9479617,
    0.7670037,
    1.5667348,
    1.327146,
    1.3026025,
    1.2887297,
    1.2143553,
    1.1369964,
    2.2804103,
    1.9328986,
    1.8071995,
    1.5518978,
    1.4536897,
    1.3299664,
    -0.45071906,
    -0.050019935,
    -0.08897769,
    -0.2720979,
    0.055488445,
    0.46679765,
    0.97424287,
    0.9332177,
    1.1596559,
    1.2544224,
    1.347112,
    1.5594426,
    0.3422008,
    0.5789337,
    0.7430066,
    0.7288531,
    0.8334785,
    0.9942355,
    -0.20613408,
    -0.60287267,
    0.58876306,
    0.32616323,
    0.9735404,
    1.4710212,
    -0.41092327,
    -0.046590656,
    0.33091846,
    0.57240355,
    0.84107137,
    1.2889751,
    0.049799565,
    -0.26864818,
    -0.15947413,
    -0.68091726,
    -0.5308493,
    -0.24018063,
    0.16647926,
    0.7261204,
    -0.24177171,
    0.18199703,
    -0.24236351,
    -0.94118804,
    -0.16983926,
    0.103348225,
    0.20438582,
    0.23814115,
    0.28346628,
    0.32024714,
    0.5596979,
    0.57655334,
    0.59445447,
    0.5240795,
    0.6436056,
    0.6812786,
    -0.65280145,
    0.10569296,
    -0.19547571,
    0.008190138,
    0.13409582,
    0.16447653,
    0.10087117,
    0.16864198,
    0.23158342,
    0.3379244,
    0.31644243,
    0.3145738,
    0.41750365,
    0.47956,
    0.4869932,
    0.47756287,
    0.49613246,
    0.5241882,
    3.1411088,
    1.0821787,
    1.754829,
    0.6201941,
    1.4799318,
    0.3679069,
    0.76008415,
    1.150715,
    1.2214833,
    0.016215527,
    -0.188786,
    -0.38933972,
    0.70239717,
    0.065114394,
    -0.19856736,
    -0.517771,
    0.65524143,
    0.6232836,
    0.53237385,
    0.47006312,
    0.38826054,
    0.431225,
    1.5975692,
    1.3323095,
    0.17877473,
    0.4789856,
    0.49656507,
    0.4204371,
    0.8172229,
    0.2988308,
    0.3918103,
    0.41685084,
    -0.37440383,
    -0.26585576,
    -0.23042151,
    -0.410276,
    -0.71697605,
    -0.18787947,
    -0.13526145,
    -0.034953635,
    -0.08054674,
    0.054693405,
    0.029491572,
    0.05750283,
    -0.62349486,
    -0.603706,
    -0.92245823,
    -0.49669448,
    -0.07795771,
    -0.09776041,
    0.5575181,
    1.0232941,
    1.1631253,
    1.3387421,
    1.5240612,
    1.2242737,
    0.62672913,
    0.6537483,
    0.78460354,
    0.98877287,
    1.0328065,
    1.0689582,
    1.0668991,
    1.0957938,
    1.1802148,
    1.1534138,
    1.0708092,
    1.0159247,
    0.9568931,
    0.9320323,
    0.98194456,
    1.2059731,
    1.2555709,
    1.3216995,
    1.5191351,
    -0.3181254,
    -0.07941883,
    -0.017816383,
    0.28932613,
    0.056054175,
    0.16996692,
    0.020389467,
    1.1025473,
    0.1982455,
    -0.033484396,
    0.0781305,
    0.042944126,
    -0.044300657,
    1.9370145,
    3.1925151,
    0.050432935,
    0.26424304,
    0.4926819,
    0.88156927,
    0.037490264,
    -0.14985302,
    -0.14197038,
    -0.0069796084,
    -0.5480098,
    -0.27603766,
    -0.18388137,
    -0.009509887,
    0.22633025,
    0.49587104,
    -0.059561722,
    -0.05754791,
    0.109628476,
    0.34820983,
    0.66048205,
    0.7551802,
    -0.016337896,
    -0.75440085,
    -0.34353277,
    0.19598004,
    0.7121891,
    0.9979284,
    -0.060418475,
    -0.9426428,
    -0.42203972,
    0.16033338,
    0.75293326,
    1.1654742,
    0.0048904824,
    -0.17591484,
    -0.12746875,
    -0.04020392,
    0.07504886,
    0.38969213,
    -0.8172976,
    -0.73226875,
    -0.37209547,
    0.0065236646,
    0.40639806,
    0.8126165,
    -1.0937374,
    -0.88482976,
    -0.41701657,
    0.06594187,
    0.5611562,
    1.0216854,
    -0.0014709559,
    -0.12443284,
    -0.047389217,
    0.091074996,
    0.27995303,
    0.57046926,
    -0.88799214,
    -0.76392686,
    -0.42026734,
    0.0051511824,
    0.4752043,
    0.9221466,
    -1.2176849,
    -0.937193,
    -0.4559339,
    0.10139159,
    0.72065675,
    1.3023882,
    0.016467566,
    0.15032591,
    0.42611703,
    0.050068006,
    0.06986142,
    0.109051794,
    -0.049371496,
    -0.025534656,
    0.08776758,
    -0.30889967,
    -0.3622509,
    -0.100948416,
    -0.3768726,
    -0.21227975,
    -0.39045346,
    -0.29292023,
    -0.19835572,
    -0.36931372,
    -0.00068451837,
    -0.0031730435,
    0.0038830638,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    0.0065068007,
    -0.0063391924,
    0.0013449714,
    0.003440666,
    0.0040632943,
    -0.5342733,
    -0.8655351,
    -1.0387394,
    -0.85380876,
    -0.9134021,
    -0.79925996,
    -1.6356592,
    -1.3756698,
    -1.3838544,
    -1.1568018,
    -1.2049342,
    -1.1471062,
    -2.4151995,
    -1.9917606,
    -1.8246831,
    -1.536627,
    -1.4508003,
    -1.3426169,
    0.32487664,
    -0.124433614,
    -0.38239685,
    -0.6347472,
    -0.8297359,
    -1.160981,
    -1.1147102,
    -1.2864226,
    -1.3837416,
    -1.6328716,
    -1.6750965,
    -1.7891625,
    -0.8949483,
    -1.2242308,
    -1.145735,
    -1.4040906,
    -1.4000826,
    -1.3518387,
    0.38212487,
    0.3884287,
    -0.5138297,
    -0.6034261,
    -0.9606266,
    -1.3099717,
    0.7899953,
    -0.02349262,
    -0.38305548,
    -0.8123915,
    -0.98335034,
    -1.2371585,
    -0.75193447,
    -0.47036955,
    -0.21933793,
    -0.22549838,
    -0.22686376,
    -0.24940352,
    -0.13438715,
    -0.37192488,
    0.11595589,
    -0.47793612,
    0.106719285,
    -0.14994304,
    0.053863075,
    -0.14752382,
    -0.31482422,
    -0.26872885,
    -0.31096333,
    -0.26103473,
    -0.34011573,
    -0.47023365,
    -0.50239134,
    -0.41333,
    -0.45882422,
    -0.49596196,
    0.5465938,
    -0.15082799,
    0.14319868,
    -0.16967715,
    -0.039998487,
    -0.070607625,
    -0.0092304805,
    -0.10274651,
    -0.19082628,
    -0.2775836,
    -0.2854642,
    -0.27108067,
    -0.4198481,
    -0.4981504,
    -0.42453188,
    -0.44423023,
    -0.45189664,
    -0.48316997,
    -2.770392,
    -0.67250496,
    -2.03049,
    -0.26650792,
    -1.6028192,
    0.2801714,
    -0.57437676,
    -1.1930792,
    -1.3506569,
    -0.24178942,
    0.012406767,
    0.07258712,
    -0.8257551,
    -0.21810982,
    -0.059052844,
    0.25765803,
    -0.6860228,
    -0.7103895,
    -1.1888703,
    -0.7745197,
    -0.36231267,
    -0.38414198,
    -0.74375093,
    -0.59613883,
    -0.19133835,
    -0.4093433,
    -0.34147084,
    -0.47652873,
    -0.7469584,
    -0.39795545,
    0.13287438,
    -0.4638142,
    0.43559313,
    0.411869,
    0.49847403,
    0.36894757,
    0.5366853,
    0.035787135,
    -0.0927038,
    0.05011924,
    0.10669218,
    -0.04546723,
    -0.06462096,
    -0.037418768,
    0.43961585,
    0.45150343,
    0.5697895,
    0.47995538,
    -0.071848996,
    -0.08352242,
    -0.29956424,
    -0.45552668,
    -0.5895992,
    -0.86559486,
    -0.56272566,
    -0.14356159,
    -0.052904658,
    -0.9981824,
    -0.997597,
    -1.0142797,
    -1.0189018,
    -1.0517799,
    -1.1293278,
    -1.4010464,
    -1.591525,
    -1.7025664,
    -1.1249242,
    -1.237603,
    -1.2671843,
    -1.4520074,
    -1.5244622,
    -1.501021,
    -1.4398017,
    -1.5004932,
    -1.6473485,
    0.2642086,
    0.08387495,
    -0.028143765,
    -0.26420248,
    -0.032945313,
    -0.17926535,
    -0.02590716,
    -1.1335201,
    -0.081323,
    0.0027188307,
    -0.09608593,
    -0.048589118,
    0.03915321,
    -1.3641007,
    -2.5540562,
    -0.019152345,
    -0.1511399,
    -0.5124063,
    -0.9857367,
    -0.039734073,
    0.20657603,
    0.16504624,
    -0.0038519236,
    0.526085,
    0.281289,
    0.064170085,
    -0.14837727,
    -0.3964078,
    -0.6433061,
    -0.04965373,
    0.066731445,
    -0.06480024,
    -0.27062336,
    -0.4650613,
    -0.5438363,
    -0.016919855,
    0.65476555,
    0.23552151,
    -0.28388044,
    -0.8556874,
    -1.1560085,
    -0.06881858,
    0.8125462,
    0.39722466,
    -0.13585828,
    -0.71960074,
    -1.2043672,
    -0.23693693,
    0.047959935,
    0.110575445,
    0.17362972,
    0.16358824,
    -0.08200628,
    0.86874014,
    0.7728501,
    0.4245817,
    0.010152964,
    -0.4028078,
    -0.8932226,
    0.9174433,
    0.7343451,
    0.2996925,
    -0.16669738,
    -0.65002894,
    -1.163252,
    -0.19613905,
    0.03032054,
    0.026403524,
    -0.06792948,
    -0.18050183,
    -0.32021505,
    0.88563704,
    0.73672444,
    0.33192837,
    -0.13764544,
    -0.6471183,
    -1.0971051,
    1.1655698,
    0.87988174,
    0.43960702,
    -0.10932796,
    -0.7152038,
    -1.2956649,
    0.007546314,
    -0.0518678,
    -0.26972714,
    -0.011205444,
    -0.047849305,
    0.038119707,
    0.17177528,
    0.1905527,
    0.16381362,
    0.33315644,
    0.33088776,
    0.11375621,
    0.25498348,
    -0.028909964,
    0.0417895,
    0.2528363,
    -0.060151853,
    0.18621926,
    -0.0033244444,
    -0.0040353606,
    0.006353423,
    0.0058200676,
    0.0057283062,
    0.005123331,
    0.0009506848,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_2KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.36988476,
    -0.39120594,
    -0.22448353,
    0.4486014,
    0.69319445,
    0.79469854,
    -0.35878876,
    -0.41750428,
    -0.32996437,
    0.22708501,
    0.5092799,
    0.36705709,
    -0.40240327,
    -0.5026733,
    -0.455767,
    -0.028422939,
    0.04344133,
    0.034356397,
    0.05429541,
    -0.23383999,
    -0.06640706,
    0.33713925,
    0.40570235,
    0.77680373,
    -1.3729842,
    -1.899489,
    -0.4305451,
    0.20330717,
    0.3303038,
    2.5776107,
    -0.7879445,
    -1.3744613,
    -0.6725144,
    -0.53616625,
    -0.04528337,
    3.853689,
    -0.26886845,
    0.12600835,
    -0.23634313,
    -0.0920763,
    -0.056066528,
    -0.28793398,
    -3.3024826,
    1.1440222,
    0.049216513,
    -2.5818138,
    -3.2267015,
    -0.038306337,
    0.42392313,
    -0.48745373,
    0.12400821,
    -0.19935504,
    0.083105184,
    -0.02016249,
    -0.24699464,
    -0.029171258,
    0.2911294,
    0.6691677,
    1.2006426,
    -0.112402916,
    -0.07538628,
    0.025212148,
    0.13306253,
    0.15604088,
    -0.22018787,
    0.25348616,
    -0.6829245,
    -0.345492,
    -0.02693122,
    0.45297855,
    0.030561145,
    0.35038516,
    -0.011768018,
    0.15371458,
    0.35325423,
    0.5297146,
    0.52508706,
    -0.39980784,
    -0.4425188,
    -0.39305744,
    -0.08290272,
    0.4526079,
    0.7650265,
    -1.1444324,
    -0.77456826,
    -0.52896,
    0.0045074723,
    0.6551637,
    1.4586186,
    0.74037296,
    0.0767121,
    0.19676493,
    -0.03668982,
    -0.30958608,
    -0.2009363,
    0.080179505,
    -0.011240975,
    0.1822365,
    0.48232347,
    0.22248371,
    -0.37957007,
    1.364185,
    0.5193429,
    1.0428641,
    -0.06016664,
    -0.44922963,
    -0.42890733,
    0.46624756,
    0.98231345,
    0.80223113,
    -0.4303783,
    -0.7404509,
    -0.5036712,
    0.08529852,
    0.20032953,
    -0.47751766,
    0.73512197,
    -1.0139444,
    -0.09097926,
    0.20241033,
    -0.18804753,
    -0.21665877,
    0.5353221,
    0.5820854,
    1.8302667,
    2.3094833,
    -0.011421268,
    2.1760452,
    0.8081558,
    0.45075732,
    -4.254408,
    -1.1249937,
    0.80678046,
    1.2646799,
    0.3543179,
    0.43385193,
    0.08406886,
    0.31480056,
    0.22416295,
    0.11995279,
    0.010689042,
    0.3659414,
    -0.029718276,
    0.34536847,
    0.12076934,
    -0.9970936,
    0.8069077,
    0.31390563,
    -0.19550778,
    0.07658755,
    0.2006163,
    0.04335391,
    0.0021908544,
    -0.0050377534,
    0.2737324,
    0.26335403,
    2.2527106,
    -2.376444,
    -1.2709242,
    -1.2349616,
    -0.28773186,
    0.21585378,
    0.66459024,
    1.4478304,
    -2.0826464,
    -1.248521,
    0.01471475,
    1.2352843,
    0.29718962,
    -1.077174,
    0.3368409,
    1.1123352,
    1.6369411,
    1.3213819,
    1.6007394,
    0.83524776,
    -0.73415864,
    -0.49745283,
    0.43390727,
    1.1260939,
    1.586812,
    0.7914713,
    -1.6290799,
    -0.8765212,
    -1.0826703,
    -1.1008861,
    -1.2428519,
    -0.339003,
    -1.2329252,
    -2.8342574,
    0.2932854,
    -0.023627227,
    -0.01934819,
    -0.08266589,
    0.034595884,
    0.0557286,
    0.14347608,
    -0.13325341,
    0.19395804,
    -0.10437257,
    -0.17604391,
    -0.0034939575,
    0.7650752,
    1.8428583,
    1.2943761,
    1.7100285,
    0.10179665,
    1.8108239,
    2.250567,
    0.56740934,
    1.3922528,
    0.5127527,
    0.58451986,
    0.59629726,
    0.11518713,
    0.540316,
    0.06931341,
    0.8312263,
    2.6714118,
    0.0053829597,
    0.0034024976,
    0.008637523,
    0.00751807,
    0.006156098,
];
