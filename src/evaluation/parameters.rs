use crate::position::{num_line_symmetries, num_square_symmetries};

pub const NUM_VALUE_FEATURES_4S: usize = 254;
pub const NUM_POLICY_FEATURES_4S: usize = 314;

pub const NUM_VALUE_FEATURES_5S: usize = 334;
pub const NUM_POLICY_FEATURES_5S: usize = 352;

pub const NUM_VALUE_FEATURES_6S: usize = 342;
pub const NUM_POLICY_FEATURES_6S: usize = 372;

#[derive(Debug)]
pub struct ValueFeatures<'a> {
    pub first_ply: &'a mut [f32],
    pub second_ply: &'a mut [f32],
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub supports_psqt: &'a mut [f32],
    pub captives_psqt: &'a mut [f32],
    pub shallow_supports_per_piece: &'a mut [f32],
    pub deep_supports_per_piece: &'a mut [f32],
    pub shallow_captives_per_piece: &'a mut [f32],
    pub deep_captives_per_piece: &'a mut [f32],
    pub us_to_move_opening_flatstone_lead: &'a mut [f32],
    pub them_to_move_opening_flatstone_lead: &'a mut [f32],
    pub us_to_move_middlegame_flatstone_lead: &'a mut [f32],
    pub them_to_move_middlegame_flatstone_lead: &'a mut [f32],
    pub us_to_move_endgame_flatstone_lead: &'a mut [f32],
    pub them_to_move_endgame_flatstone_lead: &'a mut [f32],
    pub i_number_of_groups: &'a mut [f32],
    pub critical_squares: &'a mut [f32],
    pub flat_next_to_our_stack: &'a mut [f32],
    pub wall_next_to_our_stack: &'a mut [f32],
    pub cap_next_to_our_stack: &'a mut [f32],
    pub num_lines_occupied: &'a mut [f32],
    pub line_control_empty: &'a mut [f32],
    pub line_control_their_blocking_piece: &'a mut [f32],
    pub line_control_other: &'a mut [f32],
    pub sidelined_cap: &'a mut [f32],
    pub fully_isolated_cap: &'a mut [f32],
    pub semi_isolated_cap: &'a mut [f32],
}

impl<'a> ValueFeatures<'a> {
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> Self {
        assert_eq!(coefficients.len(), num_value_features::<S>() / 2);

        let (first_ply, coefficients) = coefficients.split_at_mut(1);
        let (second_ply, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (supports_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (captives_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (shallow_supports_per_piece, coefficients) = coefficients.split_at_mut(4);
        let (deep_supports_per_piece, coefficients) = coefficients.split_at_mut(4);
        let (shallow_captives_per_piece, coefficients) = coefficients.split_at_mut(4);
        let (deep_captives_per_piece, coefficients) = coefficients.split_at_mut(4);
        let (us_to_move_opening_flatstone_lead, coefficients) = coefficients.split_at_mut(7);
        let (them_to_move_opening_flatstone_lead, coefficients) = coefficients.split_at_mut(7);
        let (us_to_move_middlegame_flatstone_lead, coefficients) = coefficients.split_at_mut(7);
        let (them_to_move_middlegame_flatstone_lead, coefficients) = coefficients.split_at_mut(7);
        let (us_to_move_endgame_flatstone_lead, coefficients) = coefficients.split_at_mut(7);
        let (them_to_move_endgame_flatstone_lead, coefficients) = coefficients.split_at_mut(7);
        let (i_number_of_groups, coefficients) = coefficients.split_at_mut(3);
        let (critical_squares, coefficients) = coefficients.split_at_mut(6);
        let (flat_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (wall_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (cap_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (num_lines_occupied, coefficients) = coefficients.split_at_mut(S + 1);
        let (line_control_empty, coefficients) =
            coefficients.split_at_mut(S * num_line_symmetries::<S>());
        let (line_control_their_blocking_piece, coefficients) =
            coefficients.split_at_mut(S * num_line_symmetries::<S>());
        let (line_control_other, coefficients) =
            coefficients.split_at_mut(S * num_line_symmetries::<S>());
        let (sidelined_cap, coefficients) = coefficients.split_at_mut(3);
        let (fully_isolated_cap, coefficients) = coefficients.split_at_mut(3);
        let (semi_isolated_cap, coefficients) = coefficients.split_at_mut(3);

        assert!(coefficients.is_empty());

        ValueFeatures {
            first_ply,
            second_ply,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            supports_psqt,
            captives_psqt,
            shallow_supports_per_piece,
            deep_supports_per_piece,
            shallow_captives_per_piece,
            deep_captives_per_piece,
            us_to_move_opening_flatstone_lead,
            them_to_move_opening_flatstone_lead,
            us_to_move_middlegame_flatstone_lead,
            them_to_move_middlegame_flatstone_lead,
            us_to_move_endgame_flatstone_lead,
            them_to_move_endgame_flatstone_lead,
            i_number_of_groups,
            critical_squares,
            flat_next_to_our_stack,
            wall_next_to_our_stack,
            cap_next_to_our_stack,
            num_lines_occupied,
            line_control_empty,
            line_control_their_blocking_piece,
            line_control_other,
            sidelined_cap,
            fully_isolated_cap,
            semi_isolated_cap,
        }
    }
}

#[derive(Debug)]
pub struct PolicyFeatures<'a> {
    pub decline_win: &'a mut [f32],
    pub place_to_win: &'a mut [f32],
    pub place_to_draw: &'a mut [f32],
    pub place_to_loss: &'a mut [f32],
    pub place_to_allow_opponent_to_end: &'a mut [f32],
    pub two_flats_left: &'a mut [f32],
    pub three_flats_left: &'a mut [f32],
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_road_stones_in_line: &'a mut [f32],
    pub their_road_stones_in_line: &'a mut [f32],
    pub extend_single_group_base: &'a mut [f32],
    pub extend_single_group_linear: &'a mut [f32],
    pub extend_single_group_to_new_line_base: &'a mut [f32],
    pub extend_single_group_to_new_line_linear: &'a mut [f32],
    pub merge_two_groups_base: &'a mut [f32],
    pub merge_two_groups_linear: &'a mut [f32],
    pub block_merger_base: &'a mut [f32],
    pub block_merger_linear: &'a mut [f32],
    pub place_our_critical_square: &'a mut [f32],
    pub place_their_critical_square: &'a mut [f32],
    pub ignore_their_critical_square: &'a mut [f32],
    pub next_to_our_last_stone: &'a mut [f32],
    pub next_to_their_last_stone: &'a mut [f32],
    pub diagonal_to_our_last_stone: &'a mut [f32],
    pub diagonal_to_their_last_stone: &'a mut [f32],
    pub attack_strong_flats: &'a mut [f32],
    pub blocking_stone_blocks_extensions_of_two_flats: &'a mut [f32],
    pub attack_strong_stack_with_wall: &'a mut [f32],
    pub attack_strong_stack_with_cap: &'a mut [f32],
    pub attack_last_movement: &'a mut [f32],
    pub place_last_movement: &'a mut [f32],
    pub move_role_bonus: &'a mut [f32],
    pub simple_movement: &'a mut [f32],
    pub simple_capture: &'a mut [f32],
    pub simple_self_capture: &'a mut [f32],
    pub pure_spread: &'a mut [f32],
    pub fcd_highest_board: &'a mut [f32],
    pub fcd_highest_stack: &'a mut [f32],
    pub fcd_other: &'a mut [f32],
    pub stack_captured_by_movement: &'a mut [f32],
    pub stack_capture_in_strong_line: &'a mut [f32],
    pub stack_capture_in_strong_line_cap: &'a mut [f32],
    pub move_cap_onto_strong_line: &'a mut [f32],
    pub move_cap_onto_strong_line_with_critical_square: &'a mut [f32],
    pub recapture_stack_pure: &'a mut [f32],
    pub recapture_stack_impure: &'a mut [f32],
    pub move_last_placement: &'a mut [f32],
    pub continue_spread: &'a mut [f32],
    pub move_onto_critical_square: &'a mut [f32],
    pub spread_that_connects_groups_to_win: &'a mut [f32],
}

impl<'a> PolicyFeatures<'a> {
    #[inline(never)]
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> PolicyFeatures<'a> {
        assert_eq!(coefficients.len(), num_policy_features::<S>() / 2);

        let (decline_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_draw, coefficients) = coefficients.split_at_mut(1);
        let (place_to_loss, coefficients) = coefficients.split_at_mut(1);
        let (place_to_allow_opponent_to_end, coefficients) = coefficients.split_at_mut(3);
        let (two_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (three_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (their_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (extend_single_group_to_new_line_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_to_new_line_linear, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_linear, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_base, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_linear, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_base, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_linear, coefficients) = coefficients.split_at_mut(3);
        let (place_our_critical_square, coefficients) = coefficients.split_at_mut(1);
        let (place_their_critical_square, coefficients) = coefficients.split_at_mut(4);
        let (ignore_their_critical_square, coefficients) = coefficients.split_at_mut(2);
        let (next_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (next_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (attack_strong_flats, coefficients) = coefficients.split_at_mut(1);
        let (blocking_stone_blocks_extensions_of_two_flats, coefficients) =
            coefficients.split_at_mut(1);
        let (attack_strong_stack_with_wall, coefficients) = coefficients.split_at_mut(6);
        let (attack_strong_stack_with_cap, coefficients) = coefficients.split_at_mut(6);
        let (attack_last_movement, coefficients) = coefficients.split_at_mut(4);
        let (place_last_movement, coefficients) = coefficients.split_at_mut(3);
        let (move_role_bonus, coefficients) = coefficients.split_at_mut(3);
        let (simple_movement, coefficients) = coefficients.split_at_mut(3);
        let (simple_capture, coefficients) = coefficients.split_at_mut(4);
        let (simple_self_capture, coefficients) = coefficients.split_at_mut(4);
        let (pure_spread, coefficients) = coefficients.split_at_mut(2);
        let (fcd_highest_board, coefficients) = coefficients.split_at_mut(6);
        let (fcd_highest_stack, coefficients) = coefficients.split_at_mut(6);
        let (fcd_other, coefficients) = coefficients.split_at_mut(8);
        let (stack_captured_by_movement, coefficients) = coefficients.split_at_mut(1);
        let (stack_capture_in_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (stack_capture_in_strong_line_cap, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line_with_critical_square, coefficients) =
            coefficients.split_at_mut(S - 3);
        let (recapture_stack_pure, coefficients) = coefficients.split_at_mut(3);
        let (recapture_stack_impure, coefficients) = coefficients.split_at_mut(3);
        let (move_last_placement, coefficients) = coefficients.split_at_mut(3);
        let (continue_spread, coefficients) = coefficients.split_at_mut(3);
        let (move_onto_critical_square, coefficients) = coefficients.split_at_mut(3);
        let (spread_that_connects_groups_to_win, coefficients) = coefficients.split_at_mut(1);

        assert!(coefficients.is_empty());

        PolicyFeatures {
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            attack_strong_stack_with_wall,
            attack_strong_stack_with_cap,
            attack_last_movement,
            place_last_movement,
            move_role_bonus,
            simple_movement,
            simple_capture,
            simple_self_capture,
            pure_spread,
            fcd_highest_board,
            fcd_highest_stack,
            fcd_other,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            recapture_stack_pure,
            recapture_stack_impure,
            move_last_placement,
            continue_spread,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
        }
    }
}

pub fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S: [f32; NUM_VALUE_FEATURES_4S] = [
    -2.9367454,
    -2.8866637,
    -3.1445684,
    -2.643071,
    1.8028008,
    1.8185256,
    2.0202208,
    -0.8220098,
    -1.3889936,
    -2.1818,
    0.4358358,
    0.49590623,
    0.46649364,
    0.71089697,
    0.90124315,
    1.1630988,
    1.078581,
    1.1572442,
    1.5150288,
    0.3544312,
    0.8724424,
    0.005999675,
    -0.0073812627,
    -0.41172907,
    -0.61999995,
    -0.008598236,
    0.0018530292,
    0.3321143,
    0.28434426,
    0.005024814,
    0.0038007405,
    0.14294685,
    0.8758792,
    4.296007,
    1.3260128,
    1.3606148,
    1.5926558,
    1.7179449,
    0.45323065,
    -0.062024415,
    -1.0215701,
    -1.4353919,
    0.069316015,
    -0.22758989,
    -0.49961156,
    0.34286657,
    -1.163143,
    -1.7755086,
    -2.7851794,
    0.59571916,
    3.482964,
    2.400573,
    1.7756554,
    0.64224356,
    -0.10186929,
    -0.69168043,
    0.047423124,
    0.11287885,
    2.580737,
    0.79271144,
    0.20431083,
    -0.55717534,
    -1.5160308,
    0.1110692,
    0.4397921,
    1.9422646,
    -0.61810976,
    -0.18924335,
    -1.0558838,
    1.7506708,
    -0.10622363,
    -0.026326114,
    -0.7945333,
    0.3780862,
    -1.8967265,
    -1.7833325,
    -1.2700632,
    -0.02097358,
    -0.0074185603,
    0.47442418,
    0.32589197,
    -0.20745805,
    0.10226152,
    0.056124695,
    -0.00023208652,
    0.008934194,
    -0.056085214,
    -0.16444787,
    -0.051262457,
    -1.5100819,
    -1.2921357,
    -0.94857454,
    -0.6354272,
    -0.1774072,
    -0.22314538,
    -0.7010159,
    0.06954779,
    0.92948896,
    -0.5868749,
    -0.23214413,
    0.4751329,
    0.9055694,
    -0.9751701,
    -0.77983016,
    -0.45688236,
    0.1886233,
    -1.1793071,
    -0.95509833,
    -0.44539958,
    0.0519885,
    -0.9448067,
    -0.6173714,
    0.08178912,
    0.7007644,
    -0.42046964,
    -0.2772996,
    0.54333824,
    0.9543175,
    -0.30016592,
    1.3719442,
    1.3996212,
    1.2660044,
    0.92664075,
    2.0581422,
    0.096440665,
    -0.18568857,
    -0.06007227,
    -0.32495067,
    -0.15810497,
    -0.04672917,
    0.3588054,
    -1.9618891,
    -2.1867588,
    -2.3548825,
    -1.3378524,
    -1.4272386,
    -1.5985185,
    0.47924975,
    0.2775319,
    0.11263576,
    -0.65187794,
    -0.7611913,
    -0.9066977,
    -0.3831883,
    -0.45535713,
    -0.42624462,
    -0.5126877,
    -1.5692844,
    -0.15620223,
    -0.19624043,
    0.3161406,
    0.17691703,
    0.87294245,
    -0.11969389,
    0.059770145,
    -0.07855101,
    -0.13189088,
    -0.19179933,
    0.15807651,
    0.35984048,
    -0.62237453,
    -0.07130004,
    -1.5696024,
    -2.260396,
    -0.95461136,
    -1.1198655,
    -0.0070628235,
    -0.0077676517,
    0.31346816,
    0.10425639,
    -1.9005793,
    -1.3572385,
    -0.042693805,
    -0.1766934,
    0.4705492,
    2.0038073,
    0.39857256,
    1.0302184,
    0.66566724,
    0.13977452,
    -0.23535055,
    -0.5085241,
    -0.79648155,
    1.8459202,
    2.4593697,
    1.7110448,
    1.1856396,
    0.664903,
    0.4107958,
    1.44392,
    -0.44697285,
    -0.824989,
    -2.34988,
    -1.8470016,
    -0.47756538,
    -0.11597214,
    0.01054622,
    0.9003227,
    0.9808008,
    1.1542228,
    -1.4916205,
    -0.69565505,
    -0.09630942,
    1.7464079,
    0.14715365,
    0.15280949,
    0.08869219,
    -0.27714524,
    0.18603756,
    -0.1364764,
    0.8011376,
    -0.16391811,
    0.0076200105,
    0.07854148,
    0.29250652,
    -0.007937893,
    0.33228216,
    0.41232067,
    0.20950806,
    -0.13977504,
    -0.72135025,
    -0.22313173,
    0.38438007,
    -0.37568942,
    -0.777148,
    0.065532915,
    -0.108291626,
    -0.8538483,
    -1.0729996,
    0.6652359,
    0.89014655,
    1.2897749,
    -0.7671177,
    1.4894782,
    1.5221418,
    1.3120722,
    -0.5749097,
    0.548471,
    0.071677886,
    -0.6436663,
    -1.2170316,
    0.091061756,
    -0.08488529,
    -0.6454855,
    -0.99351865,
    0.008934194,
    -0.0025578667,
    -0.0025578667,
    -0.0025578667,
    -0.0025578667,
    -0.0025578667,
    -0.0025578667,
    -0.0025578667,
    -0.0025578667,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S: [f32; NUM_POLICY_FEATURES_4S] = [
    -1.5645161,
    0.5374457,
    0.47551054,
    -0.8482996,
    -3.4245977,
    0.3255785,
    0.32990757,
    -0.47108972,
    0.08749553,
    -0.4679868,
    0.1219018,
    0.13948625,
    0.08523656,
    0.7435838,
    0.0531249,
    -0.21361277,
    -0.35420513,
    -0.00082149263,
    -0.005897157,
    0.0069459323,
    -0.02341807,
    0.049913786,
    0.41270277,
    1.4904191,
    -0.2461936,
    -0.3250575,
    -0.23358428,
    -0.20846266,
    0.0056339707,
    0.005903894,
    -0.0017206976,
    -0.0018851925,
    0.17262378,
    -0.16949439,
    0.2802094,
    1.6641579,
    -0.58321893,
    -0.55655885,
    -0.29822582,
    0.4234701,
    -0.008776911,
    0.006379608,
    -0.0034764553,
    -0.0019571641,
    0.1965222,
    1.317377,
    -0.002883594,
    1.6362461,
    -5.877755,
    -0.0041113687,
    0.015096722,
    -0.5755634,
    -0.0012246752,
    0.13933787,
    1.0314894,
    -0.008976857,
    0.48898295,
    -0.1254735,
    -0.0035235141,
    0.120397806,
    0.54746,
    0.008539425,
    -0.19624704,
    0.118297204,
    0.008402593,
    -0.08141404,
    -0.17260121,
    0.0031465264,
    1.4458499,
    0.20295504,
    1.8577591,
    0.008153329,
    0.39491978,
    -4.2046356,
    0.08637152,
    0.5690254,
    0.9549843,
    0.32243922,
    -0.027966764,
    0.24345426,
    0.19845352,
    0.22445883,
    0.42830506,
    0.17459424,
    0.090772636,
    0.0059623104,
    -0.008494556,
    -0.001817584,
    -0.009368448,
    -0.006632633,
    -0.00079724286,
    -0.001203401,
    -0.001678803,
    0.18551695,
    -0.0472917,
    -0.006872382,
    -0.0035781572,
    0.25069118,
    -0.5150476,
    -0.00068451837,
    -0.21909338,
    0.010802149,
    -0.0005412027,
    -1.1778929,
    -0.3096013,
    0.0028945897,
    -0.25539845,
    -0.18097027,
    0.0065068007,
    -0.0063391924,
    -0.68460685,
    0.0017139444,
    0.0040632943,
    0.0075244084,
    0.32674485,
    -0.5377791,
    0.42605087,
    1.282514,
    1.446035,
    0.9153387,
    0.42652234,
    -0.31779173,
    -0.47674397,
    -0.20353739,
    0.33913013,
    1.1645178,
    1.1886299,
    -0.0045520016,
    -0.5999547,
    -0.26727462,
    -0.9620095,
    -0.9226994,
    -1.0495951,
    -0.2424002,
    -1.4891603,
    -0.8503273,
    0.26082388,
    -0.047286768,
    0.007477794,
    0.007423345,
    -0.0053779697,
    0.9214546,
    -0.118113406,
    -0.0028329133,
    0.4267042,
    1.200394,
    0.005978748,
    0.06689376,
    0.5054297,
    0.005034494,
    0.5684413,
    0.024768144,
    0.0040523577,
    -1.016587,
    -0.7005994,
    0.41967326,
    2.5595808,
    -2.2437608,
    1.4642429,
    -1.2239397,
    -2.7135117,
    -2.8820906,
    -2.4743156,
    0.41276726,
    0.21294186,
    0.1293395,
    -0.29045904,
    0.13700905,
    0.24726897,
    -0.06600775,
    0.07779577,
    -0.2547718,
    -0.29219657,
    0.92920274,
    -0.0017110752,
    0.002321708,
    0.00917124,
    -0.17140475,
    -0.33833507,
    0.3883546,
    0.6456122,
    0.24890167,
    0.13049984,
    0.40571266,
    -0.0034999277,
    0.008272812,
    0.0077627413,
    0.0017063711,
    0.009654418,
    -0.042858053,
    -0.28666317,
    0.41524446,
    0.44044575,
    -0.31244424,
    -0.21415672,
    0.21698162,
    1.1263227,
    0.0061481707,
    -0.004423251,
    0.0056418106,
    -0.00813673,
    -0.851108,
    1.6323612,
    -0.0017166166,
    2.4195478,
    -3.021281,
    0.006511757,
    1.5953723,
    -1.8961637,
    0.009848841,
    -0.8864342,
    1.2991195,
    -0.00014788378,
    1.2612053,
    -0.59974396,
    -0.0013411185,
    0.09629551,
    -0.071829796,
    0.0016861744,
    1.0409441,
    0.32023284,
    -0.008879824,
    -3.7030845,
    -0.32031348,
    -0.008328738,
    2.60324,
    1.1326652,
    1.6805015,
    -0.0019917535,
    0.22033082,
    -4.284036,
    -0.87875247,
    0.5533828,
    1.3159273,
    0.3142584,
    0.7977458,
    0.2081986,
    0.4839839,
    0.08974335,
    -0.15740512,
    -0.22824039,
    0.18800083,
    0.009821016,
    -0.0036976123,
    0.0065161474,
    -0.002408173,
    -0.009099176,
    0.006395545,
    0.0077593178,
    -0.0004463978,
    0.38461775,
    0.22795583,
    -0.006801691,
    -0.00862998,
    -0.32381675,
    -0.615588,
    0.009574549,
    -0.49310866,
    -0.5416084,
    0.0025543617,
    -1.4131105,
    -0.91286314,
    0.0047588134,
    -0.07091453,
    -0.32994682,
    -0.006784751,
    0.002936501,
    -0.55099773,
    -0.47385052,
    0.008436263,
    -0.0064912676,
    0.5444422,
    -1.586293,
    0.21119289,
    1.3844159,
    1.9653052,
    2.0842693,
    2.4106145,
    2.4725654,
    -1.2208704,
    -1.1515045,
    0.23480262,
    0.91782224,
    0.67772514,
    -0.006669526,
    -0.746789,
    -1.1525166,
    -2.58024,
    -1.6718928,
    -2.3132136,
    -0.14590126,
    -1.6685474,
    -0.73688555,
    0.3760314,
    -0.17272334,
    0.0013535284,
    0.00049108546,
    -0.003149576,
    1.9380276,
    1.1877459,
    -0.0038519236,
    -0.08980173,
    2.0720382,
    -0.0076240515,
    0.29292658,
    1.348304,
    -0.009823198,
    0.6044579,
    0.4858825,
    -0.00769969,
    0.65772474,
    -0.10832626,
    0.5628622,
    2.9534903,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S: [f32; NUM_VALUE_FEATURES_5S] = [
    -1.12038,
    -0.97149014,
    -1.3854752,
    -1.3454942,
    -1.5664266,
    -1.2591277,
    -1.0887942,
    1.4461713,
    1.4374303,
    1.4525967,
    1.536718,
    1.466107,
    1.3278519,
    0.15341476,
    0.13351437,
    0.43028238,
    0.20223999,
    0.56216544,
    0.80233526,
    0.6360953,
    0.52384067,
    1.03585,
    1.1073475,
    1.5756904,
    2.1705308,
    0.4957424,
    0.5604414,
    0.7151021,
    0.6673945,
    0.74380225,
    0.6751419,
    0.3472464,
    0.40597495,
    0.4503752,
    0.4847243,
    0.50447875,
    0.4752928,
    0.5533741,
    0.75744027,
    1.7762607,
    1.2144234,
    0.008546349,
    -0.123871915,
    -0.18927523,
    -0.15761237,
    -0.36939788,
    -0.04335442,
    -0.14865322,
    -0.075900026,
    -0.18302509,
    -0.5307258,
    -1.1415184,
    -0.20502783,
    0.94740677,
    0.1878389,
    -0.39071852,
    -0.28604832,
    -0.05840247,
    0.031348743,
    0.6732897,
    0.0997569,
    0.57950103,
    -0.26993838,
    -0.84914964,
    -0.7457655,
    -0.532941,
    -0.3927277,
    2.021492,
    1.1889935,
    0.9965427,
    0.2689548,
    0.000985686,
    -0.44229683,
    -0.8994359,
    1.7396555,
    1.027772,
    0.28198257,
    0.07147526,
    -0.7584421,
    -0.93862766,
    -1.4340296,
    0.8568907,
    0.62780225,
    0.16203377,
    0.03972216,
    -0.37078568,
    -0.52753836,
    -0.20902391,
    0.2736548,
    0.031283688,
    -0.13440669,
    -0.527709,
    -0.5527182,
    -0.9406339,
    -1.0233727,
    -0.2149439,
    -0.086447366,
    -0.022327343,
    0.22995305,
    0.041759834,
    0.098653406,
    -0.068450384,
    0.12329782,
    -0.07734719,
    0.012210209,
    -0.09929365,
    -0.11693794,
    -0.5997715,
    -0.37943137,
    -0.16136768,
    -0.05377852,
    0.21399282,
    0.5591127,
    -0.09456725,
    -0.7285964,
    -0.2315453,
    0.38733792,
    1.056221,
    -0.09445078,
    -0.67807627,
    -0.13306981,
    0.48948014,
    0.94360894,
    -0.039618947,
    -0.73065776,
    -0.1486718,
    0.51772237,
    1.0913037,
    -0.7749743,
    -0.7286319,
    -0.290039,
    0.123797596,
    0.74882734,
    -0.86159116,
    -0.8032122,
    -0.2897284,
    0.15742747,
    0.72980076,
    -0.9154444,
    -0.82057893,
    -0.28436962,
    0.26391116,
    0.8344182,
    -0.394857,
    -0.5194845,
    -0.22666857,
    0.18861498,
    0.6960858,
    -0.7926994,
    -0.65593195,
    -0.15292239,
    0.41347036,
    0.97176087,
    -0.8556965,
    -0.7545971,
    -0.19757281,
    0.50579077,
    1.1257663,
    -0.52506584,
    -0.68589,
    -0.5938929,
    -0.5370944,
    -0.3676395,
    -0.2833903,
    -0.23661196,
    -0.2748386,
    -0.4141947,
    -0.0077517964,
    -0.0077192923,
    -0.009022991,
    -0.0027733874,
    0.009177124,
    -0.006355319,
    0.001523626,
    -1.6662934,
    -1.7054006,
    -1.579039,
    -1.6148994,
    -1.5774026,
    -1.5883285,
    -1.2915587,
    -1.4766924,
    -1.4703696,
    -1.7289389,
    -1.826605,
    -1.9534175,
    -0.21011794,
    -0.8151979,
    -0.74020106,
    -1.5120071,
    -1.6090075,
    -1.9443055,
    -0.63453704,
    -0.61022645,
    -0.5419198,
    -0.59914804,
    -0.52581674,
    -0.61820096,
    -0.243809,
    -0.3241409,
    -0.28547806,
    -0.38352475,
    -0.37545148,
    -0.39614365,
    -0.6524116,
    -1.1106373,
    -1.5660775,
    -1.4919614,
    -0.16070762,
    0.12237793,
    1.2388114,
    0.09784294,
    0.46562085,
    0.29587474,
    0.12381566,
    0.06905926,
    0.21100266,
    0.35571247,
    0.25148347,
    0.24965708,
    -0.78371567,
    -1.0160267,
    -0.8846075,
    -0.17439465,
    0.565439,
    0.13758782,
    0.030358776,
    -0.36059597,
    -0.8016808,
    -0.6890965,
    -0.7163257,
    1.0545739,
    0.76020336,
    1.8790647,
    -0.42848217,
    -0.18529327,
    -0.10404847,
    0.32858777,
    0.30676514,
    0.48830906,
    -0.41463682,
    -0.3041711,
    0.18389145,
    0.1529598,
    0.46072155,
    0.58615845,
    0.9454735,
    1.127439,
    -0.4072544,
    -0.69734937,
    -0.15765075,
    -0.01814187,
    -0.85955,
    0.015978526,
    -0.7311894,
    0.32237968,
    -0.83815324,
    -0.074079014,
    0.5070324,
    -0.080618426,
    -0.38084498,
    1.117861,
    0.19295108,
    0.11271528,
    -0.026169363,
    -0.32546404,
    -0.017567253,
    -0.17844221,
    -0.024129849,
    -0.17301315,
    0.01620505,
    0.013649335,
    0.21564709,
    0.21921638,
    0.7393974,
    0.15246351,
    -0.021968221,
    -0.1996885,
    -0.41187528,
    -0.6705574,
    -0.10815,
    0.14954677,
    -0.1557975,
    -0.615352,
    -1.0307229,
    -0.09508071,
    0.3726995,
    -0.113779016,
    -0.6213615,
    -1.0467938,
    -0.042367116,
    0.5393907,
    0.06269055,
    -0.46755838,
    -0.91479397,
    0.30301866,
    0.4801562,
    0.31964964,
    0.016991783,
    -0.36195207,
    0.74629545,
    0.6415953,
    0.27225512,
    -0.13636093,
    -0.61684984,
    0.7239219,
    0.508405,
    0.113128535,
    -0.39957306,
    -1.0320766,
    0.42686206,
    0.36000353,
    0.12739584,
    -0.20254433,
    -0.5382843,
    0.60256207,
    0.45073715,
    0.07373446,
    -0.4227706,
    -0.9025299,
    0.8749239,
    0.6950599,
    0.23299712,
    -0.35359508,
    -0.9126647,
    0.10222252,
    -0.0994082,
    -0.15326907,
    0.6616347,
    0.389432,
    0.18782943,
    0.36776617,
    -0.05489196,
    0.11691757,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S: [f32; NUM_POLICY_FEATURES_5S] = [
    -2.364059,
    0.83371514,
    0.3621243,
    -2.2058082,
    -2.7297075,
    0.3843632,
    0.60615134,
    -0.5184913,
    0.12925223,
    -0.20106532,
    0.08706577,
    0.07353632,
    0.19157206,
    0.14050041,
    0.2275343,
    0.070497036,
    -0.06129284,
    0.1809289,
    -0.10170746,
    -0.0918483,
    -0.22674909,
    -0.13800173,
    -0.17558686,
    -1.2423456,
    -1.0349611,
    -1.3082185,
    0.31718922,
    1.2168149,
    2.9599228,
    -0.01383059,
    -0.22154884,
    0.040336017,
    0.2991523,
    1.1860827,
    -0.2596721,
    -0.31976765,
    -0.27368653,
    -0.24004853,
    0.013296809,
    0.22649218,
    -0.0852919,
    0.33021447,
    0.911263,
    0.368977,
    0.34246802,
    -0.15956265,
    0.016234435,
    0.39978784,
    0.6933974,
    -0.53157985,
    -0.6211893,
    -0.65645313,
    0.08182054,
    0.61809623,
    -0.908975,
    -0.7951654,
    -0.23489502,
    0.233091,
    3.471128,
    0.48546246,
    0.01862591,
    0.44242024,
    0.2699131,
    -0.73888445,
    0.024186857,
    0.43297678,
    0.13638134,
    0.16714334,
    0.09337567,
    0.041185062,
    -0.90778184,
    1.3762999,
    -0.1372693,
    1.2979231,
    0.010564166,
    0.21807316,
    -0.2985212,
    0.21086754,
    0.49312854,
    0.7361693,
    0.10204233,
    -0.64123493,
    -0.20951942,
    1.866401,
    0.11298871,
    2.1436834,
    1.4635205,
    0.6324547,
    -3.6389742,
    -1.126994,
    0.570862,
    1.4658211,
    0.35250103,
    0.17621087,
    0.121135995,
    0.2973587,
    0.35400888,
    0.35004097,
    -0.012953568,
    0.1871825,
    -0.019964052,
    0.5724078,
    -0.18639846,
    -0.35601932,
    -0.62522376,
    -0.07309882,
    -0.0948202,
    0.6363231,
    0.16736029,
    0.02488837,
    -0.0064912676,
    -0.009093427,
    0.59161186,
    0.24117433,
    1.3418102,
    -0.36799562,
    0.01429345,
    -0.23978955,
    -1.9064004,
    -0.69283164,
    -1.2464509,
    -0.3388191,
    -0.053404447,
    0.2697676,
    0.8625671,
    -2.151539,
    -1.1219807,
    -0.43619454,
    1.5864483,
    0.1713412,
    -0.7881814,
    0.5887582,
    1.2581444,
    1.4218633,
    0.85671777,
    0.70533866,
    -0.47185785,
    -0.102786586,
    -0.22611919,
    0.5682723,
    1.2820448,
    0.52463794,
    0.04382464,
    -1.0636373,
    -0.710835,
    -0.4952301,
    -0.91828966,
    -0.62359536,
    -0.44127527,
    -1.1088591,
    -1.7040684,
    0.3094986,
    -0.026531087,
    -0.07371827,
    0.05735495,
    0.16230755,
    -0.228883,
    -0.1663894,
    -0.11405238,
    1.0551587,
    1.3987718,
    0.55786145,
    1.0450866,
    -0.21108864,
    1.2877539,
    2.0764368,
    0.41962922,
    0.9174942,
    0.4520737,
    0.4495811,
    0.47538507,
    0.13862024,
    0.10602717,
    0.022933697,
    0.6316385,
    2.953346,
    -3.0235202,
    1.3342478,
    1.1704062,
    -1.8135762,
    -2.9794767,
    -0.831852,
    0.28071773,
    -0.12855604,
    0.07815867,
    -0.003335312,
    0.10579328,
    0.1239054,
    0.3267827,
    0.09552236,
    0.09903971,
    0.016632212,
    -0.09299823,
    -0.40654555,
    -0.22006312,
    -0.36776063,
    0.23096658,
    0.25327432,
    0.6574069,
    -2.3203144,
    -0.87708116,
    -1.2841132,
    0.9649506,
    1.2776936,
    2.6347027,
    0.016609337,
    -0.29586264,
    0.104281224,
    0.5219667,
    0.77325,
    -0.08661059,
    0.072273485,
    0.1954788,
    0.19330691,
    -0.105944514,
    -0.33776882,
    -0.26686803,
    0.3383186,
    1.1846129,
    -0.15680107,
    0.22966385,
    -0.2536401,
    -0.020437524,
    0.5910446,
    0.6032354,
    -0.28046784,
    -0.36647028,
    -0.18946016,
    0.35090807,
    0.75910246,
    -0.43724972,
    -0.24081476,
    -0.23502834,
    0.0033086827,
    1.6633006,
    0.21407613,
    0.77995163,
    0.37563795,
    0.47168237,
    -1.4323392,
    -0.8048486,
    0.29072,
    -0.6204403,
    0.13826515,
    0.20001051,
    0.7704725,
    -0.192476,
    1.2563795,
    0.40841946,
    0.10273458,
    -0.11372622,
    -0.29037952,
    0.33206752,
    0.37771383,
    0.5003493,
    1.7487444,
    -0.53753245,
    -0.42749044,
    -0.11225002,
    2.977237,
    0.26172554,
    2.2217503,
    2.5729547,
    0.37048241,
    -3.7627795,
    -0.99024194,
    0.55562454,
    1.560567,
    0.55488026,
    0.5123963,
    0.17793304,
    0.26700196,
    0.16504614,
    0.12766242,
    0.06288959,
    0.37245688,
    0.013679049,
    0.31629345,
    -0.39062443,
    -0.61997986,
    -0.035524733,
    -0.110680595,
    -0.28528917,
    -0.06457358,
    0.23209567,
    0.12203841,
    -0.0045703794,
    0.0018790625,
    0.003177477,
    -0.023899904,
    0.87881565,
    -0.45914888,
    -0.27691644,
    -0.31518954,
    -1.7069021,
    -1.0579083,
    -0.9881924,
    -0.15154149,
    -0.06012692,
    0.28498858,
    0.47533062,
    -1.1279086,
    -0.53761864,
    -0.25655982,
    -0.045995504,
    0.20956506,
    -1.2678251,
    0.5041271,
    1.3493419,
    1.7033348,
    1.3263654,
    1.0839156,
    0.015909774,
    -1.2495463,
    -0.63835365,
    0.6489952,
    1.2885448,
    1.7330351,
    0.016846256,
    -1.1003503,
    -1.0456753,
    -1.6738656,
    -1.1151685,
    -1.3892363,
    -0.16291575,
    -0.9335054,
    -1.4353142,
    0.35031542,
    -0.0061868224,
    -0.11800762,
    0.05068166,
    0.19264124,
    0.26943746,
    0.39910406,
    0.050210524,
    0.067628436,
    2.0683587,
    0.9862848,
    1.575371,
    0.30837932,
    1.817485,
    1.63101,
    0.40867382,
    1.0823361,
    1.0747076,
    0.39409426,
    0.46122333,
    0.2618346,
    0.08514862,
    -0.02666308,
    0.8268484,
    3.3675494,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S: [f32; NUM_VALUE_FEATURES_6S] = [
    0.606187,
    0.5446117,
    0.54406977,
    0.59712934,
    0.6192196,
    0.5680083,
    0.22529893,
    0.61106944,
    0.6726761,
    0.9916199,
    1.1298188,
    1.2645868,
    0.039187424,
    0.5010584,
    0.65021455,
    1.2168105,
    1.5609205,
    1.8391675,
    0.51993597,
    0.62568444,
    0.68589634,
    0.70032203,
    0.77488726,
    0.75653815,
    0.36954045,
    0.44124892,
    0.44977257,
    0.54283947,
    0.57422334,
    0.5616728,
    0.6143715,
    0.85462576,
    1.4853287,
    1.0700635,
    0.2920155,
    -0.09491774,
    -0.098030955,
    -0.06769711,
    -0.55631524,
    -0.19200288,
    -0.17672306,
    -0.10198288,
    -0.401936,
    -0.4650831,
    -0.6883258,
    -0.3670923,
    1.0906948,
    0.86482877,
    1.0072992,
    1.4386058,
    0.88296574,
    1.1679748,
    -0.24030001,
    -0.19869824,
    -0.017924381,
    0.2546107,
    0.08701127,
    0.15877694,
    0.007067374,
    0.114150904,
    -0.02626372,
    0.022606345,
    -0.12556247,
    -0.12852018,
    0.93810076,
    -0.7260433,
    -0.52561533,
    -0.3214629,
    -0.0750549,
    0.2225322,
    0.50376153,
    -0.0038658213,
    -0.08316135,
    -0.017130688,
    0.12659669,
    0.36212754,
    0.5770378,
    -0.0026799915,
    -0.19310333,
    -0.068640575,
    0.13180655,
    0.3814123,
    0.46170714,
    -0.00032685045,
    -0.25205535,
    -0.104866266,
    0.07662872,
    0.3767714,
    0.5692452,
    -0.18182907,
    -0.44210964,
    -0.37306374,
    -0.2778329,
    -0.15621454,
    -0.023055106,
    -0.34905314,
    -0.46918887,
    -0.32652503,
    -0.17533821,
    -0.013424231,
    0.23628815,
    -0.34334445,
    -0.4333364,
    -0.2837256,
    -0.112828605,
    0.0774326,
    0.28103772,
    0.21040379,
    -0.06204036,
    -0.095324166,
    -0.011239963,
    0.1648674,
    0.2713752,
    -0.11068617,
    -0.24071796,
    -0.12877242,
    0.035447612,
    0.3048336,
    0.5276468,
    -0.26604328,
    -0.35593826,
    -0.1926967,
    0.025967682,
    0.33114037,
    0.61982065,
    -0.20731127,
    -0.10293561,
    -0.22141515,
    -0.54256046,
    -0.53815967,
    -0.1566519,
    -0.34156847,
    -0.004189716,
    -0.21910878,
    0.606187,
    0.5446117,
    0.54406977,
    0.59712934,
    0.6192196,
    0.5680083,
    0.22529893,
    0.61106944,
    0.6726761,
    0.9916199,
    1.1298188,
    1.2645868,
    0.039187424,
    0.5010584,
    0.65021455,
    1.2168105,
    1.5609205,
    1.8391675,
    0.51993597,
    0.62568444,
    0.68589634,
    0.70032203,
    0.77488726,
    0.75653815,
    0.36954045,
    0.44124892,
    0.44977257,
    0.54283947,
    0.57422334,
    0.5616728,
    0.6143715,
    0.85462576,
    1.4853287,
    1.0700635,
    0.2920155,
    -0.09491774,
    -0.098030955,
    -0.06769711,
    -0.55631524,
    -0.19200288,
    -0.17672306,
    -0.10198288,
    -0.401936,
    -0.4650831,
    -0.6883258,
    -0.3670923,
    1.0906948,
    0.86482877,
    1.0072992,
    1.4386058,
    0.88296574,
    1.1679748,
    -0.24030001,
    -0.19869824,
    -0.017924381,
    0.2546107,
    0.08701127,
    0.15877694,
    0.007067374,
    0.114150904,
    -0.02626372,
    0.022606345,
    -0.12556247,
    -0.12852018,
    0.93810076,
    -0.7260433,
    -0.52561533,
    -0.3214629,
    -0.0750549,
    0.2225322,
    0.50376153,
    -0.0038658213,
    -0.08316135,
    -0.017130688,
    0.12659669,
    0.36212754,
    0.5770378,
    -0.0026799915,
    -0.19310333,
    -0.068640575,
    0.13180655,
    0.3814123,
    0.46170714,
    -0.00032685045,
    -0.25205535,
    -0.104866266,
    0.07662872,
    0.3767714,
    0.5692452,
    -0.18182907,
    -0.44210964,
    -0.37306374,
    -0.2778329,
    -0.15621454,
    -0.023055106,
    -0.34905314,
    -0.46918887,
    -0.32652503,
    -0.17533821,
    -0.013424231,
    0.23628815,
    -0.34334445,
    -0.4333364,
    -0.2837256,
    -0.112828605,
    0.0774326,
    0.28103772,
    0.21040379,
    -0.06204036,
    -0.095324166,
    -0.011239963,
    0.1648674,
    0.2713752,
    -0.11068617,
    -0.24071796,
    -0.12877242,
    0.035447612,
    0.3048336,
    0.5276468,
    -0.26604328,
    -0.35593826,
    -0.1926967,
    0.025967682,
    0.33114037,
    0.61982065,
    -0.20731127,
    -0.10293561,
    -0.22141515,
    -0.54256046,
    -0.53815967,
    -0.1566519,
    -0.34156847,
    -0.004189716,
    -0.21910878,
    0.47924975,
    0.2775319,
    0.11263576,
    -0.29312187,
    -0.07105412,
    0.29844272,
    -0.043196183,
    -0.49799013,
    0.0073049776,
    0.018298991,
    -0.08374308,
    -0.15620223,
    -0.19624043,
    0.2391469,
    0.4914242,
    0.87294245,
    -0.11969389,
    0.09471762,
    0.13143727,
    -0.13189088,
    -0.19179933,
    -0.10541538,
    -0.35254002,
    -0.62237453,
    -0.07130004,
    0.1635002,
    0.10333933,
    -0.16391811,
    0.0076200105,
    0.0061870757,
    -0.0077467104,
    -0.007937893,
    0.0076041985,
    -0.00032685045,
    -0.00023208652,
    0.008934194,
    -0.0025578667,
    -0.16391811,
    0.0076200105,
    0.0061870757,
    -0.0077467104,
    -0.007937893,
    0.0076041985,
    -0.00032685045,
    -0.00023208652,
    0.008934194,
    -0.0025578667,
    -0.0025578667,
    -0.0025578667,
    -0.16391811,
    0.0076200105,
    0.0061870757,
    -0.0077467104,
    -0.007937893,
    0.0076041985,
    -0.00032685045,
    -0.00023208652,
    0.008934194,
    -0.0025578667,
    -0.0025578667,
    -0.0025578667,
    -0.0025578667,
    -0.0025578667,
    -0.16391811,
    0.0076200105,
    0.0061870757,
    -0.0077467104,
    -0.007937893,
    0.0076041985,
    -0.00032685045,
    -0.00023208652,
    0.008934194,
    -0.0025578667,
    -0.0025578667,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S: [f32; NUM_POLICY_FEATURES_6S] = [
    -2.5490334,
    1.0907768,
    0.40533957,
    -2.1783361,
    -1.9656186,
    -0.11910041,
    0.3827465,
    -0.36281496,
    0.098670766,
    -0.061386336,
    0.07916245,
    -0.15045542,
    -0.05818011,
    -0.14055887,
    0.39565188,
    0.47307792,
    0.22034885,
    -0.29811528,
    -0.38566157,
    -0.32027248,
    0.17612194,
    0.31480277,
    0.37420526,
    -0.6160203,
    -0.99503464,
    -1.022247,
    -0.07620941,
    0.78106326,
    2.4153337,
    0.00958837,
    -0.24925435,
    -0.04037198,
    0.31065497,
    0.7048428,
    0.72551566,
    -0.19162245,
    -0.1526411,
    -0.025610907,
    0.015240486,
    0.02938831,
    -0.022778459,
    0.06385909,
    -0.23192704,
    0.25468063,
    0.49240685,
    0.45987254,
    -0.030208213,
    0.28996384,
    -0.059312735,
    0.035686687,
    0.271284,
    0.5214734,
    0.41869536,
    -0.37601113,
    -0.41671708,
    -0.39533865,
    -0.16467261,
    0.31418929,
    0.6781199,
    -1.0295482,
    -0.8719054,
    -0.48587862,
    0.40959165,
    1.2584724,
    1.6943147,
    0.54985595,
    -0.059545174,
    0.29058963,
    0.28040853,
    -0.2037632,
    0.053092442,
    0.39260617,
    0.09004204,
    0.22084866,
    0.1891087,
    0.21848248,
    -0.1416304,
    1.6414697,
    0.4064402,
    0.89881027,
    -0.106248684,
    -0.06722416,
    0.009552879,
    0.48911083,
    0.7436944,
    1.29594,
    -0.11115018,
    -0.24099883,
    -0.31982017,
    2.4572527,
    -0.09656046,
    2.1200073,
    1.8064114,
    0.53237724,
    -3.4268725,
    -0.6832289,
    0.72508657,
    1.391271,
    0.45646173,
    0.5518005,
    0.089685425,
    0.3283857,
    0.2916723,
    0.15119004,
    -0.014768326,
    0.3255551,
    -0.023082325,
    0.32838264,
    -0.3280263,
    -0.49792236,
    0.2521321,
    0.20311585,
    -0.19233644,
    -0.025560826,
    0.21606599,
    0.03086127,
    0.008243782,
    0.0015487336,
    0.2508647,
    0.07878296,
    1.8220797,
    -0.39295647,
    -0.14058624,
    -0.19435617,
    -1.3175937,
    -0.33471224,
    -0.50426483,
    -0.1613428,
    0.15429756,
    0.41458473,
    1.0414675,
    -1.0505555,
    -0.38385266,
    -0.119135685,
    0.10721053,
    0.3579779,
    -1.0944275,
    0.25238204,
    0.9679204,
    1.4556767,
    1.1631404,
    1.005055,
    -0.05970869,
    -0.86475164,
    -0.68896854,
    0.34479606,
    0.99089825,
    0.90510124,
    0.05941692,
    -0.50955284,
    -0.4415106,
    -1.2831217,
    -0.97601056,
    -0.8631987,
    -0.20892455,
    -0.75021267,
    -1.2193079,
    0.3239967,
    -0.026010232,
    -0.039476912,
    -0.12664902,
    0.009535544,
    0.08939319,
    0.21373276,
    -0.19362865,
    0.22576427,
    -0.0027303232,
    -0.077628,
    -0.11106214,
    0.00735133,
    1.9378375,
    1.5150657,
    1.7657595,
    -0.025828417,
    0.5442169,
    1.6175965,
    0.67236245,
    1.4253153,
    0.8264834,
    0.49127612,
    0.57544136,
    -0.038903136,
    0.53424984,
    2.821259,
    0.94532365,
    3.0151558,
    -2.5490334,
    1.0907768,
    0.40533957,
    -2.1783361,
    -1.9656186,
    -0.11910041,
    0.3827465,
    -0.36281496,
    0.098670766,
    -0.061386336,
    0.07916245,
    -0.15045542,
    -0.05818011,
    -0.14055887,
    0.39565188,
    0.47307792,
    0.22034885,
    -0.29811528,
    -0.38566157,
    -0.32027248,
    0.17612194,
    0.31480277,
    0.37420526,
    -0.6160203,
    -0.99503464,
    -1.022247,
    -0.07620941,
    0.78106326,
    2.4153337,
    0.00958837,
    -0.24925435,
    -0.04037198,
    0.31065497,
    0.7048428,
    0.72551566,
    -0.19162245,
    -0.1526411,
    -0.025610907,
    0.015240486,
    0.02938831,
    -0.022778459,
    0.06385909,
    -0.23192704,
    0.25468063,
    0.49240685,
    0.45987254,
    -0.030208213,
    0.28996384,
    -0.059312735,
    0.035686687,
    0.271284,
    0.5214734,
    0.41869536,
    -0.37601113,
    -0.41671708,
    -0.39533865,
    -0.16467261,
    0.31418929,
    0.6781199,
    -1.0295482,
    -0.8719054,
    -0.48587862,
    0.40959165,
    1.2584724,
    1.6943147,
    0.54985595,
    -0.059545174,
    0.29058963,
    0.28040853,
    -0.2037632,
    0.053092442,
    0.39260617,
    0.09004204,
    0.22084866,
    0.1891087,
    0.21848248,
    -0.1416304,
    1.6414697,
    0.4064402,
    0.89881027,
    -0.106248684,
    -0.06722416,
    0.009552879,
    0.48911083,
    0.7436944,
    1.29594,
    -0.11115018,
    -0.24099883,
    -0.31982017,
    2.4572527,
    -0.09656046,
    2.1200073,
    1.8064114,
    0.53237724,
    -3.4268725,
    -0.6832289,
    0.72508657,
    1.391271,
    0.45646173,
    0.5518005,
    0.089685425,
    0.3283857,
    0.2916723,
    0.15119004,
    -0.014768326,
    0.3255551,
    -0.023082325,
    0.32838264,
    -0.3280263,
    -0.49792236,
    0.2521321,
    0.20311585,
    -0.19233644,
    -0.025560826,
    0.21606599,
    0.03086127,
    0.008243782,
    0.0015487336,
    0.2508647,
    0.07878296,
    1.8220797,
    -0.39295647,
    -0.14058624,
    -0.19435617,
    -1.3175937,
    -0.33471224,
    -0.50426483,
    -0.1613428,
    0.15429756,
    0.41458473,
    1.0414675,
    -1.0505555,
    -0.38385266,
    -0.119135685,
    0.10721053,
    0.3579779,
    -1.0944275,
    0.25238204,
    0.9679204,
    1.4556767,
    1.1631404,
    1.005055,
    -0.05970869,
    -0.86475164,
    -0.68896854,
    0.34479606,
    0.99089825,
    0.90510124,
    0.05941692,
    -0.50955284,
    -0.4415106,
    -1.2831217,
    -0.97601056,
    -0.8631987,
    -0.20892455,
    -0.75021267,
    -1.2193079,
    0.3239967,
    -0.026010232,
    -0.039476912,
    -0.12664902,
    0.009535544,
    0.08939319,
    0.21373276,
    -0.19362865,
    0.22576427,
    -0.0027303232,
    -0.077628,
    -0.11106214,
    0.00735133,
    1.9378375,
    1.5150657,
    1.7657595,
    -0.025828417,
    0.5442169,
    1.6175965,
    0.67236245,
    1.4253153,
    0.8264834,
    0.49127612,
    0.57544136,
    -0.038903136,
    0.53424984,
    2.821259,
    0.94532365,
    3.0151558,
];
