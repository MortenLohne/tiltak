use crate::position::num_square_symmetries;

pub const NUM_VALUE_FEATURES_4S: usize = 73;
pub const NUM_POLICY_FEATURES_4S: usize = 138;

pub const NUM_VALUE_FEATURES_5S: usize = 91;
pub const NUM_POLICY_FEATURES_5S: usize = 157;

pub const NUM_VALUE_FEATURES_6S: usize = 94;
pub const NUM_POLICY_FEATURES_6S: usize = 167;

#[derive(Debug)]
pub struct ValueFeatures<'a> {
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub supports_psqt: &'a mut [f32],
    pub captives_psqt: &'a mut [f32],
    pub shallow_supports_per_piece: &'a mut [f32],
    pub deep_supports_per_piece: &'a mut [f32],
    pub shallow_captives_per_piece: &'a mut [f32],
    pub deep_captives_per_piece: &'a mut [f32],
    pub side_to_move: &'a mut [f32],
    pub flatstone_lead: &'a mut [f32],
    pub i_number_of_groups: &'a mut [f32],
    pub critical_squares: &'a mut [f32],
    pub flat_next_to_our_stack: &'a mut [f32],
    pub wall_next_to_our_stack: &'a mut [f32],
    pub cap_next_to_our_stack: &'a mut [f32],
    pub num_lines_occupied: &'a mut [f32],
    pub line_control: &'a mut [f32],
    pub block_their_line: &'a mut [f32],
    pub sidelined_cap: &'a mut [f32],
    pub fully_isolated_cap: &'a mut [f32],
    pub semi_isolated_cap: &'a mut [f32],
}

impl<'a> ValueFeatures<'a> {
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> Self {
        assert_eq!(coefficients.len(), num_value_features::<S>());

        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (supports_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (captives_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (shallow_supports_per_piece, coefficients) = coefficients.split_at_mut(4);
        let (deep_supports_per_piece, coefficients) = coefficients.split_at_mut(4);
        let (shallow_captives_per_piece, coefficients) = coefficients.split_at_mut(4);
        let (deep_captives_per_piece, coefficients) = coefficients.split_at_mut(4);
        let (side_to_move, coefficients) = coefficients.split_at_mut(3);
        let (flatstone_lead, coefficients) = coefficients.split_at_mut(3);
        let (i_number_of_groups, coefficients) = coefficients.split_at_mut(3);
        let (critical_squares, coefficients) = coefficients.split_at_mut(6);
        let (flat_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (wall_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (cap_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (num_lines_occupied, coefficients) = coefficients.split_at_mut(S + 1);
        let (line_control, coefficients) = coefficients.split_at_mut(S + 1);
        let (block_their_line, coefficients) = coefficients.split_at_mut(S + 1);
        let (sidelined_cap, coefficients) = coefficients.split_at_mut(3);
        let (fully_isolated_cap, coefficients) = coefficients.split_at_mut(3);
        let (semi_isolated_cap, coefficients) = coefficients.split_at_mut(3);

        assert!(coefficients.is_empty());

        ValueFeatures {
            flat_psqt,
            wall_psqt,
            cap_psqt,
            supports_psqt,
            captives_psqt,
            shallow_supports_per_piece,
            deep_supports_per_piece,
            shallow_captives_per_piece,
            deep_captives_per_piece,
            side_to_move,
            flatstone_lead,
            i_number_of_groups,
            critical_squares,
            flat_next_to_our_stack,
            wall_next_to_our_stack,
            cap_next_to_our_stack,
            num_lines_occupied,
            line_control,
            block_their_line,
            sidelined_cap,
            fully_isolated_cap,
            semi_isolated_cap,
        }
    }
}

#[derive(Debug)]
pub struct PolicyFeatures<'a> {
    pub decline_win: &'a mut [f32],
    pub place_to_win: &'a mut [f32],
    pub place_to_draw: &'a mut [f32],
    pub place_to_loss: &'a mut [f32],
    pub place_to_allow_opponent_to_end: &'a mut [f32],
    pub two_flats_left: &'a mut [f32],
    pub three_flats_left: &'a mut [f32],
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_road_stones_in_line: &'a mut [f32],
    pub their_road_stones_in_line: &'a mut [f32],
    pub extend_single_group_base: &'a mut [f32],
    pub extend_single_group_linear: &'a mut [f32],
    pub extend_single_group_to_new_line_base: &'a mut [f32],
    pub extend_single_group_to_new_line_linear: &'a mut [f32],
    pub merge_two_groups_base: &'a mut [f32],
    pub merge_two_groups_linear: &'a mut [f32],
    pub block_merger_base: &'a mut [f32],
    pub block_merger_linear: &'a mut [f32],
    pub place_our_critical_square: &'a mut [f32],
    pub place_their_critical_square: &'a mut [f32],
    pub ignore_their_critical_square: &'a mut [f32],
    pub next_to_our_last_stone: &'a mut [f32],
    pub next_to_their_last_stone: &'a mut [f32],
    pub diagonal_to_our_last_stone: &'a mut [f32],
    pub diagonal_to_their_last_stone: &'a mut [f32],
    pub attack_strong_flats: &'a mut [f32],
    pub blocking_stone_blocks_extensions_of_two_flats: &'a mut [f32],
    pub attack_strong_stack_with_wall: &'a mut [f32],
    pub attack_strong_stack_with_cap: &'a mut [f32],
    pub attack_last_movement: &'a mut [f32],
    pub place_last_movement: &'a mut [f32],
    pub move_role_bonus: &'a mut [f32],
    pub fcd: &'a mut [f32],
    pub stack_movement_that_gives_us_top_pieces: &'a mut [f32],
    pub stack_captured_by_movement: &'a mut [f32],
    pub stack_capture_in_strong_line: &'a mut [f32],
    pub stack_capture_in_strong_line_cap: &'a mut [f32],
    pub move_cap_onto_strong_line: &'a mut [f32],
    pub move_cap_onto_strong_line_with_critical_square: &'a mut [f32],
    pub recapture_stack_pure: &'a mut [f32],
    pub recapture_stack_impure: &'a mut [f32],
    pub move_last_placement: &'a mut [f32],
    pub continue_spread: &'a mut [f32],
    pub move_onto_critical_square: &'a mut [f32],
    pub spread_that_connects_groups_to_win: &'a mut [f32],
}

impl<'a> PolicyFeatures<'a> {
    #[inline(never)]
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> PolicyFeatures<'a> {
        assert_eq!(coefficients.len(), num_policy_features::<S>());

        let (decline_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_draw, coefficients) = coefficients.split_at_mut(1);
        let (place_to_loss, coefficients) = coefficients.split_at_mut(1);
        let (place_to_allow_opponent_to_end, coefficients) = coefficients.split_at_mut(3);
        let (two_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (three_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (their_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (extend_single_group_to_new_line_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_to_new_line_linear, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_linear, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_base, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_linear, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_base, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_linear, coefficients) = coefficients.split_at_mut(3);
        let (place_our_critical_square, coefficients) = coefficients.split_at_mut(1);
        let (place_their_critical_square, coefficients) = coefficients.split_at_mut(4);
        let (ignore_their_critical_square, coefficients) = coefficients.split_at_mut(2);
        let (next_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (next_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (attack_strong_flats, coefficients) = coefficients.split_at_mut(1);
        let (blocking_stone_blocks_extensions_of_two_flats, coefficients) =
            coefficients.split_at_mut(1);
        let (attack_strong_stack_with_wall, coefficients) = coefficients.split_at_mut(6);
        let (attack_strong_stack_with_cap, coefficients) = coefficients.split_at_mut(6);
        let (attack_last_movement, coefficients) = coefficients.split_at_mut(4);
        let (place_last_movement, coefficients) = coefficients.split_at_mut(3);
        let (move_role_bonus, coefficients) = coefficients.split_at_mut(3);
        let (fcd, coefficients) = coefficients.split_at_mut(8);
        let (stack_movement_that_gives_us_top_pieces, coefficients) = coefficients.split_at_mut(6);
        let (stack_captured_by_movement, coefficients) = coefficients.split_at_mut(1);
        let (stack_capture_in_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (stack_capture_in_strong_line_cap, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line_with_critical_square, coefficients) =
            coefficients.split_at_mut(S - 3);
        let (recapture_stack_pure, coefficients) = coefficients.split_at_mut(3);
        let (recapture_stack_impure, coefficients) = coefficients.split_at_mut(3);
        let (move_last_placement, coefficients) = coefficients.split_at_mut(3);
        let (continue_spread, coefficients) = coefficients.split_at_mut(3);
        let (move_onto_critical_square, coefficients) = coefficients.split_at_mut(3);
        let (spread_that_connects_groups_to_win, coefficients) = coefficients.split_at_mut(1);

        assert!(coefficients.is_empty());

        PolicyFeatures {
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            attack_strong_stack_with_wall,
            attack_strong_stack_with_cap,
            attack_last_movement,
            place_last_movement,
            move_role_bonus,
            fcd,
            stack_movement_that_gives_us_top_pieces,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            recapture_stack_pure,
            recapture_stack_impure,
            move_last_placement,
            continue_spread,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
        }
    }
}

pub fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S: [f32; NUM_VALUE_FEATURES_4S] = [
    0.54923415,
    0.7282322,
    1.0255456,
    1.583941,
    2.0131814,
    2.5839906,
    0.002932434,
    -0.0025715088,
    -0.00047107227,
    0.94568884,
    1.0339974,
    1.2408891,
    0.59685516,
    0.7428497,
    0.9859054,
    1.027361,
    1.5435753,
    0.009879224,
    -0.0059808395,
    0.43253043,
    0.21758828,
    0.005999675,
    -0.0073812627,
    -0.67089164,
    -0.26996073,
    -0.008598236,
    0.0018530292,
    -0.678351,
    -0.71593153,
    0.005024814,
    0.0038007405,
    1.7668045,
    1.7301219,
    2.287093,
    0.6275563,
    0.26913106,
    1.4216075,
    -0.17621191,
    0.09113373,
    0.07649631,
    0.34329876,
    0.02262616,
    0.082917236,
    -0.058202233,
    -0.0047925757,
    -0.005560641,
    0.01647186,
    -0.25089246,
    -0.0082427785,
    1.1404806,
    -1.4436735,
    -0.7150899,
    0.06830657,
    0.93882126,
    -1.1160055,
    -0.808328,
    0.33283132,
    1.5984336,
    -0.0060374904,
    -0.017376488,
    0.0060048904,
    0.07591783,
    0.0022945618,
    0.0074333027,
    0.0074355192,
    0.0020511579,
    -0.0041063665,
    -0.00496279,
    0.007571606,
    0.009635687,
    -0.0014058612,
    -0.0038658213,
    -0.00062850676,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S: [f32; NUM_POLICY_FEATURES_4S] = [
    -3.5412662,
    1.4149675,
    1.1058434,
    -2.3060398,
    -2.595402,
    0.1793776,
    0.45736638,
    -0.23066978,
    0.1939437,
    -0.1522873,
    0.15449192,
    0.0655375,
    0.16533177,
    0.42992452,
    -0.26463062,
    -0.38237414,
    0.3347014,
    -0.0011021066,
    -0.0057374667,
    0.00015021767,
    0.009490719,
    -0.2842388,
    0.4562715,
    1.12615,
    -0.21534562,
    -0.09461916,
    -0.19442384,
    -0.16172,
    0.00022801384,
    -0.007706399,
    -0.008808966,
    -0.0034274147,
    0.14477026,
    -0.3858034,
    0.3179631,
    1.2231429,
    -0.55721563,
    -0.45426977,
    -0.41170534,
    0.77433026,
    0.008160291,
    -0.0016911505,
    0.008150065,
    0.0016175173,
    0.5246085,
    -0.12868753,
    0.0010270234,
    -1.2726171,
    -0.10739294,
    0.008161059,
    0.5440469,
    0.34364632,
    0.0021942016,
    0.013545911,
    -0.2110311,
    0.0051122922,
    0.84840757,
    1.2974731,
    0.0074368455,
    0.16573076,
    -0.88872755,
    -0.0077824043,
    0.21244001,
    0.41564927,
    0.0043121455,
    -0.93383473,
    -0.35057133,
    -0.006815267,
    2.434956,
    0.22529635,
    0.97277987,
    0.008927224,
    0.6316321,
    -5.1965723,
    -1.3323044,
    0.24273108,
    1.4061929,
    0.4250452,
    0.28457013,
    0.28621477,
    0.58104753,
    0.18170682,
    0.34885168,
    -0.34494355,
    0.5370261,
    0.0060925093,
    0.0012618108,
    -0.0039176345,
    0.0039970186,
    -0.005868571,
    -0.0075792954,
    0.00952702,
    0.0032783058,
    0.35574046,
    0.060544573,
    -0.0077192923,
    -0.009022991,
    0.06677693,
    -0.20701453,
    -0.006355319,
    -1.2534429,
    -0.80897087,
    0.0012055086,
    -2.063296,
    -1.8958395,
    -0.6169733,
    -0.010288946,
    0.6373193,
    1.0100257,
    0.8669862,
    0.03916879,
    0.8587238,
    0.24110447,
    -2.6234472,
    -3.1076941,
    -0.2991611,
    -0.3426947,
    0.44972244,
    -0.14819458,
    -0.005897157,
    0.0069459323,
    -0.0069796084,
    1.341971,
    0.8515803,
    0.0042860033,
    -0.49573237,
    -0.38458416,
    0.0054509398,
    0.3529944,
    1.2234406,
    0.005903894,
    0.18676025,
    -0.24061622,
    0.007400766,
    0.51002085,
    1.9820539,
    0.5024659,
    3.0004208,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S: [f32; NUM_VALUE_FEATURES_5S] = [
    -0.01766367,
    0.13190418,
    0.15378818,
    0.31723237,
    0.28847328,
    0.22101857,
    0.9498503,
    1.2208939,
    1.280625,
    1.5973332,
    1.6176373,
    1.599286,
    -0.3143458,
    0.17446846,
    0.24319822,
    1.0477629,
    1.2258011,
    1.362184,
    0.72082955,
    0.8353656,
    0.88150555,
    0.8901383,
    0.9415868,
    1.0723851,
    0.36758053,
    0.48239633,
    0.49854112,
    0.5758226,
    0.5928107,
    0.6420837,
    0.67831975,
    0.99770945,
    1.9606228,
    1.2180399,
    0.28024656,
    0.051383656,
    0.023585834,
    0.12440024,
    -0.57056105,
    -0.29262114,
    -0.3302291,
    -0.19528829,
    -0.5421305,
    -0.46610847,
    -0.28468513,
    -0.48777387,
    1.4224459,
    1.0963479,
    1.3554882,
    0.77129334,
    -0.07038798,
    0.40416652,
    -0.22574988,
    -0.13048096,
    -0.030161168,
    0.3232189,
    0.04954554,
    0.15955968,
    0.0054203826,
    0.09706385,
    0.0062534767,
    0.0077612293,
    -0.18049242,
    -0.15707847,
    1.0325853,
    -1.139021,
    -0.6868432,
    -0.23241615,
    0.25649944,
    0.78682137,
    -1.6941394,
    -1.1845641,
    -0.19539261,
    0.99373823,
    2.0744228,
    -0.00188174,
    0.045624822,
    0.05865494,
    0.17137231,
    0.2693768,
    0.1374934,
    0.15292902,
    -0.29544687,
    -0.079517275,
    -0.1894004,
    -0.76731634,
    -0.25005832,
    -0.11255828,
    -0.42605087,
    0.06926874,
    -0.22079101,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S: [f32; NUM_POLICY_FEATURES_5S] = [
    -2.8988473,
    1.1347729,
    0.5881006,
    -2.140698,
    -2.0669162,
    0.04782655,
    0.46364918,
    -0.30328232,
    0.14566056,
    -0.13928159,
    0.08672825,
    -0.11136682,
    0.16555375,
    0.06245273,
    0.3602398,
    0.06117196,
    -0.10664045,
    -0.19875418,
    -0.2980483,
    -0.26438984,
    0.09294898,
    0.14806856,
    0.24063627,
    -1.2228117,
    -1.2821192,
    -0.93885976,
    0.4118655,
    1.0030483,
    2.6614106,
    0.012065809,
    -0.2739929,
    -0.0033321555,
    0.428898,
    0.7702481,
    -0.21957834,
    -0.16412747,
    -0.05224464,
    -0.085084125,
    -0.034759466,
    -0.006449194,
    0.011530766,
    0.47910526,
    1.0481935,
    -0.30798692,
    0.28897607,
    -0.17223026,
    0.026869573,
    0.3791455,
    0.40677053,
    -0.31719816,
    -0.44991323,
    -0.42798683,
    0.06962665,
    0.5603803,
    -0.51421636,
    -0.64138865,
    -0.26717383,
    0.47714114,
    2.1716268,
    0.59951043,
    -0.08445139,
    0.4603153,
    -0.017988171,
    -0.32745796,
    -0.5777682,
    0.36917388,
    0.129515,
    0.1798428,
    0.25610211,
    0.016737489,
    -0.4375786,
    1.5878702,
    0.34092107,
    0.8231771,
    -0.15254986,
    -0.18125263,
    -0.067354836,
    0.4090455,
    0.7321307,
    1.3698292,
    -0.23006481,
    -0.5988486,
    -0.33484247,
    2.1844716,
    0.21814968,
    2.1038656,
    2.5668657,
    0.6224101,
    -3.6081088,
    -1.0981581,
    0.39823157,
    1.4065506,
    0.32675704,
    0.4146189,
    0.15160671,
    0.3143033,
    0.27085844,
    0.33542085,
    -0.04940964,
    0.389324,
    -0.018834693,
    0.3976643,
    -0.12675528,
    -0.18435659,
    -0.0052329167,
    0.061508995,
    -0.27062738,
    -0.06379614,
    0.2762668,
    -0.055141266,
    -0.0066909315,
    0.0056339707,
    0.33813974,
    0.09162735,
    1.1243916,
    -0.4534012,
    0.4215058,
    0.025852771,
    -1.7522488,
    -1.4056306,
    -0.56384337,
    0.24279355,
    0.8406356,
    1.2873787,
    0.9007918,
    0.45220765,
    0.39922598,
    -0.25047618,
    -0.049174085,
    -0.8946043,
    -0.35008296,
    -0.7067933,
    0.37923425,
    -0.007130533,
    -0.11353337,
    0.033156,
    0.12926123,
    0.04119551,
    0.30864897,
    -0.27475727,
    -0.04322361,
    1.7980095,
    1.1588541,
    1.3803792,
    -0.14267845,
    0.324929,
    1.531742,
    0.50831693,
    1.3297611,
    1.1199014,
    0.28067788,
    -0.018419065,
    -0.2990312,
    0.04972352,
    2.526451,
    0.9600402,
    3.2552776,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S: [f32; NUM_VALUE_FEATURES_6S] = [
    0.15032494,
    0.2004099,
    0.23468137,
    0.36364177,
    0.42615497,
    0.41651413,
    0.74279684,
    1.0102295,
    0.9851218,
    1.2786154,
    1.3374159,
    1.3933432,
    -0.38403457,
    0.034885645,
    0.118072756,
    0.7591345,
    1.0394831,
    1.250817,
    0.52444607,
    0.63054544,
    0.696335,
    0.69933826,
    0.7730416,
    0.75132674,
    0.36209446,
    0.4357826,
    0.44520032,
    0.53792,
    0.570159,
    0.5559521,
    0.609749,
    0.8553306,
    1.4764518,
    1.0722666,
    0.29201478,
    -0.08819922,
    -0.0846832,
    -0.0653986,
    -0.55806386,
    -0.19375761,
    -0.17476112,
    -0.106859066,
    -0.4016885,
    -0.47403577,
    -0.64445275,
    -0.36365113,
    1.0030613,
    0.83665866,
    1.005228,
    0.8072807,
    0.33252513,
    0.6622387,
    -0.25884378,
    -0.19568622,
    -0.012775312,
    0.25674498,
    0.088972315,
    0.15774657,
    -0.016921382,
    0.11569098,
    -0.019284582,
    0.022707444,
    -0.12779771,
    -0.12921244,
    0.85275567,
    -0.684027,
    -0.50397587,
    -0.3003094,
    -0.050307985,
    0.2258372,
    0.47624534,
    -1.1474047,
    -0.88395405,
    -0.40220466,
    0.17469327,
    0.8449353,
    1.4083447,
    -0.0026799915,
    0.016039887,
    0.034118842,
    0.033347696,
    0.14921796,
    0.055567764,
    0.18217656,
    0.22071688,
    -0.20521808,
    -0.10074911,
    -0.21885154,
    -0.4905714,
    -0.463265,
    -0.11369107,
    -0.33212864,
    0.0018254452,
    -0.20465,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S: [f32; NUM_POLICY_FEATURES_6S] = [
    -2.535116,
    1.0907569,
    0.40524244,
    -2.181887,
    -1.968802,
    -0.11917656,
    0.38271382,
    -0.36283994,
    0.09867155,
    -0.061409462,
    0.07916133,
    -0.15321337,
    -0.060929418,
    -0.14331006,
    0.39290702,
    0.4703334,
    0.21760495,
    -0.30282402,
    -0.39037907,
    -0.32486394,
    0.17144465,
    0.3102241,
    0.3697221,
    -0.61454904,
    -0.9911107,
    -1.0185176,
    -0.07117402,
    0.7874563,
    2.421756,
    0.011820012,
    -0.24702176,
    -0.03813666,
    0.3128931,
    0.70708513,
    0.72985405,
    -0.19249292,
    -0.15348682,
    -0.026432876,
    0.014452363,
    0.028625673,
    -0.029603083,
    0.06116821,
    -0.23427354,
    0.25243974,
    0.4909238,
    0.45805004,
    -0.045729037,
    0.28910387,
    -0.060167685,
    0.03483305,
    0.2704375,
    0.52066535,
    0.4186114,
    -0.37285325,
    -0.4135418,
    -0.3920344,
    -0.16125435,
    0.31773764,
    0.68180156,
    -1.0302682,
    -0.8723733,
    -0.48601934,
    0.40979818,
    1.2597852,
    1.7095273,
    0.54986393,
    -0.05900755,
    0.291666,
    0.28039116,
    -0.20450659,
    0.056248996,
    0.39258832,
    0.08957513,
    0.21888807,
    0.18911141,
    0.21881586,
    -0.14175992,
    1.6414505,
    0.40631193,
    0.8982799,
    -0.10624554,
    -0.0672301,
    0.009537843,
    0.48910815,
    0.74365145,
    1.295569,
    -0.11111459,
    -0.24091642,
    -0.32004,
    2.4569204,
    -0.0972284,
    2.1200707,
    1.8078233,
    0.57246286,
    -3.4298449,
    -1.0747675,
    0.72510326,
    1.3912572,
    0.45647237,
    0.5518017,
    0.08968735,
    0.3280123,
    0.29166895,
    0.15113096,
    -0.014783104,
    0.32550287,
    -0.023079023,
    0.32833552,
    -0.33072734,
    -0.499629,
    0.24571273,
    0.19656153,
    -0.1918584,
    -0.028010132,
    0.21605434,
    0.030921938,
    0.0030306866,
    -0.00916178,
    0.25087175,
    0.07875697,
    1.8217129,
    -0.4179685,
    0.5812297,
    0.13241184,
    -2.1065488,
    -1.7166733,
    -0.47291455,
    0.22434449,
    0.98891175,
    1.5829613,
    1.4506613,
    0.34640786,
    0.74440104,
    -0.53434145,
    0.06341755,
    -1.1346105,
    -0.513674,
    -0.9845123,
    0.3281272,
    -0.0150572155,
    -0.026659677,
    -0.11517429,
    -0.005583155,
    0.090964735,
    0.2801511,
    -0.18313642,
    0.20781949,
    -0.24282178,
    -0.095767155,
    -0.10796535,
    -0.0048874714,
    1.9831843,
    1.5069922,
    1.7523544,
    -0.056655455,
    0.4023645,
    1.7022694,
    0.6785151,
    1.724826,
    1.0850345,
    0.47650087,
    0.17215258,
    -0.29606,
    0.285711,
    2.7643132,
    0.9976007,
    3.1329322,
];
