use std::{array, mem};

use half::f16;

use crate::{
    evaluation::policy_eval::sigmoid,
    position::{num_line_symmetries, num_square_symmetries, Komi},
};

use super::policy_eval::policy_offset;

pub const NUM_VALUE_FEATURES_4S: usize = 320;
pub const NUM_POLICY_FEATURES_4S: usize = 176;

pub const NUM_VALUE_FEATURES_5S: usize = 400;
pub const NUM_POLICY_FEATURES_5S: usize = 200;

pub const NUM_VALUE_FEATURES_6S: usize = 416;
pub const NUM_POLICY_FEATURES_6S: usize = 208;

const fn value_padding<const S: usize>() -> usize {
    match S {
        4 => 6,
        5 => 6,
        6 => 2,
        _ => unimplemented!(),
    }
}

const fn policy_padding<const S: usize>() -> usize {
    match S {
        4 => 7,
        5 => 3,
        6 => 1,
        _ => unimplemented!(),
    }
}

#[derive(Debug, Clone, Copy)]
pub struct IndexPair {
    start: usize,
    length: usize,
}

impl IndexPair {
    pub const fn next(start: usize, length: usize) -> (Self, usize) {
        (Self { start, length }, start + length)
    }

    pub fn as_slice<'a, T>(&self, slice: &'a [T]) -> &'a [T] {
        &slice[self.start..self.start + self.length]
    }

    pub fn as_mut_slice<'a, T>(&self, slice: &'a mut [T]) -> &'a mut [T] {
        &mut slice[self.start..self.start + self.length]
    }
}

#[derive(Debug)]
pub struct ValueIndexes<const S: usize> {
    pub first_ply: IndexPair,
    pub second_ply: IndexPair,
    pub flat_psqt: IndexPair,
    pub wall_psqt: IndexPair,
    pub cap_psqt: IndexPair,
    pub supports_psqt: IndexPair,
    pub captives_psqt: IndexPair,
    pub flat_win_this_ply: IndexPair,
    pub flat_win_next_ply: IndexPair,
    pub flat_win_two_ply: IndexPair,
    pub flat_win_three_ply: IndexPair,
    pub one_reserve_left_us: IndexPair,
    pub one_reserve_left_them: IndexPair,
    pub shallow_supports_per_piece: IndexPair,
    pub shallow_supports_per_piece_mobility: IndexPair,
    pub shallow_supports_per_piece_mob_scaled: IndexPair,
    pub deep_supports_per_piece: IndexPair,
    pub shallow_captives_per_piece: IndexPair,
    pub shallow_captives_per_piece_mobility: IndexPair,
    pub shallow_captives_per_piece_mob_scaled: IndexPair,
    pub deep_captives_per_piece: IndexPair,
    pub to_move_opening_flatstone_lead: IndexPair,
    pub to_move_middlegame_flatstone_lead: IndexPair,
    pub to_move_endgame_flatstone_lead: IndexPair,
    pub i_number_of_groups: IndexPair,
    pub critical_squares: IndexPair,
    pub critical_square_cap_attack: IndexPair,
    pub flat_next_to_our_stack: IndexPair,
    pub wall_next_to_our_stack: IndexPair,
    pub cap_next_to_our_stack: IndexPair,
    pub num_lines_occupied: IndexPair,
    pub line_control_empty: IndexPair,
    pub line_control_their_blocking_piece: IndexPair,
    pub line_control_other: IndexPair,
    pub line_control_guarded_flat: IndexPair,
    pub line_control_guarded_wall: IndexPair,
    pub line_control_guarded_cap: IndexPair,
    pub sidelined_cap: IndexPair,
    pub fully_isolated_cap: IndexPair,
    pub semi_isolated_cap: IndexPair,
    pub padding: IndexPair,
}

impl<const S: usize> ValueIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;

        let (first_ply, i) = IndexPair::next(i, 1);
        let (second_ply, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (supports_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (captives_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_win_this_ply, i) = IndexPair::next(i, 1);
        let (flat_win_next_ply, i) = IndexPair::next(i, 2);
        let (flat_win_two_ply, i) = IndexPair::next(i, 2);
        let (flat_win_three_ply, i) = IndexPair::next(i, 3);
        let (one_reserve_left_us, i) = IndexPair::next(i, 4);
        let (one_reserve_left_them, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece_mobility, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece_mob_scaled, i) = IndexPair::next(i, 4);
        let (deep_supports_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece_mobility, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece_mob_scaled, i) = IndexPair::next(i, 4);
        let (deep_captives_per_piece, i) = IndexPair::next(i, 4);
        let (to_move_opening_flatstone_lead, i) = IndexPair::next(i, 9);
        let (to_move_middlegame_flatstone_lead, i) = IndexPair::next(i, 9);
        let (to_move_endgame_flatstone_lead, i) = IndexPair::next(i, 9);
        let (i_number_of_groups, i) = IndexPair::next(i, 3);
        let (critical_squares, i) = IndexPair::next(i, 4);
        let (critical_square_cap_attack, i) = IndexPair::next(i, 6);
        let (flat_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (wall_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (cap_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (num_lines_occupied, i) = IndexPair::next(i, S + 1);
        let (line_control_empty, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_their_blocking_piece, i) =
            IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_other, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_guarded_flat, i) = IndexPair::next(i, 3);
        let (line_control_guarded_wall, i) = IndexPair::next(i, 3);
        let (line_control_guarded_cap, i) = IndexPair::next(i, 3);
        let (sidelined_cap, i) = IndexPair::next(i, 3);
        let (fully_isolated_cap, i) = IndexPair::next(i, 3);
        let (semi_isolated_cap, i) = IndexPair::next(i, 3);
        let (padding, i) = IndexPair::next(i, value_padding::<S>() / 2);

        assert!(i == num_value_features::<S>() / 2);

        ValueIndexes {
            first_ply,
            second_ply,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            supports_psqt,
            captives_psqt,
            flat_win_this_ply,
            flat_win_next_ply,
            flat_win_two_ply,
            flat_win_three_ply,
            one_reserve_left_us,
            one_reserve_left_them,
            shallow_supports_per_piece,
            shallow_supports_per_piece_mobility,
            shallow_supports_per_piece_mob_scaled,
            deep_supports_per_piece,
            shallow_captives_per_piece,
            shallow_captives_per_piece_mobility,
            shallow_captives_per_piece_mob_scaled,
            deep_captives_per_piece,
            to_move_opening_flatstone_lead,
            to_move_middlegame_flatstone_lead,
            to_move_endgame_flatstone_lead,
            i_number_of_groups,
            critical_squares,
            critical_square_cap_attack,
            flat_next_to_our_stack,
            wall_next_to_our_stack,
            cap_next_to_our_stack,
            num_lines_occupied,
            line_control_empty,
            line_control_their_blocking_piece,
            line_control_other,
            line_control_guarded_flat,
            line_control_guarded_wall,
            line_control_guarded_cap,
            sidelined_cap,
            fully_isolated_cap,
            semi_isolated_cap,
            padding,
        }
    }
}

pub const VALUE_INDEXES_4S: ValueIndexes<4> = ValueIndexes::new();
pub const VALUE_INDEXES_5S: ValueIndexes<5> = ValueIndexes::new();
pub const VALUE_INDEXES_6S: ValueIndexes<6> = ValueIndexes::new();

impl<const S: usize> ValueIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> ValueIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn value_indexes<const S: usize>() -> ValueIndexes<S> {
    match S {
        4 => VALUE_INDEXES_4S.downcast_size(),
        5 => VALUE_INDEXES_5S.downcast_size(),
        6 => VALUE_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

#[derive(Debug)]
pub struct PolicyIndexes<const S: usize> {
    pub flat_psqt_white: IndexPair,
    pub flat_psqt_black: IndexPair,
    pub wall_psqt_white: IndexPair,
    pub wall_psqt_black: IndexPair,
    pub cap_psqt_white: IndexPair,
    pub cap_psqt_black: IndexPair,
    pub move_role_bonus_white: IndexPair,
    pub move_role_bonus_black: IndexPair,
    pub decline_win: IndexPair,
    pub place_to_win: IndexPair,
    pub place_to_draw: IndexPair,
    pub place_to_loss: IndexPair,
    pub place_to_allow_opponent_to_end: IndexPair,
    pub two_flats_left: IndexPair,
    pub three_flats_left: IndexPair,
    pub our_road_stones_in_line: IndexPair,
    pub their_road_stones_in_line: IndexPair,
    pub extend_single_group_base: IndexPair,
    pub extend_single_group_linear: IndexPair,
    pub extend_single_group_to_new_line_base: IndexPair,
    pub extend_single_group_to_new_line_linear: IndexPair,
    pub merge_two_groups_base: IndexPair,
    pub merge_two_groups_linear: IndexPair,
    pub block_merger_base: IndexPair,
    pub block_merger_linear: IndexPair,
    pub place_our_critical_square: IndexPair,
    pub place_their_critical_square: IndexPair,
    pub ignore_their_critical_square: IndexPair,
    pub next_to_our_last_stone: IndexPair,
    pub next_to_their_last_stone: IndexPair,
    pub diagonal_to_our_last_stone: IndexPair,
    pub diagonal_to_their_last_stone: IndexPair,
    pub attack_strong_flats: IndexPair,
    pub blocking_stone_blocks_extensions_of_two_flats: IndexPair,
    pub attack_strong_stack_with_wall: IndexPair,
    pub attack_strong_stack_with_cap: IndexPair,
    pub attack_last_movement: IndexPair,
    pub place_last_movement: IndexPair,
    pub simple_movement: IndexPair,
    pub simple_capture: IndexPair,
    pub simple_self_capture: IndexPair,
    pub pure_spread: IndexPair,
    pub fcd_highest_board: IndexPair,
    pub fcd_highest_stack: IndexPair,
    pub fcd_other: IndexPair,
    pub stack_captured_by_movement: IndexPair,
    pub stack_capture_in_strong_line: IndexPair,
    pub stack_capture_in_strong_line_cap: IndexPair,
    pub move_cap_onto_strong_line: IndexPair,
    pub move_cap_onto_strong_line_with_critical_square: IndexPair,
    pub recapture_stack_pure: IndexPair,
    pub recapture_stack_impure: IndexPair,
    pub move_last_placement: IndexPair,
    pub continue_spread: IndexPair,
    pub move_onto_critical_square: IndexPair,
    pub spread_that_connects_groups_to_win: IndexPair,
    pub padding: IndexPair,
}

pub const POLICY_INDEXES_4S: PolicyIndexes<4> = PolicyIndexes::new();
pub const POLICY_INDEXES_5S: PolicyIndexes<5> = PolicyIndexes::new();
pub const POLICY_INDEXES_6S: PolicyIndexes<6> = PolicyIndexes::new();

impl<const S: usize> PolicyIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> PolicyIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn policy_indexes<const S: usize>() -> PolicyIndexes<S> {
    match S {
        4 => POLICY_INDEXES_4S.downcast_size(),
        5 => POLICY_INDEXES_5S.downcast_size(),
        6 => POLICY_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

impl<const S: usize> PolicyIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;
        let (flat_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (move_role_bonus_white, i) = IndexPair::next(i, 3);
        let (move_role_bonus_black, i) = IndexPair::next(i, 3);
        let (decline_win, i) = IndexPair::next(i, 1);
        let (place_to_win, i) = IndexPair::next(i, 1);
        let (place_to_draw, i) = IndexPair::next(i, 1);
        let (place_to_loss, i) = IndexPair::next(i, 1);
        let (place_to_allow_opponent_to_end, i) = IndexPair::next(i, 3);
        let (two_flats_left, i) = IndexPair::next(i, 2);
        let (three_flats_left, i) = IndexPair::next(i, 2);
        let (our_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (their_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (extend_single_group_to_new_line_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_to_new_line_linear, i) = IndexPair::next(i, 3);
        let (extend_single_group_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_linear, i) = IndexPair::next(i, 3);
        let (merge_two_groups_base, i) = IndexPair::next(i, 3);
        let (merge_two_groups_linear, i) = IndexPair::next(i, 3);
        let (block_merger_base, i) = IndexPair::next(i, 3);
        let (block_merger_linear, i) = IndexPair::next(i, 3);
        let (place_our_critical_square, i) = IndexPair::next(i, 1);
        let (place_their_critical_square, i) = IndexPair::next(i, 4);
        let (ignore_their_critical_square, i) = IndexPair::next(i, 2);
        let (next_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (next_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (attack_strong_flats, i) = IndexPair::next(i, 1);
        let (blocking_stone_blocks_extensions_of_two_flats, i) = IndexPair::next(i, 1);
        let (attack_strong_stack_with_wall, i) = IndexPair::next(i, 6);
        let (attack_strong_stack_with_cap, i) = IndexPair::next(i, 6);
        let (attack_last_movement, i) = IndexPair::next(i, 4);
        let (place_last_movement, i) = IndexPair::next(i, 3);
        let (simple_movement, i) = IndexPair::next(i, 3);
        let (simple_capture, i) = IndexPair::next(i, 4);
        let (simple_self_capture, i) = IndexPair::next(i, 4);
        let (pure_spread, i) = IndexPair::next(i, 2);
        let (fcd_highest_board, i) = IndexPair::next(i, 6);
        let (fcd_highest_stack, i) = IndexPair::next(i, 6);
        let (fcd_other, i) = IndexPair::next(i, 8);
        let (stack_captured_by_movement, i) = IndexPair::next(i, 1);
        let (stack_capture_in_strong_line, i) = IndexPair::next(i, S - 3);
        let (stack_capture_in_strong_line_cap, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line_with_critical_square, i) = IndexPair::next(i, S - 3);
        let (recapture_stack_pure, i) = IndexPair::next(i, 3);
        let (recapture_stack_impure, i) = IndexPair::next(i, 3);
        let (move_last_placement, i) = IndexPair::next(i, 3);
        let (continue_spread, i) = IndexPair::next(i, 3);
        let (move_onto_critical_square, i) = IndexPair::next(i, 3);
        let (spread_that_connects_groups_to_win, i) = IndexPair::next(i, 1);
        let (padding, i) = IndexPair::next(i, policy_padding::<S>());

        assert!(i == num_policy_features::<S>());

        PolicyIndexes {
            flat_psqt_white,
            flat_psqt_black,
            wall_psqt_white,
            wall_psqt_black,
            cap_psqt_white,
            cap_psqt_black,
            move_role_bonus_white,
            move_role_bonus_black,
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            attack_strong_stack_with_wall,
            attack_strong_stack_with_cap,
            attack_last_movement,
            place_last_movement,
            simple_movement,
            simple_capture,
            simple_self_capture,
            pure_spread,
            fcd_highest_board,
            fcd_highest_stack,
            fcd_other,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            recapture_stack_pure,
            recapture_stack_impure,
            move_last_placement,
            continue_spread,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
            padding,
        }
    }
}

pub trait ValueApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn finish(&mut self) -> f32;
}

#[derive(Debug, Clone)]
pub struct Value<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for Value<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Value {
            features: vec![f16::ZERO; num_value_features::<S>() / 2],
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn finish(&mut self) -> f32 {
        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>();

        self.features.fill(f16::ZERO);

        total_value
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalValue<const S: usize> {
    val: f32,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for IncrementalValue<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalValue {
            val: 0.0,
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn finish(&mut self) -> f32 {
        let total_value = self.val;

        self.val = 0.0;

        total_value
    }
}

pub trait PolicyApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn eval_one(&mut self, index_pair: IndexPair, index: usize) {
        self.eval_i8(index_pair, index, 1)
    }
    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.eval(index_pair, index, f16::from(val))
    }
    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.eval(index_pair, index, f16::from_f32(val))
    }
    fn set_immediate_win(&mut self);
    fn has_immediate_win(&self) -> bool;
    fn finish(&mut self, num_moves: usize) -> f16;
}

#[derive(Debug, Clone)]
pub struct Policy<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for Policy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Policy {
            features: vec![f16::ZERO; num_policy_features::<S>()],
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);

        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>() + offset;

        self.features.fill(f16::ZERO);
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalPolicy<const S: usize> {
    val: f32,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for IncrementalPolicy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalPolicy {
            val: 0.0,
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.val += index_pair.as_slice(self.parameters)[index] * val as f32
    }

    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.val += index_pair.as_slice(self.parameters)[index] * val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);
        let total_value = self.val + offset;

        self.val = 0.0;
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

pub const fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub const fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn value_features_4s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_4S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_4S_0KOMI,
        4 => &VALUE_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn policy_features_4s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_4S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_4S_0KOMI,
        4 => &POLICY_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn value_features_5s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_5S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_5S_0KOMI,
        4 => &VALUE_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn policy_features_5s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_5S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_5S_0KOMI,
        4 => &POLICY_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn value_features_6s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_6S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_6S_0KOMI,
        4 => &VALUE_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

pub fn policy_features_6s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_6S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_6S_0KOMI,
        4 => &POLICY_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_0KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    2.4297454,
    4.0062056,
    2.6049376,
    1.4463036,
    2.8994281,
    2.7487843,
    2.4791486,
    0.7649904,
    1.4559717,
    2.079845,
    -0.0059250165,
    -0.00050385203,
    -0.00651386,
    0.6632251,
    0.87528414,
    1.0533004,
    0.38034552,
    0.6393864,
    0.8693372,
    3.3091753,
    0.68515193,
    1.494346,
    0.30523694,
    1.6621726,
    0.2527586,
    0.8558426,
    0.75762683,
    0.36499202,
    -0.21396698,
    -0.52877104,
    -0.05796332,
    -0.077265985,
    -0.34016138,
    -0.7399847,
    -0.5193773,
    1.186428,
    0.4868523,
    -0.005124028,
    -0.008343117,
    -0.7121833,
    1.2432246,
    0.005951524,
    -0.0043248367,
    0.47360346,
    1.2494856,
    -0.005560641,
    0.0036220215,
    0.7080674,
    0.20422132,
    -0.0055643534,
    -0.0015320918,
    -0.33004308,
    -0.21427998,
    -0.009827926,
    0.00059686694,
    -2.1530406,
    -0.91932803,
    0.0076304395,
    -0.0060374904,
    0.09715872,
    0.1427178,
    -0.003094554,
    0.0022945618,
    -0.69062984,
    -0.63445973,
    0.0020511579,
    -0.0041063665,
    0.13397199,
    1.7633629,
    2.4993577,
    2.0939841,
    1.9141829,
    2.0209584,
    1.7708625,
    1.8816401,
    -0.04202944,
    1.9637618,
    2.320527,
    1.5358956,
    1.3520178,
    1.1428481,
    1.1184006,
    0.7593216,
    1.7888674,
    1.7226784,
    0.49231845,
    0.72212595,
    1.1380248,
    1.635386,
    2.2385087,
    2.9456835,
    3.769143,
    2.7827318,
    1.4978321,
    -0.3055099,
    0.38302973,
    0.27147746,
    0.28666082,
    0.35981005,
    0.20209663,
    0.0505335,
    0.00022801384,
    -0.007706399,
    -0.008808966,
    -0.0034274147,
    0.004325905,
    -0.0049592447,
    -0.041873995,
    -0.3197183,
    0.002150652,
    -0.10749555,
    -0.19537899,
    -0.038020886,
    0.17142868,
    0.53205943,
    0.019410018,
    -0.056579553,
    0.58234483,
    1.2963107,
    0.2004575,
    -0.100739405,
    0.558412,
    1.1716634,
    0.029161898,
    -0.13676095,
    -0.093282394,
    0.29149008,
    -0.6763643,
    -0.4900143,
    -0.009130489,
    0.3600723,
    0.3665329,
    0.004788068,
    0.26830053,
    0.87092334,
    -0.8215979,
    -0.549833,
    0.16141431,
    0.95809555,
    -0.026637591,
    -0.035968695,
    0.552472,
    -0.060984254,
    0.04068201,
    0.3823705,
    0.009418681,
    -0.007463541,
    -0.009312019,
    0.008915393,
    -0.0005510999,
    0.0035254955,
    0.008046815,
    0.008674609,
    0.008508706,
    -0.0008124877,
    0.004095099,
    0.002457223,
    -0.0064589093,
    0.0060925093,
    0.0012618108,
    -0.0039176345,
    0.0039970186,
    -0.005868571,
    -0.0075792954,
    -3.1479914,
    -2.7256768,
    -2.3492322,
    -0.7401775,
    -1.3929883,
    -2.2978892,
    -0.0027733874,
    0.009177124,
    -0.006355319,
    -0.56166685,
    -0.90971625,
    -1.0511231,
    -0.5120219,
    -0.7148568,
    -0.91679996,
    -2.6472833,
    -0.86285955,
    -2.0424664,
    -0.3404026,
    -1.5783554,
    -0.14597398,
    -0.70944977,
    -0.8100352,
    -1.7216436,
    -0.4821051,
    -0.5839781,
    0.0969088,
    -1.236617,
    -0.407661,
    -0.1988834,
    0.8713249,
    -0.70934373,
    -0.8958695,
    0.0042860033,
    -0.004753387,
    0.40877464,
    -1.1522579,
    -0.0066909315,
    0.0056339707,
    -0.5868196,
    -0.80889297,
    -0.0018851925,
    0.007400766,
    -0.6799517,
    -0.25676736,
    0.0092722215,
    0.0030306866,
    0.505714,
    0.29308283,
    0.00912733,
    -0.008776911,
    0.8997595,
    0.46416217,
    -0.0019571641,
    -0.0020065904,
    0.05280533,
    -0.13786243,
    0.0066047404,
    -0.00401304,
    0.74043065,
    0.60071516,
    0.009882869,
    -0.0012246752,
    -0.04448644,
    -1.0739167,
    -1.8513304,
    -1.7591248,
    -1.5562627,
    -1.0575562,
    -1.2044964,
    0.05274436,
    -0.0030021705,
    -2.6908884,
    -3.320067,
    -2.7970364,
    -2.6813624,
    -2.5500464,
    -2.3904552,
    -1.6554959,
    -2.308423,
    -1.4813823,
    0.32780287,
    0.036904573,
    -0.84991413,
    -1.8104398,
    -2.293292,
    -2.5367718,
    -3.3909104,
    -2.828258,
    -0.9779187,
    0.25371704,
    -0.19917162,
    -0.3740929,
    -0.19925304,
    -0.05447088,
    -0.2287449,
    0.032563645,
    -0.001817584,
    -0.009368448,
    -0.006632633,
    -0.00079724286,
    -0.001203401,
    -0.001678803,
    -0.0145629775,
    0.28788972,
    -0.006872382,
    0.15369716,
    0.17134078,
    0.19448477,
    0.0464677,
    -0.21203437,
    0.015142955,
    -0.23993327,
    -0.6938286,
    -1.2016369,
    0.20232521,
    0.40268332,
    -0.23988982,
    -1.1354849,
    -0.37138003,
    -0.119677156,
    -0.1611546,
    -0.20968457,
    1.0306233,
    0.48724326,
    -0.11466457,
    -0.7253666,
    -0.34234065,
    -0.12565605,
    -0.26051366,
    -0.70830524,
    1.0524085,
    0.6905243,
    -0.08098609,
    -0.85194665,
    0.07823153,
    -0.044929374,
    -0.48582554,
    0.20754094,
    -0.19081149,
    -0.14343016,
    0.0021977378,
    -0.0029488825,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    -0.0038043214,
    0.007477794,
    0.007423345,
    -0.0053779697,
    -0.0015040664,
    -0.008595528,
    -0.0028329133,
    0.009884633,
    0.009884935,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_0KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    -0.06596815,
    0.14143576,
    0.2643506,
    0.14499849,
    0.107681885,
    0.11073599,
    -0.19013828,
    -0.40654242,
    0.3318426,
    -0.16691944,
    -0.3575065,
    0.23800719,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.33601677,
    -0.041274536,
    0.0013449714,
    -0.29418692,
    -0.54222,
    0.0075244084,
    -2.7454162,
    1.2056162,
    0.74540424,
    -3.2504718,
    -2.7729948,
    0.068721116,
    0.47504744,
    -0.16477276,
    0.18019468,
    -0.13531236,
    0.14152104,
    0.032580495,
    -0.22254677,
    0.49075425,
    1.1202906,
    -0.07768215,
    -0.10285486,
    -0.28730598,
    -0.60267043,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    0.1747276,
    -0.3360676,
    0.35788158,
    1.2172985,
    -0.7322632,
    -0.5023849,
    -0.49644548,
    0.63201225,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    0.6639308,
    0.34448573,
    -0.0077813696,
    -1.4789531,
    -0.5449256,
    0.0020160126,
    0.20559156,
    -0.025478715,
    -0.0057330895,
    0.48247886,
    0.27221236,
    0.0008187201,
    0.79267675,
    1.5803065,
    -0.002397363,
    0.2934291,
    -0.9169082,
    0.00303144,
    0.18601592,
    0.47252977,
    -0.008103551,
    -0.54003847,
    -0.6874615,
    -0.009149382,
    2.5997837,
    0.21279974,
    1.0009149,
    0.00917124,
    0.5581906,
    -3.4829595,
    -0.7885469,
    0.29876935,
    1.3653431,
    0.3458327,
    0.23525056,
    0.27667275,
    0.6695998,
    0.2019845,
    0.33065692,
    -0.2599935,
    0.50598747,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.32448876,
    0.06516934,
    -0.00813673,
    -0.009886575,
    0.04560957,
    -0.2841685,
    0.00021132734,
    -1.8742533,
    -1.0128005,
    0.0011727996,
    0.07729849,
    0.14006491,
    -0.008626261,
    -0.006473,
    -1.0160459,
    -0.7020004,
    -0.0051336214,
    -0.0013411185,
    0.15417725,
    -1.3802054,
    0.25305972,
    1.4399757,
    1.8268988,
    1.968561,
    2.796725,
    1.1202828,
    -1.7660865,
    -0.804423,
    0.20100431,
    1.3501571,
    0.9508624,
    0.054124333,
    -1.1339825,
    -1.1712068,
    -2.0318532,
    -1.4227827,
    -2.0454004,
    -0.13430345,
    -1.5658052,
    -1.0156312,
    0.39389312,
    -0.0530978,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.397977,
    0.7746763,
    -0.002408173,
    0.22021821,
    1.53287,
    0.0077593178,
    0.2637508,
    0.88056475,
    -0.0054027913,
    0.3666799,
    0.14289705,
    0.0036244253,
    -0.39640427,
    -0.31697965,
    0.16356713,
    3.3073342,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_2KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    0.52550673,
    0.68916845,
    0.11563919,
    -0.14715458,
    2.8277855,
    2.230739,
    1.542515,
    0.7696426,
    1.2870432,
    1.5650468,
    -0.0059250165,
    -0.00050385203,
    -0.00651386,
    0.35650814,
    0.6718961,
    0.65419704,
    0.2973203,
    0.51381546,
    0.4688092,
    4.071519,
    0.80232555,
    2.0828228,
    0.6069396,
    2.0615935,
    0.15641983,
    0.98783904,
    0.93368614,
    0.47739226,
    0.014972169,
    0.13906036,
    -0.41427022,
    0.077820234,
    -0.06608179,
    0.02725945,
    -0.96086925,
    0.7079178,
    0.5674669,
    -0.005124028,
    -0.008343117,
    -0.7849244,
    -0.09562964,
    0.005951524,
    -0.0043248367,
    0.35779402,
    1.1420021,
    -0.005560641,
    0.0036220215,
    0.4856812,
    -0.08472786,
    -0.0055643534,
    -0.0015320918,
    -0.2134208,
    -0.22233927,
    -0.009827926,
    0.00059686694,
    -1.6346165,
    0.09591504,
    0.0076304395,
    -0.0060374904,
    0.0685955,
    0.023615561,
    -0.003094554,
    0.0022945618,
    -0.58997613,
    -0.23454693,
    0.0020511579,
    -0.0041063665,
    -0.008211616,
    1.861964,
    1.7256736,
    2.5979977,
    1.5632825,
    1.3304522,
    0.64854914,
    1.195511,
    -0.98488164,
    0.19034651,
    1.3182425,
    0.97880423,
    0.8634156,
    1.0485606,
    0.786302,
    0.3148401,
    0.15357049,
    0.4334279,
    0.079379536,
    -0.45780203,
    0.48278227,
    0.5385578,
    1.3703121,
    2.3002777,
    3.0417378,
    3.9715538,
    4.0489464,
    -0.27683988,
    0.19481778,
    0.07868378,
    0.3522826,
    0.09341672,
    0.15323727,
    0.00048257707,
    0.00022801384,
    -0.007706399,
    -0.008808966,
    -0.0034274147,
    0.004325905,
    -0.0049592447,
    -0.023711177,
    -0.19735336,
    0.002150652,
    0.0918693,
    -0.19995064,
    -0.27319708,
    -0.19047348,
    -0.06440252,
    0.097287506,
    0.280878,
    0.4159084,
    0.29352912,
    -0.08258481,
    -0.36553434,
    0.23706087,
    0.70045704,
    0.6408008,
    0.28690997,
    0.07003039,
    -0.17076239,
    -0.90892595,
    -0.4742232,
    0.006765828,
    0.62323034,
    0.54945904,
    0.37255636,
    0.26208767,
    0.24215749,
    -1.226941,
    -0.5168553,
    0.060615838,
    0.71191627,
    0.29605922,
    -0.0056521636,
    -0.22719087,
    0.38140985,
    0.09892963,
    -0.14723366,
    0.009418681,
    -0.007463541,
    -0.009312019,
    0.008915393,
    -0.0005510999,
    0.0035254955,
    0.008046815,
    0.008674609,
    0.008508706,
    -0.0008124877,
    0.004095099,
    0.002457223,
    -0.0064589093,
    0.0060925093,
    0.0012618108,
    -0.0039176345,
    0.0039970186,
    -0.005868571,
    -0.0075792954,
    -3.1569335,
    -2.5242715,
    -1.7407578,
    -1.2393014,
    -1.8171988,
    -2.1422937,
    -0.0027733874,
    0.009177124,
    -0.006355319,
    -0.48711416,
    -0.61996865,
    -0.60756475,
    -0.098757036,
    -0.3575179,
    -0.3761897,
    -2.3689826,
    -0.14972685,
    -1.2524751,
    -0.065120235,
    -0.94068134,
    0.20320809,
    -0.27026406,
    -0.6600044,
    -0.6856557,
    -0.37039065,
    0.0052424334,
    0.016527921,
    -0.56993353,
    -0.24071953,
    0.31213483,
    0.0014620738,
    -0.58306,
    -0.74813014,
    0.0042860033,
    -0.004753387,
    1.5623237,
    0.11837501,
    -0.0066909315,
    0.0056339707,
    -0.7123404,
    -0.71717614,
    -0.0018851925,
    0.007400766,
    -0.45169938,
    0.04882392,
    0.0092722215,
    0.0030306866,
    0.18052137,
    0.35240895,
    0.00912733,
    -0.008776911,
    1.4145095,
    -0.08807056,
    -0.0019571641,
    -0.0020065904,
    -0.022590104,
    -0.06779834,
    0.0066047404,
    -0.00401304,
    0.19959562,
    0.09618675,
    0.009882869,
    -0.0012246752,
    -1.8321629,
    -1.991576,
    -1.4599735,
    -1.2139837,
    0.01777924,
    -0.7372808,
    0.42317328,
    -0.0030643002,
    -0.040494867,
    -2.6305847,
    -2.4768515,
    -2.0206914,
    -1.9042807,
    -2.0988615,
    -1.7114905,
    -2.3807535,
    -1.6715409,
    -0.34043166,
    1.0847187,
    0.118677124,
    -0.24765377,
    -1.0526614,
    -2.2538598,
    -2.670453,
    -1.4110692,
    -0.84070796,
    -0.29149517,
    0.11121553,
    -0.07344372,
    -0.10506089,
    -0.1074835,
    0.0010816874,
    -0.12665065,
    0.36529997,
    -0.001817584,
    -0.009368448,
    -0.006632633,
    -0.00079724286,
    -0.001203401,
    -0.001678803,
    -0.0054546706,
    0.4445638,
    -0.006872382,
    -0.075786084,
    -0.12149787,
    -0.08463431,
    -0.111497074,
    -0.2513803,
    0.09302041,
    0.09131029,
    0.2621101,
    0.17976685,
    -0.0807174,
    0.4096398,
    -0.083573215,
    -0.48400417,
    -1.0185872,
    -0.52044743,
    0.08373761,
    0.36914578,
    -0.14505386,
    -0.19116105,
    -0.5635713,
    -0.74019825,
    -0.55976826,
    -0.06728599,
    0.13793282,
    0.2330763,
    0.78524774,
    0.4121335,
    -0.12191589,
    -0.47684953,
    -0.055205997,
    0.15502705,
    0.32514188,
    0.21223225,
    0.14458957,
    0.3190941,
    0.0021977378,
    -0.0029488825,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    -0.0038043214,
    0.007477794,
    0.007423345,
    -0.0053779697,
    -0.0015040664,
    -0.008595528,
    -0.0028329133,
    0.009884633,
    0.009884935,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_2KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    0.3835006,
    0.21164729,
    0.5567637,
    0.14972319,
    0.008378243,
    -0.43465084,
    -0.7308303,
    -0.8912839,
    0.46212968,
    -0.43907836,
    0.26626498,
    0.5782282,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.4975553,
    0.15077943,
    0.0013449714,
    -0.4241401,
    -0.4088393,
    0.0075244084,
    -3.2364414,
    0.9161514,
    0.5318693,
    -2.230449,
    -4.504568,
    -0.487717,
    0.6291668,
    -0.73886293,
    0.26118273,
    -0.27261165,
    0.12881532,
    0.1777136,
    -0.011507088,
    0.41689792,
    1.1819894,
    -0.14281727,
    -0.12822403,
    -0.4899795,
    -0.7057814,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    -0.038640175,
    -0.48866045,
    0.18388642,
    2.1011872,
    -0.47701856,
    -0.35595262,
    -0.5488175,
    -0.12425026,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    -0.0737323,
    1.6342262,
    -0.0077813696,
    0.8013023,
    -0.2317711,
    0.0020160126,
    0.59806335,
    -0.9970204,
    -0.0057330895,
    0.07285249,
    0.6827554,
    0.0008187201,
    0.9157639,
    0.626506,
    -0.002397363,
    -0.088837735,
    0.38987082,
    0.00303144,
    0.2895544,
    -0.16646424,
    -0.008103551,
    -0.26244026,
    -0.4901274,
    -0.009149382,
    2.3455992,
    -0.7211382,
    1.9804211,
    0.00917124,
    0.5224504,
    -4.4372244,
    -0.8496559,
    0.4749193,
    1.473498,
    0.45706263,
    0.046547048,
    0.25537905,
    0.77724373,
    0.07417753,
    0.39354962,
    -0.6581425,
    0.71233255,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.5941038,
    -0.046199616,
    -0.00813673,
    -0.009886575,
    0.1387866,
    -0.22598192,
    0.00021132734,
    -2.1441894,
    -1.8108326,
    0.0011727996,
    -0.16316642,
    0.30345392,
    -0.008626261,
    -0.006473,
    -1.3621367,
    -0.119089246,
    -0.0051336214,
    -0.0013411185,
    0.010755843,
    -1.2026048,
    0.38548076,
    1.398525,
    1.9160999,
    2.1099184,
    2.0770369,
    1.4328448,
    -1.7100422,
    -0.6515236,
    0.332164,
    0.62545145,
    0.0065994086,
    -0.005360393,
    -0.9618395,
    -1.1140851,
    -1.7814239,
    -0.5971449,
    -1.9552374,
    -0.23968147,
    -1.2191556,
    -1.1778564,
    0.42183256,
    -0.11105158,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.4999874,
    0.31543893,
    -0.002408173,
    -0.93778354,
    1.1441715,
    0.0077593178,
    0.79672486,
    0.83366203,
    -0.0054027913,
    0.49028045,
    0.045144238,
    0.0036244253,
    -0.30533037,
    -0.3648391,
    0.09491095,
    3.3036993,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_0KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    1.1918659,
    2.0893366,
    1.2471892,
    1.5523591,
    0.81921875,
    0.80374527,
    0.85770124,
    2.0775743,
    2.0100415,
    1.9407905,
    1.8177477,
    1.7840679,
    1.7239945,
    0.5269436,
    0.97980946,
    1.0298374,
    1.5033469,
    1.5534542,
    1.8717141,
    0.16902849,
    0.81483114,
    0.97242945,
    1.4600396,
    1.7333257,
    2.124839,
    0.5775688,
    0.6405401,
    0.62823415,
    0.6332654,
    0.6971824,
    0.7664683,
    0.39951113,
    0.5471608,
    0.53000325,
    0.60530275,
    0.61534774,
    0.64171356,
    2.292497,
    0.6565315,
    1.4133617,
    0.4340728,
    1.4190128,
    0.16868669,
    0.57024395,
    0.889122,
    1.1048332,
    0.53752905,
    0.4343081,
    -0.18382467,
    0.8957778,
    0.3892366,
    0.21037464,
    -0.6988739,
    0.63554096,
    0.8874598,
    1.003031,
    0.7588266,
    0.24563166,
    0.5889993,
    0.8125583,
    1.5510347,
    0.23427877,
    0.36114866,
    0.7219598,
    0.54086876,
    0.6067982,
    0.15003824,
    -0.47200987,
    0.36037225,
    -0.4246881,
    -0.44644055,
    -0.112327434,
    -0.29181728,
    -0.6039501,
    0.43884093,
    0.29739112,
    -0.17559962,
    -0.055427294,
    0.00020423914,
    -0.052231662,
    0.12164362,
    -0.51339877,
    -0.54958284,
    -0.4663809,
    -0.54183656,
    0.11259515,
    0.23960546,
    0.6128682,
    1.404538,
    1.3526511,
    1.4431278,
    1.2538688,
    0.1954831,
    0.035001468,
    1.9130627,
    1.9566518,
    1.7557888,
    1.5125302,
    1.2795407,
    0.9899276,
    0.8508801,
    0.613161,
    1.1650457,
    0.3367184,
    0.34837943,
    0.7650228,
    1.2172495,
    1.5878721,
    2.1661332,
    2.481667,
    2.713252,
    2.431455,
    -0.33107087,
    -0.14038132,
    0.10234496,
    0.42160866,
    0.1715594,
    0.2003486,
    -0.015210704,
    2.136305,
    0.96142596,
    0.043299958,
    0.17221427,
    0.02500731,
    -0.08930884,
    0.024827277,
    -0.21496062,
    -0.15576957,
    0.0051122922,
    -0.67359966,
    -0.29207748,
    -0.018953279,
    0.3302115,
    0.75018334,
    0.049111944,
    0.002666045,
    0.34939662,
    0.828986,
    1.162065,
    0.039343823,
    -0.5203438,
    0.09591602,
    0.7316724,
    1.1196012,
    0.011651255,
    -0.75902474,
    -0.118672974,
    0.642113,
    1.1246438,
    -0.14040856,
    -0.36807057,
    -0.16483098,
    -0.056152113,
    0.38472146,
    -0.8531432,
    -0.827557,
    -0.3566531,
    0.19506481,
    0.8347913,
    -0.8710035,
    -0.7843257,
    -0.26620966,
    0.33306417,
    0.92586964,
    0.13065219,
    -0.004571968,
    0.10721829,
    0.40884194,
    0.7164686,
    -0.74768794,
    -0.77879184,
    -0.23300746,
    0.4320129,
    1.0341018,
    -0.91387945,
    -0.7699587,
    -0.19339615,
    0.48586285,
    1.2496941,
    -0.009654252,
    0.23810254,
    0.4355241,
    0.21849494,
    0.45104843,
    0.5809996,
    0.091210686,
    0.08495714,
    -0.045515068,
    -0.24433374,
    -0.08461547,
    0.15909046,
    -0.9693524,
    -0.50716466,
    -0.47615945,
    -0.32850415,
    -0.2447702,
    -0.3295132,
    0.0042860033,
    -0.004753387,
    0.009866308,
    0.0054509398,
    -0.0066909315,
    0.0056339707,
    0.005903894,
    -0.0017206976,
    -0.0018851925,
    0.007400766,
    -2.2188537,
    -1.9348854,
    -1.9646758,
    -1.8119453,
    -1.8369038,
    -1.719102,
    -0.47311375,
    -0.78578466,
    -0.9665624,
    -1.4029945,
    -1.5534004,
    -1.5697842,
    -0.42945996,
    -0.58624005,
    -0.5643495,
    -1.3714833,
    -1.6698115,
    -2.027647,
    -0.64650244,
    -0.80375195,
    -0.82098883,
    -0.7522659,
    -0.76841,
    -0.7881199,
    -0.39630637,
    -0.48605737,
    -0.43992406,
    -0.59009516,
    -0.59751385,
    -0.61465764,
    -2.157712,
    -0.66358006,
    -1.2055236,
    -0.30817416,
    -1.076931,
    -0.008670354,
    -0.21109828,
    -0.53518254,
    -1.3288403,
    -0.5187102,
    -0.1569528,
    0.093801856,
    -1.0597152,
    -0.3748056,
    0.13033721,
    0.81102145,
    -0.6015944,
    -0.65486866,
    -0.6317136,
    -1.182904,
    -0.085015535,
    -0.48505002,
    -0.35622197,
    -0.82610035,
    -0.23053925,
    -0.47001588,
    -0.81368756,
    -0.2521419,
    -0.4314916,
    -0.17895341,
    -0.7419683,
    -0.1474509,
    0.4069688,
    0.31622452,
    -0.017260417,
    0.285682,
    0.5110542,
    0.17676471,
    0.33216548,
    0.21634087,
    0.0828652,
    -0.047332697,
    -0.31225273,
    -0.12091931,
    0.46933016,
    0.5399481,
    0.78001845,
    0.3365533,
    0.05495743,
    -0.039874323,
    -1.2316328,
    -1.1801776,
    -1.3561523,
    -1.1941088,
    -0.09820265,
    -0.009646242,
    -0.0032199433,
    -2.4371488,
    -2.1606867,
    -1.9424404,
    -1.7201182,
    -1.3684496,
    -1.1932931,
    -1.0471852,
    -1.0245235,
    -1.2939262,
    -0.010620178,
    -0.30814862,
    -0.7385395,
    -1.2947171,
    -1.7674267,
    -2.0800915,
    -2.531807,
    -2.5866277,
    -2.1522677,
    0.36321956,
    0.12974857,
    -0.14063813,
    -0.23213056,
    -0.07020149,
    -0.1357339,
    0.0031997203,
    -1.2411505,
    -0.5937269,
    -0.018691497,
    -0.09909079,
    -0.078387596,
    0.23563363,
    -0.033299588,
    0.21881804,
    0.16626777,
    0.002863534,
    0.57342964,
    0.39201733,
    0.103971496,
    -0.27324498,
    -0.6916572,
    0.057713393,
    0.10178161,
    -0.1417985,
    -0.5869379,
    -1.0218619,
    0.02924521,
    0.6059573,
    -0.07226298,
    -0.6801375,
    -1.1236855,
    -0.0029651695,
    0.7079816,
    0.11520403,
    -0.6225288,
    -1.1042641,
    0.12590759,
    0.4003287,
    0.16332132,
    0.018670887,
    -0.20013574,
    0.8375242,
    0.8778095,
    0.31509924,
    -0.19611418,
    -0.82477975,
    0.8714972,
    0.7545527,
    0.2228721,
    -0.2694781,
    -0.942901,
    -0.2799783,
    0.0247798,
    -0.04256979,
    -0.41939566,
    -0.8088288,
    0.7753818,
    0.8014177,
    0.25479764,
    -0.4166117,
    -0.98672265,
    0.9657827,
    0.8297541,
    0.18620977,
    -0.526132,
    -1.1196947,
    -0.035360537,
    -0.3742483,
    -0.6757443,
    -0.11813929,
    -0.346387,
    -0.68725485,
    0.14737168,
    -0.06785119,
    0.08270316,
    0.16709302,
    0.411984,
    0.1804605,
    0.70599705,
    0.42267603,
    0.5343885,
    0.3347701,
    0.28322986,
    0.41277596,
    0.0053475164,
    -0.008328738,
    -0.005392799,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_0KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    -0.21254763,
    0.23103847,
    -0.033314772,
    0.28951204,
    0.08258201,
    -0.20170505,
    -0.083164066,
    0.039200466,
    -0.00088396505,
    0.3021171,
    0.11830643,
    -0.081436746,
    -0.40565103,
    -0.37145954,
    -0.18355277,
    0.06397571,
    0.20453936,
    0.55752325,
    -0.12067064,
    -0.30509105,
    -0.22406316,
    0.04068911,
    0.06334039,
    0.038877312,
    -2.746777,
    -0.87377214,
    -0.65470624,
    0.73748547,
    1.1899408,
    2.4166262,
    -0.82226,
    -1.3962785,
    -1.4452674,
    0.5082308,
    1.2789531,
    2.7618878,
    -0.3863811,
    0.031400807,
    -0.102757595,
    -0.38964626,
    -0.14711878,
    -0.31159613,
    -2.9462645,
    1.2216566,
    0.49116233,
    -4.1368756,
    -3.0489886,
    0.14062,
    0.4538722,
    -0.20252825,
    0.1369588,
    -0.058979962,
    0.08831377,
    0.02167715,
    -0.26413515,
    0.028735323,
    0.47112805,
    0.67481583,
    -0.037136614,
    -0.023578765,
    0.06294667,
    -0.05659834,
    -1.2630483,
    0.25168982,
    0.096158154,
    0.43390813,
    1.3263559,
    -0.38228187,
    0.30753988,
    -0.17709245,
    0.021742836,
    0.3967858,
    0.37994313,
    -0.5040257,
    -0.60063547,
    -0.5784962,
    -0.09444315,
    0.42124468,
    -0.95363337,
    -0.8204556,
    -0.515455,
    0.36224493,
    3.6014647,
    0.6930546,
    -0.022836408,
    1.229127,
    -0.20067202,
    -0.88029164,
    -1.945374,
    0.27076137,
    0.24485452,
    -0.2529798,
    0.3806981,
    -0.1388048,
    -0.43375793,
    1.5184788,
    0.4213168,
    1.0030801,
    -0.12647864,
    -0.28902504,
    -0.68267906,
    0.3738028,
    0.69471484,
    1.1517682,
    -0.16151088,
    -0.5155371,
    -0.17652579,
    2.4710944,
    0.30520877,
    2.0582628,
    1.0057538,
    0.5753131,
    -4.1801777,
    -0.5127082,
    0.45404467,
    1.4079078,
    0.3417027,
    0.39399534,
    0.1540643,
    0.2801745,
    0.3059642,
    0.2046346,
    -0.05043553,
    0.38525426,
    0.006237678,
    0.3969141,
    0.18871525,
    -1.5612092,
    -0.39385808,
    0.7173354,
    -0.24273492,
    -0.060208935,
    0.20501433,
    0.06431221,
    0.007810466,
    -0.006842167,
    0.25922537,
    0.22373736,
    1.4958718,
    -2.2605436,
    -1.6751494,
    -1.7748834,
    -0.15428533,
    -0.13730817,
    0.3625118,
    0.7318449,
    -2.1013966,
    -1.6390495,
    -0.58728755,
    0.705842,
    0.05825597,
    -1.3842419,
    0.5513746,
    1.3413002,
    1.6110371,
    1.1969258,
    1.6104766,
    0.26784024,
    -0.82374805,
    -0.27678168,
    0.63337976,
    1.37859,
    1.5559744,
    -0.2600439,
    -1.5502057,
    -0.7311096,
    -0.89582264,
    -0.8938125,
    -1.1783751,
    -0.29525974,
    -1.3265866,
    -2.8699765,
    0.3670057,
    -0.02602606,
    -0.094160676,
    0.038038492,
    0.18733682,
    0.1730221,
    0.4983536,
    -0.6600161,
    0.07679693,
    1.6442226,
    0.74923706,
    1.2906911,
    -0.0030353356,
    1.5110451,
    1.8540987,
    0.46657535,
    1.0854816,
    0.6397842,
    0.38965192,
    0.4017657,
    0.15735355,
    0.2403061,
    0.20836167,
    0.8231178,
    3.0737865,
    -0.0031571696,
    -0.0045039677,
    -0.0037830565,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_2KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    0.7441071,
    0.88720983,
    0.19527824,
    0.28629193,
    -0.06264062,
    -0.17329699,
    0.06245191,
    2.1558506,
    1.8676485,
    1.9471008,
    1.6401341,
    1.6858913,
    1.5126742,
    0.44063008,
    0.6628767,
    0.63892376,
    0.89351577,
    1.0385884,
    1.0346128,
    0.96485287,
    0.8775198,
    0.9644575,
    1.3171802,
    1.6400793,
    1.7648816,
    0.5557184,
    0.61416245,
    0.6826261,
    0.67193556,
    0.7179551,
    0.7002009,
    0.36216816,
    0.4451952,
    0.43366194,
    0.5470946,
    0.5837053,
    0.51948553,
    3.2919118,
    0.7017195,
    1.470978,
    0.5666292,
    1.3246655,
    0.27053574,
    0.29459804,
    0.8796851,
    0.9177723,
    0.23386106,
    0.21110123,
    0.050550334,
    0.4305253,
    0.20122169,
    0.23467791,
    -0.009938547,
    0.59160364,
    0.63027203,
    1.2996399,
    0.4746071,
    -0.33511534,
    0.5331516,
    0.27372402,
    2.143826,
    0.2424982,
    0.39495426,
    0.5233511,
    0.2934401,
    0.25732788,
    -0.098237425,
    0.7138267,
    0.06014345,
    -0.34064636,
    -0.24053752,
    -0.2830778,
    -0.21162674,
    -0.56363153,
    -0.22536324,
    0.8264542,
    -0.26970378,
    -0.056609612,
    0.07243384,
    0.0027168673,
    0.118664555,
    -0.51836383,
    -0.43364942,
    -0.3897988,
    -0.480984,
    0.033200555,
    -0.029837826,
    0.5738556,
    1.6888087,
    1.9082824,
    1.9412371,
    2.0663927,
    0.8803622,
    0.03499267,
    1.2999039,
    1.7347076,
    1.6062657,
    1.5493773,
    1.1216433,
    0.7943463,
    0.395461,
    0.06884023,
    -0.2494125,
    0.39886823,
    0.32170665,
    0.64366454,
    0.8107403,
    1.2051617,
    1.7506636,
    2.070606,
    2.5188816,
    3.0204918,
    -0.31652465,
    -0.12881841,
    0.08712035,
    0.28643104,
    0.011732175,
    0.13824922,
    -0.009436996,
    2.9768114,
    0.8618459,
    0.044514682,
    0.1325942,
    0.037401136,
    -0.19741878,
    0.019267721,
    -0.17529123,
    -0.14947936,
    0.0051122922,
    -0.55812556,
    -0.2626163,
    -0.03206904,
    0.30008367,
    0.6625201,
    -0.17822197,
    -0.13737914,
    0.0972783,
    0.4684769,
    0.7139947,
    0.06316821,
    -0.6127628,
    -0.008294375,
    0.5888766,
    1.0518848,
    0.011484184,
    -0.64253354,
    -0.10392624,
    0.62839556,
    1.109431,
    -0.050402313,
    -0.3226719,
    -0.1860921,
    -0.08946294,
    0.11229613,
    -0.7576815,
    -0.7442973,
    -0.28864837,
    0.2084742,
    0.78053296,
    -0.7848585,
    -0.7286151,
    -0.25585207,
    0.27161643,
    0.7942266,
    0.42230964,
    0.03225596,
    0.046302184,
    0.2187461,
    0.48855495,
    -0.69752455,
    -0.6310905,
    -0.15981972,
    0.41823772,
    0.9823154,
    -0.82973856,
    -0.7246395,
    -0.14108467,
    0.4648172,
    1.0417857,
    -0.010378178,
    0.08311143,
    0.18606663,
    0.060189996,
    0.0870116,
    0.28912586,
    -0.019070756,
    -0.018523272,
    -0.15637593,
    -0.31566572,
    -0.49943757,
    -0.23314303,
    -0.54432046,
    -0.32449606,
    -0.28723732,
    -0.10487124,
    -0.07272469,
    -0.4338804,
    0.0042860033,
    -0.004753387,
    0.009866308,
    0.0054509398,
    -0.0066909315,
    0.0056339707,
    0.005903894,
    -0.0017206976,
    -0.0018851925,
    0.007400766,
    -2.359537,
    -2.0704906,
    -2.0255523,
    -1.6604756,
    -1.6715237,
    -1.6348218,
    -0.8753812,
    -1.2137821,
    -1.1795653,
    -1.5663438,
    -1.634132,
    -1.7081224,
    -0.52112114,
    -0.7325884,
    -0.70145667,
    -1.0978994,
    -1.3642168,
    -1.6886274,
    -0.5485081,
    -0.73722154,
    -0.8150362,
    -0.69216996,
    -0.76198417,
    -0.6982526,
    -0.296411,
    -0.4141438,
    -0.43111384,
    -0.45951524,
    -0.5023182,
    -0.47671017,
    -2.8885694,
    -0.6942656,
    -1.874969,
    -0.23789114,
    -0.9273582,
    0.1322735,
    -0.35253897,
    -0.5931728,
    -1.297067,
    -0.911203,
    -0.30462667,
    -0.043822598,
    -1.1303803,
    -0.73735034,
    -0.16969167,
    0.13011317,
    -0.53026885,
    -0.77103895,
    -1.3613573,
    -0.91693133,
    0.23517984,
    -0.40073332,
    -1.0609215,
    -1.0141041,
    -0.26176733,
    -0.27235082,
    -0.17130807,
    -0.2449508,
    -0.39235315,
    0.017472243,
    -0.29817587,
    0.008602867,
    0.30342436,
    0.29076347,
    0.49014738,
    0.076913446,
    0.4276812,
    -0.13439558,
    -0.39087644,
    0.38941056,
    0.10010801,
    -0.027857669,
    -0.045054633,
    -0.079416156,
    0.27985865,
    0.35874927,
    0.5113117,
    0.26199177,
    -0.12085431,
    -0.6756403,
    -0.46491027,
    -0.4490599,
    -0.7062989,
    -0.3203352,
    -0.12606199,
    -0.009357988,
    -0.0028563866,
    -2.7993639,
    -2.2368164,
    -1.8812959,
    -1.5674816,
    -1.0916656,
    -1.037261,
    -1.0010945,
    -1.1745555,
    -0.77410096,
    -0.053808473,
    -0.7189909,
    -0.9417576,
    -1.4144077,
    -1.8440995,
    -2.011019,
    -2.3419125,
    -2.3776133,
    -1.9961619,
    0.2903704,
    0.14406782,
    -0.08044951,
    -0.24285999,
    -0.03968244,
    -0.15858164,
    0.12232234,
    -1.2058078,
    -0.41838443,
    -0.036113977,
    -0.10781504,
    -0.028362863,
    0.07235353,
    -0.03763448,
    0.2664625,
    0.22123748,
    0.0020160126,
    0.41662878,
    0.25033382,
    0.06333009,
    -0.17016743,
    -0.4407392,
    -0.16962084,
    -0.34555748,
    -0.40051863,
    -0.5075551,
    -0.6880697,
    0.053069286,
    0.4943114,
    -0.025716739,
    -0.57203674,
    -1.0051825,
    -0.003131977,
    0.60055214,
    0.1257772,
    -0.46003124,
    -1.0629367,
    -0.5223966,
    -0.16378315,
    -0.13117586,
    -0.046064954,
    -0.3238323,
    0.79960936,
    0.68898046,
    0.22856537,
    -0.23070753,
    -0.73895264,
    0.8161251,
    0.60702974,
    0.18315972,
    -0.28328472,
    -0.9454511,
    -0.480964,
    -0.25397906,
    -0.2037318,
    -0.21479857,
    -0.16413991,
    0.89045924,
    0.67577857,
    0.2030874,
    -0.35942432,
    -0.87684274,
    0.96221405,
    0.721273,
    0.20514739,
    -0.3913067,
    -0.99525315,
    -0.13864742,
    -0.16849144,
    -0.25172234,
    -0.14801925,
    -0.3227605,
    -0.08942281,
    -0.08192892,
    0.05945107,
    0.38686156,
    0.1592539,
    0.14852233,
    0.036884163,
    0.433348,
    0.06707817,
    0.3458845,
    0.03666865,
    0.08332379,
    0.23508781,
    0.0053475164,
    -0.008328738,
    -0.005392799,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_2KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    0.13053814,
    0.2594758,
    0.24701957,
    0.32714072,
    0.2772792,
    -0.13828218,
    -0.10215987,
    0.098732464,
    0.019896906,
    -0.056102987,
    -0.07790267,
    -0.42510068,
    -0.30549508,
    -0.45333365,
    -0.52566814,
    -0.29246622,
    -0.28865135,
    -0.26258516,
    0.11082738,
    0.17156202,
    -0.038298223,
    0.46970895,
    0.49330792,
    0.45982635,
    -1.5306015,
    -0.70623446,
    -1.6051459,
    1.1686573,
    1.569235,
    2.0058358,
    -2.5606222,
    -1.2750763,
    -2.0411723,
    0.8546261,
    1.8828146,
    2.5776637,
    -0.54405427,
    0.17359827,
    -0.07840562,
    -0.24876921,
    -0.18755311,
    -0.26911703,
    -3.0770643,
    1.1082592,
    0.26119882,
    -2.5300553,
    -2.871422,
    0.03775389,
    0.4238567,
    -0.33088768,
    0.10647789,
    -0.13209525,
    0.08560816,
    0.0468911,
    -0.21627295,
    0.05250266,
    0.38945135,
    0.81790227,
    -0.23717421,
    -0.22604689,
    -0.19218688,
    -0.20800717,
    -0.033787068,
    0.122389324,
    -0.10022763,
    -0.073142864,
    0.6767682,
    -0.04690488,
    0.33146432,
    -0.22365022,
    -0.0036192038,
    0.46967515,
    0.51455325,
    -0.2567931,
    -0.40734252,
    -0.42442977,
    -0.001470779,
    0.22078364,
    -1.2574711,
    -0.85755,
    -0.74906814,
    -0.17770536,
    3.6172705,
    0.54112595,
    0.6423261,
    0.9667451,
    0.199188,
    -1.3389384,
    0.16624917,
    0.19690222,
    -0.4323959,
    -0.23050337,
    0.34784153,
    0.61946857,
    -0.7219571,
    1.2463146,
    0.5738733,
    2.0701928,
    0.049495548,
    -0.42689493,
    -1.0372397,
    0.26199716,
    0.7308859,
    1.6175814,
    -0.0076032556,
    -0.68225515,
    0.12284207,
    2.349499,
    0.1210995,
    2.3559947,
    1.0110165,
    0.4826661,
    -4.137684,
    -0.87189615,
    0.58148867,
    1.5087106,
    0.51515806,
    0.27801824,
    0.1363943,
    0.39705855,
    0.3311712,
    0.13834442,
    -0.009231192,
    0.37948412,
    0.013899716,
    0.34986228,
    0.20538929,
    -1.3363253,
    -0.6954224,
    -0.26191995,
    -0.23036456,
    -0.17417376,
    0.21034743,
    0.08639803,
    0.009099964,
    0.0013535284,
    0.37892112,
    0.085819654,
    1.4048743,
    -2.3133554,
    -1.2493757,
    -1.597994,
    -0.20851141,
    -0.025360083,
    0.2432856,
    0.7032871,
    -1.9057463,
    -1.1427703,
    -0.49652052,
    0.84754634,
    0.08384458,
    -1.2245532,
    0.5221889,
    1.2940357,
    1.6118815,
    1.3088297,
    1.4081663,
    -0.2697331,
    -0.76520354,
    -0.34188744,
    0.6127755,
    1.3039353,
    1.4138254,
    0.12542252,
    -1.4124713,
    -0.9411064,
    -0.9240627,
    -0.92811567,
    -1.1624233,
    -0.3372181,
    -1.4078445,
    -2.251844,
    0.36175016,
    -0.023277655,
    -0.08955618,
    0.0533145,
    0.14049543,
    -0.019719895,
    -0.007010526,
    -0.096855216,
    -0.22378309,
    1.7177029,
    0.7570125,
    1.2928087,
    0.07078977,
    1.540554,
    1.9195119,
    0.41963235,
    0.9632119,
    0.60895467,
    0.32042414,
    0.36884412,
    0.16893406,
    0.3075245,
    -0.011423582,
    0.7850744,
    3.0451703,
    0.0,
    0.0,
    0.0,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_0KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.5262509,
    1.3646078,
    0.7224677,
    0.7471034,
    0.34748542,
    0.22230913,
    0.10203428,
    1.9211336,
    1.7880797,
    1.8319982,
    1.7632765,
    1.7965604,
    1.7628267,
    0.73785806,
    0.9915271,
    1.0164173,
    1.2485598,
    1.2916486,
    1.4172758,
    0.061341904,
    0.7623549,
    0.9135059,
    1.0484185,
    1.3839645,
    1.7030803,
    0.4121454,
    0.48739296,
    0.49596906,
    0.5332734,
    0.5834777,
    0.6019581,
    0.33200958,
    0.44105044,
    0.45230198,
    0.51855433,
    0.56094795,
    0.588039,
    1.9952204,
    0.639548,
    1.2909421,
    0.2833036,
    1.0435098,
    0.07832201,
    0.27937493,
    0.72908914,
    1.0802518,
    0.370846,
    0.31608972,
    -0.11557279,
    0.7472407,
    0.35375708,
    0.25634795,
    -0.47649145,
    0.6280468,
    0.8547168,
    -0.035107516,
    0.80348474,
    0.40322733,
    0.49794227,
    0.24355717,
    0.9480296,
    0.1110896,
    0.2000617,
    0.8354744,
    0.24147949,
    0.5998924,
    0.0256828,
    0.014296946,
    0.21005258,
    -0.42343926,
    -0.28439894,
    0.25588852,
    -0.21956067,
    -0.5488662,
    -0.088319175,
    0.55013615,
    -0.14181338,
    -0.027440146,
    0.0616775,
    -0.26572436,
    0.07785046,
    -0.39010474,
    -0.37408134,
    -0.99259853,
    -0.47220078,
    -0.03229078,
    0.33689535,
    1.1006444,
    1.0914527,
    0.9377648,
    0.96870255,
    1.3232132,
    0.5288126,
    0.17746015,
    1.4264653,
    1.4381129,
    1.2955395,
    1.203904,
    1.1214869,
    0.9155681,
    0.8585982,
    0.8558701,
    0.5215006,
    0.3638761,
    0.56133956,
    0.85520744,
    1.1583823,
    1.2696047,
    1.4823128,
    1.6993862,
    1.7092537,
    2.1669834,
    -0.285098,
    -0.10346406,
    0.1450054,
    0.30980217,
    0.0728388,
    0.20336469,
    0.06226266,
    1.2458721,
    0.7418788,
    0.01153995,
    0.111377716,
    0.089281805,
    -0.17137736,
    0.040972207,
    -0.17010264,
    -0.13557914,
    0.0051122922,
    -0.28631046,
    -0.16667394,
    -0.12267732,
    -0.050986238,
    0.12685934,
    0.33848238,
    0.11882424,
    0.00041961914,
    0.09609309,
    0.26743236,
    0.5697197,
    0.76543707,
    -0.017917842,
    -0.28284523,
    -0.025394807,
    0.23507354,
    0.67394453,
    0.8435625,
    -0.06093793,
    -0.3850766,
    -0.073227756,
    0.2507454,
    0.63659203,
    0.7940394,
    -0.09292225,
    -0.21673074,
    -0.21186705,
    -0.19806212,
    -0.1077961,
    -0.0014228593,
    -0.68474114,
    -0.6740289,
    -0.46105087,
    -0.19334532,
    -0.0049354164,
    0.32409245,
    -0.7083936,
    -0.6499635,
    -0.3990362,
    -0.11243451,
    0.18070738,
    0.5091522,
    0.24943176,
    0.06771581,
    -0.026486248,
    0.023479225,
    0.26372588,
    0.5422397,
    -0.5481546,
    -0.46143675,
    -0.23848708,
    0.023051921,
    0.4084056,
    0.8042622,
    -0.70126504,
    -0.56415296,
    -0.31214055,
    0.022752471,
    0.43993583,
    0.7982584,
    -0.04035981,
    0.0636372,
    0.398818,
    0.12583806,
    0.14719377,
    0.5085543,
    -0.06653115,
    0.09096465,
    0.005203919,
    -0.525823,
    -0.15336221,
    -0.1294713,
    -0.5423648,
    -0.8853662,
    -0.40752304,
    -0.3387668,
    -0.27023464,
    -0.15339209,
    -0.000116079114,
    -0.009369239,
    0.0092722215,
    0.0030306866,
    -0.00916178,
    -0.0003501959,
    0.00912733,
    -0.008776911,
    -1.9057529,
    -1.8163021,
    -1.8078283,
    -1.7499542,
    -1.8105956,
    -1.8471847,
    -0.5310317,
    -0.6098644,
    -0.81945604,
    -0.9721973,
    -1.1060125,
    -1.2926981,
    -0.3423018,
    -0.57857215,
    -0.6241287,
    -1.0296546,
    -1.2865738,
    -1.7785736,
    -0.53544486,
    -0.5796795,
    -0.6369491,
    -0.5960413,
    -0.70862174,
    -0.70686203,
    -0.4437853,
    -0.45343304,
    -0.4366593,
    -0.5723672,
    -0.57435095,
    -0.60474813,
    -2.0765245,
    -0.88366014,
    -1.2966001,
    -0.45268452,
    -1.2021767,
    -0.024457805,
    -0.42845386,
    -0.82365507,
    -1.3432237,
    -0.42381328,
    -0.2579079,
    0.045384284,
    -0.8668672,
    -0.47768286,
    -0.22750546,
    0.41498366,
    -0.5384459,
    -0.8856498,
    -1.294174,
    -0.67428136,
    -0.26805708,
    -0.12609579,
    -0.60901994,
    -0.99092394,
    -0.10303091,
    -0.19814044,
    -0.27670836,
    -0.19872825,
    -0.33655736,
    -0.030520586,
    -0.056671664,
    0.025761813,
    0.40287617,
    0.28097117,
    0.32710892,
    0.13013722,
    0.4467462,
    0.09660841,
    -0.07156851,
    0.266617,
    0.05877501,
    -0.062756985,
    0.07151222,
    -0.06829051,
    0.37532368,
    0.6095025,
    0.54693985,
    0.4297103,
    -0.10058099,
    -0.56016546,
    -1.2388914,
    -1.1672602,
    -1.1809531,
    -0.92055404,
    -0.22741352,
    -0.10544123,
    -0.069451734,
    -1.6933323,
    -1.4585413,
    -1.3863543,
    -1.2251937,
    -1.071667,
    -1.0147732,
    -0.9395899,
    -1.0256444,
    -0.990162,
    -0.3881382,
    -0.62050354,
    -0.81194705,
    -1.0520649,
    -1.1564204,
    -1.4264901,
    -1.7407557,
    -1.7564917,
    -2.1231525,
    0.33199582,
    0.12027014,
    -0.11686586,
    -0.22949545,
    -0.064047046,
    -0.18096107,
    -0.030958373,
    -1.1411972,
    -0.5642649,
    -0.016689131,
    -0.094007924,
    -0.073626116,
    0.13173069,
    -0.046415653,
    0.18017575,
    0.14083041,
    0.005889902,
    0.20814957,
    0.21028988,
    0.13102686,
    -0.03756788,
    -0.23960894,
    -0.43342882,
    0.10363206,
    0.1525143,
    0.042962376,
    -0.17465758,
    -0.4137458,
    -0.65177953,
    -0.018696278,
    0.30741227,
    0.075930595,
    -0.17740111,
    -0.55915785,
    -0.73388666,
    -0.055940967,
    0.37044734,
    0.12767503,
    -0.1515057,
    -0.5254169,
    -0.8288924,
    0.07204488,
    0.13172115,
    0.17307365,
    0.05191424,
    -0.10396975,
    -0.10893872,
    0.49687114,
    0.51528525,
    0.31966662,
    0.05609451,
    -0.15177116,
    -0.26710862,
    0.50218153,
    0.5199993,
    0.3199943,
    0.06267308,
    -0.21076109,
    -0.52543,
    -0.028317874,
    0.097597,
    0.11500467,
    0.022410892,
    -0.19238545,
    -0.40750363,
    0.39295503,
    0.40917757,
    0.197951,
    -0.07550067,
    -0.397636,
    -0.67999345,
    0.52688193,
    0.51433533,
    0.2428111,
    -0.07260796,
    -0.45349038,
    -0.7085955,
    0.08822638,
    -0.09872757,
    -0.34320846,
    -0.024958631,
    -0.050161928,
    -0.34248084,
    0.14085825,
    0.11133494,
    -0.30234963,
    0.14624442,
    0.18451294,
    0.10413163,
    0.41163,
    0.06378609,
    0.42478168,
    0.31088006,
    -0.033239454,
    0.29447088,
    -0.0075867055,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_0KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.071415216,
    0.12442188,
    -0.09566238,
    0.025814263,
    0.39882815,
    0.16391489,
    -0.008581701,
    -0.13815464,
    -0.13051334,
    0.02532715,
    0.32889652,
    0.20524831,
    -0.49096164,
    -0.30895254,
    -0.23303136,
    0.23083706,
    0.2964616,
    0.24874644,
    -0.2457537,
    -0.20580663,
    -0.20578788,
    0.22220248,
    0.24823901,
    0.27056095,
    -1.7412964,
    -1.2658727,
    -0.9884221,
    0.21221639,
    0.76972306,
    2.9932423,
    -0.8941595,
    -1.4919809,
    -0.6434117,
    0.1866445,
    0.6302275,
    3.7471368,
    -0.19908637,
    -0.05053481,
    -0.22026536,
    -0.20168278,
    -0.06375163,
    -0.34524786,
    -2.9306319,
    1.2972493,
    0.24407394,
    -3.5354817,
    -2.9933457,
    -0.10331253,
    0.47185874,
    -0.14110662,
    0.10932957,
    0.0013340656,
    0.07475349,
    -0.016720613,
    -0.23927939,
    -0.011462316,
    0.34377918,
    0.72500736,
    0.85285324,
    -0.110500894,
    -0.105389334,
    -0.017042588,
    0.10457068,
    0.0042217867,
    -0.21249798,
    -0.085640766,
    -0.45459425,
    -0.16079083,
    0.55052006,
    2.0902095,
    -0.37665167,
    0.27560315,
    -0.059153534,
    0.035410654,
    0.26979086,
    0.5431667,
    0.5761751,
    -0.40052012,
    -0.44486472,
    -0.42993188,
    -0.155777,
    0.3429057,
    0.74014395,
    -0.7196886,
    -0.66130596,
    -0.5823512,
    -0.061252877,
    1.1902641,
    2.376007,
    0.48015076,
    -0.05263098,
    0.55019283,
    0.35582376,
    -0.3000633,
    -0.9577861,
    0.37041304,
    0.1807514,
    -0.058853548,
    0.19539088,
    0.03101509,
    -1.0235001,
    1.6822823,
    0.46977645,
    0.50950366,
    -0.1764842,
    -0.2133276,
    -1.0270724,
    0.4235578,
    0.47018492,
    0.59907496,
    -0.095802486,
    -0.2432442,
    -0.01910542,
    2.5890062,
    0.13449658,
    2.3261929,
    0.96748704,
    0.44940996,
    -4.1517406,
    -1.059962,
    0.81751895,
    1.4057382,
    0.43485394,
    0.52264935,
    0.0902257,
    0.27415887,
    0.29622847,
    0.18442348,
    -0.011864232,
    0.33198798,
    0.008446357,
    0.29941043,
    0.24493904,
    -1.3369043,
    0.41626275,
    0.329823,
    -0.10362355,
    0.111990936,
    0.22666475,
    0.06236524,
    0.0052082036,
    -0.0012640925,
    0.34226802,
    -0.037712023,
    1.718424,
    -2.2861829,
    -1.5476025,
    -1.518054,
    -0.16363169,
    0.14955013,
    0.6014917,
    1.1120517,
    -1.9437062,
    -1.5143054,
    -0.46494117,
    0.6082318,
    0.21189173,
    -1.3022004,
    0.3113392,
    1.2015941,
    1.7875376,
    1.4595233,
    1.7871752,
    0.90693253,
    -0.98388606,
    -0.55907655,
    0.42635015,
    1.2506536,
    1.9478662,
    0.16841666,
    -1.632099,
    -0.78296155,
    -1.2520697,
    -1.1554351,
    -1.4457918,
    -0.38163397,
    -1.3265272,
    -2.6471865,
    0.33752015,
    -0.024949715,
    -0.024228316,
    -0.09096827,
    0.036369875,
    0.06127662,
    0.20753954,
    -0.15602651,
    0.38449815,
    0.44087142,
    -0.1416285,
    -0.72993124,
    0.1605913,
    1.8260558,
    1.4085311,
    1.6873645,
    -0.23067553,
    1.8025221,
    2.1915245,
    0.68259877,
    1.5146484,
    0.60728025,
    0.6007257,
    0.6491273,
    0.2172983,
    0.6351415,
    0.4959009,
    0.77732676,
    2.8963873,
    0.00053430814,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_2KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.17279415,
    0.26403475,
    -0.11452551,
    -0.28992337,
    -0.6073518,
    -0.76404655,
    -0.76104933,
    1.9040512,
    1.705788,
    1.7249058,
    1.5696108,
    1.6327494,
    1.6148369,
    0.34232837,
    0.49385145,
    0.63885677,
    0.84745675,
    0.98808646,
    1.0741498,
    0.7871209,
    0.6325125,
    0.87380385,
    1.078817,
    1.4328644,
    1.7958317,
    0.40306494,
    0.5319942,
    0.60159224,
    0.61677045,
    0.6833001,
    0.72055197,
    0.3245068,
    0.37355945,
    0.39554337,
    0.48069626,
    0.5167085,
    0.54934907,
    3.0265062,
    0.9114201,
    1.6164106,
    0.45398182,
    1.2876424,
    0.22116295,
    0.5363435,
    0.9570742,
    1.2978804,
    0.3195341,
    0.24662241,
    0.115939155,
    0.76784796,
    0.32347834,
    0.22540112,
    0.0033180327,
    0.5158919,
    0.61187303,
    0.87040585,
    0.5997813,
    0.132426,
    0.3615559,
    -0.09734784,
    0.78698355,
    0.112486966,
    0.25358018,
    0.49453592,
    0.25949046,
    0.40340877,
    -0.057446565,
    0.34532934,
    0.2546485,
    -0.4171796,
    -0.20713401,
    -0.116817124,
    -0.17663942,
    -0.43139806,
    -0.19521916,
    -0.17019275,
    -0.25076613,
    -0.04883483,
    0.05024809,
    0.051280886,
    0.086992174,
    -0.3311898,
    -0.39331892,
    -0.5697751,
    -0.43539774,
    0.049563173,
    0.3960988,
    1.1391767,
    1.2745606,
    1.2432822,
    1.3983454,
    1.5915155,
    0.7536242,
    0.4157909,
    1.221723,
    1.2483829,
    1.1306301,
    1.0132332,
    0.8946096,
    0.75700486,
    0.625237,
    0.6226553,
    0.44465286,
    0.52521497,
    0.5684443,
    0.7440826,
    0.87668014,
    1.0266014,
    1.33939,
    1.5255879,
    1.6700183,
    1.9695652,
    -0.26110813,
    -0.12583278,
    0.10045391,
    0.25113964,
    0.005591153,
    0.16789998,
    -0.0146687245,
    1.4085088,
    0.58120215,
    0.004153588,
    0.09130483,
    0.06279459,
    -0.14404358,
    0.037438717,
    -0.13718905,
    -0.12548526,
    0.0051122922,
    -0.18163668,
    -0.14880478,
    -0.14018163,
    -0.052521236,
    0.09282707,
    0.27174264,
    -0.024697082,
    0.08458526,
    0.097845435,
    0.2632982,
    0.4452553,
    0.5403607,
    -0.045895606,
    -0.37061465,
    -0.09455917,
    0.20098075,
    0.55381215,
    0.708998,
    -0.073398694,
    -0.49349013,
    -0.17875887,
    0.15311965,
    0.55499935,
    0.78606,
    0.13453156,
    -0.05136304,
    -0.062167127,
    -0.07556031,
    -0.06662996,
    0.12792492,
    -0.6316509,
    -0.60212916,
    -0.37449133,
    -0.13126442,
    0.16858608,
    0.43137592,
    -0.5908049,
    -0.57823026,
    -0.33518657,
    -0.07121597,
    0.19756378,
    0.57767725,
    0.44096097,
    0.14111233,
    0.023241485,
    0.060293663,
    0.18446018,
    0.37557042,
    -0.47377434,
    -0.45618355,
    -0.21991508,
    0.03594097,
    0.39135936,
    0.6349963,
    -0.67611444,
    -0.55723333,
    -0.28051034,
    0.06573074,
    0.42887726,
    0.74197745,
    -0.03764219,
    0.036991388,
    0.19944336,
    0.092303924,
    0.102584295,
    0.20306627,
    -0.0465083,
    -0.09191514,
    -0.19452117,
    -0.3189867,
    -0.33795607,
    -0.2333588,
    -0.6465309,
    -0.75601715,
    -0.33112714,
    -0.29623392,
    -0.34266493,
    -0.3442869,
    -0.000116079114,
    -0.009369239,
    0.0092722215,
    0.0030306866,
    -0.00916178,
    -0.0003501959,
    0.00912733,
    -0.008776911,
    -1.930159,
    -1.774108,
    -1.814551,
    -1.6618705,
    -1.714798,
    -1.6868759,
    -0.7373635,
    -1.0166231,
    -1.1083775,
    -1.2516993,
    -1.3841048,
    -1.4732039,
    -0.5227566,
    -0.6524835,
    -0.8946363,
    -1.0709773,
    -1.4597453,
    -1.7701585,
    -0.5332694,
    -0.5636421,
    -0.6077803,
    -0.6927174,
    -0.67567235,
    -0.714497,
    -0.31561014,
    -0.39330235,
    -0.41076183,
    -0.4868839,
    -0.5303483,
    -0.5372423,
    -2.7827687,
    -0.6187916,
    -1.8097489,
    -0.25549427,
    -1.1991937,
    0.21779758,
    -0.4673679,
    -0.8856375,
    -1.3919991,
    -0.6445494,
    -0.44508186,
    -0.024429414,
    -1.1109254,
    -0.55415714,
    -0.394067,
    0.077490255,
    -0.40773046,
    -0.74812007,
    -1.193569,
    -0.7072509,
    -0.36638686,
    -0.17159757,
    -0.14971937,
    -0.6244034,
    -0.119113356,
    -0.21199153,
    -0.2541353,
    -0.2191131,
    -0.50598586,
    0.17245848,
    -0.2366202,
    -0.18771987,
    0.37898022,
    0.28042373,
    0.2717797,
    0.122348875,
    0.39617497,
    -0.06481092,
    -0.022873733,
    0.1521157,
    0.053760987,
    -0.034688797,
    -0.042496238,
    -0.043555193,
    0.29743832,
    0.43255004,
    0.42602172,
    0.48185557,
    -0.81570715,
    -0.6617618,
    -0.6599081,
    -0.70841354,
    -0.8294414,
    -0.95597804,
    -0.26273194,
    -0.16866133,
    -0.051828384,
    -1.5949942,
    -1.4609954,
    -1.3508232,
    -1.2714145,
    -1.0882983,
    -1.0135634,
    -0.97444266,
    -1.0386729,
    -1.1160114,
    -0.38917077,
    -0.68252784,
    -0.81502986,
    -1.0525925,
    -1.2842677,
    -1.3900411,
    -1.5385859,
    -1.6558887,
    -1.7548083,
    0.2859136,
    0.11464934,
    -0.10615974,
    -0.24869297,
    -0.026943482,
    -0.16050956,
    0.003822267,
    -1.3040481,
    -0.45888147,
    -0.005225673,
    -0.07897966,
    -0.096989304,
    0.11940558,
    -0.03861919,
    0.19188954,
    0.13217305,
    0.005889902,
    0.19765075,
    0.12536936,
    0.061372645,
    -0.038426068,
    -0.16943263,
    -0.33494437,
    -0.03988951,
    -0.23146564,
    -0.23847151,
    -0.34549186,
    -0.5156543,
    -0.55446225,
    -0.04667405,
    0.20588426,
    0.014874102,
    -0.21005814,
    -0.5101321,
    -0.68738794,
    -0.06840199,
    0.3398873,
    0.10147638,
    -0.19386706,
    -0.57075024,
    -0.8194524,
    -0.1598108,
    0.09557116,
    0.12369536,
    0.16280326,
    0.044825047,
    -0.04495956,
    0.51594466,
    0.5252459,
    0.3358771,
    0.13836691,
    -0.12408599,
    -0.50142646,
    0.5094806,
    0.4697088,
    0.26585445,
    0.037076402,
    -0.18924126,
    -0.51414454,
    -0.32696548,
    -0.12461967,
    -0.013332247,
    -0.036217187,
    -0.15959927,
    -0.3613491,
    0.44501373,
    0.40111136,
    0.21700348,
    -0.044546433,
    -0.33224282,
    -0.6270707,
    0.63026,
    0.50584644,
    0.28040072,
    -0.010607446,
    -0.3786559,
    -0.7350688,
    0.020513538,
    -0.06690713,
    -0.20993479,
    -0.009768924,
    -0.12046202,
    -0.20557337,
    0.12417806,
    0.15187474,
    0.22968265,
    0.31009275,
    0.19930157,
    0.027572945,
    0.45648748,
    0.19844691,
    0.025565842,
    0.1652578,
    -0.008172838,
    0.1807195,
    -0.0075867055,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_2KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.19618513,
    -0.12603372,
    -0.015536889,
    0.1261336,
    0.39343518,
    0.54471564,
    -0.15491426,
    -0.27759033,
    -0.0069163186,
    -0.0036204353,
    0.2059794,
    0.3110437,
    -0.42611456,
    -0.6068721,
    -0.49104723,
    -0.05461399,
    0.1272986,
    -0.00822559,
    0.1884023,
    -0.13636926,
    -0.13377881,
    0.30591944,
    0.487582,
    0.54234695,
    -1.3201939,
    -0.9234476,
    -0.88198483,
    0.3082681,
    0.94588137,
    2.3325715,
    -1.9623413,
    -0.81226206,
    -1.1284567,
    -0.12128122,
    1.1671778,
    3.1298351,
    -0.39097193,
    0.07514274,
    -0.06557368,
    -0.20560668,
    -0.13817734,
    -0.15567772,
    -1.6164923,
    1.0326616,
    0.21477142,
    -2.8077223,
    -2.551806,
    -0.13339965,
    0.38691,
    -0.30760485,
    0.06981112,
    -0.06082517,
    0.08143008,
    0.050636236,
    -0.19882275,
    0.03367009,
    0.3332777,
    0.6907215,
    0.6812265,
    -0.115635045,
    -0.117798366,
    -0.006480599,
    0.08968755,
    -0.014623408,
    -0.24321537,
    -0.06481637,
    -0.4970192,
    -0.21534547,
    0.51982844,
    1.7268767,
    0.004423392,
    0.30211067,
    -0.06706835,
    0.03738013,
    0.28384575,
    0.4953554,
    0.5341444,
    -0.38101324,
    -0.4474343,
    -0.41911015,
    -0.14857827,
    0.30844328,
    0.6750072,
    -0.97720045,
    -0.56535405,
    -0.17083597,
    0.54298985,
    1.5395478,
    1.096076,
    0.45582753,
    0.016415296,
    -0.33029875,
    0.44426945,
    -0.32968402,
    0.9531575,
    0.41011214,
    0.1216629,
    0.6917996,
    0.18339105,
    0.065131195,
    -0.6355726,
    1.5640646,
    0.46537867,
    1.1751071,
    -0.08667284,
    -0.22987743,
    -0.7127392,
    0.4810418,
    0.8214628,
    0.9918113,
    -0.09119934,
    -0.27208114,
    -0.13251854,
    2.426638,
    -0.104075655,
    2.1405137,
    3.3990076,
    0.45329964,
    -4.655621,
    -0.74131274,
    0.7973329,
    1.3661869,
    0.46773735,
    0.5741953,
    0.087222114,
    0.30638045,
    0.33453366,
    0.08256739,
    0.04432858,
    0.3225368,
    -0.021882322,
    0.32148007,
    0.31549633,
    -1.5004859,
    -0.13966632,
    0.45546106,
    -0.40373558,
    -0.24551375,
    0.18895926,
    0.07625407,
    0.0052082036,
    -0.0012640925,
    0.34141248,
    0.15663096,
    2.02077,
    -2.6822398,
    -1.6883273,
    -1.9041578,
    -0.1886726,
    0.25378472,
    0.5179474,
    1.0816803,
    -2.2359698,
    -1.5015856,
    -0.5805032,
    0.79634327,
    0.31051883,
    -1.2014942,
    0.25040248,
    1.1517992,
    1.6989455,
    1.3853481,
    1.6036713,
    0.7625884,
    -0.92504823,
    -0.5216621,
    0.36561957,
    1.1321492,
    1.6092598,
    0.61432403,
    -2.0228667,
    -0.8177022,
    -1.254545,
    -1.1593713,
    -1.2931123,
    -0.3154228,
    -1.1602424,
    -1.9565928,
    0.32626602,
    -0.028468128,
    -0.036849245,
    -0.112456985,
    0.043217946,
    0.08309858,
    0.24185763,
    -0.17654309,
    0.23051652,
    0.17497836,
    0.30518794,
    -0.17468643,
    -0.17940004,
    1.8823787,
    1.3385825,
    1.6534553,
    0.046787873,
    1.9449157,
    1.957238,
    0.5685186,
    1.369992,
    0.49561453,
    0.5704975,
    0.5515624,
    0.14864062,
    0.68902594,
    0.98338044,
    0.8225161,
    2.7357512,
    0.00053430814,
];
