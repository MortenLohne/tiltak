use std::{array, mem};

use half::f16;

use crate::{
    evaluation::policy_eval::sigmoid,
    position::{num_line_symmetries, num_square_symmetries, Komi},
};

use super::policy_eval::policy_offset;

pub const NUM_VALUE_FEATURES_4S: usize = 312;
pub const NUM_POLICY_FEATURES_4S: usize = 176;

pub const NUM_VALUE_FEATURES_5S: usize = 392;
pub const NUM_POLICY_FEATURES_5S: usize = 200;

pub const NUM_VALUE_FEATURES_6S: usize = 416;
pub const NUM_POLICY_FEATURES_6S: usize = 208;

const fn value_padding<const S: usize>() -> usize {
    match S {
        4 => 2,
        5 => 2,
        6 => 6,
        _ => unimplemented!(),
    }
}

const fn policy_padding<const S: usize>() -> usize {
    match S {
        4 => 7,
        5 => 3,
        6 => 1,
        _ => unimplemented!(),
    }
}

#[derive(Debug, Clone, Copy)]
pub struct IndexPair {
    start: usize,
    length: usize,
}

impl IndexPair {
    pub const fn next(start: usize, length: usize) -> (Self, usize) {
        (Self { start, length }, start + length)
    }

    pub fn as_slice<'a, T>(&self, slice: &'a [T]) -> &'a [T] {
        &slice[self.start..self.start + self.length]
    }

    pub fn as_mut_slice<'a, T>(&self, slice: &'a mut [T]) -> &'a mut [T] {
        &mut slice[self.start..self.start + self.length]
    }
}

#[derive(Debug)]
pub struct ValueIndexes<const S: usize> {
    pub first_ply: IndexPair,
    pub second_ply: IndexPair,
    pub flat_psqt: IndexPair,
    pub wall_psqt: IndexPair,
    pub cap_psqt: IndexPair,
    pub supports_psqt: IndexPair,
    pub captives_psqt: IndexPair,
    pub flat_win_this_ply: IndexPair,
    pub flat_win_next_ply: IndexPair,
    pub flat_win_two_ply: IndexPair,
    pub flat_win_three_ply: IndexPair,
    pub one_reserve_left_us: IndexPair,
    pub one_reserve_left_them: IndexPair,
    pub shallow_supports_per_piece: IndexPair,
    pub shallow_supports_per_piece_mobility: IndexPair,
    pub deep_supports_per_piece: IndexPair,
    pub shallow_captives_per_piece: IndexPair,
    pub shallow_captives_per_piece_mobility: IndexPair,
    pub deep_captives_per_piece: IndexPair,
    pub us_to_move_opening_flatstone_lead: IndexPair,
    pub them_to_move_opening_flatstone_lead: IndexPair,
    pub us_to_move_middlegame_flatstone_lead: IndexPair,
    pub them_to_move_middlegame_flatstone_lead: IndexPair,
    pub us_to_move_endgame_flatstone_lead: IndexPair,
    pub them_to_move_endgame_flatstone_lead: IndexPair,
    pub i_number_of_groups: IndexPair,
    pub critical_squares: IndexPair,
    pub critical_square_cap_attack: IndexPair,
    pub flat_next_to_our_stack: IndexPair,
    pub wall_next_to_our_stack: IndexPair,
    pub cap_next_to_our_stack: IndexPair,
    pub num_lines_occupied: IndexPair,
    pub line_control_empty: IndexPair,
    pub line_control_their_blocking_piece: IndexPair,
    pub line_control_other: IndexPair,
    pub sidelined_cap: IndexPair,
    pub fully_isolated_cap: IndexPair,
    pub semi_isolated_cap: IndexPair,
    pub padding: IndexPair,
}

impl<const S: usize> ValueIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;

        let (first_ply, i) = IndexPair::next(i, 1);
        let (second_ply, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (supports_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (captives_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_win_this_ply, i) = IndexPair::next(i, 1);
        let (flat_win_next_ply, i) = IndexPair::next(i, 2);
        let (flat_win_two_ply, i) = IndexPair::next(i, 2);
        let (flat_win_three_ply, i) = IndexPair::next(i, 3);
        let (one_reserve_left_us, i) = IndexPair::next(i, 4);
        let (one_reserve_left_them, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece_mobility, i) = IndexPair::next(i, 4);
        let (deep_supports_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece_mobility, i) = IndexPair::next(i, 4);
        let (deep_captives_per_piece, i) = IndexPair::next(i, 4);
        let (us_to_move_opening_flatstone_lead, i) = IndexPair::next(i, 7);
        let (them_to_move_opening_flatstone_lead, i) = IndexPair::next(i, 7);
        let (us_to_move_middlegame_flatstone_lead, i) = IndexPair::next(i, 7);
        let (them_to_move_middlegame_flatstone_lead, i) = IndexPair::next(i, 7);
        let (us_to_move_endgame_flatstone_lead, i) = IndexPair::next(i, 7);
        let (them_to_move_endgame_flatstone_lead, i) = IndexPair::next(i, 7);
        let (i_number_of_groups, i) = IndexPair::next(i, 3);
        let (critical_squares, i) = IndexPair::next(i, 4);
        let (critical_square_cap_attack, i) = IndexPair::next(i, 6);
        let (flat_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (wall_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (cap_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (num_lines_occupied, i) = IndexPair::next(i, S + 1);
        let (line_control_empty, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_their_blocking_piece, i) =
            IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_other, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (sidelined_cap, i) = IndexPair::next(i, 3);
        let (fully_isolated_cap, i) = IndexPair::next(i, 3);
        let (semi_isolated_cap, i) = IndexPair::next(i, 3);
        let (padding, i) = IndexPair::next(i, value_padding::<S>() / 2);

        assert!(i == num_value_features::<S>() / 2);

        ValueIndexes {
            first_ply,
            second_ply,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            supports_psqt,
            captives_psqt,
            flat_win_this_ply,
            flat_win_next_ply,
            flat_win_two_ply,
            flat_win_three_ply,
            one_reserve_left_us,
            one_reserve_left_them,
            shallow_supports_per_piece,
            shallow_supports_per_piece_mobility,
            deep_supports_per_piece,
            shallow_captives_per_piece,
            shallow_captives_per_piece_mobility,
            deep_captives_per_piece,
            us_to_move_opening_flatstone_lead,
            them_to_move_opening_flatstone_lead,
            us_to_move_middlegame_flatstone_lead,
            them_to_move_middlegame_flatstone_lead,
            us_to_move_endgame_flatstone_lead,
            them_to_move_endgame_flatstone_lead,
            i_number_of_groups,
            critical_squares,
            critical_square_cap_attack,
            flat_next_to_our_stack,
            wall_next_to_our_stack,
            cap_next_to_our_stack,
            num_lines_occupied,
            line_control_empty,
            line_control_their_blocking_piece,
            line_control_other,
            sidelined_cap,
            fully_isolated_cap,
            semi_isolated_cap,
            padding,
        }
    }
}

pub const VALUE_INDEXES_4S: ValueIndexes<4> = ValueIndexes::new();
pub const VALUE_INDEXES_5S: ValueIndexes<5> = ValueIndexes::new();
pub const VALUE_INDEXES_6S: ValueIndexes<6> = ValueIndexes::new();

impl<const S: usize> ValueIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> ValueIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn value_indexes<const S: usize>() -> ValueIndexes<S> {
    match S {
        4 => VALUE_INDEXES_4S.downcast_size(),
        5 => VALUE_INDEXES_5S.downcast_size(),
        6 => VALUE_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

#[derive(Debug)]
pub struct PolicyIndexes<const S: usize> {
    pub flat_psqt_white: IndexPair,
    pub flat_psqt_black: IndexPair,
    pub wall_psqt_white: IndexPair,
    pub wall_psqt_black: IndexPair,
    pub cap_psqt_white: IndexPair,
    pub cap_psqt_black: IndexPair,
    pub move_role_bonus_white: IndexPair,
    pub move_role_bonus_black: IndexPair,
    pub decline_win: IndexPair,
    pub place_to_win: IndexPair,
    pub place_to_draw: IndexPair,
    pub place_to_loss: IndexPair,
    pub place_to_allow_opponent_to_end: IndexPair,
    pub two_flats_left: IndexPair,
    pub three_flats_left: IndexPair,
    pub our_road_stones_in_line: IndexPair,
    pub their_road_stones_in_line: IndexPair,
    pub extend_single_group_base: IndexPair,
    pub extend_single_group_linear: IndexPair,
    pub extend_single_group_to_new_line_base: IndexPair,
    pub extend_single_group_to_new_line_linear: IndexPair,
    pub merge_two_groups_base: IndexPair,
    pub merge_two_groups_linear: IndexPair,
    pub block_merger_base: IndexPair,
    pub block_merger_linear: IndexPair,
    pub place_our_critical_square: IndexPair,
    pub place_their_critical_square: IndexPair,
    pub ignore_their_critical_square: IndexPair,
    pub next_to_our_last_stone: IndexPair,
    pub next_to_their_last_stone: IndexPair,
    pub diagonal_to_our_last_stone: IndexPair,
    pub diagonal_to_their_last_stone: IndexPair,
    pub attack_strong_flats: IndexPair,
    pub blocking_stone_blocks_extensions_of_two_flats: IndexPair,
    pub attack_strong_stack_with_wall: IndexPair,
    pub attack_strong_stack_with_cap: IndexPair,
    pub attack_last_movement: IndexPair,
    pub place_last_movement: IndexPair,
    pub simple_movement: IndexPair,
    pub simple_capture: IndexPair,
    pub simple_self_capture: IndexPair,
    pub pure_spread: IndexPair,
    pub fcd_highest_board: IndexPair,
    pub fcd_highest_stack: IndexPair,
    pub fcd_other: IndexPair,
    pub stack_captured_by_movement: IndexPair,
    pub stack_capture_in_strong_line: IndexPair,
    pub stack_capture_in_strong_line_cap: IndexPair,
    pub move_cap_onto_strong_line: IndexPair,
    pub move_cap_onto_strong_line_with_critical_square: IndexPair,
    pub recapture_stack_pure: IndexPair,
    pub recapture_stack_impure: IndexPair,
    pub move_last_placement: IndexPair,
    pub continue_spread: IndexPair,
    pub move_onto_critical_square: IndexPair,
    pub spread_that_connects_groups_to_win: IndexPair,
    pub padding: IndexPair,
}

pub const POLICY_INDEXES_4S: PolicyIndexes<4> = PolicyIndexes::new();
pub const POLICY_INDEXES_5S: PolicyIndexes<5> = PolicyIndexes::new();
pub const POLICY_INDEXES_6S: PolicyIndexes<6> = PolicyIndexes::new();

impl<const S: usize> PolicyIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> PolicyIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn policy_indexes<const S: usize>() -> PolicyIndexes<S> {
    match S {
        4 => POLICY_INDEXES_4S.downcast_size(),
        5 => POLICY_INDEXES_5S.downcast_size(),
        6 => POLICY_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

impl<const S: usize> PolicyIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;
        let (flat_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (move_role_bonus_white, i) = IndexPair::next(i, 3);
        let (move_role_bonus_black, i) = IndexPair::next(i, 3);
        let (decline_win, i) = IndexPair::next(i, 1);
        let (place_to_win, i) = IndexPair::next(i, 1);
        let (place_to_draw, i) = IndexPair::next(i, 1);
        let (place_to_loss, i) = IndexPair::next(i, 1);
        let (place_to_allow_opponent_to_end, i) = IndexPair::next(i, 3);
        let (two_flats_left, i) = IndexPair::next(i, 2);
        let (three_flats_left, i) = IndexPair::next(i, 2);
        let (our_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (their_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (extend_single_group_to_new_line_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_to_new_line_linear, i) = IndexPair::next(i, 3);
        let (extend_single_group_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_linear, i) = IndexPair::next(i, 3);
        let (merge_two_groups_base, i) = IndexPair::next(i, 3);
        let (merge_two_groups_linear, i) = IndexPair::next(i, 3);
        let (block_merger_base, i) = IndexPair::next(i, 3);
        let (block_merger_linear, i) = IndexPair::next(i, 3);
        let (place_our_critical_square, i) = IndexPair::next(i, 1);
        let (place_their_critical_square, i) = IndexPair::next(i, 4);
        let (ignore_their_critical_square, i) = IndexPair::next(i, 2);
        let (next_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (next_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (attack_strong_flats, i) = IndexPair::next(i, 1);
        let (blocking_stone_blocks_extensions_of_two_flats, i) = IndexPair::next(i, 1);
        let (attack_strong_stack_with_wall, i) = IndexPair::next(i, 6);
        let (attack_strong_stack_with_cap, i) = IndexPair::next(i, 6);
        let (attack_last_movement, i) = IndexPair::next(i, 4);
        let (place_last_movement, i) = IndexPair::next(i, 3);
        let (simple_movement, i) = IndexPair::next(i, 3);
        let (simple_capture, i) = IndexPair::next(i, 4);
        let (simple_self_capture, i) = IndexPair::next(i, 4);
        let (pure_spread, i) = IndexPair::next(i, 2);
        let (fcd_highest_board, i) = IndexPair::next(i, 6);
        let (fcd_highest_stack, i) = IndexPair::next(i, 6);
        let (fcd_other, i) = IndexPair::next(i, 8);
        let (stack_captured_by_movement, i) = IndexPair::next(i, 1);
        let (stack_capture_in_strong_line, i) = IndexPair::next(i, S - 3);
        let (stack_capture_in_strong_line_cap, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line_with_critical_square, i) = IndexPair::next(i, S - 3);
        let (recapture_stack_pure, i) = IndexPair::next(i, 3);
        let (recapture_stack_impure, i) = IndexPair::next(i, 3);
        let (move_last_placement, i) = IndexPair::next(i, 3);
        let (continue_spread, i) = IndexPair::next(i, 3);
        let (move_onto_critical_square, i) = IndexPair::next(i, 3);
        let (spread_that_connects_groups_to_win, i) = IndexPair::next(i, 1);
        let (padding, i) = IndexPair::next(i, policy_padding::<S>());

        assert!(i == num_policy_features::<S>());

        PolicyIndexes {
            flat_psqt_white,
            flat_psqt_black,
            wall_psqt_white,
            wall_psqt_black,
            cap_psqt_white,
            cap_psqt_black,
            move_role_bonus_white,
            move_role_bonus_black,
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            attack_strong_stack_with_wall,
            attack_strong_stack_with_cap,
            attack_last_movement,
            place_last_movement,
            simple_movement,
            simple_capture,
            simple_self_capture,
            pure_spread,
            fcd_highest_board,
            fcd_highest_stack,
            fcd_other,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            recapture_stack_pure,
            recapture_stack_impure,
            move_last_placement,
            continue_spread,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
            padding,
        }
    }
}

pub trait ValueApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn finish(&mut self) -> f32;
}

#[derive(Debug, Clone)]
pub struct Value<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for Value<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Value {
            features: vec![f16::ZERO; num_value_features::<S>() / 2],
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn finish(&mut self) -> f32 {
        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>();

        self.features.fill(f16::ZERO);

        total_value
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalValue<const S: usize> {
    val: f32,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for IncrementalValue<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalValue {
            val: 0.0,
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn finish(&mut self) -> f32 {
        let total_value = self.val;

        self.val = 0.0;

        total_value
    }
}

pub trait PolicyApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn eval_one(&mut self, index_pair: IndexPair, index: usize) {
        self.eval_i8(index_pair, index, 1)
    }
    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.eval(index_pair, index, f16::from(val))
    }
    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.eval(index_pair, index, f16::from_f32(val))
    }
    fn set_immediate_win(&mut self);
    fn has_immediate_win(&self) -> bool;
    fn finish(&mut self, num_moves: usize) -> f16;
}

#[derive(Debug, Clone)]
pub struct Policy<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for Policy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Policy {
            features: vec![f16::ZERO; num_policy_features::<S>()],
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);

        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>() + offset;

        self.features.fill(f16::ZERO);
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalPolicy<const S: usize> {
    val: f32,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for IncrementalPolicy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalPolicy {
            val: 0.0,
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.val += index_pair.as_slice(self.parameters)[index] * val as f32
    }

    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.val += index_pair.as_slice(self.parameters)[index] * val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);
        let total_value = self.val + offset;

        self.val = 0.0;
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

pub const fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub const fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn value_features_4s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_4S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_4S_0KOMI,
        4 => &VALUE_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn policy_features_4s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_4S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_4S_0KOMI,
        4 => &POLICY_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn value_features_5s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_5S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_5S_0KOMI,
        4 => &VALUE_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn policy_features_5s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_5S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_5S_0KOMI,
        4 => &POLICY_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn value_features_6s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_6S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_6S_0KOMI,
        4 => &VALUE_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

pub fn policy_features_6s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_6S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_6S_0KOMI,
        4 => &POLICY_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_0KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    1.9517757,
    2.4006295,
    2.0216284,
    1.4305742,
    1.090603,
    2.078429,
    1.1266109,
    0.05028018,
    0.16768824,
    0.16028416,
    -0.0059250165,
    -0.00050385203,
    -0.00651386,
    0.060337193,
    0.34332645,
    0.33103356,
    -0.2548578,
    -0.7829227,
    -0.5458915,
    0.0062694433,
    0.008578845,
    0.015191374,
    -0.0006404345,
    0.017787587,
    0.012703718,
    0.00083379226,
    0.009891503,
    -0.0035917528,
    0.005891454,
    0.0042844363,
    0.00344201,
    -0.0070606465,
    -0.00050033093,
    -0.0037154853,
    0.0010266459,
    0.36433113,
    0.2561912,
    -0.005124028,
    -0.008343117,
    0.21986209,
    0.17725201,
    0.005951524,
    -0.0043248367,
    0.038097702,
    0.07276443,
    -0.005560641,
    0.0036220215,
    0.7389364,
    0.7281517,
    -0.0055643534,
    -0.0015320918,
    0.43323413,
    0.47254413,
    -0.009827926,
    0.00059686694,
    0.04634152,
    0.0519664,
    0.0076304395,
    -0.0060374904,
    -0.006134841,
    0.0070836153,
    0.010426812,
    0.28109324,
    0.05798903,
    0.01668972,
    0.0042294897,
    -0.0040083686,
    -0.0053276587,
    0.008685032,
    0.02541632,
    0.25233912,
    0.044746853,
    0.008948911,
    0.0002595009,
    0.0040044542,
    0.029937329,
    0.04465773,
    0.041704092,
    0.03451866,
    0.020259902,
    -0.0095167495,
    -0.010581427,
    0.010601742,
    0.022804363,
    0.044392597,
    0.053209472,
    0.041265454,
    -0.0033842027,
    -0.0007524729,
    0.004412878,
    0.01856625,
    0.016944587,
    0.013983864,
    0.01696789,
    -0.0024550178,
    -0.0042417888,
    -0.013823583,
    -0.009840143,
    0.011754357,
    0.0132085765,
    0.02600573,
    1.4451684,
    0.84104276,
    0.29060653,
    0.21235879,
    0.053060897,
    0.3706893,
    0.13916145,
    -0.0022270367,
    0.002150652,
    -0.0016946243,
    0.0012913607,
    -0.004483435,
    0.008160291,
    0.58096236,
    0.50315213,
    0.0016175173,
    0.005555598,
    0.23647326,
    0.6434611,
    0.90753543,
    0.44168535,
    0.6131022,
    0.7065833,
    0.22949202,
    0.06349056,
    0.50902534,
    0.63651514,
    0.22282808,
    0.050370473,
    0.089471124,
    0.1390511,
    0.0970419,
    0.06367017,
    0.16566296,
    0.2878921,
    0.1601725,
    0.044111907,
    0.8181447,
    1.0297829,
    0.42447966,
    0.17071186,
    0.6752821,
    1.0921938,
    0.50274473,
    0.120829634,
    -0.007463541,
    -0.009312019,
    0.008915393,
    -0.0005510999,
    0.0035254955,
    0.008046815,
    0.008674609,
    0.008508706,
    -0.0008124877,
    0.004095099,
    0.002457223,
    -0.0064589093,
    0.0060925093,
    0.0012618108,
    0.80258524,
    1.5780742,
    0.791772,
    0.07474535,
    0.24231286,
    0.23073898,
    0.00051479787,
    -0.0077517964,
    -0.0077192923,
    0.049970638,
    0.18979107,
    0.12407929,
    -0.21635206,
    -0.7398428,
    -0.5364521,
    -0.0018942931,
    -0.0047628284,
    0.0010456851,
    0.003619789,
    0.0006588111,
    0.006632632,
    -0.00042718273,
    0.005446785,
    -0.008152193,
    -0.005006349,
    0.007804665,
    -0.00051090156,
    -0.010289072,
    0.0055327835,
    -0.0058037397,
    -0.005285217,
    0.18793993,
    0.09137259,
    0.0069459323,
    -0.0069796084,
    0.11196916,
    0.0555638,
    0.0042860033,
    -0.004753387,
    0.025554117,
    0.070192285,
    -0.0066909315,
    0.0056339707,
    0.9394352,
    0.48543686,
    -0.0018851925,
    0.007400766,
    0.569441,
    0.2914493,
    0.0092722215,
    0.0030306866,
    0.008444932,
    0.048375938,
    0.00912733,
    -0.008776911,
    0.015957022,
    0.04513622,
    0.25178784,
    0.013774038,
    0.00039528968,
    -0.0032484652,
    0.0067027383,
    -0.0018347087,
    0.005142831,
    0.050235763,
    0.28868157,
    0.012296692,
    0.008242068,
    -0.00043511062,
    0.034846473,
    0.045423612,
    0.04845504,
    0.019607695,
    0.010147672,
    -0.003958384,
    0.006769391,
    0.004729882,
    0.021289745,
    0.05278668,
    0.053125303,
    0.023452178,
    0.009268445,
    -0.0015745148,
    0.024052277,
    0.031595185,
    0.021740317,
    0.0019961875,
    -0.0013729164,
    0.0037118972,
    0.003461585,
    0.016654594,
    0.01538238,
    0.014824655,
    0.02915127,
    0.0064432644,
    -0.011756275,
    -0.005071998,
    1.3359479,
    0.76389295,
    0.21543837,
    0.064207666,
    0.003689209,
    0.120653495,
    0.012657661,
    -0.00079724286,
    -0.001203401,
    -0.001678803,
    0.008264789,
    0.0015326263,
    -0.006872382,
    1.4396472,
    0.32751185,
    -0.0020184517,
    0.009184379,
    0.49926668,
    0.8156254,
    0.72738254,
    0.16746674,
    0.5974157,
    0.5223532,
    0.16090465,
    0.024428608,
    0.5199784,
    0.38839272,
    0.15079738,
    0.025947062,
    0.12534767,
    0.08937483,
    0.044523016,
    0.016136438,
    0.2572355,
    0.18042246,
    0.03643798,
    -0.0012718181,
    1.2207187,
    1.2704391,
    0.28354394,
    0.057998396,
    1.173744,
    1.322583,
    0.359615,
    0.039214805,
    0.006838942,
    0.0048156017,
    -0.004148743,
    0.0021977378,
    -0.0029488825,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    -0.0038043214,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_0KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    -0.06596815,
    0.14143576,
    0.2643506,
    0.14499849,
    0.107681885,
    0.11073599,
    -0.19013828,
    -0.40654242,
    0.3318426,
    -0.16691944,
    -0.3575065,
    0.23800719,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.33601677,
    -0.041274536,
    0.0013449714,
    -0.29418692,
    -0.54222,
    0.0075244084,
    -2.7454162,
    1.2056162,
    0.74540424,
    -3.2504718,
    -2.7729948,
    0.068721116,
    0.47504744,
    -0.16477276,
    0.18019468,
    -0.13531236,
    0.14152104,
    0.032580495,
    -0.22254677,
    0.49075425,
    1.1202906,
    -0.07768215,
    -0.10285486,
    -0.28730598,
    -0.60267043,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    0.1747276,
    -0.3360676,
    0.35788158,
    1.2172985,
    -0.7322632,
    -0.5023849,
    -0.49644548,
    0.63201225,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    0.6639308,
    0.34448573,
    -0.0077813696,
    -1.4789531,
    -0.5449256,
    0.0020160126,
    0.20559156,
    -0.025478715,
    -0.0057330895,
    0.48247886,
    0.27221236,
    0.0008187201,
    0.79267675,
    1.5803065,
    -0.002397363,
    0.2934291,
    -0.9169082,
    0.00303144,
    0.18601592,
    0.47252977,
    -0.008103551,
    -0.54003847,
    -0.6874615,
    -0.009149382,
    2.5997837,
    0.21279974,
    1.0009149,
    0.00917124,
    0.5581906,
    -3.4829595,
    -0.7885469,
    0.29876935,
    1.3653431,
    0.3458327,
    0.23525056,
    0.27667275,
    0.6695998,
    0.2019845,
    0.33065692,
    -0.2599935,
    0.50598747,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.32448876,
    0.06516934,
    -0.00813673,
    -0.009886575,
    0.04560957,
    -0.2841685,
    0.00021132734,
    -1.8742533,
    -1.0128005,
    0.0011727996,
    0.07729849,
    0.14006491,
    -0.008626261,
    -0.006473,
    -1.0160459,
    -0.7020004,
    -0.0051336214,
    -0.0013411185,
    0.15417725,
    -1.3802054,
    0.25305972,
    1.4399757,
    1.8268988,
    1.968561,
    2.796725,
    1.1202828,
    -1.7660865,
    -0.804423,
    0.20100431,
    1.3501571,
    0.9508624,
    0.054124333,
    -1.1339825,
    -1.1712068,
    -2.0318532,
    -1.4227827,
    -2.0454004,
    -0.13430345,
    -1.5658052,
    -1.0156312,
    0.39389312,
    -0.0530978,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.397977,
    0.7746763,
    -0.002408173,
    0.22021821,
    1.53287,
    0.0077593178,
    0.2637508,
    0.88056475,
    -0.0054027913,
    0.3666799,
    0.14289705,
    0.0036244253,
    -0.39640427,
    -0.31697965,
    0.16356713,
    3.3073342,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_2KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    0.63688457,
    0.8092102,
    0.14794403,
    -0.1830299,
    1.3258846,
    1.467234,
    1.4837371,
    0.48740688,
    1.0896355,
    1.5113318,
    -0.0059250165,
    -0.00050385203,
    -0.00651386,
    0.2843244,
    0.55591667,
    0.52852803,
    0.27623922,
    0.4740077,
    0.4464141,
    2.9492033,
    0.40320385,
    1.7695991,
    0.44173664,
    1.2222513,
    0.036877014,
    0.98452604,
    0.773774,
    0.30237418,
    0.14621873,
    0.17849565,
    -0.6028031,
    0.025962118,
    0.046081398,
    0.040703394,
    -0.6976376,
    0.64416206,
    0.4811379,
    -0.005124028,
    -0.008343117,
    0.4679741,
    1.9713519,
    0.005951524,
    -0.0043248367,
    0.3829217,
    -0.14275706,
    -0.005560641,
    0.0036220215,
    -0.22588164,
    -0.1803203,
    -0.0055643534,
    -0.0015320918,
    -0.6173608,
    -0.0187287,
    -0.009827926,
    0.00059686694,
    -0.59013486,
    -0.21860945,
    0.0076304395,
    -0.0060374904,
    0.713864,
    0.10885523,
    0.981712,
    0.079367414,
    -0.033242166,
    -0.58594286,
    -0.15390655,
    -0.007829599,
    1.1334889,
    0.18282342,
    0.47755116,
    -0.59055734,
    -0.76633716,
    -1.146771,
    0.40465045,
    0.37649903,
    0.11561997,
    0.35738912,
    0.14016673,
    -0.24783167,
    -0.46151888,
    -0.38513398,
    0.018700648,
    -0.10111484,
    -0.5042579,
    -0.26681665,
    -0.31160656,
    -0.701031,
    -0.6025491,
    -0.634276,
    -0.89122796,
    -0.36056787,
    0.68142855,
    1.3312267,
    2.3974984,
    -0.2571536,
    -0.59597003,
    -1.2801244,
    -0.9452529,
    0.008912579,
    0.8251274,
    1.3821298,
    -0.31446126,
    0.16741441,
    0.06972653,
    0.34504834,
    0.20081185,
    0.12366547,
    0.03967559,
    -0.0022270367,
    0.002150652,
    -0.0016946243,
    0.0012913607,
    -0.004483435,
    0.008160291,
    -0.0034647067,
    -0.16787097,
    0.0016175173,
    -0.16837743,
    -0.42251644,
    -0.22831012,
    0.09927704,
    0.49389637,
    0.016726762,
    -0.46912828,
    0.23834215,
    0.7324232,
    0.091811575,
    -0.27381516,
    0.24057394,
    0.6052698,
    -0.46867993,
    -0.4550196,
    -0.0026286365,
    0.3729119,
    -0.52361006,
    -0.43141028,
    -0.03798234,
    0.45445058,
    -0.59690475,
    -0.41837838,
    0.03608831,
    0.5377845,
    -0.8731544,
    -0.4265303,
    0.07711364,
    0.6434275,
    -0.007463541,
    -0.009312019,
    0.008915393,
    -0.0005510999,
    0.0035254955,
    0.008046815,
    0.008674609,
    0.008508706,
    -0.0008124877,
    0.004095099,
    0.002457223,
    -0.0064589093,
    0.0060925093,
    0.0012618108,
    -1.6011297,
    -1.6071707,
    -1.523246,
    -1.2570158,
    -1.6962018,
    -1.9301914,
    0.00051479787,
    -0.0077517964,
    -0.0077192923,
    -0.39861903,
    -0.545,
    -0.48743135,
    -0.12044701,
    -0.3518626,
    -0.3552304,
    -1.5653286,
    -0.16806781,
    -0.78073514,
    0.036157183,
    -0.86056125,
    0.21418132,
    -0.09157304,
    -0.42589703,
    -0.47870922,
    -0.17339279,
    0.053852677,
    0.0056142667,
    -0.38209152,
    -0.19813275,
    0.085765876,
    -0.0044836677,
    -0.5115153,
    -0.5816067,
    0.0069459323,
    -0.0069796084,
    -0.8296683,
    -1.3413659,
    0.0042860033,
    -0.004753387,
    -0.36118007,
    0.03446553,
    -0.0066909315,
    0.0056339707,
    0.17649281,
    0.24164818,
    -0.0018851925,
    0.007400766,
    0.5850682,
    -0.09782576,
    0.0092722215,
    0.0030306866,
    0.28300378,
    0.11544064,
    0.00912733,
    -0.008776911,
    0.006379608,
    -0.0034764553,
    -0.0019571641,
    -0.0020065904,
    -0.0007171016,
    -0.010811812,
    -0.70522434,
    -0.00401304,
    -0.0041113687,
    -0.00031996984,
    0.009882869,
    -0.0012246752,
    0.007262071,
    1.0940332,
    -0.008976857,
    0.0011483384,
    0.0038303593,
    -0.0033149004,
    0.035311032,
    -0.592132,
    -1.6782063,
    -0.00934294,
    -0.0056089186,
    0.008402593,
    0.009316759,
    -0.0075888177,
    0.2622237,
    0.41522864,
    -0.002034571,
    0.009508491,
    0.008153329,
    0.002736837,
    0.037728224,
    0.0044684317,
    -0.8586032,
    0.008243782,
    0.0015487336,
    -0.007857392,
    0.009504598,
    0.0039236895,
    0.24685499,
    1.6583691,
    0.23133208,
    0.01980273,
    -0.12371955,
    -0.13706772,
    -0.088935964,
    -0.12295875,
    0.26147884,
    -0.00079724286,
    -0.001203401,
    -0.001678803,
    0.008264789,
    0.0015326263,
    -0.006872382,
    -0.013469045,
    0.3632553,
    -0.0020184517,
    0.2642425,
    0.10180286,
    0.005446595,
    -0.15752418,
    -0.45578977,
    0.0010403302,
    0.5024731,
    0.0058204383,
    -0.7259563,
    0.1027646,
    0.51512104,
    -0.034446605,
    -0.38336948,
    0.15471794,
    0.079198666,
    -0.016083647,
    -0.44281587,
    -0.11217563,
    -0.03441892,
    -0.40967366,
    -0.55501115,
    0.38514698,
    0.34171706,
    -0.14731283,
    -0.6462556,
    0.6855284,
    0.41667825,
    -0.14566259,
    -0.5137325,
    0.006838942,
    0.0048156017,
    -0.004148743,
    0.0021977378,
    -0.0029488825,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    -0.0038043214,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_2KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    0.3835006,
    0.21164729,
    0.5567637,
    0.14972319,
    0.008378243,
    -0.43465084,
    -0.7308303,
    -0.8912839,
    0.46212968,
    -0.43907836,
    0.26626498,
    0.5782282,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.4975553,
    0.15077943,
    0.0013449714,
    -0.4241401,
    -0.4088393,
    0.0075244084,
    -3.2364414,
    0.9161514,
    0.5318693,
    -2.230449,
    -4.504568,
    -0.487717,
    0.6291668,
    -0.73886293,
    0.26118273,
    -0.27261165,
    0.12881532,
    0.1777136,
    -0.011507088,
    0.41689792,
    1.1819894,
    -0.14281727,
    -0.12822403,
    -0.4899795,
    -0.7057814,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    -0.038640175,
    -0.48866045,
    0.18388642,
    2.1011872,
    -0.47701856,
    -0.35595262,
    -0.5488175,
    -0.12425026,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    -0.0737323,
    1.6342262,
    -0.0077813696,
    0.8013023,
    -0.2317711,
    0.0020160126,
    0.59806335,
    -0.9970204,
    -0.0057330895,
    0.07285249,
    0.6827554,
    0.0008187201,
    0.9157639,
    0.626506,
    -0.002397363,
    -0.088837735,
    0.38987082,
    0.00303144,
    0.2895544,
    -0.16646424,
    -0.008103551,
    -0.26244026,
    -0.4901274,
    -0.009149382,
    2.3455992,
    -0.7211382,
    1.9804211,
    0.00917124,
    0.5224504,
    -4.4372244,
    -0.8496559,
    0.4749193,
    1.473498,
    0.45706263,
    0.046547048,
    0.25537905,
    0.77724373,
    0.07417753,
    0.39354962,
    -0.6581425,
    0.71233255,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.5941038,
    -0.046199616,
    -0.00813673,
    -0.009886575,
    0.1387866,
    -0.22598192,
    0.00021132734,
    -2.1441894,
    -1.8108326,
    0.0011727996,
    -0.16316642,
    0.30345392,
    -0.008626261,
    -0.006473,
    -1.3621367,
    -0.119089246,
    -0.0051336214,
    -0.0013411185,
    0.010755843,
    -1.2026048,
    0.38548076,
    1.398525,
    1.9160999,
    2.1099184,
    2.0770369,
    1.4328448,
    -1.7100422,
    -0.6515236,
    0.332164,
    0.62545145,
    0.0065994086,
    -0.005360393,
    -0.9618395,
    -1.1140851,
    -1.7814239,
    -0.5971449,
    -1.9552374,
    -0.23968147,
    -1.2191556,
    -1.1778564,
    0.42183256,
    -0.11105158,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.4999874,
    0.31543893,
    -0.002408173,
    -0.93778354,
    1.1441715,
    0.0077593178,
    0.79672486,
    0.83366203,
    -0.0054027913,
    0.49028045,
    0.045144238,
    0.0036244253,
    -0.30533037,
    -0.3648391,
    0.09491095,
    3.3036993,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_0KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    1.1954802,
    2.1027613,
    1.2451998,
    1.5580363,
    0.8150093,
    0.8041394,
    0.8578046,
    1.6918292,
    1.7586807,
    1.6941141,
    1.6997633,
    1.6679375,
    1.6218088,
    0.5811319,
    0.9963774,
    1.0502348,
    1.4684249,
    1.5190773,
    1.8005195,
    0.06952921,
    0.8655739,
    1.0176817,
    1.630014,
    1.8814648,
    2.1997051,
    0.52263886,
    0.599912,
    0.59388953,
    0.6022935,
    0.67175865,
    0.73654985,
    0.45159864,
    0.60416466,
    0.58635736,
    0.6653746,
    0.6725041,
    0.6701529,
    2.5378475,
    0.67331755,
    1.8460181,
    0.4376547,
    1.6405745,
    0.21684514,
    0.85513467,
    1.2664223,
    1.0563905,
    0.18807252,
    0.08384338,
    -0.7092985,
    0.82863045,
    0.09082101,
    -0.14373544,
    -0.6283149,
    0.72447926,
    0.9047449,
    1.0283545,
    0.6615788,
    0.5856274,
    0.9186788,
    2.1535292,
    1.6859173,
    0.6084235,
    0.115235664,
    -0.59570473,
    0.28024197,
    -0.32913738,
    -0.33957154,
    -0.5338868,
    -0.2268417,
    -0.441828,
    0.2143475,
    0.28906396,
    0.12939273,
    -0.4323937,
    -0.5116385,
    -0.7298976,
    -0.55756885,
    0.34326223,
    0.5585269,
    0.7344361,
    0.7888867,
    0.8703985,
    1.2703656,
    0.5003836,
    -0.045477465,
    -0.3890775,
    -0.76811445,
    -0.621303,
    -0.5371142,
    -0.47722554,
    0.1906561,
    1.131647,
    0.9297201,
    0.80379313,
    0.644701,
    0.46941304,
    0.32208607,
    0.115528695,
    -0.23943628,
    -0.29857406,
    -0.46110612,
    -0.5906564,
    -0.78844434,
    -0.94184303,
    -1.1500212,
    0.25994363,
    0.41714227,
    0.4962903,
    0.57506835,
    0.71190155,
    0.8265406,
    0.9443733,
    -1.2993587,
    -1.1760314,
    -1.0103524,
    -0.93349457,
    -0.8638606,
    -0.7319305,
    -0.58171165,
    -0.2654432,
    -0.14973602,
    0.004987101,
    0.41377786,
    0.22163327,
    0.19855419,
    0.01698255,
    2.392942,
    1.1164087,
    0.06687411,
    0.19926621,
    0.0035416854,
    -0.09265313,
    0.021221923,
    -0.21087661,
    -0.15772723,
    0.0070885587,
    -0.84865355,
    -0.3692275,
    -0.030352507,
    0.39094895,
    0.881468,
    0.056529514,
    -0.41348985,
    0.09182954,
    0.72195464,
    1.1990047,
    0.0029937977,
    -0.53368175,
    0.09973634,
    0.7436868,
    1.139052,
    0.004693706,
    -0.7551671,
    -0.11111426,
    0.66027534,
    1.133755,
    -0.63102096,
    -0.7693067,
    -0.40321863,
    -0.13149711,
    0.46369436,
    -0.8580623,
    -0.8967424,
    -0.39751706,
    0.1810489,
    0.84263206,
    -0.8420803,
    -0.82972425,
    -0.28948405,
    0.31617075,
    0.9159771,
    -0.35567397,
    -0.4066808,
    -0.17724101,
    0.25159374,
    0.5748588,
    -0.7045208,
    -0.81203043,
    -0.24201995,
    0.44795752,
    1.0603973,
    -0.8556136,
    -0.808975,
    -0.21416396,
    0.4676948,
    1.2430006,
    -0.33635092,
    -0.061067093,
    0.17511405,
    -1.0540627,
    -0.45659667,
    -0.46998903,
    -0.42331335,
    -0.14330447,
    -0.27430353,
    -0.0075576873,
    -0.00044307671,
    0.0042860033,
    -0.004753387,
    0.009866308,
    0.0054509398,
    -0.0066909315,
    0.0056339707,
    -1.7736131,
    -1.676638,
    -1.7057296,
    -1.7302375,
    -1.747697,
    -1.6156108,
    -0.46886027,
    -0.75948495,
    -0.9609821,
    -1.3130573,
    -1.4750285,
    -1.546893,
    -0.2864311,
    -0.60199374,
    -0.5867843,
    -1.5175937,
    -1.8017112,
    -2.1317482,
    -0.5419237,
    -0.7283239,
    -0.7401993,
    -0.677333,
    -0.7043718,
    -0.73071474,
    -0.43757942,
    -0.5427229,
    -0.48822024,
    -0.64079815,
    -0.639459,
    -0.6337473,
    -2.5570688,
    -0.99016196,
    -1.7600003,
    -0.60964185,
    -1.5325651,
    -0.24607147,
    -0.7477816,
    -1.0873485,
    -1.4341575,
    -0.31461576,
    0.02727951,
    0.5844083,
    -1.1221865,
    -0.2150534,
    0.26436567,
    0.666764,
    -0.6784083,
    -0.68323535,
    -0.57502353,
    -1.0843755,
    -0.50465024,
    -0.965225,
    -2.1051142,
    -0.8732975,
    -0.41503647,
    -0.05213191,
    -0.50238293,
    -0.12361589,
    0.37834185,
    0.25512934,
    0.11102816,
    0.26973325,
    0.43813756,
    0.014189208,
    -0.094901636,
    -0.09804323,
    0.40942213,
    0.50868183,
    1.0742176,
    0.34612328,
    0.19107378,
    -0.48195094,
    -0.5391621,
    -0.62512094,
    -0.76341534,
    -0.4055373,
    -0.0423508,
    0.4955352,
    1.2589564,
    0.8848434,
    0.79029423,
    0.72959405,
    0.5543476,
    0.35000548,
    -1.1390693,
    -0.93658745,
    -0.7792106,
    -0.5884292,
    -0.45111454,
    -0.29016843,
    -0.23991513,
    0.117864154,
    0.32335398,
    0.47067696,
    0.6420908,
    0.7928273,
    0.93909657,
    1.1387329,
    -0.5902886,
    -0.7319616,
    -0.8606626,
    -0.9457934,
    -1.0064642,
    -1.1871407,
    -1.2884003,
    0.95104283,
    0.82231283,
    0.70553863,
    0.5734911,
    0.51014024,
    0.42952478,
    0.25023916,
    0.2951689,
    0.16620818,
    -0.0123290755,
    -0.22131164,
    -0.07920056,
    -0.121645644,
    -0.0326306,
    -1.3436471,
    -0.64854616,
    -0.06431121,
    -0.13996091,
    -0.05712154,
    0.2353138,
    -0.024806935,
    0.21509746,
    0.1695917,
    -0.0028877181,
    0.74157786,
    0.44721052,
    0.07785787,
    -0.3638295,
    -0.84968543,
    0.05103212,
    0.49833053,
    0.08766038,
    -0.54903257,
    -1.1521953,
    0.019709822,
    0.58439314,
    -0.08452882,
    -0.6949716,
    -1.1525903,
    -0.012779458,
    0.69976735,
    0.09783005,
    -0.6412552,
    -1.1304444,
    0.6091612,
    0.76173174,
    0.35050046,
    0.04068771,
    -0.3522959,
    0.7847296,
    0.8955041,
    0.3284647,
    -0.19149284,
    -0.8155264,
    0.8223923,
    0.7847101,
    0.24931099,
    -0.245505,
    -0.89628524,
    0.21614796,
    0.41656116,
    0.18679516,
    -0.34721515,
    -0.73896843,
    0.68549174,
    0.8016463,
    0.25914985,
    -0.41362375,
    -0.974666,
    0.8697492,
    0.84266084,
    0.20508748,
    -0.5017448,
    -1.1019601,
    0.24816208,
    0.37369737,
    0.13209051,
    0.7704036,
    0.4076633,
    0.49486533,
    0.39787647,
    0.1767901,
    0.3714452,
    -0.004604163,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_0KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    -0.21254763,
    0.23103847,
    -0.033314772,
    0.28951204,
    0.08258201,
    -0.20170505,
    -0.083164066,
    0.039200466,
    -0.00088396505,
    0.3021171,
    0.11830643,
    -0.081436746,
    -0.40565103,
    -0.37145954,
    -0.18355277,
    0.06397571,
    0.20453936,
    0.55752325,
    -0.12067064,
    -0.30509105,
    -0.22406316,
    0.04068911,
    0.06334039,
    0.038877312,
    -2.746777,
    -0.87377214,
    -0.65470624,
    0.73748547,
    1.1899408,
    2.4166262,
    -0.82226,
    -1.3962785,
    -1.4452674,
    0.5082308,
    1.2789531,
    2.7618878,
    -0.3863811,
    0.031400807,
    -0.102757595,
    -0.38964626,
    -0.14711878,
    -0.31159613,
    -2.9462645,
    1.2216566,
    0.49116233,
    -4.1368756,
    -3.0489886,
    0.14062,
    0.4538722,
    -0.20252825,
    0.1369588,
    -0.058979962,
    0.08831377,
    0.02167715,
    -0.26413515,
    0.028735323,
    0.47112805,
    0.67481583,
    -0.037136614,
    -0.023578765,
    0.06294667,
    -0.05659834,
    -1.2630483,
    0.25168982,
    0.096158154,
    0.43390813,
    1.3263559,
    -0.38228187,
    0.30753988,
    -0.17709245,
    0.021742836,
    0.3967858,
    0.37994313,
    -0.5040257,
    -0.60063547,
    -0.5784962,
    -0.09444315,
    0.42124468,
    -0.95363337,
    -0.8204556,
    -0.515455,
    0.36224493,
    3.6014647,
    0.6930546,
    -0.022836408,
    1.229127,
    -0.20067202,
    -0.88029164,
    -1.945374,
    0.27076137,
    0.24485452,
    -0.2529798,
    0.3806981,
    -0.1388048,
    -0.43375793,
    1.5184788,
    0.4213168,
    1.0030801,
    -0.12647864,
    -0.28902504,
    -0.68267906,
    0.3738028,
    0.69471484,
    1.1517682,
    -0.16151088,
    -0.5155371,
    -0.17652579,
    2.4710944,
    0.30520877,
    2.0582628,
    1.0057538,
    0.5753131,
    -4.1801777,
    -0.5127082,
    0.45404467,
    1.4079078,
    0.3417027,
    0.39399534,
    0.1540643,
    0.2801745,
    0.3059642,
    0.2046346,
    -0.05043553,
    0.38525426,
    0.006237678,
    0.3969141,
    0.18871525,
    -1.5612092,
    -0.39385808,
    0.7173354,
    -0.24273492,
    -0.060208935,
    0.20501433,
    0.06431221,
    0.007810466,
    -0.006842167,
    0.25922537,
    0.22373736,
    1.4958718,
    -2.2605436,
    -1.6751494,
    -1.7748834,
    -0.15428533,
    -0.13730817,
    0.3625118,
    0.7318449,
    -2.1013966,
    -1.6390495,
    -0.58728755,
    0.705842,
    0.05825597,
    -1.3842419,
    0.5513746,
    1.3413002,
    1.6110371,
    1.1969258,
    1.6104766,
    0.26784024,
    -0.82374805,
    -0.27678168,
    0.63337976,
    1.37859,
    1.5559744,
    -0.2600439,
    -1.5502057,
    -0.7311096,
    -0.89582264,
    -0.8938125,
    -1.1783751,
    -0.29525974,
    -1.3265866,
    -2.8699765,
    0.3670057,
    -0.02602606,
    -0.094160676,
    0.038038492,
    0.18733682,
    0.1730221,
    0.4983536,
    -0.6600161,
    0.07679693,
    1.6442226,
    0.74923706,
    1.2906911,
    -0.0030353356,
    1.5110451,
    1.8540987,
    0.46657535,
    1.0854816,
    0.6397842,
    0.38965192,
    0.4017657,
    0.15735355,
    0.2403061,
    0.20836167,
    0.8231178,
    3.0737865,
    -0.0031571696,
    -0.0045039677,
    -0.0037830565,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_2KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    0.74507505,
    0.8865218,
    0.18827721,
    0.28838533,
    -0.058864225,
    -0.17706843,
    0.05511655,
    1.4665364,
    1.4387417,
    1.546462,
    1.47321,
    1.5340098,
    1.3631141,
    0.46669027,
    0.6724017,
    0.6495178,
    0.8689054,
    1.018996,
    0.96867913,
    0.5410397,
    0.70071083,
    0.81971,
    1.3904428,
    1.7037214,
    1.8015131,
    0.51777625,
    0.5881276,
    0.6622994,
    0.6454797,
    0.6948384,
    0.6967535,
    0.37146342,
    0.45793834,
    0.45390126,
    0.55725205,
    0.58938944,
    0.5114901,
    3.4453049,
    0.8539983,
    2.0954301,
    0.73702085,
    1.6886721,
    0.3333941,
    0.8381575,
    1.362066,
    1.0170146,
    0.053941205,
    -0.20060195,
    -0.40476665,
    0.5126059,
    0.042738866,
    -0.115351,
    -0.4024343,
    0.67811126,
    0.6572827,
    1.3341777,
    0.47248733,
    0.30105254,
    0.857302,
    1.355818,
    1.4744573,
    0.25346822,
    -0.15286231,
    0.5482829,
    0.014474196,
    -0.26990527,
    -0.1540995,
    -0.5915767,
    -0.17482889,
    -0.42580608,
    0.0048022578,
    0.45635456,
    0.08560442,
    -0.5171941,
    -0.3935886,
    -0.3768083,
    -0.47422975,
    -0.08442868,
    -0.116960526,
    -0.026045037,
    0.23159365,
    0.39915335,
    0.5495456,
    0.7211963,
    -0.0019363447,
    -0.11813671,
    -0.16938475,
    -0.29866558,
    -0.053188495,
    0.043011114,
    0.21878484,
    1.01053,
    0.7555279,
    0.7271312,
    0.23461118,
    -0.09309068,
    -0.5132762,
    -0.979142,
    0.30861565,
    0.26450676,
    0.16592911,
    0.0782203,
    -0.4684799,
    -0.7687374,
    -1.2731812,
    -0.33188367,
    -0.010691947,
    0.13451444,
    0.30061454,
    0.5418291,
    0.63391757,
    0.8822897,
    -1.2552451,
    -0.84290594,
    -0.54628485,
    -0.38471752,
    -0.18051584,
    0.037159063,
    0.16507852,
    -0.2618024,
    -0.1417363,
    0.015307421,
    0.28164428,
    0.08983793,
    0.1300031,
    0.019747203,
    2.9903595,
    0.9903063,
    0.0934739,
    0.18152066,
    -0.0068071084,
    -0.19417948,
    0.018600967,
    -0.17328645,
    -0.14658149,
    0.0070885587,
    -0.7669815,
    -0.39508107,
    -0.10842015,
    0.30942437,
    0.7599778,
    -0.072962575,
    -0.5890857,
    -0.07077818,
    0.5750623,
    1.0780665,
    -0.044258565,
    -0.6265853,
    -0.036247432,
    0.5743706,
    1.040325,
    -0.028693091,
    -0.64002734,
    -0.1253033,
    0.60803413,
    1.0787182,
    -0.7615131,
    -0.8105921,
    -0.3768964,
    0.017632717,
    0.48746812,
    -0.8088273,
    -0.85716796,
    -0.35313797,
    0.18674123,
    0.77566385,
    -0.7581705,
    -0.7809357,
    -0.30437762,
    0.23628569,
    0.7650092,
    -0.24502222,
    -0.42575473,
    -0.13778016,
    0.28399435,
    0.6689249,
    -0.6851556,
    -0.70086163,
    -0.20903687,
    0.3964362,
    0.9700855,
    -0.7667462,
    -0.7566707,
    -0.17391682,
    0.44112673,
    1.0155433,
    -0.37209916,
    -0.45352346,
    -0.17508522,
    -0.596136,
    -0.2677081,
    -0.27286732,
    -0.16585888,
    0.059595533,
    -0.39058962,
    -0.0075576873,
    -0.00044307671,
    0.0042860033,
    -0.004753387,
    0.009866308,
    0.0054509398,
    -0.0066909315,
    0.0056339707,
    -1.5802201,
    -1.6356444,
    -1.5730054,
    -1.5702732,
    -1.5604327,
    -1.5025011,
    -0.782032,
    -1.1118332,
    -1.0914662,
    -1.4578378,
    -1.5306507,
    -1.5949408,
    -0.029782994,
    -0.5932688,
    -0.56544644,
    -1.3007984,
    -1.5223616,
    -1.8339906,
    -0.4564418,
    -0.6662559,
    -0.75196767,
    -0.62797225,
    -0.7001187,
    -0.64664567,
    -0.33043885,
    -0.4466067,
    -0.46907458,
    -0.48999324,
    -0.5289774,
    -0.4974229,
    -2.9269054,
    -0.7191466,
    -2.2798734,
    -0.30087414,
    -1.3580985,
    0.062499832,
    -0.6494689,
    -1.1024712,
    -1.182366,
    -0.19766621,
    0.23583871,
    -0.028124569,
    -0.86506605,
    -0.3280607,
    0.32580367,
    0.36969116,
    -0.59304595,
    -0.74901325,
    -1.0960678,
    -0.86026806,
    -0.4170834,
    -0.64159364,
    -1.2689894,
    -0.8554819,
    -0.3878437,
    0.0692438,
    -0.2905072,
    0.066794194,
    0.31894952,
    0.25803703,
    0.54726994,
    0.06822377,
    0.42304912,
    -0.08361264,
    -0.17598873,
    0.076355115,
    0.29334825,
    0.39483848,
    0.5462462,
    0.30599493,
    -0.00068451837,
    -0.0031730435,
    0.0038830638,
    -0.0005412027,
    0.002177837,
    -0.006012585,
    -0.3939737,
    -0.005422716,
    -0.0038055968,
    0.0065068007,
    -0.0063391924,
    0.0013449714,
    0.0044395234,
    1.6746013,
    0.0075244084,
    -0.0034995454,
    -0.0014959787,
    0.005313986,
    0.008152786,
    -0.8598035,
    -0.80338997,
    -0.0068556285,
    -0.0071793436,
    0.0012544963,
    -0.0030111074,
    0.035908204,
    0.10656205,
    1.02344,
    -0.0040416615,
    0.010936045,
    0.032789826,
    0.09719672,
    -0.17513493,
    -1.3097893,
    -1.673264,
    0.0079855295,
    -0.0051112818,
    0.021014368,
    0.21759515,
    0.4036224,
    1.1441183,
    0.37204805,
    0.22435436,
    0.1692756,
    0.026302742,
    -0.22947066,
    -0.046449628,
    -0.1526211,
    0.070568234,
    -1.1157489,
    -0.4218612,
    -0.047551263,
    -0.12046253,
    -0.013691331,
    0.07231499,
    -0.027907025,
    0.2517813,
    0.2242647,
    -0.0057330895,
    0.6442683,
    0.3358889,
    0.003357473,
    -0.370387,
    -0.78242254,
    -0.078460135,
    0.32744265,
    -0.052478988,
    -0.4625848,
    -0.9376642,
    -0.027542183,
    0.4478724,
    -0.07097829,
    -0.59102786,
    -0.98692,
    -0.046165906,
    0.58755296,
    0.10781043,
    -0.46104392,
    -1.0407809,
    0.34119925,
    0.49776712,
    0.2146885,
    -0.0043281806,
    -0.5614177,
    0.5989621,
    0.6688184,
    0.21893896,
    -0.21896581,
    -0.6696401,
    0.659657,
    0.61552274,
    0.20226958,
    -0.24651833,
    -0.8704744,
    0.33797616,
    0.39199936,
    0.14358838,
    -0.17571226,
    -0.35371852,
    0.62048185,
    0.6144981,
    0.17253245,
    -0.35385168,
    -0.84206206,
    0.7465431,
    0.69627243,
    0.19595164,
    -0.37141487,
    -0.95896006,
    0.18062764,
    0.10408423,
    0.039331373,
    0.5235403,
    0.084624,
    0.31246915,
    0.07730517,
    -0.018868428,
    0.20967843,
    -0.004604163,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_2KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    0.13053814,
    0.2594758,
    0.24701957,
    0.32714072,
    0.2772792,
    -0.13828218,
    -0.10215987,
    0.098732464,
    0.019896906,
    -0.056102987,
    -0.07790267,
    -0.42510068,
    -0.30549508,
    -0.45333365,
    -0.52566814,
    -0.29246622,
    -0.28865135,
    -0.26258516,
    0.11082738,
    0.17156202,
    -0.038298223,
    0.46970895,
    0.49330792,
    0.45982635,
    -1.5306015,
    -0.70623446,
    -1.6051459,
    1.1686573,
    1.569235,
    2.0058358,
    -2.5606222,
    -1.2750763,
    -2.0411723,
    0.8546261,
    1.8828146,
    2.5776637,
    -0.54405427,
    0.17359827,
    -0.07840562,
    -0.24876921,
    -0.18755311,
    -0.26911703,
    -3.0770643,
    1.1082592,
    0.26119882,
    -2.5300553,
    -2.871422,
    0.03775389,
    0.4238567,
    -0.33088768,
    0.10647789,
    -0.13209525,
    0.08560816,
    0.0468911,
    -0.21627295,
    0.05250266,
    0.38945135,
    0.81790227,
    -0.23717421,
    -0.22604689,
    -0.19218688,
    -0.20800717,
    -0.033787068,
    0.122389324,
    -0.10022763,
    -0.073142864,
    0.6767682,
    -0.04690488,
    0.33146432,
    -0.22365022,
    -0.0036192038,
    0.46967515,
    0.51455325,
    -0.2567931,
    -0.40734252,
    -0.42442977,
    -0.001470779,
    0.22078364,
    -1.2574711,
    -0.85755,
    -0.74906814,
    -0.17770536,
    3.6172705,
    0.54112595,
    0.6423261,
    0.9667451,
    0.199188,
    -1.3389384,
    0.16624917,
    0.19690222,
    -0.4323959,
    -0.23050337,
    0.34784153,
    0.61946857,
    -0.7219571,
    1.2463146,
    0.5738733,
    2.0701928,
    0.049495548,
    -0.42689493,
    -1.0372397,
    0.26199716,
    0.7308859,
    1.6175814,
    -0.0076032556,
    -0.68225515,
    0.12284207,
    2.349499,
    0.1210995,
    2.3559947,
    1.0110165,
    0.4826661,
    -4.137684,
    -0.87189615,
    0.58148867,
    1.5087106,
    0.51515806,
    0.27801824,
    0.1363943,
    0.39705855,
    0.3311712,
    0.13834442,
    -0.009231192,
    0.37948412,
    0.013899716,
    0.34986228,
    0.20538929,
    -1.3363253,
    -0.6954224,
    -0.26191995,
    -0.23036456,
    -0.17417376,
    0.21034743,
    0.08639803,
    0.009099964,
    0.0013535284,
    0.37892112,
    0.085819654,
    1.4048743,
    -2.3133554,
    -1.2493757,
    -1.597994,
    -0.20851141,
    -0.025360083,
    0.2432856,
    0.7032871,
    -1.9057463,
    -1.1427703,
    -0.49652052,
    0.84754634,
    0.08384458,
    -1.2245532,
    0.5221889,
    1.2940357,
    1.6118815,
    1.3088297,
    1.4081663,
    -0.2697331,
    -0.76520354,
    -0.34188744,
    0.6127755,
    1.3039353,
    1.4138254,
    0.12542252,
    -1.4124713,
    -0.9411064,
    -0.9240627,
    -0.92811567,
    -1.1624233,
    -0.3372181,
    -1.4078445,
    -2.251844,
    0.36175016,
    -0.023277655,
    -0.08955618,
    0.0533145,
    0.14049543,
    -0.019719895,
    -0.007010526,
    -0.096855216,
    -0.22378309,
    1.7177029,
    0.7570125,
    1.2928087,
    0.07078977,
    1.540554,
    1.9195119,
    0.41963235,
    0.9632119,
    0.60895467,
    0.32042414,
    0.36884412,
    0.16893406,
    0.3075245,
    -0.011423582,
    0.7850744,
    3.0451703,
    0.0,
    0.0,
    0.0,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_0KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.5249063,
    1.3765545,
    0.724873,
    0.74412733,
    0.35369566,
    0.22408678,
    0.10173126,
    1.7164606,
    1.6953709,
    1.7367178,
    1.7879205,
    1.8153373,
    1.7781606,
    0.7140032,
    0.9465631,
    0.9838445,
    1.1896652,
    1.2379012,
    1.3379085,
    -0.043144066,
    0.7697554,
    0.9029602,
    1.163406,
    1.4846126,
    1.7577816,
    0.39462468,
    0.4957501,
    0.49849826,
    0.5463864,
    0.60228264,
    0.6216716,
    0.39247668,
    0.51021993,
    0.51872665,
    0.5864805,
    0.6297208,
    0.64186,
    2.322074,
    0.6908227,
    1.777487,
    0.3569364,
    1.415753,
    0.11844287,
    0.55396205,
    1.2665881,
    1.1458073,
    0.15125331,
    -0.08114059,
    -0.6134857,
    0.7272658,
    0.1453143,
    -0.13636981,
    -0.8507622,
    0.64215523,
    0.8036081,
    0.4036229,
    0.72504455,
    0.39753255,
    0.5373634,
    1.4868155,
    0.79140013,
    0.5710779,
    -0.089543834,
    0.021777779,
    0.08182373,
    -0.31770205,
    -0.15206692,
    -0.42281696,
    -0.11295806,
    -0.35485977,
    0.019795628,
    0.37498194,
    0.0064639985,
    -0.33950356,
    -0.3428026,
    -1.1799254,
    -0.4214159,
    -0.022328323,
    0.3752534,
    0.4958404,
    0.51173353,
    0.56682205,
    1.0044847,
    0.5102002,
    -0.016110294,
    -0.18983254,
    -0.7659512,
    -0.64076495,
    -0.58345413,
    -0.5527565,
    0.10371489,
    0.8666082,
    0.7675006,
    0.62381774,
    0.54563946,
    0.40937236,
    0.31989267,
    0.26601896,
    -0.34497228,
    -0.24104798,
    -0.36257803,
    -0.5171595,
    -0.60144,
    -0.7354944,
    -0.8488993,
    0.55697185,
    0.56149143,
    0.56003237,
    0.5143853,
    0.46391475,
    0.45579496,
    0.421757,
    -0.6488657,
    -0.61798686,
    -0.6007818,
    -0.5805435,
    -0.6479736,
    -0.691397,
    -0.7363297,
    -0.20949908,
    -0.20263955,
    0.017350387,
    0.29985774,
    0.09613312,
    0.19671625,
    0.06830109,
    1.4506795,
    0.8406299,
    0.044453803,
    0.14257722,
    0.058732066,
    -0.1651109,
    0.03658939,
    -0.16696243,
    -0.13958265,
    0.0070885587,
    -0.38117874,
    -0.21931711,
    -0.13710225,
    -0.016421083,
    0.21480455,
    0.47778514,
    0.040697284,
    -0.29033184,
    -0.085413806,
    0.19774002,
    0.61377966,
    0.92162055,
    0.011791176,
    -0.26182827,
    -0.0047914484,
    0.24891818,
    0.68880945,
    0.8691953,
    -0.025662253,
    -0.35323045,
    -0.038143963,
    0.27901882,
    0.66012925,
    0.8156751,
    -0.5208818,
    -0.56656545,
    -0.43419793,
    -0.290773,
    -0.065341026,
    0.16091001,
    -0.6819126,
    -0.7299288,
    -0.50264156,
    -0.22106071,
    -0.028939141,
    0.31803316,
    -0.6945808,
    -0.68796724,
    -0.42852864,
    -0.1383127,
    0.15109695,
    0.48227173,
    -0.107045814,
    -0.2296985,
    -0.21065666,
    -0.068360284,
    0.24880415,
    0.5826714,
    -0.45802456,
    -0.43933445,
    -0.22399105,
    0.040921204,
    0.4347737,
    0.8250416,
    -0.61455506,
    -0.54568785,
    -0.2973241,
    0.03872215,
    0.45468256,
    0.8003579,
    -0.5749657,
    -0.14518885,
    -0.13829128,
    -0.57505286,
    -0.8035079,
    -0.40565675,
    -0.4334744,
    -0.23225306,
    -0.11585185,
    -0.0018851925,
    0.007400766,
    -0.000116079114,
    -0.009369239,
    0.0092722215,
    0.0030306866,
    -0.00916178,
    -0.0003501959,
    0.00912733,
    -0.008776911,
    -1.7635217,
    -1.748697,
    -1.7306447,
    -1.7495254,
    -1.8002373,
    -1.8325139,
    -0.45436698,
    -0.5456311,
    -0.7745485,
    -0.88554275,
    -1.054792,
    -1.2353128,
    -0.22177163,
    -0.542852,
    -0.6212883,
    -1.0719758,
    -1.345509,
    -1.7883141,
    -0.47878104,
    -0.531325,
    -0.59334165,
    -0.56252205,
    -0.6812008,
    -0.68988854,
    -0.45645776,
    -0.47465664,
    -0.45890698,
    -0.5934039,
    -0.6013558,
    -0.6137723,
    -2.4536972,
    -1.0532937,
    -1.7716012,
    -0.613203,
    -1.670094,
    -0.14033389,
    -0.74399424,
    -1.3602536,
    -1.4693176,
    -0.22988506,
    0.106234275,
    0.5616527,
    -0.9054925,
    -0.28731492,
    0.04964574,
    0.8086565,
    -0.583722,
    -0.8610767,
    -1.2950177,
    -0.62100446,
    -0.3388193,
    -0.3579895,
    -0.8744588,
    -0.77735806,
    -0.3363023,
    0.06594047,
    -0.043303158,
    0.10092091,
    0.3827944,
    0.2139662,
    0.52986217,
    0.09037176,
    0.3385872,
    -0.019978711,
    0.03723691,
    0.055536833,
    0.337466,
    0.6338694,
    0.5739955,
    0.44520754,
    0.10825772,
    -0.55024475,
    -0.58186054,
    -0.64759564,
    -0.76186645,
    -0.1963116,
    -0.005971015,
    0.51005584,
    0.99456996,
    0.56790423,
    0.5123011,
    0.4901327,
    0.36406758,
    -0.022056872,
    -0.8359453,
    -0.7253367,
    -0.59823924,
    -0.5105474,
    -0.35768133,
    -0.23631853,
    -0.34094182,
    0.27226135,
    0.33481494,
    0.41811523,
    0.5406732,
    0.6110484,
    0.76354617,
    0.8798235,
    -0.7329769,
    -0.7036448,
    -0.6510952,
    -0.5972887,
    -0.6019236,
    -0.6162625,
    -0.634496,
    0.42644456,
    0.46564773,
    0.46017998,
    0.5216468,
    0.57615817,
    0.5586694,
    0.55669826,
    0.26053932,
    0.22678427,
    0.0063641192,
    -0.21778004,
    -0.08153688,
    -0.17466801,
    -0.04017464,
    -1.3011019,
    -0.6078077,
    -0.04847275,
    -0.11876053,
    -0.05030693,
    0.12117286,
    -0.037888866,
    0.17226908,
    0.14560263,
    -0.008103551,
    0.27542993,
    0.2531643,
    0.15553235,
    -0.034089904,
    -0.2560885,
    -0.4722231,
    0.052346915,
    0.3386663,
    0.16093405,
    -0.117804274,
    -0.4568319,
    -0.7756732,
    0.011061826,
    0.30065793,
    0.07214058,
    -0.18027928,
    -0.56890476,
    -0.75939506,
    -0.015195315,
    0.37684384,
    0.1241393,
    -0.16152349,
    -0.54554397,
    -0.8673233,
    0.364435,
    0.34807998,
    0.29149863,
    0.07960238,
    -0.16983977,
    -0.25531375,
    0.5461322,
    0.5779992,
    0.3770222,
    0.09234579,
    -0.12698978,
    -0.26945198,
    0.56732416,
    0.5954745,
    0.37559146,
    0.10620375,
    -0.18096091,
    -0.51820594,
    0.1872528,
    0.27574325,
    0.21928589,
    0.082613766,
    -0.2053886,
    -0.5184055,
    0.372406,
    0.420288,
    0.20165403,
    -0.08335561,
    -0.41507012,
    -0.7086652,
    0.51495343,
    0.532895,
    0.2525094,
    -0.07711748,
    -0.46592563,
    -0.7284101,
    0.20665233,
    0.15426649,
    0.09131764,
    0.44955227,
    0.03789769,
    0.3937241,
    0.36798465,
    -0.076948486,
    0.25286075,
    -0.0011674287,
    -3.0069612e-5,
    -0.0075867055,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_0KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.071415216,
    0.12442188,
    -0.09566238,
    0.025814263,
    0.39882815,
    0.16391489,
    -0.008581701,
    -0.13815464,
    -0.13051334,
    0.02532715,
    0.32889652,
    0.20524831,
    -0.49096164,
    -0.30895254,
    -0.23303136,
    0.23083706,
    0.2964616,
    0.24874644,
    -0.2457537,
    -0.20580663,
    -0.20578788,
    0.22220248,
    0.24823901,
    0.27056095,
    -1.7412964,
    -1.2658727,
    -0.9884221,
    0.21221639,
    0.76972306,
    2.9932423,
    -0.8941595,
    -1.4919809,
    -0.6434117,
    0.1866445,
    0.6302275,
    3.7471368,
    -0.19908637,
    -0.05053481,
    -0.22026536,
    -0.20168278,
    -0.06375163,
    -0.34524786,
    -2.9306319,
    1.2972493,
    0.24407394,
    -3.5354817,
    -2.9933457,
    -0.10331253,
    0.47185874,
    -0.14110662,
    0.10932957,
    0.0013340656,
    0.07475349,
    -0.016720613,
    -0.23927939,
    -0.011462316,
    0.34377918,
    0.72500736,
    0.85285324,
    -0.110500894,
    -0.105389334,
    -0.017042588,
    0.10457068,
    0.0042217867,
    -0.21249798,
    -0.085640766,
    -0.45459425,
    -0.16079083,
    0.55052006,
    2.0902095,
    -0.37665167,
    0.27560315,
    -0.059153534,
    0.035410654,
    0.26979086,
    0.5431667,
    0.5761751,
    -0.40052012,
    -0.44486472,
    -0.42993188,
    -0.155777,
    0.3429057,
    0.74014395,
    -0.7196886,
    -0.66130596,
    -0.5823512,
    -0.061252877,
    1.1902641,
    2.376007,
    0.48015076,
    -0.05263098,
    0.55019283,
    0.35582376,
    -0.3000633,
    -0.9577861,
    0.37041304,
    0.1807514,
    -0.058853548,
    0.19539088,
    0.03101509,
    -1.0235001,
    1.6822823,
    0.46977645,
    0.50950366,
    -0.1764842,
    -0.2133276,
    -1.0270724,
    0.4235578,
    0.47018492,
    0.59907496,
    -0.095802486,
    -0.2432442,
    -0.01910542,
    2.5890062,
    0.13449658,
    2.3261929,
    0.96748704,
    0.44940996,
    -4.1517406,
    -1.059962,
    0.81751895,
    1.4057382,
    0.43485394,
    0.52264935,
    0.0902257,
    0.27415887,
    0.29622847,
    0.18442348,
    -0.011864232,
    0.33198798,
    0.008446357,
    0.29941043,
    0.24493904,
    -1.3369043,
    0.41626275,
    0.329823,
    -0.10362355,
    0.111990936,
    0.22666475,
    0.06236524,
    0.0052082036,
    -0.0012640925,
    0.34226802,
    -0.037712023,
    1.718424,
    -2.2861829,
    -1.5476025,
    -1.518054,
    -0.16363169,
    0.14955013,
    0.6014917,
    1.1120517,
    -1.9437062,
    -1.5143054,
    -0.46494117,
    0.6082318,
    0.21189173,
    -1.3022004,
    0.3113392,
    1.2015941,
    1.7875376,
    1.4595233,
    1.7871752,
    0.90693253,
    -0.98388606,
    -0.55907655,
    0.42635015,
    1.2506536,
    1.9478662,
    0.16841666,
    -1.632099,
    -0.78296155,
    -1.2520697,
    -1.1554351,
    -1.4457918,
    -0.38163397,
    -1.3265272,
    -2.6471865,
    0.33752015,
    -0.024949715,
    -0.024228316,
    -0.09096827,
    0.036369875,
    0.06127662,
    0.20753954,
    -0.15602651,
    0.38449815,
    0.44087142,
    -0.1416285,
    -0.72993124,
    0.1605913,
    1.8260558,
    1.4085311,
    1.6873645,
    -0.23067553,
    1.8025221,
    2.1915245,
    0.68259877,
    1.5146484,
    0.60728025,
    0.6007257,
    0.6491273,
    0.2172983,
    0.6351415,
    0.4959009,
    0.77732676,
    2.8963873,
    0.00053430814,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_2KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.17315105,
    0.26480928,
    -0.111269236,
    -0.2911562,
    -0.58221734,
    -0.7527086,
    -0.6836887,
    1.5318584,
    1.5033202,
    1.5219426,
    1.5436375,
    1.6032084,
    1.5854656,
    0.30591455,
    0.4453588,
    0.6032686,
    0.8015117,
    0.9527096,
    1.0229232,
    0.49061874,
    0.5222041,
    0.76488274,
    1.1666803,
    1.5074317,
    1.8211644,
    0.34660262,
    0.48676145,
    0.55404943,
    0.57987803,
    0.6524155,
    0.6914873,
    0.34407672,
    0.39211845,
    0.4149004,
    0.5028006,
    0.54066676,
    0.55714273,
    2.8274877,
    1.0754422,
    1.9023265,
    0.6850589,
    1.6579758,
    0.36825684,
    0.90717137,
    1.2483733,
    1.4286076,
    0.21760105,
    -0.014493705,
    -0.31355727,
    0.8559664,
    0.22124901,
    -0.074006096,
    -0.42571637,
    0.5858059,
    0.6178749,
    0.90394384,
    0.5386375,
    0.27415413,
    0.54325426,
    0.893884,
    0.7728726,
    0.39225575,
    -0.13209979,
    0.20968954,
    0.19542418,
    -0.3675656,
    -0.13440663,
    -0.29975957,
    -0.12753738,
    -0.3197674,
    -0.035760738,
    -0.045348614,
    -0.014796467,
    -0.26806876,
    -0.3840947,
    -0.72205436,
    -0.45847398,
    -0.10102945,
    -0.38751835,
    -0.011498133,
    0.1362634,
    0.4005481,
    0.9033618,
    0.18977046,
    -0.073597,
    -0.051295508,
    -0.7250102,
    -0.33576825,
    -0.10677131,
    0.091703154,
    0.58998823,
    0.75492686,
    0.526254,
    0.32134467,
    0.1219802,
    -0.006329662,
    -0.25451264,
    -0.4717363,
    0.028970342,
    0.34551316,
    0.085855976,
    -0.07467464,
    -0.31797385,
    -0.41853133,
    -0.730712,
    0.37134698,
    0.42439586,
    0.39033478,
    0.34357134,
    0.36009738,
    0.34333983,
    0.3835774,
    -0.5365201,
    -0.44491947,
    -0.39453635,
    -0.42039022,
    -0.43595898,
    -0.43720224,
    -0.45734036,
    -0.21614274,
    -0.21284938,
    -0.006468987,
    0.24351682,
    0.0471339,
    0.15879673,
    -0.0036922696,
    1.2304807,
    0.6742927,
    0.042245485,
    0.12768057,
    0.02986876,
    -0.13660799,
    0.031246454,
    -0.1330639,
    -0.12685977,
    0.0070885587,
    -0.3293683,
    -0.22807637,
    -0.16442913,
    -0.018491708,
    0.18636146,
    0.41853127,
    -0.062601596,
    -0.33742568,
    -0.15702188,
    0.16912784,
    0.52604955,
    0.7917878,
    -0.027562106,
    -0.3366298,
    -0.08187558,
    0.20126995,
    0.5521174,
    0.707247,
    -0.051969957,
    -0.46325168,
    -0.16284235,
    0.1557634,
    0.55272186,
    0.7815706,
    -0.49188006,
    -0.5379914,
    -0.35499844,
    -0.1850955,
    0.0071838875,
    0.38599154,
    -0.6304423,
    -0.6573956,
    -0.41571414,
    -0.15827778,
    0.1542827,
    0.42055762,
    -0.5672647,
    -0.6093705,
    -0.36611196,
    -0.09905883,
    0.17325719,
    0.5649251,
    -0.10682876,
    -0.2947008,
    -0.23886369,
    -0.061832834,
    0.2168938,
    0.48107517,
    -0.39982864,
    -0.4507573,
    -0.22227955,
    0.039322652,
    0.40037644,
    0.642568,
    -0.60231984,
    -0.54828423,
    -0.28195047,
    0.06307713,
    0.43038267,
    0.7406253,
    -0.39013928,
    -0.31848153,
    -0.22537142,
    -0.691945,
    -0.6982388,
    -0.2918086,
    -0.38097617,
    -0.2652966,
    -0.28664997,
    -0.0018851925,
    0.007400766,
    -0.000116079114,
    -0.009369239,
    0.0092722215,
    0.0030306866,
    -0.00916178,
    -0.0003501959,
    0.00912733,
    -0.008776911,
    -1.5838418,
    -1.5797421,
    -1.6164625,
    -1.6264344,
    -1.6691834,
    -1.6352645,
    -0.63504255,
    -0.91680264,
    -1.0318768,
    -1.1501387,
    -1.3043838,
    -1.394138,
    -0.28065938,
    -0.56629026,
    -0.8347465,
    -1.1598502,
    -1.5355942,
    -1.820489,
    -0.468199,
    -0.5164228,
    -0.56247544,
    -0.6570734,
    -0.6440427,
    -0.6853347,
    -0.32310143,
    -0.40323523,
    -0.42576212,
    -0.50167865,
    -0.5442142,
    -0.5454273,
    -2.4100935,
    -0.5439772,
    -1.8699851,
    -0.24349338,
    -1.5392054,
    0.25848353,
    -0.6414769,
    -1.2813051,
    -1.0710881,
    -0.223907,
    -0.08070377,
    0.18662792,
    -0.81972265,
    -0.26758245,
    0.055541616,
    0.36767632,
    -0.44163567,
    -0.7215443,
    -1.1769993,
    -0.66818935,
    -0.42031202,
    -0.41576126,
    -0.5338615,
    -0.60154474,
    -0.51313853,
    0.24432662,
    -0.17117962,
    -0.12168579,
    0.36436626,
    0.23499998,
    0.3835735,
    0.09507406,
    0.3136673,
    -0.056033786,
    -0.08891932,
    0.035260145,
    0.2860752,
    0.4744461,
    0.40532827,
    0.5084349,
    0.003440666,
    0.0040632943,
    0.0075244084,
    -0.003553629,
    0.0015379704,
    -0.0005806586,
    -0.61394775,
    -0.00047137216,
    -0.002311611,
    -0.0068556285,
    -0.0071793436,
    0.0004826784,
    -0.0035659648,
    1.1246624,
    0.00952634,
    0.0013514148,
    -0.0044590547,
    -0.0075116092,
    -0.072982594,
    -0.31745246,
    -0.6431698,
    -0.0029488825,
    0.006474953,
    0.0079737725,
    -0.0045128968,
    -0.005408228,
    0.010036369,
    1.0017344,
    0.024782324,
    0.00566169,
    -0.087282844,
    -0.5870837,
    -0.8782104,
    -0.8141565,
    -0.8040825,
    0.019972293,
    0.07167172,
    0.24839099,
    0.6399442,
    0.6819222,
    0.4982083,
    0.48705587,
    0.20867889,
    0.22596999,
    0.0069269375,
    -0.23608197,
    -0.044134878,
    -0.15562113,
    -0.0121010775,
    -0.97830254,
    -0.46624738,
    -0.01682741,
    -0.08019822,
    -0.095892005,
    0.10862629,
    -0.03059408,
    0.18136114,
    0.13711655,
    -0.008103551,
    0.30362725,
    0.20674594,
    0.10012299,
    -0.059991248,
    -0.24500912,
    -0.45780292,
    -0.050952617,
    0.15257245,
    -0.01049456,
    -0.26657352,
    -0.5841774,
    -0.76756376,
    -0.028291443,
    0.20849185,
    0.008174202,
    -0.21307431,
    -0.51409644,
    -0.69381535,
    -0.04150298,
    0.3554715,
    0.09530953,
    -0.20512593,
    -0.5850615,
    -0.83166873,
    0.39033726,
    0.5161681,
    0.37828016,
    0.2616048,
    -0.010537594,
    -0.26695603,
    0.50439125,
    0.56715804,
    0.37140957,
    0.17276321,
    -0.09563663,
    -0.49043724,
    0.5125616,
    0.5186554,
    0.3007289,
    0.071468376,
    -0.15797073,
    -0.49408144,
    0.14081788,
    0.24623908,
    0.20777942,
    0.064298205,
    -0.19774716,
    -0.4499842,
    0.36139938,
    0.38696042,
    0.203421,
    -0.05474306,
    -0.34168053,
    -0.6408566,
    0.56031024,
    0.5019114,
    0.27489695,
    -0.017200647,
    -0.38553408,
    -0.73550427,
    0.33743298,
    0.14627595,
    0.024388157,
    0.49768585,
    0.20543814,
    0.008314062,
    0.20676343,
    -0.04799421,
    0.14982028,
    -0.0011674287,
    -3.0069612e-5,
    -0.0075867055,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_2KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.19618513,
    -0.12603372,
    -0.015536889,
    0.1261336,
    0.39343518,
    0.54471564,
    -0.15491426,
    -0.27759033,
    -0.0069163186,
    -0.0036204353,
    0.2059794,
    0.3110437,
    -0.42611456,
    -0.6068721,
    -0.49104723,
    -0.05461399,
    0.1272986,
    -0.00822559,
    0.1884023,
    -0.13636926,
    -0.13377881,
    0.30591944,
    0.487582,
    0.54234695,
    -1.3201939,
    -0.9234476,
    -0.88198483,
    0.3082681,
    0.94588137,
    2.3325715,
    -1.9623413,
    -0.81226206,
    -1.1284567,
    -0.12128122,
    1.1671778,
    3.1298351,
    -0.39097193,
    0.07514274,
    -0.06557368,
    -0.20560668,
    -0.13817734,
    -0.15567772,
    -1.6164923,
    1.0326616,
    0.21477142,
    -2.8077223,
    -2.551806,
    -0.13339965,
    0.38691,
    -0.30760485,
    0.06981112,
    -0.06082517,
    0.08143008,
    0.050636236,
    -0.19882275,
    0.03367009,
    0.3332777,
    0.6907215,
    0.6812265,
    -0.115635045,
    -0.117798366,
    -0.006480599,
    0.08968755,
    -0.014623408,
    -0.24321537,
    -0.06481637,
    -0.4970192,
    -0.21534547,
    0.51982844,
    1.7268767,
    0.004423392,
    0.30211067,
    -0.06706835,
    0.03738013,
    0.28384575,
    0.4953554,
    0.5341444,
    -0.38101324,
    -0.4474343,
    -0.41911015,
    -0.14857827,
    0.30844328,
    0.6750072,
    -0.97720045,
    -0.56535405,
    -0.17083597,
    0.54298985,
    1.5395478,
    1.096076,
    0.45582753,
    0.016415296,
    -0.33029875,
    0.44426945,
    -0.32968402,
    0.9531575,
    0.41011214,
    0.1216629,
    0.6917996,
    0.18339105,
    0.065131195,
    -0.6355726,
    1.5640646,
    0.46537867,
    1.1751071,
    -0.08667284,
    -0.22987743,
    -0.7127392,
    0.4810418,
    0.8214628,
    0.9918113,
    -0.09119934,
    -0.27208114,
    -0.13251854,
    2.426638,
    -0.104075655,
    2.1405137,
    3.3990076,
    0.45329964,
    -4.655621,
    -0.74131274,
    0.7973329,
    1.3661869,
    0.46773735,
    0.5741953,
    0.087222114,
    0.30638045,
    0.33453366,
    0.08256739,
    0.04432858,
    0.3225368,
    -0.021882322,
    0.32148007,
    0.31549633,
    -1.5004859,
    -0.13966632,
    0.45546106,
    -0.40373558,
    -0.24551375,
    0.18895926,
    0.07625407,
    0.0052082036,
    -0.0012640925,
    0.34141248,
    0.15663096,
    2.02077,
    -2.6822398,
    -1.6883273,
    -1.9041578,
    -0.1886726,
    0.25378472,
    0.5179474,
    1.0816803,
    -2.2359698,
    -1.5015856,
    -0.5805032,
    0.79634327,
    0.31051883,
    -1.2014942,
    0.25040248,
    1.1517992,
    1.6989455,
    1.3853481,
    1.6036713,
    0.7625884,
    -0.92504823,
    -0.5216621,
    0.36561957,
    1.1321492,
    1.6092598,
    0.61432403,
    -2.0228667,
    -0.8177022,
    -1.254545,
    -1.1593713,
    -1.2931123,
    -0.3154228,
    -1.1602424,
    -1.9565928,
    0.32626602,
    -0.028468128,
    -0.036849245,
    -0.112456985,
    0.043217946,
    0.08309858,
    0.24185763,
    -0.17654309,
    0.23051652,
    0.17497836,
    0.30518794,
    -0.17468643,
    -0.17940004,
    1.8823787,
    1.3385825,
    1.6534553,
    0.046787873,
    1.9449157,
    1.957238,
    0.5685186,
    1.369992,
    0.49561453,
    0.5704975,
    0.5515624,
    0.14864062,
    0.68902594,
    0.98338044,
    0.8225161,
    2.7357512,
    0.00053430814,
];
