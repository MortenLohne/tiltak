use crate::position::{num_line_symmetries, num_square_symmetries};

pub const NUM_VALUE_FEATURES_4S: usize = 87;
pub const NUM_POLICY_FEATURES_4S: usize = 146;

pub const NUM_VALUE_FEATURES_5S: usize = 124;
pub const NUM_POLICY_FEATURES_5S: usize = 165;

pub const NUM_VALUE_FEATURES_6S: usize = 134;
pub const NUM_POLICY_FEATURES_6S: usize = 175;

#[derive(Debug)]
pub struct ValueFeatures<'a> {
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub supports_psqt: &'a mut [f32],
    pub captives_psqt: &'a mut [f32],
    pub shallow_supports_per_piece: &'a mut [f32],
    pub deep_supports_per_piece: &'a mut [f32],
    pub shallow_captives_per_piece: &'a mut [f32],
    pub deep_captives_per_piece: &'a mut [f32],
    pub side_to_move: &'a mut [f32],
    pub flatstone_lead: &'a mut [f32],
    pub i_number_of_groups: &'a mut [f32],
    pub critical_squares: &'a mut [f32],
    pub flat_next_to_our_stack: &'a mut [f32],
    pub wall_next_to_our_stack: &'a mut [f32],
    pub cap_next_to_our_stack: &'a mut [f32],
    pub num_lines_occupied: &'a mut [f32],
    pub line_control_empty: &'a mut [f32],
    pub line_control_their_blocking_piece: &'a mut [f32],
    pub line_control_other: &'a mut [f32],
    pub sidelined_cap: &'a mut [f32],
    pub fully_isolated_cap: &'a mut [f32],
    pub semi_isolated_cap: &'a mut [f32],
}

impl<'a> ValueFeatures<'a> {
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> Self {
        assert_eq!(coefficients.len(), num_value_features::<S>());

        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (supports_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (captives_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (shallow_supports_per_piece, coefficients) = coefficients.split_at_mut(4);
        let (deep_supports_per_piece, coefficients) = coefficients.split_at_mut(4);
        let (shallow_captives_per_piece, coefficients) = coefficients.split_at_mut(4);
        let (deep_captives_per_piece, coefficients) = coefficients.split_at_mut(4);
        let (side_to_move, coefficients) = coefficients.split_at_mut(3);
        let (flatstone_lead, coefficients) = coefficients.split_at_mut(3);
        let (i_number_of_groups, coefficients) = coefficients.split_at_mut(3);
        let (critical_squares, coefficients) = coefficients.split_at_mut(6);
        let (flat_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (wall_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (cap_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (num_lines_occupied, coefficients) = coefficients.split_at_mut(S + 1);
        let (line_control_empty, coefficients) =
            coefficients.split_at_mut(S * num_line_symmetries::<S>());
        let (line_control_their_blocking_piece, coefficients) =
            coefficients.split_at_mut(S * num_line_symmetries::<S>());
        let (line_control_other, coefficients) =
            coefficients.split_at_mut(S * num_line_symmetries::<S>());
        let (sidelined_cap, coefficients) = coefficients.split_at_mut(3);
        let (fully_isolated_cap, coefficients) = coefficients.split_at_mut(3);
        let (semi_isolated_cap, coefficients) = coefficients.split_at_mut(3);

        assert!(coefficients.is_empty());

        ValueFeatures {
            flat_psqt,
            wall_psqt,
            cap_psqt,
            supports_psqt,
            captives_psqt,
            shallow_supports_per_piece,
            deep_supports_per_piece,
            shallow_captives_per_piece,
            deep_captives_per_piece,
            side_to_move,
            flatstone_lead,
            i_number_of_groups,
            critical_squares,
            flat_next_to_our_stack,
            wall_next_to_our_stack,
            cap_next_to_our_stack,
            num_lines_occupied,
            line_control_empty,
            line_control_their_blocking_piece,
            line_control_other,
            sidelined_cap,
            fully_isolated_cap,
            semi_isolated_cap,
        }
    }
}

#[derive(Debug)]
pub struct PolicyFeatures<'a> {
    pub decline_win: &'a mut [f32],
    pub place_to_win: &'a mut [f32],
    pub place_to_draw: &'a mut [f32],
    pub place_to_loss: &'a mut [f32],
    pub place_to_allow_opponent_to_end: &'a mut [f32],
    pub two_flats_left: &'a mut [f32],
    pub three_flats_left: &'a mut [f32],
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_road_stones_in_line: &'a mut [f32],
    pub their_road_stones_in_line: &'a mut [f32],
    pub extend_single_group_base: &'a mut [f32],
    pub extend_single_group_linear: &'a mut [f32],
    pub extend_single_group_to_new_line_base: &'a mut [f32],
    pub extend_single_group_to_new_line_linear: &'a mut [f32],
    pub merge_two_groups_base: &'a mut [f32],
    pub merge_two_groups_linear: &'a mut [f32],
    pub block_merger_base: &'a mut [f32],
    pub block_merger_linear: &'a mut [f32],
    pub place_our_critical_square: &'a mut [f32],
    pub place_their_critical_square: &'a mut [f32],
    pub ignore_their_critical_square: &'a mut [f32],
    pub next_to_our_last_stone: &'a mut [f32],
    pub next_to_their_last_stone: &'a mut [f32],
    pub diagonal_to_our_last_stone: &'a mut [f32],
    pub diagonal_to_their_last_stone: &'a mut [f32],
    pub attack_strong_flats: &'a mut [f32],
    pub blocking_stone_blocks_extensions_of_two_flats: &'a mut [f32],
    pub attack_strong_stack_with_wall: &'a mut [f32],
    pub attack_strong_stack_with_cap: &'a mut [f32],
    pub attack_last_movement: &'a mut [f32],
    pub place_last_movement: &'a mut [f32],
    pub move_role_bonus: &'a mut [f32],
    pub pure_spread: &'a mut [f32],
    pub fcd_highest_board: &'a mut [f32],
    pub fcd_highest_stack: &'a mut [f32],
    pub fcd_other: &'a mut [f32],
    pub stack_captured_by_movement: &'a mut [f32],
    pub stack_capture_in_strong_line: &'a mut [f32],
    pub stack_capture_in_strong_line_cap: &'a mut [f32],
    pub move_cap_onto_strong_line: &'a mut [f32],
    pub move_cap_onto_strong_line_with_critical_square: &'a mut [f32],
    pub recapture_stack_pure: &'a mut [f32],
    pub recapture_stack_impure: &'a mut [f32],
    pub move_last_placement: &'a mut [f32],
    pub continue_spread: &'a mut [f32],
    pub move_onto_critical_square: &'a mut [f32],
    pub spread_that_connects_groups_to_win: &'a mut [f32],
}

impl<'a> PolicyFeatures<'a> {
    #[inline(never)]
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> PolicyFeatures<'a> {
        assert_eq!(coefficients.len(), num_policy_features::<S>());

        let (decline_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_draw, coefficients) = coefficients.split_at_mut(1);
        let (place_to_loss, coefficients) = coefficients.split_at_mut(1);
        let (place_to_allow_opponent_to_end, coefficients) = coefficients.split_at_mut(3);
        let (two_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (three_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (their_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (extend_single_group_to_new_line_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_to_new_line_linear, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_linear, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_base, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_linear, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_base, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_linear, coefficients) = coefficients.split_at_mut(3);
        let (place_our_critical_square, coefficients) = coefficients.split_at_mut(1);
        let (place_their_critical_square, coefficients) = coefficients.split_at_mut(4);
        let (ignore_their_critical_square, coefficients) = coefficients.split_at_mut(2);
        let (next_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (next_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (attack_strong_flats, coefficients) = coefficients.split_at_mut(1);
        let (blocking_stone_blocks_extensions_of_two_flats, coefficients) =
            coefficients.split_at_mut(1);
        let (attack_strong_stack_with_wall, coefficients) = coefficients.split_at_mut(6);
        let (attack_strong_stack_with_cap, coefficients) = coefficients.split_at_mut(6);
        let (attack_last_movement, coefficients) = coefficients.split_at_mut(4);
        let (place_last_movement, coefficients) = coefficients.split_at_mut(3);
        let (move_role_bonus, coefficients) = coefficients.split_at_mut(3);
        let (pure_spread, coefficients) = coefficients.split_at_mut(2);
        let (fcd_highest_board, coefficients) = coefficients.split_at_mut(6);
        let (fcd_highest_stack, coefficients) = coefficients.split_at_mut(6);
        let (fcd_other, coefficients) = coefficients.split_at_mut(8);
        let (stack_captured_by_movement, coefficients) = coefficients.split_at_mut(1);
        let (stack_capture_in_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (stack_capture_in_strong_line_cap, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line_with_critical_square, coefficients) =
            coefficients.split_at_mut(S - 3);
        let (recapture_stack_pure, coefficients) = coefficients.split_at_mut(3);
        let (recapture_stack_impure, coefficients) = coefficients.split_at_mut(3);
        let (move_last_placement, coefficients) = coefficients.split_at_mut(3);
        let (continue_spread, coefficients) = coefficients.split_at_mut(3);
        let (move_onto_critical_square, coefficients) = coefficients.split_at_mut(3);
        let (spread_that_connects_groups_to_win, coefficients) = coefficients.split_at_mut(1);

        assert!(coefficients.is_empty());

        PolicyFeatures {
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            attack_strong_stack_with_wall,
            attack_strong_stack_with_cap,
            attack_last_movement,
            place_last_movement,
            move_role_bonus,
            pure_spread,
            fcd_highest_board,
            fcd_highest_stack,
            fcd_other,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            recapture_stack_pure,
            recapture_stack_impure,
            move_last_placement,
            continue_spread,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
        }
    }
}

pub fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S: [f32; NUM_VALUE_FEATURES_4S] = [
    1.2960935,
    1.3755996,
    1.5638089,
    0.78314453,
    1.2711805,
    1.8741411,
    0.002932434,
    -0.0025715088,
    -0.00047107227,
    0.95423925,
    1.0412871,
    1.2421451,
    0.6032736,
    0.7569551,
    0.99624264,
    1.0294716,
    1.5590223,
    0.009879224,
    -0.0059808395,
    0.43383166,
    0.21582259,
    0.005999675,
    -0.0073812627,
    -0.6828443,
    -0.2672891,
    -0.008598236,
    0.0018530292,
    -0.7021679,
    -0.7136931,
    0.005024814,
    0.0038007405,
    1.8471439,
    1.7818584,
    2.2982776,
    1.2660044,
    0.92664075,
    2.0581422,
    -0.1795842,
    0.092309125,
    0.12011644,
    0.34540316,
    0.036157735,
    0.12752953,
    0.026238991,
    -0.0047925757,
    -0.005560641,
    0.019486373,
    -0.24060859,
    -0.0082427785,
    1.2213438,
    -1.4580884,
    -0.7276805,
    0.03937588,
    0.9138916,
    0.00059686694,
    -0.3603766,
    0.34891835,
    1.0730433,
    -0.0060374904,
    -0.23607875,
    0.35319594,
    0.7424935,
    -0.347289,
    -0.7963712,
    -0.41807485,
    0.107809,
    -0.5243122,
    -0.81458193,
    -0.2928778,
    0.33367318,
    0.04993621,
    -0.36220556,
    0.04083454,
    0.68550664,
    -0.07416395,
    -0.42777094,
    0.13790259,
    0.801516,
    0.0076200105,
    0.0061870757,
    -0.0077467104,
    -0.007937893,
    0.0076041985,
    -0.00032685045,
    -0.00023208652,
    0.008934194,
    -0.0025578667,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S: [f32; NUM_POLICY_FEATURES_4S] = [
    -3.5051243,
    1.4157966,
    1.1053113,
    -2.4844222,
    -2.7467613,
    0.18025555,
    0.45853433,
    -0.23090544,
    0.1941058,
    -0.15248832,
    0.15463676,
    0.059741054,
    0.15986145,
    0.42479512,
    -0.2812314,
    -0.40091315,
    0.3158486,
    -0.0034274147,
    0.004325905,
    -0.0049592447,
    0.0060829497,
    -0.28631765,
    0.4557551,
    1.126721,
    -0.19505699,
    -0.080087304,
    -0.18250895,
    -0.23908818,
    0.008150065,
    0.0016175173,
    0.006870074,
    0.0040705632,
    0.15032634,
    -0.3799674,
    0.32453373,
    1.2301178,
    -0.5674173,
    -0.46608785,
    -0.42532933,
    0.76013947,
    0.005722007,
    0.0051122922,
    0.0010959748,
    0.0020771455,
    0.5737304,
    -0.1939148,
    0.004355209,
    -1.3618541,
    -0.09711764,
    0.008410923,
    0.49789062,
    0.4287433,
    0.0010137418,
    0.073415756,
    -0.31287047,
    -0.002478423,
    0.84457153,
    1.3223019,
    0.009418681,
    0.16756612,
    -0.9249777,
    0.008915393,
    0.21174285,
    0.4176839,
    0.008046815,
    -0.93269366,
    -0.35034326,
    -0.0008124877,
    2.4380362,
    0.22534415,
    0.9738833,
    0.0060925093,
    0.57696855,
    -5.122463,
    -0.67139024,
    0.24325433,
    1.4057863,
    0.42602423,
    0.2845914,
    0.2861657,
    0.58224267,
    0.18157163,
    0.35004643,
    -0.3451585,
    0.5377701,
    -0.006355319,
    0.001523626,
    -0.00079395995,
    0.0012055086,
    -0.0018659113,
    0.004368524,
    0.0076928716,
    0.004360006,
    0.35632935,
    0.060153496,
    0.008424118,
    -0.0050589656,
    0.06648267,
    -0.20716235,
    -0.0010688612,
    -0.53707355,
    -0.38974625,
    -0.006010456,
    0.27557164,
    -1.2063148,
    0.23341599,
    1.3645527,
    1.7859094,
    1.771564,
    0.37076792,
    -0.012176464,
    -1.2901073,
    -1.4390844,
    0.17787339,
    1.1332122,
    0.03694437,
    0.006234633,
    -0.050114095,
    -0.20851089,
    -1.7973186,
    -1.3369855,
    -1.0166576,
    0.002619666,
    -0.3945727,
    -0.25874558,
    0.4159334,
    -0.1575784,
    -0.008776911,
    0.006379608,
    -0.0034764553,
    1.3660743,
    0.77576524,
    -0.0007181382,
    -0.46256366,
    0.092615575,
    -0.00401304,
    0.29017976,
    0.89639795,
    0.009882869,
    0.22771332,
    0.050504327,
    -0.000495675,
    0.31485778,
    1.9393262,
    0.45958057,
    3.3471909,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S: [f32; NUM_VALUE_FEATURES_5S] = [
    0.6495996,
    0.6264087,
    0.6424795,
    0.63472235,
    0.59883386,
    0.5269288,
    0.5985967,
    0.9384296,
    1.0060751,
    1.364563,
    1.386277,
    1.3615981,
    0.7223717,
    1.1225014,
    1.1659535,
    1.9031403,
    2.0585349,
    2.1743684,
    0.7253143,
    0.8380635,
    0.88283247,
    0.8980131,
    0.9477068,
    1.0782348,
    0.39469373,
    0.502527,
    0.5224005,
    0.5923459,
    0.61175495,
    0.6634026,
    0.67725605,
    0.99516755,
    2.0030787,
    1.2296761,
    0.26849377,
    0.04693692,
    0.031255487,
    0.11079586,
    -0.5650867,
    -0.27574304,
    -0.3310668,
    -0.17738351,
    -0.52715564,
    -0.4431318,
    -0.50486153,
    -0.47285733,
    1.4774977,
    1.1283414,
    1.3637797,
    1.645141,
    0.79353493,
    1.2506193,
    -0.21600884,
    -0.14892322,
    -0.034205582,
    0.3117739,
    0.09561967,
    0.16677094,
    0.010250588,
    0.1002991,
    -0.0042300206,
    0.009783865,
    -0.17504315,
    -0.15301184,
    0.951331,
    -1.2315924,
    -0.71197677,
    -0.2197125,
    0.3175571,
    0.91201746,
    -0.0014058612,
    -0.4267075,
    -0.06294673,
    0.43246102,
    0.91643757,
    -0.00188174,
    -0.50255793,
    -0.006105375,
    0.5569835,
    0.90747476,
    -0.0077467104,
    -0.5143827,
    -0.06855094,
    0.55527574,
    0.9260895,
    -0.33957162,
    -0.6067062,
    -0.3362701,
    -0.06941078,
    0.24185306,
    -0.53865016,
    -0.7692165,
    -0.35123727,
    0.089146405,
    0.5574273,
    -0.61812353,
    -0.7705321,
    -0.3653969,
    0.11322055,
    0.5596796,
    -0.093101144,
    -0.34133473,
    -0.13495372,
    0.22224097,
    0.5908219,
    -0.43248397,
    -0.59067315,
    -0.17159313,
    0.3924391,
    0.86482835,
    -0.42668724,
    -0.5969889,
    -0.14788678,
    0.37836194,
    0.9474829,
    -0.29566485,
    -0.08247462,
    -0.18411462,
    -0.77349156,
    -0.2730902,
    -0.12613353,
    -0.42083722,
    0.08356222,
    -0.21141948,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S: [f32; NUM_POLICY_FEATURES_5S] = [
    -2.8930156,
    1.1347277,
    0.5880286,
    -2.1558855,
    -2.0815508,
    0.047755077,
    0.463599,
    -0.30339652,
    0.14567617,
    -0.13936369,
    0.086735114,
    -0.104995474,
    0.17192024,
    0.068819515,
    0.3666084,
    0.0675373,
    -0.1002792,
    -0.19805321,
    -0.29739594,
    -0.26359257,
    0.09363791,
    0.14888932,
    0.2416586,
    -1.2342265,
    -1.2837232,
    -0.9388838,
    0.414903,
    1.0063664,
    2.665497,
    0.012744417,
    -0.2733087,
    -0.0026339758,
    0.42960602,
    0.7685871,
    -0.22015987,
    -0.16478118,
    -0.052859012,
    -0.0856007,
    -0.043047685,
    -0.011294383,
    0.007201165,
    0.47657806,
    1.0606492,
    -0.31386834,
    0.28510132,
    -0.17610434,
    0.023009306,
    0.3753089,
    0.40319481,
    -0.3170362,
    -0.44979566,
    -0.42776784,
    0.07001749,
    0.56100714,
    -0.5115519,
    -0.6386547,
    -0.2633225,
    0.4826483,
    2.1849165,
    0.59982115,
    -0.0825715,
    0.46360713,
    -0.018512119,
    -0.3334165,
    -0.59023976,
    0.36890098,
    0.12880911,
    0.1798804,
    0.2564373,
    0.01786898,
    -0.44789782,
    1.5878617,
    0.3418806,
    0.8210527,
    -0.15256311,
    -0.18265979,
    -0.069312155,
    0.40903264,
    0.7320417,
    1.3716254,
    -0.22998755,
    -0.5985867,
    -0.34135538,
    2.1861234,
    0.21786596,
    2.1039944,
    2.5707169,
    0.59131074,
    -3.6107652,
    -0.76909524,
    0.39822814,
    1.4065447,
    0.32680765,
    0.414639,
    0.15160944,
    0.31396908,
    0.270859,
    0.3355257,
    -0.049446255,
    0.38936746,
    -0.01888283,
    0.3977596,
    -0.13862894,
    -0.17878959,
    0.0015110159,
    0.054847207,
    -0.27575102,
    -0.059471224,
    0.2763597,
    -0.055252228,
    -0.0013148449,
    0.008539425,
    0.33812252,
    0.091613546,
    1.1256883,
    -0.5899781,
    -0.24602391,
    -0.111350484,
    0.15611862,
    -1.1093279,
    0.42241216,
    1.1396682,
    1.510737,
    1.0301645,
    0.6471164,
    0.09280731,
    -1.0648797,
    -0.87707716,
    0.44542843,
    1.0987424,
    0.24763365,
    -0.008898531,
    -0.32627538,
    -0.5750502,
    -1.2731432,
    -0.9559669,
    -0.716924,
    -0.16583505,
    -0.7193155,
    -0.864097,
    0.37386435,
    -0.01814969,
    -0.13337006,
    0.035502892,
    0.102817975,
    0.042333394,
    0.46545413,
    -0.24816228,
    -0.037062097,
    1.7964468,
    1.0661337,
    1.3687409,
    -0.17293246,
    0.5604988,
    1.6316022,
    0.48153067,
    1.0327232,
    1.0851384,
    0.37568668,
    0.4161248,
    -0.16995269,
    0.34065473,
    2.5504138,
    0.94594,
    3.1496084,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S: [f32; NUM_VALUE_FEATURES_6S] = [
    0.606187,
    0.5446117,
    0.54406977,
    0.59712934,
    0.6192196,
    0.5680083,
    0.22529893,
    0.61106944,
    0.6726761,
    0.9916199,
    1.1298188,
    1.2645868,
    0.039187424,
    0.5010584,
    0.65021455,
    1.2168105,
    1.5609205,
    1.8391675,
    0.51993597,
    0.62568444,
    0.68589634,
    0.70032203,
    0.77488726,
    0.75653815,
    0.36954045,
    0.44124892,
    0.44977257,
    0.54283947,
    0.57422334,
    0.5616728,
    0.6143715,
    0.85462576,
    1.4853287,
    1.0700635,
    0.2920155,
    -0.09491774,
    -0.098030955,
    -0.06769711,
    -0.55631524,
    -0.19200288,
    -0.17672306,
    -0.10198288,
    -0.401936,
    -0.4650831,
    -0.6883258,
    -0.3670923,
    1.0906948,
    0.86482877,
    1.0072992,
    1.4386058,
    0.88296574,
    1.1679748,
    -0.24030001,
    -0.19869824,
    -0.017924381,
    0.2546107,
    0.08701127,
    0.15877694,
    0.007067374,
    0.114150904,
    -0.02626372,
    0.022606345,
    -0.12556247,
    -0.12852018,
    0.93810076,
    -0.7260433,
    -0.52561533,
    -0.3214629,
    -0.0750549,
    0.2225322,
    0.50376153,
    -0.0038658213,
    -0.08316135,
    -0.017130688,
    0.12659669,
    0.36212754,
    0.5770378,
    -0.0026799915,
    -0.19310333,
    -0.068640575,
    0.13180655,
    0.3814123,
    0.46170714,
    -0.00032685045,
    -0.25205535,
    -0.104866266,
    0.07662872,
    0.3767714,
    0.5692452,
    -0.18182907,
    -0.44210964,
    -0.37306374,
    -0.2778329,
    -0.15621454,
    -0.023055106,
    -0.34905314,
    -0.46918887,
    -0.32652503,
    -0.17533821,
    -0.013424231,
    0.23628815,
    -0.34334445,
    -0.4333364,
    -0.2837256,
    -0.112828605,
    0.0774326,
    0.28103772,
    0.21040379,
    -0.06204036,
    -0.095324166,
    -0.011239963,
    0.1648674,
    0.2713752,
    -0.11068617,
    -0.24071796,
    -0.12877242,
    0.035447612,
    0.3048336,
    0.5276468,
    -0.26604328,
    -0.35593826,
    -0.1926967,
    0.025967682,
    0.33114037,
    0.61982065,
    -0.20731127,
    -0.10293561,
    -0.22141515,
    -0.54256046,
    -0.53815967,
    -0.1566519,
    -0.34156847,
    -0.004189716,
    -0.21910878,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S: [f32; NUM_POLICY_FEATURES_6S] = [
    -2.537732,
    1.0908016,
    0.40531597,
    -2.1758792,
    -1.9631239,
    -0.11906523,
    0.3827525,
    -0.36279714,
    0.09866876,
    -0.061372064,
    0.07916111,
    -0.15046495,
    -0.058190577,
    -0.14056768,
    0.3956402,
    0.4730664,
    0.22033773,
    -0.29809806,
    -0.38564613,
    -0.32031336,
    0.17611764,
    0.31474528,
    0.37410745,
    -0.6133409,
    -0.99495566,
    -1.0222951,
    -0.077299744,
    0.7795907,
    2.4137046,
    0.009551722,
    -0.24928945,
    -0.040407192,
    0.31061915,
    0.7048046,
    0.7255704,
    -0.1916462,
    -0.15268278,
    -0.02565997,
    0.015178125,
    0.029290102,
    -0.022838049,
    0.06374317,
    -0.23201625,
    0.25451878,
    0.49185684,
    0.45766148,
    -0.030042177,
    0.29000658,
    -0.059269987,
    0.035729673,
    0.2713238,
    0.52149457,
    0.41837993,
    -0.37596098,
    -0.4166622,
    -0.39534777,
    -0.16473937,
    0.3140515,
    0.6778928,
    -1.0284848,
    -0.87102145,
    -0.48523164,
    0.40991268,
    1.2577605,
    1.6891481,
    0.54986006,
    -0.059741832,
    0.2906249,
    0.28040463,
    -0.20350485,
    0.053418785,
    0.39260092,
    0.09022922,
    0.22058617,
    0.18911245,
    0.21835162,
    -0.14127125,
    1.6414672,
    0.406492,
    0.89791363,
    -0.10624856,
    -0.06723089,
    0.010765928,
    0.48911348,
    0.7437363,
    1.2958746,
    -0.111168824,
    -0.24104673,
    -0.3188627,
    2.4571512,
    -0.09623533,
    2.1199632,
    1.8035305,
    0.5385758,
    -3.4249108,
    -0.7086648,
    0.7250871,
    1.3912737,
    0.456455,
    0.5517954,
    0.08968325,
    0.32856953,
    0.29167163,
    0.15119289,
    -0.014762301,
    0.3255621,
    -0.023083422,
    0.32838178,
    -0.32671353,
    -0.4957775,
    0.25108427,
    0.20229658,
    -0.19199184,
    -0.0252609,
    0.21606602,
    0.030854229,
    0.008243782,
    0.0015487336,
    0.2508611,
    0.07878453,
    1.8220444,
    -0.62186193,
    -0.14693832,
    -0.1250951,
    0.30387965,
    -1.1804363,
    0.39522517,
    1.070712,
    1.5219172,
    1.2177049,
    1.0478175,
    -0.049378935,
    -1.1325337,
    -1.1983304,
    0.48380214,
    1.1066477,
    0.8688214,
    0.052402135,
    -0.45938998,
    -0.37516516,
    -1.6564883,
    -1.0774469,
    -0.7306937,
    -0.13747285,
    -0.6986086,
    -1.1748166,
    0.32831582,
    -0.027374638,
    -0.04331404,
    -0.13367507,
    0.0061078877,
    0.090637155,
    0.22868887,
    -0.19393876,
    0.22177424,
    -0.08094527,
    -0.09105366,
    -0.12588593,
    -0.007476065,
    1.9397684,
    1.4913076,
    1.7615261,
    -0.05691047,
    0.48275307,
    1.4337307,
    0.64200646,
    1.4866631,
    1.0837941,
    0.64215547,
    0.540698,
    -0.14014474,
    0.52027225,
    2.8122883,
    0.9595797,
    3.0457306,
];
