use std::{array, mem};

use half::f16;

use crate::{
    evaluation::policy_eval::sigmoid,
    position::{num_line_symmetries, num_square_symmetries, Komi},
};

use super::policy_eval::policy_offset;

pub const NUM_VALUE_FEATURES_4S: usize = 312;
pub const NUM_POLICY_FEATURES_4S: usize = 176;

pub const NUM_VALUE_FEATURES_5S: usize = 392;
pub const NUM_POLICY_FEATURES_5S: usize = 200;

pub const NUM_VALUE_FEATURES_6S: usize = 416;
pub const NUM_POLICY_FEATURES_6S: usize = 208;

const fn value_padding<const S: usize>() -> usize {
    match S {
        4 => 2,
        5 => 2,
        6 => 6,
        _ => unimplemented!(),
    }
}

const fn policy_padding<const S: usize>() -> usize {
    match S {
        4 => 7,
        5 => 3,
        6 => 1,
        _ => unimplemented!(),
    }
}

#[derive(Debug, Clone, Copy)]
pub struct IndexPair {
    start: usize,
    length: usize,
}

impl IndexPair {
    pub const fn next(start: usize, length: usize) -> (Self, usize) {
        (Self { start, length }, start + length)
    }

    pub fn as_slice<'a, T>(&self, slice: &'a [T]) -> &'a [T] {
        &slice[self.start..self.start + self.length]
    }

    pub fn as_mut_slice<'a, T>(&self, slice: &'a mut [T]) -> &'a mut [T] {
        &mut slice[self.start..self.start + self.length]
    }
}

#[derive(Debug)]
pub struct ValueIndexes<const S: usize> {
    pub first_ply: IndexPair,
    pub second_ply: IndexPair,
    pub flat_psqt: IndexPair,
    pub wall_psqt: IndexPair,
    pub cap_psqt: IndexPair,
    pub supports_psqt: IndexPair,
    pub captives_psqt: IndexPair,
    pub flat_win_this_ply: IndexPair,
    pub flat_win_next_ply: IndexPair,
    pub flat_win_two_ply: IndexPair,
    pub flat_win_three_ply: IndexPair,
    pub one_reserve_left_us: IndexPair,
    pub one_reserve_left_them: IndexPair,
    pub shallow_supports_per_piece: IndexPair,
    pub shallow_supports_per_piece_mobility: IndexPair,
    pub deep_supports_per_piece: IndexPair,
    pub shallow_captives_per_piece: IndexPair,
    pub shallow_captives_per_piece_mobility: IndexPair,
    pub deep_captives_per_piece: IndexPair,
    pub us_to_move_opening_flatstone_lead: IndexPair,
    pub them_to_move_opening_flatstone_lead: IndexPair,
    pub us_to_move_middlegame_flatstone_lead: IndexPair,
    pub them_to_move_middlegame_flatstone_lead: IndexPair,
    pub us_to_move_endgame_flatstone_lead: IndexPair,
    pub them_to_move_endgame_flatstone_lead: IndexPair,
    pub i_number_of_groups: IndexPair,
    pub critical_squares: IndexPair,
    pub critical_square_cap_attack: IndexPair,
    pub flat_next_to_our_stack: IndexPair,
    pub wall_next_to_our_stack: IndexPair,
    pub cap_next_to_our_stack: IndexPair,
    pub num_lines_occupied: IndexPair,
    pub line_control_empty: IndexPair,
    pub line_control_their_blocking_piece: IndexPair,
    pub line_control_other: IndexPair,
    pub sidelined_cap: IndexPair,
    pub fully_isolated_cap: IndexPair,
    pub semi_isolated_cap: IndexPair,
    pub padding: IndexPair,
}

impl<const S: usize> ValueIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;

        let (first_ply, i) = IndexPair::next(i, 1);
        let (second_ply, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (supports_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (captives_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_win_this_ply, i) = IndexPair::next(i, 1);
        let (flat_win_next_ply, i) = IndexPair::next(i, 2);
        let (flat_win_two_ply, i) = IndexPair::next(i, 2);
        let (flat_win_three_ply, i) = IndexPair::next(i, 3);
        let (one_reserve_left_us, i) = IndexPair::next(i, 4);
        let (one_reserve_left_them, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece_mobility, i) = IndexPair::next(i, 4);
        let (deep_supports_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece_mobility, i) = IndexPair::next(i, 4);
        let (deep_captives_per_piece, i) = IndexPair::next(i, 4);
        let (us_to_move_opening_flatstone_lead, i) = IndexPair::next(i, 7);
        let (them_to_move_opening_flatstone_lead, i) = IndexPair::next(i, 7);
        let (us_to_move_middlegame_flatstone_lead, i) = IndexPair::next(i, 7);
        let (them_to_move_middlegame_flatstone_lead, i) = IndexPair::next(i, 7);
        let (us_to_move_endgame_flatstone_lead, i) = IndexPair::next(i, 7);
        let (them_to_move_endgame_flatstone_lead, i) = IndexPair::next(i, 7);
        let (i_number_of_groups, i) = IndexPair::next(i, 3);
        let (critical_squares, i) = IndexPair::next(i, 4);
        let (critical_square_cap_attack, i) = IndexPair::next(i, 6);
        let (flat_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (wall_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (cap_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (num_lines_occupied, i) = IndexPair::next(i, S + 1);
        let (line_control_empty, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_their_blocking_piece, i) =
            IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_other, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (sidelined_cap, i) = IndexPair::next(i, 3);
        let (fully_isolated_cap, i) = IndexPair::next(i, 3);
        let (semi_isolated_cap, i) = IndexPair::next(i, 3);
        let (padding, i) = IndexPair::next(i, value_padding::<S>() / 2);

        assert!(i == num_value_features::<S>() / 2);

        ValueIndexes {
            first_ply,
            second_ply,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            supports_psqt,
            captives_psqt,
            flat_win_this_ply,
            flat_win_next_ply,
            flat_win_two_ply,
            flat_win_three_ply,
            one_reserve_left_us,
            one_reserve_left_them,
            shallow_supports_per_piece,
            shallow_supports_per_piece_mobility,
            deep_supports_per_piece,
            shallow_captives_per_piece,
            shallow_captives_per_piece_mobility,
            deep_captives_per_piece,
            us_to_move_opening_flatstone_lead,
            them_to_move_opening_flatstone_lead,
            us_to_move_middlegame_flatstone_lead,
            them_to_move_middlegame_flatstone_lead,
            us_to_move_endgame_flatstone_lead,
            them_to_move_endgame_flatstone_lead,
            i_number_of_groups,
            critical_squares,
            critical_square_cap_attack,
            flat_next_to_our_stack,
            wall_next_to_our_stack,
            cap_next_to_our_stack,
            num_lines_occupied,
            line_control_empty,
            line_control_their_blocking_piece,
            line_control_other,
            sidelined_cap,
            fully_isolated_cap,
            semi_isolated_cap,
            padding,
        }
    }
}

pub const VALUE_INDEXES_4S: ValueIndexes<4> = ValueIndexes::new();
pub const VALUE_INDEXES_5S: ValueIndexes<5> = ValueIndexes::new();
pub const VALUE_INDEXES_6S: ValueIndexes<6> = ValueIndexes::new();

impl<const S: usize> ValueIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> ValueIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn value_indexes<const S: usize>() -> ValueIndexes<S> {
    match S {
        4 => VALUE_INDEXES_4S.downcast_size(),
        5 => VALUE_INDEXES_5S.downcast_size(),
        6 => VALUE_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

#[derive(Debug)]
pub struct PolicyIndexes<const S: usize> {
    pub flat_psqt_white: IndexPair,
    pub flat_psqt_black: IndexPair,
    pub wall_psqt_white: IndexPair,
    pub wall_psqt_black: IndexPair,
    pub cap_psqt_white: IndexPair,
    pub cap_psqt_black: IndexPair,
    pub move_role_bonus_white: IndexPair,
    pub move_role_bonus_black: IndexPair,
    pub decline_win: IndexPair,
    pub place_to_win: IndexPair,
    pub place_to_draw: IndexPair,
    pub place_to_loss: IndexPair,
    pub place_to_allow_opponent_to_end: IndexPair,
    pub two_flats_left: IndexPair,
    pub three_flats_left: IndexPair,
    pub our_road_stones_in_line: IndexPair,
    pub their_road_stones_in_line: IndexPair,
    pub extend_single_group_base: IndexPair,
    pub extend_single_group_linear: IndexPair,
    pub extend_single_group_to_new_line_base: IndexPair,
    pub extend_single_group_to_new_line_linear: IndexPair,
    pub merge_two_groups_base: IndexPair,
    pub merge_two_groups_linear: IndexPair,
    pub block_merger_base: IndexPair,
    pub block_merger_linear: IndexPair,
    pub place_our_critical_square: IndexPair,
    pub place_their_critical_square: IndexPair,
    pub ignore_their_critical_square: IndexPair,
    pub next_to_our_last_stone: IndexPair,
    pub next_to_their_last_stone: IndexPair,
    pub diagonal_to_our_last_stone: IndexPair,
    pub diagonal_to_their_last_stone: IndexPair,
    pub attack_strong_flats: IndexPair,
    pub blocking_stone_blocks_extensions_of_two_flats: IndexPair,
    pub attack_strong_stack_with_wall: IndexPair,
    pub attack_strong_stack_with_cap: IndexPair,
    pub attack_last_movement: IndexPair,
    pub place_last_movement: IndexPair,
    pub simple_movement: IndexPair,
    pub simple_capture: IndexPair,
    pub simple_self_capture: IndexPair,
    pub pure_spread: IndexPair,
    pub fcd_highest_board: IndexPair,
    pub fcd_highest_stack: IndexPair,
    pub fcd_other: IndexPair,
    pub stack_captured_by_movement: IndexPair,
    pub stack_capture_in_strong_line: IndexPair,
    pub stack_capture_in_strong_line_cap: IndexPair,
    pub move_cap_onto_strong_line: IndexPair,
    pub move_cap_onto_strong_line_with_critical_square: IndexPair,
    pub recapture_stack_pure: IndexPair,
    pub recapture_stack_impure: IndexPair,
    pub move_last_placement: IndexPair,
    pub continue_spread: IndexPair,
    pub move_onto_critical_square: IndexPair,
    pub spread_that_connects_groups_to_win: IndexPair,
    pub padding: IndexPair,
}

pub const POLICY_INDEXES_4S: PolicyIndexes<4> = PolicyIndexes::new();
pub const POLICY_INDEXES_5S: PolicyIndexes<5> = PolicyIndexes::new();
pub const POLICY_INDEXES_6S: PolicyIndexes<6> = PolicyIndexes::new();

impl<const S: usize> PolicyIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> PolicyIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn policy_indexes<const S: usize>() -> PolicyIndexes<S> {
    match S {
        4 => POLICY_INDEXES_4S.downcast_size(),
        5 => POLICY_INDEXES_5S.downcast_size(),
        6 => POLICY_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

impl<const S: usize> PolicyIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;
        let (flat_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (move_role_bonus_white, i) = IndexPair::next(i, 3);
        let (move_role_bonus_black, i) = IndexPair::next(i, 3);
        let (decline_win, i) = IndexPair::next(i, 1);
        let (place_to_win, i) = IndexPair::next(i, 1);
        let (place_to_draw, i) = IndexPair::next(i, 1);
        let (place_to_loss, i) = IndexPair::next(i, 1);
        let (place_to_allow_opponent_to_end, i) = IndexPair::next(i, 3);
        let (two_flats_left, i) = IndexPair::next(i, 2);
        let (three_flats_left, i) = IndexPair::next(i, 2);
        let (our_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (their_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (extend_single_group_to_new_line_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_to_new_line_linear, i) = IndexPair::next(i, 3);
        let (extend_single_group_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_linear, i) = IndexPair::next(i, 3);
        let (merge_two_groups_base, i) = IndexPair::next(i, 3);
        let (merge_two_groups_linear, i) = IndexPair::next(i, 3);
        let (block_merger_base, i) = IndexPair::next(i, 3);
        let (block_merger_linear, i) = IndexPair::next(i, 3);
        let (place_our_critical_square, i) = IndexPair::next(i, 1);
        let (place_their_critical_square, i) = IndexPair::next(i, 4);
        let (ignore_their_critical_square, i) = IndexPair::next(i, 2);
        let (next_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (next_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (attack_strong_flats, i) = IndexPair::next(i, 1);
        let (blocking_stone_blocks_extensions_of_two_flats, i) = IndexPair::next(i, 1);
        let (attack_strong_stack_with_wall, i) = IndexPair::next(i, 6);
        let (attack_strong_stack_with_cap, i) = IndexPair::next(i, 6);
        let (attack_last_movement, i) = IndexPair::next(i, 4);
        let (place_last_movement, i) = IndexPair::next(i, 3);
        let (simple_movement, i) = IndexPair::next(i, 3);
        let (simple_capture, i) = IndexPair::next(i, 4);
        let (simple_self_capture, i) = IndexPair::next(i, 4);
        let (pure_spread, i) = IndexPair::next(i, 2);
        let (fcd_highest_board, i) = IndexPair::next(i, 6);
        let (fcd_highest_stack, i) = IndexPair::next(i, 6);
        let (fcd_other, i) = IndexPair::next(i, 8);
        let (stack_captured_by_movement, i) = IndexPair::next(i, 1);
        let (stack_capture_in_strong_line, i) = IndexPair::next(i, S - 3);
        let (stack_capture_in_strong_line_cap, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line_with_critical_square, i) = IndexPair::next(i, S - 3);
        let (recapture_stack_pure, i) = IndexPair::next(i, 3);
        let (recapture_stack_impure, i) = IndexPair::next(i, 3);
        let (move_last_placement, i) = IndexPair::next(i, 3);
        let (continue_spread, i) = IndexPair::next(i, 3);
        let (move_onto_critical_square, i) = IndexPair::next(i, 3);
        let (spread_that_connects_groups_to_win, i) = IndexPair::next(i, 1);
        let (padding, i) = IndexPair::next(i, policy_padding::<S>());

        assert!(i == num_policy_features::<S>());

        PolicyIndexes {
            flat_psqt_white,
            flat_psqt_black,
            wall_psqt_white,
            wall_psqt_black,
            cap_psqt_white,
            cap_psqt_black,
            move_role_bonus_white,
            move_role_bonus_black,
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            attack_strong_stack_with_wall,
            attack_strong_stack_with_cap,
            attack_last_movement,
            place_last_movement,
            simple_movement,
            simple_capture,
            simple_self_capture,
            pure_spread,
            fcd_highest_board,
            fcd_highest_stack,
            fcd_other,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            recapture_stack_pure,
            recapture_stack_impure,
            move_last_placement,
            continue_spread,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
            padding,
        }
    }
}

pub trait ValueApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn finish(&mut self) -> f32;
}

#[derive(Debug, Clone)]
pub struct Value<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for Value<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Value {
            features: vec![f16::ZERO; num_value_features::<S>() / 2],
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn finish(&mut self) -> f32 {
        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>();

        self.features.fill(f16::ZERO);

        total_value
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalValue<const S: usize> {
    val: f32,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for IncrementalValue<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalValue {
            val: 0.0,
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn finish(&mut self) -> f32 {
        let total_value = self.val;

        self.val = 0.0;

        total_value
    }
}

pub trait PolicyApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn eval_one(&mut self, index_pair: IndexPair, index: usize) {
        self.eval_i8(index_pair, index, 1)
    }
    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.eval(index_pair, index, f16::from(val))
    }
    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.eval(index_pair, index, f16::from_f32(val))
    }
    fn set_immediate_win(&mut self);
    fn has_immediate_win(&self) -> bool;
    fn finish(&mut self, num_moves: usize) -> f16;
}

#[derive(Debug, Clone)]
pub struct Policy<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for Policy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Policy {
            features: vec![f16::ZERO; num_policy_features::<S>()],
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);

        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>() + offset;

        self.features.fill(f16::ZERO);
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalPolicy<const S: usize> {
    val: f32,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for IncrementalPolicy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalPolicy {
            val: 0.0,
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.val += index_pair.as_slice(self.parameters)[index] * val as f32
    }

    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.val += index_pair.as_slice(self.parameters)[index] * val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);
        let total_value = self.val + offset;

        self.val = 0.0;
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

pub const fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub const fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn value_features_4s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_4S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_4S_0KOMI,
        4 => &VALUE_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn policy_features_4s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_4S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_4S_0KOMI,
        4 => &POLICY_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn value_features_5s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_5S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_5S_0KOMI,
        4 => &VALUE_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn policy_features_5s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_5S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_5S_0KOMI,
        4 => &POLICY_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn value_features_6s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_6S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_6S_0KOMI,
        4 => &VALUE_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

pub fn policy_features_6s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_6S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_6S_0KOMI,
        4 => &POLICY_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_0KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    1.9517757,
    2.4006295,
    2.0216284,
    1.4305742,
    1.090603,
    2.078429,
    1.1266109,
    0.05028018,
    0.16768824,
    0.16028416,
    -0.0059250165,
    -0.00050385203,
    -0.00651386,
    0.060337193,
    0.34332645,
    0.33103356,
    -0.2548578,
    -0.7829227,
    -0.5458915,
    0.0062694433,
    0.008578845,
    0.015191374,
    -0.0006404345,
    0.017787587,
    0.012703718,
    0.00083379226,
    0.009891503,
    -0.0035917528,
    0.005891454,
    0.0042844363,
    0.00344201,
    -0.0070606465,
    -0.00050033093,
    -0.0037154853,
    0.0010266459,
    0.36433113,
    0.2561912,
    -0.005124028,
    -0.008343117,
    0.21986209,
    0.17725201,
    0.005951524,
    -0.0043248367,
    0.038097702,
    0.07276443,
    -0.005560641,
    0.0036220215,
    0.7389364,
    0.7281517,
    -0.0055643534,
    -0.0015320918,
    0.43323413,
    0.47254413,
    -0.009827926,
    0.00059686694,
    0.04634152,
    0.0519664,
    0.0076304395,
    -0.0060374904,
    -0.006134841,
    0.0070836153,
    0.010426812,
    0.28109324,
    0.05798903,
    0.01668972,
    0.0042294897,
    -0.0040083686,
    -0.0053276587,
    0.008685032,
    0.02541632,
    0.25233912,
    0.044746853,
    0.008948911,
    0.0002595009,
    0.0040044542,
    0.029937329,
    0.04465773,
    0.041704092,
    0.03451866,
    0.020259902,
    -0.0095167495,
    -0.010581427,
    0.010601742,
    0.022804363,
    0.044392597,
    0.053209472,
    0.041265454,
    -0.0033842027,
    -0.0007524729,
    0.004412878,
    0.01856625,
    0.016944587,
    0.013983864,
    0.01696789,
    -0.0024550178,
    -0.0042417888,
    -0.013823583,
    -0.009840143,
    0.011754357,
    0.0132085765,
    0.02600573,
    1.4451684,
    0.84104276,
    0.29060653,
    0.21235879,
    0.053060897,
    0.3706893,
    0.13916145,
    -0.0022270367,
    0.002150652,
    -0.0016946243,
    0.0012913607,
    -0.004483435,
    0.008160291,
    0.58096236,
    0.50315213,
    0.0016175173,
    0.005555598,
    0.23647326,
    0.6434611,
    0.90753543,
    0.44168535,
    0.6131022,
    0.7065833,
    0.22949202,
    0.06349056,
    0.50902534,
    0.63651514,
    0.22282808,
    0.050370473,
    0.089471124,
    0.1390511,
    0.0970419,
    0.06367017,
    0.16566296,
    0.2878921,
    0.1601725,
    0.044111907,
    0.8181447,
    1.0297829,
    0.42447966,
    0.17071186,
    0.6752821,
    1.0921938,
    0.50274473,
    0.120829634,
    -0.007463541,
    -0.009312019,
    0.008915393,
    -0.0005510999,
    0.0035254955,
    0.008046815,
    0.008674609,
    0.008508706,
    -0.0008124877,
    0.004095099,
    0.002457223,
    -0.0064589093,
    0.0060925093,
    0.0012618108,
    0.80258524,
    1.5780742,
    0.791772,
    0.07474535,
    0.24231286,
    0.23073898,
    0.00051479787,
    -0.0077517964,
    -0.0077192923,
    0.049970638,
    0.18979107,
    0.12407929,
    -0.21635206,
    -0.7398428,
    -0.5364521,
    -0.0018942931,
    -0.0047628284,
    0.0010456851,
    0.003619789,
    0.0006588111,
    0.006632632,
    -0.00042718273,
    0.005446785,
    -0.008152193,
    -0.005006349,
    0.007804665,
    -0.00051090156,
    -0.010289072,
    0.0055327835,
    -0.0058037397,
    -0.005285217,
    0.18793993,
    0.09137259,
    0.0069459323,
    -0.0069796084,
    0.11196916,
    0.0555638,
    0.0042860033,
    -0.004753387,
    0.025554117,
    0.070192285,
    -0.0066909315,
    0.0056339707,
    0.9394352,
    0.48543686,
    -0.0018851925,
    0.007400766,
    0.569441,
    0.2914493,
    0.0092722215,
    0.0030306866,
    0.008444932,
    0.048375938,
    0.00912733,
    -0.008776911,
    0.015957022,
    0.04513622,
    0.25178784,
    0.013774038,
    0.00039528968,
    -0.0032484652,
    0.0067027383,
    -0.0018347087,
    0.005142831,
    0.050235763,
    0.28868157,
    0.012296692,
    0.008242068,
    -0.00043511062,
    0.034846473,
    0.045423612,
    0.04845504,
    0.019607695,
    0.010147672,
    -0.003958384,
    0.006769391,
    0.004729882,
    0.021289745,
    0.05278668,
    0.053125303,
    0.023452178,
    0.009268445,
    -0.0015745148,
    0.024052277,
    0.031595185,
    0.021740317,
    0.0019961875,
    -0.0013729164,
    0.0037118972,
    0.003461585,
    0.016654594,
    0.01538238,
    0.014824655,
    0.02915127,
    0.0064432644,
    -0.011756275,
    -0.005071998,
    1.3359479,
    0.76389295,
    0.21543837,
    0.064207666,
    0.003689209,
    0.120653495,
    0.012657661,
    -0.00079724286,
    -0.001203401,
    -0.001678803,
    0.008264789,
    0.0015326263,
    -0.006872382,
    1.4396472,
    0.32751185,
    -0.0020184517,
    0.009184379,
    0.49926668,
    0.8156254,
    0.72738254,
    0.16746674,
    0.5974157,
    0.5223532,
    0.16090465,
    0.024428608,
    0.5199784,
    0.38839272,
    0.15079738,
    0.025947062,
    0.12534767,
    0.08937483,
    0.044523016,
    0.016136438,
    0.2572355,
    0.18042246,
    0.03643798,
    -0.0012718181,
    1.2207187,
    1.2704391,
    0.28354394,
    0.057998396,
    1.173744,
    1.322583,
    0.359615,
    0.039214805,
    0.006838942,
    0.0048156017,
    -0.004148743,
    0.0021977378,
    -0.0029488825,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    -0.0038043214,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_0KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    -0.06596815,
    0.14143576,
    0.2643506,
    0.14499849,
    0.107681885,
    0.11073599,
    -0.19013828,
    -0.40654242,
    0.3318426,
    -0.16691944,
    -0.3575065,
    0.23800719,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.33601677,
    -0.041274536,
    0.0013449714,
    -0.29418692,
    -0.54222,
    0.0075244084,
    -2.7454162,
    1.2056162,
    0.74540424,
    -3.2504718,
    -2.7729948,
    0.068721116,
    0.47504744,
    -0.16477276,
    0.18019468,
    -0.13531236,
    0.14152104,
    0.032580495,
    -0.22254677,
    0.49075425,
    1.1202906,
    -0.07768215,
    -0.10285486,
    -0.28730598,
    -0.60267043,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    0.1747276,
    -0.3360676,
    0.35788158,
    1.2172985,
    -0.7322632,
    -0.5023849,
    -0.49644548,
    0.63201225,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    0.6639308,
    0.34448573,
    -0.0077813696,
    -1.4789531,
    -0.5449256,
    0.0020160126,
    0.20559156,
    -0.025478715,
    -0.0057330895,
    0.48247886,
    0.27221236,
    0.0008187201,
    0.79267675,
    1.5803065,
    -0.002397363,
    0.2934291,
    -0.9169082,
    0.00303144,
    0.18601592,
    0.47252977,
    -0.008103551,
    -0.54003847,
    -0.6874615,
    -0.009149382,
    2.5997837,
    0.21279974,
    1.0009149,
    0.00917124,
    0.5581906,
    -3.4829595,
    -0.7885469,
    0.29876935,
    1.3653431,
    0.3458327,
    0.23525056,
    0.27667275,
    0.6695998,
    0.2019845,
    0.33065692,
    -0.2599935,
    0.50598747,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.32448876,
    0.06516934,
    -0.00813673,
    -0.009886575,
    0.04560957,
    -0.2841685,
    0.00021132734,
    -1.8742533,
    -1.0128005,
    0.0011727996,
    0.07729849,
    0.14006491,
    -0.008626261,
    -0.006473,
    -1.0160459,
    -0.7020004,
    -0.0051336214,
    -0.0013411185,
    0.15417725,
    -1.3802054,
    0.25305972,
    1.4399757,
    1.8268988,
    1.968561,
    2.796725,
    1.1202828,
    -1.7660865,
    -0.804423,
    0.20100431,
    1.3501571,
    0.9508624,
    0.054124333,
    -1.1339825,
    -1.1712068,
    -2.0318532,
    -1.4227827,
    -2.0454004,
    -0.13430345,
    -1.5658052,
    -1.0156312,
    0.39389312,
    -0.0530978,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.397977,
    0.7746763,
    -0.002408173,
    0.22021821,
    1.53287,
    0.0077593178,
    0.2637508,
    0.88056475,
    -0.0054027913,
    0.3666799,
    0.14289705,
    0.0036244253,
    -0.39640427,
    -0.31697965,
    0.16356713,
    3.3073342,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_2KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    0.63688457,
    0.8092102,
    0.14794403,
    -0.1830299,
    1.3258846,
    1.467234,
    1.4837371,
    0.48740688,
    1.0896355,
    1.5113318,
    -0.0059250165,
    -0.00050385203,
    -0.00651386,
    0.2843244,
    0.55591667,
    0.52852803,
    0.27623922,
    0.4740077,
    0.4464141,
    2.9492033,
    0.40320385,
    1.7695991,
    0.44173664,
    1.2222513,
    0.036877014,
    0.98452604,
    0.773774,
    0.30237418,
    0.14621873,
    0.17849565,
    -0.6028031,
    0.025962118,
    0.046081398,
    0.040703394,
    -0.6976376,
    0.64416206,
    0.4811379,
    -0.005124028,
    -0.008343117,
    0.4679741,
    1.9713519,
    0.005951524,
    -0.0043248367,
    0.3829217,
    -0.14275706,
    -0.005560641,
    0.0036220215,
    -0.22588164,
    -0.1803203,
    -0.0055643534,
    -0.0015320918,
    -0.6173608,
    -0.0187287,
    -0.009827926,
    0.00059686694,
    -0.59013486,
    -0.21860945,
    0.0076304395,
    -0.0060374904,
    0.713864,
    0.10885523,
    0.981712,
    0.079367414,
    -0.033242166,
    -0.58594286,
    -0.15390655,
    -0.007829599,
    1.1334889,
    0.18282342,
    0.47755116,
    -0.59055734,
    -0.76633716,
    -1.146771,
    0.40465045,
    0.37649903,
    0.11561997,
    0.35738912,
    0.14016673,
    -0.24783167,
    -0.46151888,
    -0.38513398,
    0.018700648,
    -0.10111484,
    -0.5042579,
    -0.26681665,
    -0.31160656,
    -0.701031,
    -0.6025491,
    -0.634276,
    -0.89122796,
    -0.36056787,
    0.68142855,
    1.3312267,
    2.3974984,
    -0.2571536,
    -0.59597003,
    -1.2801244,
    -0.9452529,
    0.008912579,
    0.8251274,
    1.3821298,
    -0.31446126,
    0.16741441,
    0.06972653,
    0.34504834,
    0.20081185,
    0.12366547,
    0.03967559,
    -0.0022270367,
    0.002150652,
    -0.0016946243,
    0.0012913607,
    -0.004483435,
    0.008160291,
    -0.0034647067,
    -0.16787097,
    0.0016175173,
    -0.16837743,
    -0.42251644,
    -0.22831012,
    0.09927704,
    0.49389637,
    0.016726762,
    -0.46912828,
    0.23834215,
    0.7324232,
    0.091811575,
    -0.27381516,
    0.24057394,
    0.6052698,
    -0.46867993,
    -0.4550196,
    -0.0026286365,
    0.3729119,
    -0.52361006,
    -0.43141028,
    -0.03798234,
    0.45445058,
    -0.59690475,
    -0.41837838,
    0.03608831,
    0.5377845,
    -0.8731544,
    -0.4265303,
    0.07711364,
    0.6434275,
    -0.007463541,
    -0.009312019,
    0.008915393,
    -0.0005510999,
    0.0035254955,
    0.008046815,
    0.008674609,
    0.008508706,
    -0.0008124877,
    0.004095099,
    0.002457223,
    -0.0064589093,
    0.0060925093,
    0.0012618108,
    -1.6011297,
    -1.6071707,
    -1.523246,
    -1.2570158,
    -1.6962018,
    -1.9301914,
    0.00051479787,
    -0.0077517964,
    -0.0077192923,
    -0.39861903,
    -0.545,
    -0.48743135,
    -0.12044701,
    -0.3518626,
    -0.3552304,
    -1.5653286,
    -0.16806781,
    -0.78073514,
    0.036157183,
    -0.86056125,
    0.21418132,
    -0.09157304,
    -0.42589703,
    -0.47870922,
    -0.17339279,
    0.053852677,
    0.0056142667,
    -0.38209152,
    -0.19813275,
    0.085765876,
    -0.0044836677,
    -0.5115153,
    -0.5816067,
    0.0069459323,
    -0.0069796084,
    -0.8296683,
    -1.3413659,
    0.0042860033,
    -0.004753387,
    -0.36118007,
    0.03446553,
    -0.0066909315,
    0.0056339707,
    0.17649281,
    0.24164818,
    -0.0018851925,
    0.007400766,
    0.5850682,
    -0.09782576,
    0.0092722215,
    0.0030306866,
    0.28300378,
    0.11544064,
    0.00912733,
    -0.008776911,
    0.006379608,
    -0.0034764553,
    -0.0019571641,
    -0.0020065904,
    -0.0007171016,
    -0.010811812,
    -0.70522434,
    -0.00401304,
    -0.0041113687,
    -0.00031996984,
    0.009882869,
    -0.0012246752,
    0.007262071,
    1.0940332,
    -0.008976857,
    0.0011483384,
    0.0038303593,
    -0.0033149004,
    0.035311032,
    -0.592132,
    -1.6782063,
    -0.00934294,
    -0.0056089186,
    0.008402593,
    0.009316759,
    -0.0075888177,
    0.2622237,
    0.41522864,
    -0.002034571,
    0.009508491,
    0.008153329,
    0.002736837,
    0.037728224,
    0.0044684317,
    -0.8586032,
    0.008243782,
    0.0015487336,
    -0.007857392,
    0.009504598,
    0.0039236895,
    0.24685499,
    1.6583691,
    0.23133208,
    0.01980273,
    -0.12371955,
    -0.13706772,
    -0.088935964,
    -0.12295875,
    0.26147884,
    -0.00079724286,
    -0.001203401,
    -0.001678803,
    0.008264789,
    0.0015326263,
    -0.006872382,
    -0.013469045,
    0.3632553,
    -0.0020184517,
    0.2642425,
    0.10180286,
    0.005446595,
    -0.15752418,
    -0.45578977,
    0.0010403302,
    0.5024731,
    0.0058204383,
    -0.7259563,
    0.1027646,
    0.51512104,
    -0.034446605,
    -0.38336948,
    0.15471794,
    0.079198666,
    -0.016083647,
    -0.44281587,
    -0.11217563,
    -0.03441892,
    -0.40967366,
    -0.55501115,
    0.38514698,
    0.34171706,
    -0.14731283,
    -0.6462556,
    0.6855284,
    0.41667825,
    -0.14566259,
    -0.5137325,
    0.006838942,
    0.0048156017,
    -0.004148743,
    0.0021977378,
    -0.0029488825,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    -0.0038043214,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_2KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    0.3835006,
    0.21164729,
    0.5567637,
    0.14972319,
    0.008378243,
    -0.43465084,
    -0.7308303,
    -0.8912839,
    0.46212968,
    -0.43907836,
    0.26626498,
    0.5782282,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.4975553,
    0.15077943,
    0.0013449714,
    -0.4241401,
    -0.4088393,
    0.0075244084,
    -3.2364414,
    0.9161514,
    0.5318693,
    -2.230449,
    -4.504568,
    -0.487717,
    0.6291668,
    -0.73886293,
    0.26118273,
    -0.27261165,
    0.12881532,
    0.1777136,
    -0.011507088,
    0.41689792,
    1.1819894,
    -0.14281727,
    -0.12822403,
    -0.4899795,
    -0.7057814,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    -0.038640175,
    -0.48866045,
    0.18388642,
    2.1011872,
    -0.47701856,
    -0.35595262,
    -0.5488175,
    -0.12425026,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    -0.0737323,
    1.6342262,
    -0.0077813696,
    0.8013023,
    -0.2317711,
    0.0020160126,
    0.59806335,
    -0.9970204,
    -0.0057330895,
    0.07285249,
    0.6827554,
    0.0008187201,
    0.9157639,
    0.626506,
    -0.002397363,
    -0.088837735,
    0.38987082,
    0.00303144,
    0.2895544,
    -0.16646424,
    -0.008103551,
    -0.26244026,
    -0.4901274,
    -0.009149382,
    2.3455992,
    -0.7211382,
    1.9804211,
    0.00917124,
    0.5224504,
    -4.4372244,
    -0.8496559,
    0.4749193,
    1.473498,
    0.45706263,
    0.046547048,
    0.25537905,
    0.77724373,
    0.07417753,
    0.39354962,
    -0.6581425,
    0.71233255,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.5941038,
    -0.046199616,
    -0.00813673,
    -0.009886575,
    0.1387866,
    -0.22598192,
    0.00021132734,
    -2.1441894,
    -1.8108326,
    0.0011727996,
    -0.16316642,
    0.30345392,
    -0.008626261,
    -0.006473,
    -1.3621367,
    -0.119089246,
    -0.0051336214,
    -0.0013411185,
    0.010755843,
    -1.2026048,
    0.38548076,
    1.398525,
    1.9160999,
    2.1099184,
    2.0770369,
    1.4328448,
    -1.7100422,
    -0.6515236,
    0.332164,
    0.62545145,
    0.0065994086,
    -0.005360393,
    -0.9618395,
    -1.1140851,
    -1.7814239,
    -0.5971449,
    -1.9552374,
    -0.23968147,
    -1.2191556,
    -1.1778564,
    0.42183256,
    -0.11105158,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.4999874,
    0.31543893,
    -0.002408173,
    -0.93778354,
    1.1441715,
    0.0077593178,
    0.79672486,
    0.83366203,
    -0.0054027913,
    0.49028045,
    0.045144238,
    0.0036244253,
    -0.30533037,
    -0.3648391,
    0.09491095,
    3.3036993,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_0KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    1.2554771,
    1.8330545,
    1.2882334,
    1.5101234,
    0.9288189,
    0.9241529,
    0.9657012,
    1.4963622,
    1.5605108,
    1.499571,
    1.5010743,
    1.477713,
    1.4346055,
    0.4857375,
    0.8857318,
    0.92724246,
    1.3053999,
    1.3524942,
    1.5839977,
    0.06147235,
    0.7754126,
    0.9086172,
    1.4693248,
    1.6986972,
    1.983293,
    0.44343817,
    0.5218939,
    0.5138488,
    0.52068156,
    0.5752926,
    0.6289773,
    0.40397722,
    0.542702,
    0.5261415,
    0.59790844,
    0.60274786,
    0.6032669,
    2.246257,
    0.5654462,
    1.5902185,
    0.3735414,
    1.3794768,
    0.17324178,
    0.7337629,
    1.1321695,
    0.82208204,
    0.10664509,
    0.025887597,
    -0.62204474,
    0.6305731,
    0.07251092,
    -0.13722157,
    -0.5730457,
    0.64568543,
    0.8210187,
    0.8979295,
    0.60337824,
    0.5513834,
    0.83235425,
    1.9734112,
    1.5084045,
    0.5528674,
    0.09967542,
    -0.65956503,
    0.24337529,
    -0.2899054,
    -0.3066364,
    -0.47012082,
    -0.19587152,
    -0.4111314,
    0.19836728,
    0.25645232,
    0.106945045,
    -0.38974535,
    -0.4407106,
    -0.69735575,
    -0.49720353,
    0.25084984,
    0.44054678,
    0.6603905,
    0.73296297,
    0.82209694,
    1.0733782,
    0.44481477,
    -0.037587836,
    -0.31703666,
    -0.73724836,
    -0.5500584,
    -0.44263765,
    -0.36635914,
    0.08466809,
    0.97551316,
    0.8256567,
    0.7129384,
    0.5818474,
    0.42360312,
    0.310831,
    0.119595505,
    -0.2601552,
    -0.29562694,
    -0.41598082,
    -0.5272777,
    -0.695636,
    -0.8365123,
    -0.9981611,
    0.21975058,
    0.36639896,
    0.44481266,
    0.5281608,
    0.6587426,
    0.75199217,
    0.84903437,
    -1.1564032,
    -1.0553768,
    -0.8981505,
    -0.8235962,
    -0.7491094,
    -0.6192497,
    -0.49995747,
    -0.2444975,
    -0.14026187,
    0.012585225,
    0.36142227,
    0.20978548,
    0.18355641,
    0.008330052,
    2.119537,
    0.9430831,
    0.067954265,
    0.17792001,
    0.003968242,
    -0.10927946,
    0.018298749,
    -0.18617454,
    -0.14590918,
    0.0070885587,
    -0.7722555,
    -0.32639924,
    -0.018396266,
    0.3505474,
    0.7829814,
    0.058580894,
    -0.35943565,
    0.085007556,
    0.6481605,
    1.0658771,
    0.010438652,
    -0.4674376,
    0.09524328,
    0.6691259,
    1.0289109,
    0.014168698,
    -0.64578956,
    -0.07396287,
    0.6053852,
    1.038549,
    -0.5825687,
    -0.69346905,
    -0.3736717,
    -0.12011262,
    0.4104058,
    -0.77574944,
    -0.8058056,
    -0.35539934,
    0.1679473,
    0.7677945,
    -0.7634589,
    -0.75459415,
    -0.26952082,
    0.26806447,
    0.80527735,
    -0.3133063,
    -0.35315147,
    -0.14940217,
    0.22847354,
    0.5045286,
    -0.63859034,
    -0.72787684,
    -0.22156206,
    0.39112896,
    0.9193361,
    -0.7746985,
    -0.7279949,
    -0.20093992,
    0.41040626,
    1.0966241,
    -0.30751002,
    -0.06546846,
    0.14415929,
    -1.0234641,
    -0.43137565,
    -0.43307924,
    -0.3941753,
    -0.13713002,
    -0.26061273,
    -0.0075576873,
    -0.00044307671,
    0.0042860033,
    -0.004753387,
    0.009866308,
    0.0054509398,
    -0.0066909315,
    0.0056339707,
    -1.5681217,
    -1.4759566,
    -1.5045238,
    -1.5264447,
    -1.5384085,
    -1.4189044,
    -0.3966559,
    -0.65966725,
    -0.8374825,
    -1.1855195,
    -1.3131253,
    -1.3479115,
    -0.29581365,
    -0.56223255,
    -0.55639535,
    -1.4151858,
    -1.6453205,
    -1.9353154,
    -0.49605268,
    -0.65733695,
    -0.66462725,
    -0.61359787,
    -0.6308151,
    -0.6575005,
    -0.40295172,
    -0.49021438,
    -0.44740862,
    -0.5835876,
    -0.5784465,
    -0.57430965,
    -2.2252567,
    -0.82768077,
    -1.5331781,
    -0.5277819,
    -1.2962627,
    -0.20991342,
    -0.65910727,
    -0.944999,
    -1.1900022,
    -0.27111363,
    0.045108955,
    0.49055913,
    -0.93303084,
    -0.192297,
    0.23569612,
    0.6288955,
    -0.60746974,
    -0.58547556,
    -0.5513159,
    -0.9295122,
    -0.44980332,
    -0.9071482,
    -1.878978,
    -0.8266034,
    -0.39011693,
    -0.037154984,
    -0.5015375,
    -0.10877104,
    0.32710567,
    0.21796684,
    0.17436819,
    0.23567663,
    0.39595017,
    0.018235477,
    -0.12167908,
    -0.088921376,
    0.35850635,
    0.45230478,
    0.99484706,
    0.286579,
    0.08508567,
    -0.37108365,
    -0.44468543,
    -0.5538767,
    -0.7325495,
    -0.33349678,
    -0.034461133,
    0.43971878,
    1.061968,
    0.8365419,
    0.73437047,
    0.6555482,
    0.43636748,
    0.25759313,
    -0.98720896,
    -0.831257,
    -0.6864026,
    -0.52505064,
    -0.40599114,
    -0.28722018,
    -0.26063412,
    0.12193143,
    0.31209856,
    0.4248673,
    0.5792372,
    0.7019733,
    0.8350323,
    0.98259956,
    -0.5085319,
    -0.6192808,
    -0.74591136,
    -0.835895,
    -0.89426166,
    -1.0664864,
    -1.1454445,
    0.85570616,
    0.7477643,
    0.6523796,
    0.52658355,
    0.45865732,
    0.37878147,
    0.2100468,
    0.27219972,
    0.16501899,
    -0.014465421,
    -0.20516188,
    -0.074581586,
    -0.117640994,
    -0.028787678,
    -1.1951506,
    -0.60432625,
    -0.056610946,
    -0.13195488,
    -0.045719925,
    0.20754427,
    -0.020371536,
    0.19203624,
    0.146893,
    -0.0027803294,
    0.6634855,
    0.40109518,
    0.06843734,
    -0.3265541,
    -0.7611449,
    0.05308361,
    0.44294533,
    0.07587282,
    -0.4920742,
    -1.0263021,
    0.027154785,
    0.5256278,
    -0.07730575,
    -0.63553655,
    -1.026916,
    -0.0033044773,
    0.63713706,
    0.091447756,
    -0.5779872,
    -1.0085547,
    0.5347778,
    0.6857037,
    0.31468573,
    0.031886525,
    -0.31473756,
    0.69729555,
    0.80432755,
    0.2921784,
    -0.1754939,
    -0.7281255,
    0.7322975,
    0.70348644,
    0.22617197,
    -0.22250713,
    -0.8031559,
    0.20076728,
    0.37382314,
    0.16507967,
    -0.30934793,
    -0.6727062,
    0.61605793,
    0.7221349,
    0.23503774,
    -0.37684247,
    -0.8833339,
    0.75575894,
    0.7599821,
    0.18750155,
    -0.45008537,
    -0.9943949,
    0.22267894,
    0.32617608,
    0.099547565,
    0.5946227,
    0.33964166,
    0.42342126,
    0.35042733,
    0.14774202,
    0.3257598,
    -0.004604163,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_0KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    -0.21254763,
    0.23103847,
    -0.033314772,
    0.28951204,
    0.08258201,
    -0.20170505,
    -0.083164066,
    0.039200466,
    -0.00088396505,
    0.3021171,
    0.11830643,
    -0.081436746,
    -0.40565103,
    -0.37145954,
    -0.18355277,
    0.06397571,
    0.20453936,
    0.55752325,
    -0.12067064,
    -0.30509105,
    -0.22406316,
    0.04068911,
    0.06334039,
    0.038877312,
    -2.746777,
    -0.87377214,
    -0.65470624,
    0.73748547,
    1.1899408,
    2.4166262,
    -0.82226,
    -1.3962785,
    -1.4452674,
    0.5082308,
    1.2789531,
    2.7618878,
    -0.3863811,
    0.031400807,
    -0.102757595,
    -0.38964626,
    -0.14711878,
    -0.31159613,
    -2.9462645,
    1.2216566,
    0.49116233,
    -4.1368756,
    -3.0489886,
    0.14062,
    0.4538722,
    -0.20252825,
    0.1369588,
    -0.058979962,
    0.08831377,
    0.02167715,
    -0.26413515,
    0.028735323,
    0.47112805,
    0.67481583,
    -0.037136614,
    -0.023578765,
    0.06294667,
    -0.05659834,
    -1.2630483,
    0.25168982,
    0.096158154,
    0.43390813,
    1.3263559,
    -0.38228187,
    0.30753988,
    -0.17709245,
    0.021742836,
    0.3967858,
    0.37994313,
    -0.5040257,
    -0.60063547,
    -0.5784962,
    -0.09444315,
    0.42124468,
    -0.95363337,
    -0.8204556,
    -0.515455,
    0.36224493,
    3.6014647,
    0.6930546,
    -0.022836408,
    1.229127,
    -0.20067202,
    -0.88029164,
    -1.945374,
    0.27076137,
    0.24485452,
    -0.2529798,
    0.3806981,
    -0.1388048,
    -0.43375793,
    1.5184788,
    0.4213168,
    1.0030801,
    -0.12647864,
    -0.28902504,
    -0.68267906,
    0.3738028,
    0.69471484,
    1.1517682,
    -0.16151088,
    -0.5155371,
    -0.17652579,
    2.4710944,
    0.30520877,
    2.0582628,
    1.0057538,
    0.5753131,
    -4.1801777,
    -0.5127082,
    0.45404467,
    1.4079078,
    0.3417027,
    0.39399534,
    0.1540643,
    0.2801745,
    0.3059642,
    0.2046346,
    -0.05043553,
    0.38525426,
    0.006237678,
    0.3969141,
    0.18871525,
    -1.5612092,
    -0.39385808,
    0.7173354,
    -0.24273492,
    -0.060208935,
    0.20501433,
    0.06431221,
    0.007810466,
    -0.006842167,
    0.25922537,
    0.22373736,
    1.4958718,
    -2.2605436,
    -1.6751494,
    -1.7748834,
    -0.15428533,
    -0.13730817,
    0.3625118,
    0.7318449,
    -2.1013966,
    -1.6390495,
    -0.58728755,
    0.705842,
    0.05825597,
    -1.3842419,
    0.5513746,
    1.3413002,
    1.6110371,
    1.1969258,
    1.6104766,
    0.26784024,
    -0.82374805,
    -0.27678168,
    0.63337976,
    1.37859,
    1.5559744,
    -0.2600439,
    -1.5502057,
    -0.7311096,
    -0.89582264,
    -0.8938125,
    -1.1783751,
    -0.29525974,
    -1.3265866,
    -2.8699765,
    0.3670057,
    -0.02602606,
    -0.094160676,
    0.038038492,
    0.18733682,
    0.1730221,
    0.4983536,
    -0.6600161,
    0.07679693,
    1.6442226,
    0.74923706,
    1.2906911,
    -0.0030353356,
    1.5110451,
    1.8540987,
    0.46657535,
    1.0854816,
    0.6397842,
    0.38965192,
    0.4017657,
    0.15735355,
    0.2403061,
    0.20836167,
    0.8231178,
    3.0737865,
    -0.0031571696,
    -0.0045039677,
    -0.0037830565,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_2KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    0.86445826,
    0.999722,
    0.2367827,
    0.35957697,
    -0.086913824,
    -0.21577114,
    0.05513576,
    1.3543499,
    1.3272213,
    1.4290985,
    1.3631815,
    1.4204603,
    1.2607646,
    0.43569866,
    0.6191184,
    0.5909873,
    0.8127909,
    0.92993486,
    0.876903,
    0.5340011,
    0.672191,
    0.78244025,
    1.3152353,
    1.5967572,
    1.682032,
    0.4780188,
    0.5466668,
    0.6058518,
    0.5941329,
    0.6387578,
    0.6350105,
    0.35127178,
    0.43006277,
    0.4254917,
    0.52124584,
    0.54929304,
    0.48244154,
    2.9041605,
    0.6847204,
    1.7241938,
    0.6342742,
    1.345564,
    0.3075474,
    0.7541778,
    1.1465825,
    0.7435214,
    0.054727193,
    -0.16960953,
    -0.35951835,
    0.41377148,
    0.033775304,
    -0.124724515,
    -0.377432,
    0.6302522,
    0.61928415,
    1.2354318,
    0.43339118,
    0.30257782,
    0.80834067,
    1.2669208,
    1.3859662,
    0.24606325,
    -0.13542543,
    0.44294915,
    0.026879115,
    -0.24906614,
    -0.14092906,
    -0.5403333,
    -0.16286579,
    -0.40463364,
    0.0045463173,
    0.42131203,
    0.07155678,
    -0.46113065,
    -0.37717152,
    -0.39577857,
    -0.44341567,
    -0.07062424,
    -0.21823695,
    -0.03803648,
    0.30413914,
    0.5060042,
    0.5290606,
    0.5922592,
    -0.009576326,
    -0.083194196,
    -0.2900746,
    -0.2974787,
    0.03255729,
    0.15988986,
    0.20259993,
    0.8637155,
    0.6693951,
    0.6672981,
    0.2308411,
    -0.0620653,
    -0.4315758,
    -0.8576069,
    0.17704959,
    0.25737762,
    0.14166898,
    0.08670299,
    -0.4031092,
    -0.66879106,
    -1.1239113,
    -0.3212209,
    -0.053182974,
    0.08877151,
    0.24793682,
    0.48797196,
    0.57692075,
    0.81621397,
    -1.1343298,
    -0.78676164,
    -0.52463746,
    -0.37747225,
    -0.18032935,
    0.026610048,
    0.15459993,
    -0.27774054,
    -0.13388889,
    0.01911463,
    0.25557128,
    0.081277154,
    0.12035718,
    0.021267064,
    2.5228596,
    0.84257364,
    0.076946534,
    0.16159947,
    -0.004604337,
    -0.17371202,
    0.01597743,
    -0.16027884,
    -0.13818808,
    0.0070885587,
    -0.71423703,
    -0.37036088,
    -0.108669356,
    0.28375882,
    0.71120805,
    -0.06675332,
    -0.5651791,
    -0.080243774,
    0.52475715,
    0.99758846,
    -0.037897006,
    -0.5871267,
    -0.031584144,
    0.53557175,
    0.9746584,
    -0.027275935,
    -0.5817393,
    -0.112701856,
    0.56788695,
    1.0103536,
    -0.7138025,
    -0.75768673,
    -0.34769732,
    0.028727438,
    0.47912014,
    -0.7563966,
    -0.8025753,
    -0.32872555,
    0.17884612,
    0.7323455,
    -0.70479935,
    -0.7340289,
    -0.28646743,
    0.21505094,
    0.7062329,
    -0.22844045,
    -0.4071688,
    -0.13537382,
    0.26608422,
    0.6324109,
    -0.65437394,
    -0.66248393,
    -0.20121746,
    0.36704153,
    0.9018524,
    -0.7225852,
    -0.71352357,
    -0.16487327,
    0.41257843,
    0.9485852,
    -0.37530935,
    -0.44469306,
    -0.16505201,
    -0.6210258,
    -0.26971564,
    -0.2509415,
    -0.16425762,
    0.042578407,
    -0.3580551,
    -0.0075576873,
    -0.00044307671,
    0.0042860033,
    -0.004753387,
    0.009866308,
    0.0054509398,
    -0.0066909315,
    0.0056339707,
    -1.4534945,
    -1.5025241,
    -1.4448618,
    -1.4372846,
    -1.4272788,
    -1.3704883,
    -0.7478303,
    -1.056304,
    -1.0260441,
    -1.3614838,
    -1.4274682,
    -1.4879279,
    -0.11333623,
    -0.6123862,
    -0.5889469,
    -1.2701124,
    -1.4770632,
    -1.7623811,
    -0.4239569,
    -0.61168134,
    -0.6918211,
    -0.5757062,
    -0.64279026,
    -0.5908121,
    -0.31127104,
    -0.41720536,
    -0.4396214,
    -0.45986545,
    -0.49851072,
    -0.47212178,
    -2.4102895,
    -0.59177077,
    -1.8429761,
    -0.2589758,
    -1.1471968,
    0.07742646,
    -0.5693936,
    -0.9166277,
    -0.95271754,
    -0.14289567,
    0.20365515,
    -0.021348536,
    -0.7315803,
    -0.27027464,
    0.26425934,
    0.29948553,
    -0.53824776,
    -0.69266444,
    -1.0360868,
    -0.79686487,
    -0.4250996,
    -0.6164127,
    -1.2600265,
    -0.83373934,
    -0.36535138,
    0.05760471,
    -0.20736451,
    0.05079229,
    0.29054046,
    0.24391153,
    0.54897135,
    0.06575382,
    0.41019803,
    -0.08328175,
    -0.15330291,
    0.07261794,
    0.26076365,
    0.37808815,
    0.49470133,
    0.28627348,
    -0.00068451837,
    -0.0031730435,
    0.0038830638,
    -0.0005412027,
    0.0021620188,
    -0.0063207573,
    -0.299398,
    -0.005422716,
    -0.0038055968,
    0.0065068007,
    -0.0063391924,
    0.0013449714,
    0.0047344384,
    1.6052076,
    0.0075244084,
    -0.0035206852,
    -0.0023869283,
    0.0030146388,
    -0.0084605105,
    -0.7433384,
    -0.7397356,
    -0.0068556285,
    -0.0071793436,
    0.0013493929,
    -0.0005186589,
    0.032670464,
    0.08949453,
    0.97881323,
    -0.004278057,
    0.00923855,
    0.023288138,
    0.056332834,
    -0.20518811,
    -1.1977626,
    -1.5175717,
    0.007966432,
    -0.0056965607,
    0.025828589,
    0.1559519,
    0.2882289,
    0.99164873,
    0.3895762,
    0.23288901,
    0.1655726,
    0.017788284,
    -0.21549554,
    -0.04473145,
    -0.14814155,
    0.0688694,
    -0.8669902,
    -0.42295837,
    -0.04609202,
    -0.11985678,
    -0.0066894093,
    0.081920065,
    -0.025483105,
    0.23323946,
    0.20574169,
    -0.0057330895,
    0.605013,
    0.31891644,
    0.0039460952,
    -0.35153607,
    -0.74284923,
    -0.07225091,
    0.3113529,
    -0.0490199,
    -0.43604556,
    -0.88243395,
    -0.02118141,
    0.42206162,
    -0.06321986,
    -0.54623234,
    -0.9152913,
    -0.044749673,
    0.5349786,
    0.094700865,
    -0.42986307,
    -0.9944285,
    0.3181885,
    0.46618095,
    0.20476323,
    -0.0070806737,
    -0.5460802,
    0.5513706,
    0.62718666,
    0.20143187,
    -0.21537101,
    -0.6422224,
    0.6255947,
    0.59337026,
    0.20169808,
    -0.22450645,
    -0.81917876,
    0.32770753,
    0.3775065,
    0.13902418,
    -0.1653504,
    -0.35256833,
    0.58420086,
    0.5808965,
    0.15860385,
    -0.33920777,
    -0.7963085,
    0.6958168,
    0.65265304,
    0.18102527,
    -0.35808888,
    -0.8900418,
    0.16385394,
    0.110640265,
    0.028186105,
    0.4895745,
    0.055817414,
    0.29712218,
    0.06479789,
    -0.012533987,
    0.1898175,
    -0.004604163,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_2KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    0.13053814,
    0.2594758,
    0.24701957,
    0.32714072,
    0.2772792,
    -0.13828218,
    -0.10215987,
    0.098732464,
    0.019896906,
    -0.056102987,
    -0.07790267,
    -0.42510068,
    -0.30549508,
    -0.45333365,
    -0.52566814,
    -0.29246622,
    -0.28865135,
    -0.26258516,
    0.11082738,
    0.17156202,
    -0.038298223,
    0.46970895,
    0.49330792,
    0.45982635,
    -1.5306015,
    -0.70623446,
    -1.6051459,
    1.1686573,
    1.569235,
    2.0058358,
    -2.5606222,
    -1.2750763,
    -2.0411723,
    0.8546261,
    1.8828146,
    2.5776637,
    -0.54405427,
    0.17359827,
    -0.07840562,
    -0.24876921,
    -0.18755311,
    -0.26911703,
    -3.0770643,
    1.1082592,
    0.26119882,
    -2.5300553,
    -2.871422,
    0.03775389,
    0.4238567,
    -0.33088768,
    0.10647789,
    -0.13209525,
    0.08560816,
    0.0468911,
    -0.21627295,
    0.05250266,
    0.38945135,
    0.81790227,
    -0.23717421,
    -0.22604689,
    -0.19218688,
    -0.20800717,
    -0.033787068,
    0.122389324,
    -0.10022763,
    -0.073142864,
    0.6767682,
    -0.04690488,
    0.33146432,
    -0.22365022,
    -0.0036192038,
    0.46967515,
    0.51455325,
    -0.2567931,
    -0.40734252,
    -0.42442977,
    -0.001470779,
    0.22078364,
    -1.2574711,
    -0.85755,
    -0.74906814,
    -0.17770536,
    3.6172705,
    0.54112595,
    0.6423261,
    0.9667451,
    0.199188,
    -1.3389384,
    0.16624917,
    0.19690222,
    -0.4323959,
    -0.23050337,
    0.34784153,
    0.61946857,
    -0.7219571,
    1.2463146,
    0.5738733,
    2.0701928,
    0.049495548,
    -0.42689493,
    -1.0372397,
    0.26199716,
    0.7308859,
    1.6175814,
    -0.0076032556,
    -0.68225515,
    0.12284207,
    2.349499,
    0.1210995,
    2.3559947,
    1.0110165,
    0.4826661,
    -4.137684,
    -0.87189615,
    0.58148867,
    1.5087106,
    0.51515806,
    0.27801824,
    0.1363943,
    0.39705855,
    0.3311712,
    0.13834442,
    -0.009231192,
    0.37948412,
    0.013899716,
    0.34986228,
    0.20538929,
    -1.3363253,
    -0.6954224,
    -0.26191995,
    -0.23036456,
    -0.17417376,
    0.21034743,
    0.08639803,
    0.009099964,
    0.0013535284,
    0.37892112,
    0.085819654,
    1.4048743,
    -2.3133554,
    -1.2493757,
    -1.597994,
    -0.20851141,
    -0.025360083,
    0.2432856,
    0.7032871,
    -1.9057463,
    -1.1427703,
    -0.49652052,
    0.84754634,
    0.08384458,
    -1.2245532,
    0.5221889,
    1.2940357,
    1.6118815,
    1.3088297,
    1.4081663,
    -0.2697331,
    -0.76520354,
    -0.34188744,
    0.6127755,
    1.3039353,
    1.4138254,
    0.12542252,
    -1.4124713,
    -0.9411064,
    -0.9240627,
    -0.92811567,
    -1.1624233,
    -0.3372181,
    -1.4078445,
    -2.251844,
    0.36175016,
    -0.023277655,
    -0.08955618,
    0.0533145,
    0.14049543,
    -0.019719895,
    -0.007010526,
    -0.096855216,
    -0.22378309,
    1.7177029,
    0.7570125,
    1.2928087,
    0.07078977,
    1.540554,
    1.9195119,
    0.41963235,
    0.9632119,
    0.60895467,
    0.32042414,
    0.36884412,
    0.16893406,
    0.3075245,
    -0.011423582,
    0.7850744,
    3.0451703,
    0.0,
    0.0,
    0.0,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_0KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.6373219,
    1.3864409,
    0.84314656,
    0.8683178,
    0.42943323,
    0.28020516,
    0.1305663,
    1.5920737,
    1.5728997,
    1.6127349,
    1.661714,
    1.6905304,
    1.657393,
    0.6727177,
    0.88807636,
    0.92049336,
    1.119492,
    1.1580694,
    1.2497429,
    0.06542271,
    0.76281404,
    0.8910402,
    1.1267577,
    1.4314983,
    1.694121,
    0.35812408,
    0.45413762,
    0.46491364,
    0.50168955,
    0.5551683,
    0.5783099,
    0.3784365,
    0.4864291,
    0.49711195,
    0.5597729,
    0.6019067,
    0.6165068,
    2.6039367,
    0.5914403,
    1.7508605,
    0.31633404,
    1.2781919,
    0.08639984,
    0.5205129,
    1.2113705,
    0.972212,
    0.11356989,
    -0.10517545,
    -0.59231853,
    0.6012883,
    0.13230701,
    -0.14884011,
    -0.7872952,
    0.6040543,
    0.7597331,
    0.22635432,
    0.6890918,
    0.39138713,
    0.51261747,
    1.5235842,
    0.7490097,
    0.5388323,
    -0.0638961,
    0.092558466,
    0.065981515,
    -0.28351152,
    -0.13724041,
    -0.23611923,
    -0.10415069,
    -0.34600234,
    0.023855923,
    0.21408483,
    0.0072940653,
    -0.29460853,
    -0.3303997,
    -1.373576,
    -0.3910538,
    -0.0417496,
    0.3243989,
    0.4619829,
    0.51702404,
    0.60871285,
    0.9336405,
    0.63195497,
    -0.01989076,
    -0.2760863,
    -0.76596326,
    -0.59717995,
    -0.49895376,
    -0.43180314,
    -0.03354854,
    0.7919796,
    0.7056614,
    0.5768462,
    0.51718044,
    0.40270522,
    0.3252811,
    0.26259494,
    -0.3525764,
    -0.2309172,
    -0.3498482,
    -0.4908928,
    -0.558583,
    -0.66615283,
    -0.75931406,
    0.49635953,
    0.5080178,
    0.5136844,
    0.4765218,
    0.4355764,
    0.4311247,
    0.40874818,
    -0.6337796,
    -0.5965358,
    -0.5826912,
    -0.55288255,
    -0.60992885,
    -0.6448708,
    -0.6790077,
    -0.23589846,
    -0.2011019,
    0.020727169,
    0.27419484,
    0.09349695,
    0.19082148,
    0.058716275,
    1.7501111,
    0.772923,
    0.036446113,
    0.12588614,
    0.065118596,
    -0.15894097,
    0.03264225,
    -0.1573304,
    -0.12866388,
    0.0070885587,
    -0.35441566,
    -0.20869204,
    -0.13588266,
    -0.021784088,
    0.20283562,
    0.45897564,
    0.043441124,
    -0.2858824,
    -0.09563836,
    0.16833499,
    0.5715169,
    0.8594963,
    0.017133731,
    -0.23332669,
    0.0015541983,
    0.2324776,
    0.64253896,
    0.81880516,
    -0.019171257,
    -0.31503114,
    -0.023331942,
    0.26674515,
    0.62188435,
    0.7931243,
    -0.4997966,
    -0.5393132,
    -0.40493247,
    -0.26757902,
    -0.0430161,
    0.19227937,
    -0.6549263,
    -0.6996953,
    -0.4835896,
    -0.21184774,
    -0.020890081,
    0.30762595,
    -0.6500319,
    -0.6582902,
    -0.41112387,
    -0.13213132,
    0.14394642,
    0.4648019,
    -0.10742647,
    -0.22488762,
    -0.2023334,
    -0.06314804,
    0.2470596,
    0.55371386,
    -0.42940754,
    -0.4184384,
    -0.21350749,
    0.040305298,
    0.41561162,
    0.7795564,
    -0.59269863,
    -0.5277325,
    -0.2944246,
    0.029501885,
    0.42508098,
    0.7418087,
    -0.5541946,
    -0.14467986,
    -0.13365589,
    -0.5888179,
    -0.7940725,
    -0.34886625,
    -0.4213441,
    -0.22368422,
    -0.111561574,
    -0.0018851925,
    0.007400766,
    -0.000116079114,
    -0.009369239,
    0.0092722215,
    0.0030306866,
    -0.00916178,
    -0.0003501959,
    0.00912733,
    -0.008776911,
    -1.6399057,
    -1.6239073,
    -1.603726,
    -1.6264935,
    -1.6700885,
    -1.6976966,
    -0.43313056,
    -0.5140911,
    -0.73939943,
    -0.8189992,
    -0.98383063,
    -1.1662931,
    -0.2847943,
    -0.55004853,
    -0.6500265,
    -1.0397531,
    -1.3061007,
    -1.7415497,
    -0.44614133,
    -0.5011743,
    -0.55458355,
    -0.5284096,
    -0.6399497,
    -0.6469265,
    -0.43245396,
    -0.45174462,
    -0.43739069,
    -0.5619276,
    -0.5713791,
    -0.585722,
    -2.7885215,
    -0.9511747,
    -1.7675856,
    -0.5620167,
    -1.5098948,
    -0.13960458,
    -0.7056546,
    -1.311151,
    -1.331956,
    -0.20008478,
    0.093050085,
    0.54383516,
    -0.823977,
    -0.2604679,
    0.05563053,
    0.8117028,
    -0.5437779,
    -0.7916164,
    -1.165121,
    -0.5584386,
    -0.33038592,
    -0.36006436,
    -0.8448511,
    -0.7625756,
    -0.315808,
    0.055329975,
    -0.10208945,
    0.06782977,
    0.35461307,
    0.19475259,
    0.46344203,
    0.08431981,
    0.3224412,
    -0.015502711,
    0.038514987,
    0.054219883,
    0.317932,
    0.5986028,
    0.62425214,
    0.41171184,
    -0.029005632,
    -0.4292914,
    -0.49736053,
    -0.6040105,
    -0.7618782,
    -0.2825652,
    -0.009750161,
    0.6318104,
    0.9237248,
    0.60979503,
    0.5175905,
    0.45627797,
    0.3132129,
    -0.04147817,
    -0.7463602,
    -0.6559947,
    -0.5553824,
    -0.4842845,
    -0.34495145,
    -0.22618784,
    -0.34854588,
    0.26883727,
    0.34020332,
    0.4114481,
    0.5122146,
    0.56407636,
    0.7017069,
    0.8051947,
    -0.67565495,
    -0.6571192,
    -0.61305046,
    -0.5696279,
    -0.583833,
    -0.59481156,
    -0.6194119,
    0.41343573,
    0.4409752,
    0.43184188,
    0.48378217,
    0.52980936,
    0.5051962,
    0.49608496,
    0.2870766,
    0.22704944,
    0.005187825,
    -0.20471814,
    -0.08987172,
    -0.17102332,
    -0.035109848,
    -1.6062374,
    -0.5945281,
    -0.047773052,
    -0.12030285,
    -0.04158735,
    0.115063936,
    -0.03528272,
    0.16093701,
    0.13477227,
    -0.008103551,
    0.25056294,
    0.24300878,
    0.15548691,
    -0.024975,
    -0.24188584,
    -0.4580159,
    0.055090785,
    0.33687684,
    0.16005003,
    -0.11574098,
    -0.41857484,
    -0.73893857,
    0.016404327,
    0.27916303,
    0.066857845,
    -0.16116877,
    -0.5379352,
    -0.70391685,
    -0.008704344,
    0.34109643,
    0.10519987,
    -0.15748797,
    -0.5306717,
    -0.8259401,
    0.3362737,
    0.33456457,
    0.27183512,
    0.069450594,
    -0.17701335,
    -0.26313865,
    0.5079714,
    0.5451476,
    0.352383,
    0.082849406,
    -0.12095123,
    -0.2667488,
    0.5351944,
    0.5727228,
    0.36244148,
    0.10447471,
    -0.1678951,
    -0.4964483,
    0.18217486,
    0.2689081,
    0.21262147,
    0.07729505,
    -0.19925036,
    -0.48633468,
    0.3518719,
    0.40257272,
    0.19677936,
    -0.0770847,
    -0.39752546,
    -0.67213017,
    0.49180418,
    0.5129578,
    0.24431604,
    -0.07021308,
    -0.43985778,
    -0.6822881,
    0.21743886,
    0.14950526,
    0.08108977,
    0.42594948,
    0.054490715,
    0.38876283,
    0.36005226,
    -0.058040768,
    0.24346685,
    -0.0011674287,
    -3.0069612e-5,
    -0.0075867055,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_0KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.071415216,
    0.12442188,
    -0.09566238,
    0.025814263,
    0.39882815,
    0.16391489,
    -0.008581701,
    -0.13815464,
    -0.13051334,
    0.02532715,
    0.32889652,
    0.20524831,
    -0.49096164,
    -0.30895254,
    -0.23303136,
    0.23083706,
    0.2964616,
    0.24874644,
    -0.2457537,
    -0.20580663,
    -0.20578788,
    0.22220248,
    0.24823901,
    0.27056095,
    -1.7412964,
    -1.2658727,
    -0.9884221,
    0.21221639,
    0.76972306,
    2.9932423,
    -0.8941595,
    -1.4919809,
    -0.6434117,
    0.1866445,
    0.6302275,
    3.7471368,
    -0.19908637,
    -0.05053481,
    -0.22026536,
    -0.20168278,
    -0.06375163,
    -0.34524786,
    -2.9306319,
    1.2972493,
    0.24407394,
    -3.5354817,
    -2.9933457,
    -0.10331253,
    0.47185874,
    -0.14110662,
    0.10932957,
    0.0013340656,
    0.07475349,
    -0.016720613,
    -0.23927939,
    -0.011462316,
    0.34377918,
    0.72500736,
    0.85285324,
    -0.110500894,
    -0.105389334,
    -0.017042588,
    0.10457068,
    0.0042217867,
    -0.21249798,
    -0.085640766,
    -0.45459425,
    -0.16079083,
    0.55052006,
    2.0902095,
    -0.37665167,
    0.27560315,
    -0.059153534,
    0.035410654,
    0.26979086,
    0.5431667,
    0.5761751,
    -0.40052012,
    -0.44486472,
    -0.42993188,
    -0.155777,
    0.3429057,
    0.74014395,
    -0.7196886,
    -0.66130596,
    -0.5823512,
    -0.061252877,
    1.1902641,
    2.376007,
    0.48015076,
    -0.05263098,
    0.55019283,
    0.35582376,
    -0.3000633,
    -0.9577861,
    0.37041304,
    0.1807514,
    -0.058853548,
    0.19539088,
    0.03101509,
    -1.0235001,
    1.6822823,
    0.46977645,
    0.50950366,
    -0.1764842,
    -0.2133276,
    -1.0270724,
    0.4235578,
    0.47018492,
    0.59907496,
    -0.095802486,
    -0.2432442,
    -0.01910542,
    2.5890062,
    0.13449658,
    2.3261929,
    0.96748704,
    0.44940996,
    -4.1517406,
    -1.059962,
    0.81751895,
    1.4057382,
    0.43485394,
    0.52264935,
    0.0902257,
    0.27415887,
    0.29622847,
    0.18442348,
    -0.011864232,
    0.33198798,
    0.008446357,
    0.29941043,
    0.24493904,
    -1.3369043,
    0.41626275,
    0.329823,
    -0.10362355,
    0.111990936,
    0.22666475,
    0.06236524,
    0.0052082036,
    -0.0012640925,
    0.34226802,
    -0.037712023,
    1.718424,
    -2.2861829,
    -1.5476025,
    -1.518054,
    -0.16363169,
    0.14955013,
    0.6014917,
    1.1120517,
    -1.9437062,
    -1.5143054,
    -0.46494117,
    0.6082318,
    0.21189173,
    -1.3022004,
    0.3113392,
    1.2015941,
    1.7875376,
    1.4595233,
    1.7871752,
    0.90693253,
    -0.98388606,
    -0.55907655,
    0.42635015,
    1.2506536,
    1.9478662,
    0.16841666,
    -1.632099,
    -0.78296155,
    -1.2520697,
    -1.1554351,
    -1.4457918,
    -0.38163397,
    -1.3265272,
    -2.6471865,
    0.33752015,
    -0.024949715,
    -0.024228316,
    -0.09096827,
    0.036369875,
    0.06127662,
    0.20753954,
    -0.15602651,
    0.38449815,
    0.44087142,
    -0.1416285,
    -0.72993124,
    0.1605913,
    1.8260558,
    1.4085311,
    1.6873645,
    -0.23067553,
    1.8025221,
    2.1915245,
    0.68259877,
    1.5146484,
    0.60728025,
    0.6007257,
    0.6491273,
    0.2172983,
    0.6351415,
    0.4959009,
    0.77732676,
    2.8963873,
    0.00053430814,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_2KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.21975538,
    0.33223447,
    -0.14105462,
    -0.36505666,
    -0.7609063,
    -0.8965052,
    -0.92025465,
    1.4963973,
    1.4631284,
    1.4812517,
    1.50182,
    1.5627654,
    1.545281,
    0.28926948,
    0.4377006,
    0.5879545,
    0.7897493,
    0.9367209,
    1.0018904,
    0.530774,
    0.56695366,
    0.7988306,
    1.196162,
    1.5264778,
    1.8386343,
    0.35737064,
    0.49168542,
    0.5568708,
    0.5852016,
    0.6522056,
    0.6931923,
    0.36872286,
    0.4170724,
    0.43867567,
    0.52655756,
    0.5623077,
    0.58132786,
    3.5600927,
    0.9916252,
    1.8692635,
    0.6566836,
    1.5340008,
    0.36138994,
    0.8494658,
    1.2220579,
    1.1845913,
    0.22164804,
    -0.003972869,
    -0.29555234,
    0.78792137,
    0.22133404,
    -0.05998012,
    -0.3971274,
    0.5541967,
    0.59160554,
    0.9036113,
    0.5223364,
    0.27927074,
    0.53454405,
    0.83957237,
    0.7496028,
    0.379309,
    -0.14096771,
    0.34245893,
    0.18423738,
    -0.32891813,
    -0.10412142,
    -0.28808773,
    -0.10740966,
    -0.31684098,
    -0.03245038,
    -0.015865417,
    -0.0083720395,
    -0.23958093,
    -0.34070033,
    -1.0727327,
    -0.42391914,
    -0.22510608,
    -0.6443616,
    -0.09036231,
    0.1507093,
    0.5050329,
    1.0000606,
    0.4590284,
    -0.14407784,
    -0.14837804,
    -0.9232794,
    -0.36062828,
    -0.03910884,
    0.25153348,
    0.7712701,
    0.7312422,
    0.49539763,
    0.2994278,
    0.12229917,
    0.010602272,
    -0.22793469,
    -0.4409769,
    0.14498994,
    0.26420024,
    -0.0028613303,
    -0.15691131,
    -0.38280153,
    -0.4642629,
    -0.7667854,
    0.4337383,
    0.4671328,
    0.4341622,
    0.39127937,
    0.40776494,
    0.3877042,
    0.42015746,
    -0.5239011,
    -0.45350033,
    -0.4133751,
    -0.44037324,
    -0.45111582,
    -0.45436284,
    -0.47611052,
    -0.25875306,
    -0.21681085,
    -0.0052550216,
    0.23590912,
    0.048039146,
    0.15771031,
    -0.0026120944,
    1.5873238,
    0.6669834,
    0.04257972,
    0.12729995,
    0.028383205,
    -0.14081499,
    0.030105252,
    -0.12859239,
    -0.12483968,
    0.0070885587,
    -0.31765395,
    -0.22618751,
    -0.17631425,
    -0.029415412,
    0.18417749,
    0.42506647,
    -0.065728575,
    -0.34075052,
    -0.16633394,
    0.15927587,
    0.5130869,
    0.7866158,
    -0.02328575,
    -0.33158368,
    -0.07950274,
    0.19670768,
    0.5416193,
    0.70396715,
    -0.05523434,
    -0.44035986,
    -0.1440519,
    0.16207655,
    0.54571784,
    0.7868705,
    -0.4835587,
    -0.53112805,
    -0.34578443,
    -0.17152669,
    0.024481779,
    0.39432734,
    -0.6282333,
    -0.6606444,
    -0.41733292,
    -0.15542269,
    0.15846254,
    0.4282751,
    -0.56261164,
    -0.6168543,
    -0.37422296,
    -0.102916665,
    0.17353839,
    0.5651303,
    -0.11434924,
    -0.30526328,
    -0.24485914,
    -0.0655584,
    0.21491323,
    0.48131672,
    -0.39737555,
    -0.45739794,
    -0.22758426,
    0.036045454,
    0.39795226,
    0.6426156,
    -0.60388476,
    -0.55405384,
    -0.2884096,
    0.056344498,
    0.4203375,
    0.7327601,
    -0.39642388,
    -0.32809484,
    -0.21467772,
    -0.72792524,
    -0.6781924,
    -0.2676213,
    -0.3879657,
    -0.26384205,
    -0.27864435,
    -0.0018851925,
    0.007400766,
    -0.000116079114,
    -0.009369239,
    0.0092722215,
    0.0030306866,
    -0.00916178,
    -0.0003501959,
    0.00912733,
    -0.008776911,
    -1.5384139,
    -1.5379516,
    -1.5720682,
    -1.5838798,
    -1.62411,
    -1.591194,
    -0.6408224,
    -0.9118496,
    -1.0219611,
    -1.1236179,
    -1.2755967,
    -1.3641729,
    -0.36392337,
    -0.63037837,
    -0.88692147,
    -1.1861074,
    -1.5580983,
    -1.8442156,
    -0.47389844,
    -0.522874,
    -0.5679834,
    -0.6550748,
    -0.6493783,
    -0.69013715,
    -0.35513496,
    -0.4311013,
    -0.45317924,
    -0.5259656,
    -0.57117164,
    -0.5734597,
    -3.1612,
    -0.4874317,
    -1.9457772,
    -0.19864513,
    -1.3299137,
    0.26330903,
    -0.5941561,
    -1.1767273,
    -1.2109445,
    -0.2377033,
    -0.09303313,
    0.25331852,
    -0.86829305,
    -0.2631905,
    0.08412262,
    0.4662479,
    -0.4156929,
    -0.6837411,
    -1.2899334,
    -0.6426763,
    -0.41725856,
    -0.4192195,
    -0.3411749,
    -0.5916405,
    -0.46880588,
    0.24142054,
    -0.22607282,
    -0.11034887,
    0.3214527,
    0.19479038,
    0.46695065,
    0.06799903,
    0.3126175,
    -0.05136152,
    -0.22589411,
    0.029762078,
    0.23334196,
    0.4377424,
    0.73092526,
    0.46577358,
    0.003440666,
    0.0040632943,
    0.0075244084,
    -0.003553629,
    0.0015281235,
    -0.0045406753,
    -0.59169775,
    -0.00047137216,
    -0.002311611,
    -0.0068556285,
    -0.0071793436,
    0.0004826784,
    -0.0035659648,
    1.1499064,
    0.00952634,
    0.0013494841,
    -0.0043489346,
    -0.041281343,
    -0.17907079,
    -0.57667565,
    -0.5271471,
    -0.0029488825,
    0.006474953,
    0.007976794,
    -0.0029145463,
    -0.029000703,
    0.013499731,
    1.0183785,
    0.030421494,
    -0.0077449684,
    -0.2735116,
    -0.679264,
    -0.8214621,
    -0.7428779,
    -0.73216796,
    0.02499778,
    0.12975907,
    0.45850292,
    0.85510594,
    0.599068,
    0.44905555,
    0.45633778,
    0.2432053,
    0.23004614,
    0.004255654,
    -0.23159802,
    -0.045560755,
    -0.1567561,
    -0.013223698,
    -1.8082094,
    -0.47405872,
    -0.01645543,
    -0.08150941,
    -0.10041877,
    0.12223769,
    -0.029438857,
    0.17634568,
    0.13375972,
    -0.008103551,
    0.29620236,
    0.2055255,
    0.1042534,
    -0.055095933,
    -0.24295121,
    -0.46510908,
    -0.054079656,
    0.16265538,
    -0.00013526723,
    -0.25696555,
    -0.57132024,
    -0.7584648,
    -0.024015121,
    0.20065601,
    0.00402045,
    -0.21201274,
    -0.50800586,
    -0.68197656,
    -0.044767138,
    0.3308618,
    0.08505082,
    -0.20831794,
    -0.5877976,
    -0.82528204,
    0.3956236,
    0.5189516,
    0.371744,
    0.24609883,
    -0.020876093,
    -0.2773156,
    0.49647316,
    0.5647535,
    0.36835083,
    0.163882,
    -0.10792044,
    -0.4853983,
    0.5053795,
    0.5251399,
    0.30491444,
    0.07352156,
    -0.16087356,
    -0.49766448,
    0.1394716,
    0.25273713,
    0.20774825,
    0.05684181,
    -0.20916198,
    -0.4601331,
    0.35928738,
    0.3911174,
    0.20711987,
    -0.052723236,
    -0.34179202,
    -0.6399785,
    0.55795395,
    0.50741166,
    0.2813424,
    -0.011079993,
    -0.38051695,
    -0.7273015,
    0.3361786,
    0.14963402,
    0.014063532,
    0.51533574,
    0.19607805,
    0.008085633,
    0.2076255,
    -0.041102294,
    0.14252424,
    -0.0011674287,
    -3.0069612e-5,
    -0.0075867055,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_2KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.19618513,
    -0.12603372,
    -0.015536889,
    0.1261336,
    0.39343518,
    0.54471564,
    -0.15491426,
    -0.27759033,
    -0.0069163186,
    -0.0036204353,
    0.2059794,
    0.3110437,
    -0.42611456,
    -0.6068721,
    -0.49104723,
    -0.05461399,
    0.1272986,
    -0.00822559,
    0.1884023,
    -0.13636926,
    -0.13377881,
    0.30591944,
    0.487582,
    0.54234695,
    -1.3201939,
    -0.9234476,
    -0.88198483,
    0.3082681,
    0.94588137,
    2.3325715,
    -1.9623413,
    -0.81226206,
    -1.1284567,
    -0.12128122,
    1.1671778,
    3.1298351,
    -0.39097193,
    0.07514274,
    -0.06557368,
    -0.20560668,
    -0.13817734,
    -0.15567772,
    -1.6164923,
    1.0326616,
    0.21477142,
    -2.8077223,
    -2.551806,
    -0.13339965,
    0.38691,
    -0.30760485,
    0.06981112,
    -0.06082517,
    0.08143008,
    0.050636236,
    -0.19882275,
    0.03367009,
    0.3332777,
    0.6907215,
    0.6812265,
    -0.115635045,
    -0.117798366,
    -0.006480599,
    0.08968755,
    -0.014623408,
    -0.24321537,
    -0.06481637,
    -0.4970192,
    -0.21534547,
    0.51982844,
    1.7268767,
    0.004423392,
    0.30211067,
    -0.06706835,
    0.03738013,
    0.28384575,
    0.4953554,
    0.5341444,
    -0.38101324,
    -0.4474343,
    -0.41911015,
    -0.14857827,
    0.30844328,
    0.6750072,
    -0.97720045,
    -0.56535405,
    -0.17083597,
    0.54298985,
    1.5395478,
    1.096076,
    0.45582753,
    0.016415296,
    -0.33029875,
    0.44426945,
    -0.32968402,
    0.9531575,
    0.41011214,
    0.1216629,
    0.6917996,
    0.18339105,
    0.065131195,
    -0.6355726,
    1.5640646,
    0.46537867,
    1.1751071,
    -0.08667284,
    -0.22987743,
    -0.7127392,
    0.4810418,
    0.8214628,
    0.9918113,
    -0.09119934,
    -0.27208114,
    -0.13251854,
    2.426638,
    -0.104075655,
    2.1405137,
    3.3990076,
    0.45329964,
    -4.655621,
    -0.74131274,
    0.7973329,
    1.3661869,
    0.46773735,
    0.5741953,
    0.087222114,
    0.30638045,
    0.33453366,
    0.08256739,
    0.04432858,
    0.3225368,
    -0.021882322,
    0.32148007,
    0.31549633,
    -1.5004859,
    -0.13966632,
    0.45546106,
    -0.40373558,
    -0.24551375,
    0.18895926,
    0.07625407,
    0.0052082036,
    -0.0012640925,
    0.34141248,
    0.15663096,
    2.02077,
    -2.6822398,
    -1.6883273,
    -1.9041578,
    -0.1886726,
    0.25378472,
    0.5179474,
    1.0816803,
    -2.2359698,
    -1.5015856,
    -0.5805032,
    0.79634327,
    0.31051883,
    -1.2014942,
    0.25040248,
    1.1517992,
    1.6989455,
    1.3853481,
    1.6036713,
    0.7625884,
    -0.92504823,
    -0.5216621,
    0.36561957,
    1.1321492,
    1.6092598,
    0.61432403,
    -2.0228667,
    -0.8177022,
    -1.254545,
    -1.1593713,
    -1.2931123,
    -0.3154228,
    -1.1602424,
    -1.9565928,
    0.32626602,
    -0.028468128,
    -0.036849245,
    -0.112456985,
    0.043217946,
    0.08309858,
    0.24185763,
    -0.17654309,
    0.23051652,
    0.17497836,
    0.30518794,
    -0.17468643,
    -0.17940004,
    1.8823787,
    1.3385825,
    1.6534553,
    0.046787873,
    1.9449157,
    1.957238,
    0.5685186,
    1.369992,
    0.49561453,
    0.5704975,
    0.5515624,
    0.14864062,
    0.68902594,
    0.98338044,
    0.8225161,
    2.7357512,
    0.00053430814,
];
