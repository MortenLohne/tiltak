use std::{array, mem};

use half::f16;

use crate::{
    evaluation::policy_eval::sigmoid,
    position::{num_line_symmetries, num_square_symmetries, Komi},
};

use super::policy_eval::policy_offset;

pub const NUM_VALUE_FEATURES_4S: usize = 320;
pub const NUM_POLICY_FEATURES_4S: usize = 176;

pub const NUM_VALUE_FEATURES_5S: usize = 400;
pub const NUM_POLICY_FEATURES_5S: usize = 200;

pub const NUM_VALUE_FEATURES_6S: usize = 416;
pub const NUM_POLICY_FEATURES_6S: usize = 208;

const fn value_padding<const S: usize>() -> usize {
    match S {
        4 => 6,
        5 => 6,
        6 => 2,
        _ => unimplemented!(),
    }
}

const fn policy_padding<const S: usize>() -> usize {
    match S {
        4 => 7,
        5 => 3,
        6 => 1,
        _ => unimplemented!(),
    }
}

#[derive(Debug, Clone, Copy)]
pub struct IndexPair {
    start: usize,
    length: usize,
}

impl IndexPair {
    pub const fn next(start: usize, length: usize) -> (Self, usize) {
        (Self { start, length }, start + length)
    }

    pub fn as_slice<'a, T>(&self, slice: &'a [T]) -> &'a [T] {
        &slice[self.start..self.start + self.length]
    }

    pub fn as_mut_slice<'a, T>(&self, slice: &'a mut [T]) -> &'a mut [T] {
        &mut slice[self.start..self.start + self.length]
    }
}

#[derive(Debug)]
pub struct ValueIndexes<const S: usize> {
    pub first_ply: IndexPair,
    pub second_ply: IndexPair,
    pub flat_psqt: IndexPair,
    pub wall_psqt: IndexPair,
    pub cap_psqt: IndexPair,
    pub supports_psqt: IndexPair,
    pub captives_psqt: IndexPair,
    pub flat_win_this_ply: IndexPair,
    pub flat_win_next_ply: IndexPair,
    pub flat_win_two_ply: IndexPair,
    pub flat_win_three_ply: IndexPair,
    pub one_reserve_left_us: IndexPair,
    pub one_reserve_left_them: IndexPair,
    pub shallow_supports_per_piece: IndexPair,
    pub shallow_supports_per_piece_mobility: IndexPair,
    pub shallow_supports_per_piece_mob_scaled: IndexPair,
    pub deep_supports_per_piece: IndexPair,
    pub shallow_captives_per_piece: IndexPair,
    pub shallow_captives_per_piece_mobility: IndexPair,
    pub shallow_captives_per_piece_mob_scaled: IndexPair,
    pub deep_captives_per_piece: IndexPair,
    pub to_move_opening_flatstone_lead: IndexPair,
    pub to_move_middlegame_flatstone_lead: IndexPair,
    pub to_move_endgame_flatstone_lead: IndexPair,
    pub i_number_of_groups: IndexPair,
    pub critical_squares: IndexPair,
    pub critical_square_cap_attack: IndexPair,
    pub flat_next_to_our_stack: IndexPair,
    pub wall_next_to_our_stack: IndexPair,
    pub cap_next_to_our_stack: IndexPair,
    pub num_lines_occupied: IndexPair,
    pub line_control_empty: IndexPair,
    pub line_control_their_blocking_piece: IndexPair,
    pub line_control_other: IndexPair,
    pub line_control_guarded_flat: IndexPair,
    pub line_control_guarded_wall: IndexPair,
    pub line_control_guarded_cap: IndexPair,
    pub sidelined_cap: IndexPair,
    pub fully_isolated_cap: IndexPair,
    pub semi_isolated_cap: IndexPair,
    pub padding: IndexPair,
}

impl<const S: usize> ValueIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;

        let (first_ply, i) = IndexPair::next(i, 1);
        let (second_ply, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (supports_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (captives_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_win_this_ply, i) = IndexPair::next(i, 1);
        let (flat_win_next_ply, i) = IndexPair::next(i, 2);
        let (flat_win_two_ply, i) = IndexPair::next(i, 2);
        let (flat_win_three_ply, i) = IndexPair::next(i, 3);
        let (one_reserve_left_us, i) = IndexPair::next(i, 4);
        let (one_reserve_left_them, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece_mobility, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece_mob_scaled, i) = IndexPair::next(i, 4);
        let (deep_supports_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece_mobility, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece_mob_scaled, i) = IndexPair::next(i, 4);
        let (deep_captives_per_piece, i) = IndexPair::next(i, 4);
        let (to_move_opening_flatstone_lead, i) = IndexPair::next(i, 9);
        let (to_move_middlegame_flatstone_lead, i) = IndexPair::next(i, 9);
        let (to_move_endgame_flatstone_lead, i) = IndexPair::next(i, 9);
        let (i_number_of_groups, i) = IndexPair::next(i, 3);
        let (critical_squares, i) = IndexPair::next(i, 4);
        let (critical_square_cap_attack, i) = IndexPair::next(i, 6);
        let (flat_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (wall_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (cap_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (num_lines_occupied, i) = IndexPair::next(i, S + 1);
        let (line_control_empty, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_their_blocking_piece, i) =
            IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_other, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_guarded_flat, i) = IndexPair::next(i, 3);
        let (line_control_guarded_wall, i) = IndexPair::next(i, 3);
        let (line_control_guarded_cap, i) = IndexPair::next(i, 3);
        let (sidelined_cap, i) = IndexPair::next(i, 3);
        let (fully_isolated_cap, i) = IndexPair::next(i, 3);
        let (semi_isolated_cap, i) = IndexPair::next(i, 3);
        let (padding, i) = IndexPair::next(i, value_padding::<S>() / 2);

        assert!(i == num_value_features::<S>() / 2);

        ValueIndexes {
            first_ply,
            second_ply,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            supports_psqt,
            captives_psqt,
            flat_win_this_ply,
            flat_win_next_ply,
            flat_win_two_ply,
            flat_win_three_ply,
            one_reserve_left_us,
            one_reserve_left_them,
            shallow_supports_per_piece,
            shallow_supports_per_piece_mobility,
            shallow_supports_per_piece_mob_scaled,
            deep_supports_per_piece,
            shallow_captives_per_piece,
            shallow_captives_per_piece_mobility,
            shallow_captives_per_piece_mob_scaled,
            deep_captives_per_piece,
            to_move_opening_flatstone_lead,
            to_move_middlegame_flatstone_lead,
            to_move_endgame_flatstone_lead,
            i_number_of_groups,
            critical_squares,
            critical_square_cap_attack,
            flat_next_to_our_stack,
            wall_next_to_our_stack,
            cap_next_to_our_stack,
            num_lines_occupied,
            line_control_empty,
            line_control_their_blocking_piece,
            line_control_other,
            line_control_guarded_flat,
            line_control_guarded_wall,
            line_control_guarded_cap,
            sidelined_cap,
            fully_isolated_cap,
            semi_isolated_cap,
            padding,
        }
    }
}

pub const VALUE_INDEXES_4S: ValueIndexes<4> = ValueIndexes::new();
pub const VALUE_INDEXES_5S: ValueIndexes<5> = ValueIndexes::new();
pub const VALUE_INDEXES_6S: ValueIndexes<6> = ValueIndexes::new();

impl<const S: usize> ValueIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> ValueIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn value_indexes<const S: usize>() -> ValueIndexes<S> {
    match S {
        4 => VALUE_INDEXES_4S.downcast_size(),
        5 => VALUE_INDEXES_5S.downcast_size(),
        6 => VALUE_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

#[derive(Debug)]
pub struct PolicyIndexes<const S: usize> {
    pub flat_psqt_white: IndexPair,
    pub flat_psqt_black: IndexPair,
    pub wall_psqt_white: IndexPair,
    pub wall_psqt_black: IndexPair,
    pub cap_psqt_white: IndexPair,
    pub cap_psqt_black: IndexPair,
    pub move_role_bonus_white: IndexPair,
    pub move_role_bonus_black: IndexPair,
    pub decline_win: IndexPair,
    pub place_to_win: IndexPair,
    pub place_to_draw: IndexPair,
    pub place_to_loss: IndexPair,
    pub place_to_allow_opponent_to_end: IndexPair,
    pub two_flats_left: IndexPair,
    pub three_flats_left: IndexPair,
    pub our_road_stones_in_line: IndexPair,
    pub their_road_stones_in_line: IndexPair,
    pub extend_single_group_base: IndexPair,
    pub extend_single_group_linear: IndexPair,
    pub extend_single_group_to_new_line_base: IndexPair,
    pub extend_single_group_to_new_line_linear: IndexPair,
    pub merge_two_groups_base: IndexPair,
    pub merge_two_groups_linear: IndexPair,
    pub block_merger_base: IndexPair,
    pub block_merger_linear: IndexPair,
    pub place_our_critical_square: IndexPair,
    pub place_their_critical_square: IndexPair,
    pub ignore_their_critical_square: IndexPair,
    pub next_to_our_last_stone: IndexPair,
    pub next_to_their_last_stone: IndexPair,
    pub diagonal_to_our_last_stone: IndexPair,
    pub diagonal_to_their_last_stone: IndexPair,
    pub attack_strong_flats: IndexPair,
    pub blocking_stone_blocks_extensions_of_two_flats: IndexPair,
    pub attack_strong_stack_with_wall: IndexPair,
    pub attack_strong_stack_with_cap: IndexPair,
    pub attack_last_movement: IndexPair,
    pub place_last_movement: IndexPair,
    pub simple_movement: IndexPair,
    pub simple_capture: IndexPair,
    pub simple_self_capture: IndexPair,
    pub pure_spread: IndexPair,
    pub fcd_highest_board: IndexPair,
    pub fcd_highest_stack: IndexPair,
    pub fcd_other: IndexPair,
    pub stack_captured_by_movement: IndexPair,
    pub stack_capture_in_strong_line: IndexPair,
    pub stack_capture_in_strong_line_cap: IndexPair,
    pub move_cap_onto_strong_line: IndexPair,
    pub move_cap_onto_strong_line_with_critical_square: IndexPair,
    pub recapture_stack_pure: IndexPair,
    pub recapture_stack_impure: IndexPair,
    pub move_last_placement: IndexPair,
    pub continue_spread: IndexPair,
    pub move_onto_critical_square: IndexPair,
    pub spread_that_connects_groups_to_win: IndexPair,
    pub padding: IndexPair,
}

pub const POLICY_INDEXES_4S: PolicyIndexes<4> = PolicyIndexes::new();
pub const POLICY_INDEXES_5S: PolicyIndexes<5> = PolicyIndexes::new();
pub const POLICY_INDEXES_6S: PolicyIndexes<6> = PolicyIndexes::new();

impl<const S: usize> PolicyIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> PolicyIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn policy_indexes<const S: usize>() -> PolicyIndexes<S> {
    match S {
        4 => POLICY_INDEXES_4S.downcast_size(),
        5 => POLICY_INDEXES_5S.downcast_size(),
        6 => POLICY_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

impl<const S: usize> PolicyIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;
        let (flat_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (move_role_bonus_white, i) = IndexPair::next(i, 3);
        let (move_role_bonus_black, i) = IndexPair::next(i, 3);
        let (decline_win, i) = IndexPair::next(i, 1);
        let (place_to_win, i) = IndexPair::next(i, 1);
        let (place_to_draw, i) = IndexPair::next(i, 1);
        let (place_to_loss, i) = IndexPair::next(i, 1);
        let (place_to_allow_opponent_to_end, i) = IndexPair::next(i, 3);
        let (two_flats_left, i) = IndexPair::next(i, 2);
        let (three_flats_left, i) = IndexPair::next(i, 2);
        let (our_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (their_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (extend_single_group_to_new_line_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_to_new_line_linear, i) = IndexPair::next(i, 3);
        let (extend_single_group_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_linear, i) = IndexPair::next(i, 3);
        let (merge_two_groups_base, i) = IndexPair::next(i, 3);
        let (merge_two_groups_linear, i) = IndexPair::next(i, 3);
        let (block_merger_base, i) = IndexPair::next(i, 3);
        let (block_merger_linear, i) = IndexPair::next(i, 3);
        let (place_our_critical_square, i) = IndexPair::next(i, 1);
        let (place_their_critical_square, i) = IndexPair::next(i, 4);
        let (ignore_their_critical_square, i) = IndexPair::next(i, 2);
        let (next_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (next_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (attack_strong_flats, i) = IndexPair::next(i, 1);
        let (blocking_stone_blocks_extensions_of_two_flats, i) = IndexPair::next(i, 1);
        let (attack_strong_stack_with_wall, i) = IndexPair::next(i, 6);
        let (attack_strong_stack_with_cap, i) = IndexPair::next(i, 6);
        let (attack_last_movement, i) = IndexPair::next(i, 4);
        let (place_last_movement, i) = IndexPair::next(i, 3);
        let (simple_movement, i) = IndexPair::next(i, 3);
        let (simple_capture, i) = IndexPair::next(i, 4);
        let (simple_self_capture, i) = IndexPair::next(i, 4);
        let (pure_spread, i) = IndexPair::next(i, 2);
        let (fcd_highest_board, i) = IndexPair::next(i, 6);
        let (fcd_highest_stack, i) = IndexPair::next(i, 6);
        let (fcd_other, i) = IndexPair::next(i, 8);
        let (stack_captured_by_movement, i) = IndexPair::next(i, 1);
        let (stack_capture_in_strong_line, i) = IndexPair::next(i, S - 3);
        let (stack_capture_in_strong_line_cap, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line_with_critical_square, i) = IndexPair::next(i, S - 3);
        let (recapture_stack_pure, i) = IndexPair::next(i, 3);
        let (recapture_stack_impure, i) = IndexPair::next(i, 3);
        let (move_last_placement, i) = IndexPair::next(i, 3);
        let (continue_spread, i) = IndexPair::next(i, 3);
        let (move_onto_critical_square, i) = IndexPair::next(i, 3);
        let (spread_that_connects_groups_to_win, i) = IndexPair::next(i, 1);
        let (padding, i) = IndexPair::next(i, policy_padding::<S>());

        assert!(i == num_policy_features::<S>());

        PolicyIndexes {
            flat_psqt_white,
            flat_psqt_black,
            wall_psqt_white,
            wall_psqt_black,
            cap_psqt_white,
            cap_psqt_black,
            move_role_bonus_white,
            move_role_bonus_black,
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            attack_strong_stack_with_wall,
            attack_strong_stack_with_cap,
            attack_last_movement,
            place_last_movement,
            simple_movement,
            simple_capture,
            simple_self_capture,
            pure_spread,
            fcd_highest_board,
            fcd_highest_stack,
            fcd_other,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            recapture_stack_pure,
            recapture_stack_impure,
            move_last_placement,
            continue_spread,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
            padding,
        }
    }
}

pub trait ValueApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn finish(&mut self) -> f32;
}

#[derive(Debug, Clone)]
pub struct Value<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for Value<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Value {
            features: vec![f16::ZERO; num_value_features::<S>() / 2],
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn finish(&mut self) -> f32 {
        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>();

        self.features.fill(f16::ZERO);

        total_value
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalValue<const S: usize> {
    val: f32,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for IncrementalValue<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalValue {
            val: 0.0,
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn finish(&mut self) -> f32 {
        let total_value = self.val;

        self.val = 0.0;

        total_value
    }
}

pub trait PolicyApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn eval_one(&mut self, index_pair: IndexPair, index: usize) {
        self.eval_i8(index_pair, index, 1)
    }
    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.eval(index_pair, index, f16::from(val))
    }
    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.eval(index_pair, index, f16::from_f32(val))
    }
    fn set_immediate_win(&mut self);
    fn has_immediate_win(&self) -> bool;
    fn finish(&mut self, num_moves: usize) -> f16;
}

#[derive(Debug, Clone)]
pub struct Policy<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for Policy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Policy {
            features: vec![f16::ZERO; num_policy_features::<S>()],
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);

        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>() + offset;

        self.features.fill(f16::ZERO);
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalPolicy<const S: usize> {
    val: f32,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for IncrementalPolicy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalPolicy {
            val: 0.0,
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.val += index_pair.as_slice(self.parameters)[index] * val as f32
    }

    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.val += index_pair.as_slice(self.parameters)[index] * val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);
        let total_value = self.val + offset;

        self.val = 0.0;
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

pub const fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub const fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn value_features_4s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_4S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_4S_0KOMI,
        4 => &VALUE_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn policy_features_4s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_4S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_4S_0KOMI,
        4 => &POLICY_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn value_features_5s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_5S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_5S_0KOMI,
        4 => &VALUE_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn policy_features_5s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_5S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_5S_0KOMI,
        4 => &POLICY_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn value_features_6s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_6S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_6S_0KOMI,
        4 => &VALUE_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

pub fn policy_features_6s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_6S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_6S_0KOMI,
        4 => &POLICY_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_0KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    2.4297454,
    4.0062056,
    2.6049376,
    1.4463036,
    2.8994281,
    2.7487843,
    2.4791486,
    0.7649904,
    1.4559717,
    2.079845,
    -0.0059250165,
    -0.00050385203,
    -0.00651386,
    0.6632251,
    0.87528414,
    1.0533004,
    0.38034552,
    0.6393864,
    0.8693372,
    3.3091753,
    0.68515193,
    1.494346,
    0.30523694,
    1.6621726,
    0.2527586,
    0.8558426,
    0.75762683,
    0.36499202,
    -0.21396698,
    -0.52877104,
    -0.05796332,
    -0.077265985,
    -0.34016138,
    -0.7399847,
    -0.5193773,
    1.186428,
    0.4868523,
    -0.005124028,
    -0.008343117,
    -0.7121833,
    1.2432246,
    0.005951524,
    -0.0043248367,
    0.47360346,
    1.2494856,
    -0.005560641,
    0.0036220215,
    0.7080674,
    0.20422132,
    -0.0055643534,
    -0.0015320918,
    -0.33004308,
    -0.21427998,
    -0.009827926,
    0.00059686694,
    -2.1530406,
    -0.91932803,
    0.0076304395,
    -0.0060374904,
    0.09715872,
    0.1427178,
    -0.003094554,
    0.0022945618,
    -0.69062984,
    -0.63445973,
    0.0020511579,
    -0.0041063665,
    0.13397199,
    1.7633629,
    2.4993577,
    2.0939841,
    1.9141829,
    2.0209584,
    1.7708625,
    1.8816401,
    -0.04202944,
    1.9637618,
    2.320527,
    1.5358956,
    1.3520178,
    1.1428481,
    1.1184006,
    0.7593216,
    1.7888674,
    1.7226784,
    0.49231845,
    0.72212595,
    1.1380248,
    1.635386,
    2.2385087,
    2.9456835,
    3.769143,
    2.7827318,
    1.4978321,
    -0.3055099,
    0.38302973,
    0.27147746,
    0.28666082,
    0.35981005,
    0.20209663,
    0.0505335,
    0.00022801384,
    -0.007706399,
    -0.008808966,
    -0.0034274147,
    0.004325905,
    -0.0049592447,
    -0.041873995,
    -0.3197183,
    0.002150652,
    -0.10749555,
    -0.19537899,
    -0.038020886,
    0.17142868,
    0.53205943,
    0.019410018,
    -0.056579553,
    0.58234483,
    1.2963107,
    0.2004575,
    -0.100739405,
    0.558412,
    1.1716634,
    0.029161898,
    -0.13676095,
    -0.093282394,
    0.29149008,
    -0.6763643,
    -0.4900143,
    -0.009130489,
    0.3600723,
    0.3665329,
    0.004788068,
    0.26830053,
    0.87092334,
    -0.8215979,
    -0.549833,
    0.16141431,
    0.95809555,
    -0.026637591,
    -0.035968695,
    0.552472,
    -0.060984254,
    0.04068201,
    0.3823705,
    0.009418681,
    -0.007463541,
    -0.009312019,
    0.008915393,
    -0.0005510999,
    0.0035254955,
    0.008046815,
    0.008674609,
    0.008508706,
    -0.0008124877,
    0.004095099,
    0.002457223,
    -0.0064589093,
    0.0060925093,
    0.0012618108,
    -0.0039176345,
    0.0039970186,
    -0.005868571,
    -0.0075792954,
    -3.1479914,
    -2.7256768,
    -2.3492322,
    -0.7401775,
    -1.3929883,
    -2.2978892,
    -0.0027733874,
    0.009177124,
    -0.006355319,
    -0.56166685,
    -0.90971625,
    -1.0511231,
    -0.5120219,
    -0.7148568,
    -0.91679996,
    -2.6472833,
    -0.86285955,
    -2.0424664,
    -0.3404026,
    -1.5783554,
    -0.14597398,
    -0.70944977,
    -0.8100352,
    -1.7216436,
    -0.4821051,
    -0.5839781,
    0.0969088,
    -1.236617,
    -0.407661,
    -0.1988834,
    0.8713249,
    -0.70934373,
    -0.8958695,
    0.0042860033,
    -0.004753387,
    0.40877464,
    -1.1522579,
    -0.0066909315,
    0.0056339707,
    -0.5868196,
    -0.80889297,
    -0.0018851925,
    0.007400766,
    -0.6799517,
    -0.25676736,
    0.0092722215,
    0.0030306866,
    0.505714,
    0.29308283,
    0.00912733,
    -0.008776911,
    0.8997595,
    0.46416217,
    -0.0019571641,
    -0.0020065904,
    0.05280533,
    -0.13786243,
    0.0066047404,
    -0.00401304,
    0.74043065,
    0.60071516,
    0.009882869,
    -0.0012246752,
    -0.04448644,
    -1.0739167,
    -1.8513304,
    -1.7591248,
    -1.5562627,
    -1.0575562,
    -1.2044964,
    0.05274436,
    -0.0030021705,
    -2.6908884,
    -3.320067,
    -2.7970364,
    -2.6813624,
    -2.5500464,
    -2.3904552,
    -1.6554959,
    -2.308423,
    -1.4813823,
    0.32780287,
    0.036904573,
    -0.84991413,
    -1.8104398,
    -2.293292,
    -2.5367718,
    -3.3909104,
    -2.828258,
    -0.9779187,
    0.25371704,
    -0.19917162,
    -0.3740929,
    -0.19925304,
    -0.05447088,
    -0.2287449,
    0.032563645,
    -0.001817584,
    -0.009368448,
    -0.006632633,
    -0.00079724286,
    -0.001203401,
    -0.001678803,
    -0.0145629775,
    0.28788972,
    -0.006872382,
    0.15369716,
    0.17134078,
    0.19448477,
    0.0464677,
    -0.21203437,
    0.015142955,
    -0.23993327,
    -0.6938286,
    -1.2016369,
    0.20232521,
    0.40268332,
    -0.23988982,
    -1.1354849,
    -0.37138003,
    -0.119677156,
    -0.1611546,
    -0.20968457,
    1.0306233,
    0.48724326,
    -0.11466457,
    -0.7253666,
    -0.34234065,
    -0.12565605,
    -0.26051366,
    -0.70830524,
    1.0524085,
    0.6905243,
    -0.08098609,
    -0.85194665,
    0.07823153,
    -0.044929374,
    -0.48582554,
    0.20754094,
    -0.19081149,
    -0.14343016,
    0.0021977378,
    -0.0029488825,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    -0.0038043214,
    0.007477794,
    0.007423345,
    -0.0053779697,
    -0.0015040664,
    -0.008595528,
    -0.0028329133,
    0.009884633,
    0.009884935,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_0KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    -0.06596815,
    0.14143576,
    0.2643506,
    0.14499849,
    0.107681885,
    0.11073599,
    -0.19013828,
    -0.40654242,
    0.3318426,
    -0.16691944,
    -0.3575065,
    0.23800719,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.33601677,
    -0.041274536,
    0.0013449714,
    -0.29418692,
    -0.54222,
    0.0075244084,
    -2.7454162,
    1.2056162,
    0.74540424,
    -3.2504718,
    -2.7729948,
    0.068721116,
    0.47504744,
    -0.16477276,
    0.18019468,
    -0.13531236,
    0.14152104,
    0.032580495,
    -0.22254677,
    0.49075425,
    1.1202906,
    -0.07768215,
    -0.10285486,
    -0.28730598,
    -0.60267043,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    0.1747276,
    -0.3360676,
    0.35788158,
    1.2172985,
    -0.7322632,
    -0.5023849,
    -0.49644548,
    0.63201225,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    0.6639308,
    0.34448573,
    -0.0077813696,
    -1.4789531,
    -0.5449256,
    0.0020160126,
    0.20559156,
    -0.025478715,
    -0.0057330895,
    0.48247886,
    0.27221236,
    0.0008187201,
    0.79267675,
    1.5803065,
    -0.002397363,
    0.2934291,
    -0.9169082,
    0.00303144,
    0.18601592,
    0.47252977,
    -0.008103551,
    -0.54003847,
    -0.6874615,
    -0.009149382,
    2.5997837,
    0.21279974,
    1.0009149,
    0.00917124,
    0.5581906,
    -3.4829595,
    -0.7885469,
    0.29876935,
    1.3653431,
    0.3458327,
    0.23525056,
    0.27667275,
    0.6695998,
    0.2019845,
    0.33065692,
    -0.2599935,
    0.50598747,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.32448876,
    0.06516934,
    -0.00813673,
    -0.009886575,
    0.04560957,
    -0.2841685,
    0.00021132734,
    -1.8742533,
    -1.0128005,
    0.0011727996,
    0.07729849,
    0.14006491,
    -0.008626261,
    -0.006473,
    -1.0160459,
    -0.7020004,
    -0.0051336214,
    -0.0013411185,
    0.15417725,
    -1.3802054,
    0.25305972,
    1.4399757,
    1.8268988,
    1.968561,
    2.796725,
    1.1202828,
    -1.7660865,
    -0.804423,
    0.20100431,
    1.3501571,
    0.9508624,
    0.054124333,
    -1.1339825,
    -1.1712068,
    -2.0318532,
    -1.4227827,
    -2.0454004,
    -0.13430345,
    -1.5658052,
    -1.0156312,
    0.39389312,
    -0.0530978,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.397977,
    0.7746763,
    -0.002408173,
    0.22021821,
    1.53287,
    0.0077593178,
    0.2637508,
    0.88056475,
    -0.0054027913,
    0.3666799,
    0.14289705,
    0.0036244253,
    -0.39640427,
    -0.31697965,
    0.16356713,
    3.3073342,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_2KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    0.52550673,
    0.68916845,
    0.11563919,
    -0.14715458,
    2.8277855,
    2.230739,
    1.542515,
    0.7696426,
    1.2870432,
    1.5650468,
    -0.0059250165,
    -0.00050385203,
    -0.00651386,
    0.35650814,
    0.6718961,
    0.65419704,
    0.2973203,
    0.51381546,
    0.4688092,
    4.071519,
    0.80232555,
    2.0828228,
    0.6069396,
    2.0615935,
    0.15641983,
    0.98783904,
    0.93368614,
    0.47739226,
    0.014972169,
    0.13906036,
    -0.41427022,
    0.077820234,
    -0.06608179,
    0.02725945,
    -0.96086925,
    0.7079178,
    0.5674669,
    -0.005124028,
    -0.008343117,
    -0.7849244,
    -0.09562964,
    0.005951524,
    -0.0043248367,
    0.35779402,
    1.1420021,
    -0.005560641,
    0.0036220215,
    0.4856812,
    -0.08472786,
    -0.0055643534,
    -0.0015320918,
    -0.2134208,
    -0.22233927,
    -0.009827926,
    0.00059686694,
    -1.6346165,
    0.09591504,
    0.0076304395,
    -0.0060374904,
    0.0685955,
    0.023615561,
    -0.003094554,
    0.0022945618,
    -0.58997613,
    -0.23454693,
    0.0020511579,
    -0.0041063665,
    -0.008211616,
    1.861964,
    1.7256736,
    2.5979977,
    1.5632825,
    1.3304522,
    0.64854914,
    1.195511,
    -0.98488164,
    0.19034651,
    1.3182425,
    0.97880423,
    0.8634156,
    1.0485606,
    0.786302,
    0.3148401,
    0.15357049,
    0.4334279,
    0.079379536,
    -0.45780203,
    0.48278227,
    0.5385578,
    1.3703121,
    2.3002777,
    3.0417378,
    3.9715538,
    4.0489464,
    -0.27683988,
    0.19481778,
    0.07868378,
    0.3522826,
    0.09341672,
    0.15323727,
    0.00048257707,
    0.00022801384,
    -0.007706399,
    -0.008808966,
    -0.0034274147,
    0.004325905,
    -0.0049592447,
    -0.023711177,
    -0.19735336,
    0.002150652,
    0.0918693,
    -0.19995064,
    -0.27319708,
    -0.19047348,
    -0.06440252,
    0.097287506,
    0.280878,
    0.4159084,
    0.29352912,
    -0.08258481,
    -0.36553434,
    0.23706087,
    0.70045704,
    0.6408008,
    0.28690997,
    0.07003039,
    -0.17076239,
    -0.90892595,
    -0.4742232,
    0.006765828,
    0.62323034,
    0.54945904,
    0.37255636,
    0.26208767,
    0.24215749,
    -1.226941,
    -0.5168553,
    0.060615838,
    0.71191627,
    0.29605922,
    -0.0056521636,
    -0.22719087,
    0.38140985,
    0.09892963,
    -0.14723366,
    0.009418681,
    -0.007463541,
    -0.009312019,
    0.008915393,
    -0.0005510999,
    0.0035254955,
    0.008046815,
    0.008674609,
    0.008508706,
    -0.0008124877,
    0.004095099,
    0.002457223,
    -0.0064589093,
    0.0060925093,
    0.0012618108,
    -0.0039176345,
    0.0039970186,
    -0.005868571,
    -0.0075792954,
    -3.1569335,
    -2.5242715,
    -1.7407578,
    -1.2393014,
    -1.8171988,
    -2.1422937,
    -0.0027733874,
    0.009177124,
    -0.006355319,
    -0.48711416,
    -0.61996865,
    -0.60756475,
    -0.098757036,
    -0.3575179,
    -0.3761897,
    -2.3689826,
    -0.14972685,
    -1.2524751,
    -0.065120235,
    -0.94068134,
    0.20320809,
    -0.27026406,
    -0.6600044,
    -0.6856557,
    -0.37039065,
    0.0052424334,
    0.016527921,
    -0.56993353,
    -0.24071953,
    0.31213483,
    0.0014620738,
    -0.58306,
    -0.74813014,
    0.0042860033,
    -0.004753387,
    1.5623237,
    0.11837501,
    -0.0066909315,
    0.0056339707,
    -0.7123404,
    -0.71717614,
    -0.0018851925,
    0.007400766,
    -0.45169938,
    0.04882392,
    0.0092722215,
    0.0030306866,
    0.18052137,
    0.35240895,
    0.00912733,
    -0.008776911,
    1.4145095,
    -0.08807056,
    -0.0019571641,
    -0.0020065904,
    -0.022590104,
    -0.06779834,
    0.0066047404,
    -0.00401304,
    0.19959562,
    0.09618675,
    0.009882869,
    -0.0012246752,
    -1.8321629,
    -1.991576,
    -1.4599735,
    -1.2139837,
    0.01777924,
    -0.7372808,
    0.42317328,
    -0.0030643002,
    -0.040494867,
    -2.6305847,
    -2.4768515,
    -2.0206914,
    -1.9042807,
    -2.0988615,
    -1.7114905,
    -2.3807535,
    -1.6715409,
    -0.34043166,
    1.0847187,
    0.118677124,
    -0.24765377,
    -1.0526614,
    -2.2538598,
    -2.670453,
    -1.4110692,
    -0.84070796,
    -0.29149517,
    0.11121553,
    -0.07344372,
    -0.10506089,
    -0.1074835,
    0.0010816874,
    -0.12665065,
    0.36529997,
    -0.001817584,
    -0.009368448,
    -0.006632633,
    -0.00079724286,
    -0.001203401,
    -0.001678803,
    -0.0054546706,
    0.4445638,
    -0.006872382,
    -0.075786084,
    -0.12149787,
    -0.08463431,
    -0.111497074,
    -0.2513803,
    0.09302041,
    0.09131029,
    0.2621101,
    0.17976685,
    -0.0807174,
    0.4096398,
    -0.083573215,
    -0.48400417,
    -1.0185872,
    -0.52044743,
    0.08373761,
    0.36914578,
    -0.14505386,
    -0.19116105,
    -0.5635713,
    -0.74019825,
    -0.55976826,
    -0.06728599,
    0.13793282,
    0.2330763,
    0.78524774,
    0.4121335,
    -0.12191589,
    -0.47684953,
    -0.055205997,
    0.15502705,
    0.32514188,
    0.21223225,
    0.14458957,
    0.3190941,
    0.0021977378,
    -0.0029488825,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    -0.0038043214,
    0.007477794,
    0.007423345,
    -0.0053779697,
    -0.0015040664,
    -0.008595528,
    -0.0028329133,
    0.009884633,
    0.009884935,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_2KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    0.3835006,
    0.21164729,
    0.5567637,
    0.14972319,
    0.008378243,
    -0.43465084,
    -0.7308303,
    -0.8912839,
    0.46212968,
    -0.43907836,
    0.26626498,
    0.5782282,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.4975553,
    0.15077943,
    0.0013449714,
    -0.4241401,
    -0.4088393,
    0.0075244084,
    -3.2364414,
    0.9161514,
    0.5318693,
    -2.230449,
    -4.504568,
    -0.487717,
    0.6291668,
    -0.73886293,
    0.26118273,
    -0.27261165,
    0.12881532,
    0.1777136,
    -0.011507088,
    0.41689792,
    1.1819894,
    -0.14281727,
    -0.12822403,
    -0.4899795,
    -0.7057814,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    -0.038640175,
    -0.48866045,
    0.18388642,
    2.1011872,
    -0.47701856,
    -0.35595262,
    -0.5488175,
    -0.12425026,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    -0.0737323,
    1.6342262,
    -0.0077813696,
    0.8013023,
    -0.2317711,
    0.0020160126,
    0.59806335,
    -0.9970204,
    -0.0057330895,
    0.07285249,
    0.6827554,
    0.0008187201,
    0.9157639,
    0.626506,
    -0.002397363,
    -0.088837735,
    0.38987082,
    0.00303144,
    0.2895544,
    -0.16646424,
    -0.008103551,
    -0.26244026,
    -0.4901274,
    -0.009149382,
    2.3455992,
    -0.7211382,
    1.9804211,
    0.00917124,
    0.5224504,
    -4.4372244,
    -0.8496559,
    0.4749193,
    1.473498,
    0.45706263,
    0.046547048,
    0.25537905,
    0.77724373,
    0.07417753,
    0.39354962,
    -0.6581425,
    0.71233255,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.5941038,
    -0.046199616,
    -0.00813673,
    -0.009886575,
    0.1387866,
    -0.22598192,
    0.00021132734,
    -2.1441894,
    -1.8108326,
    0.0011727996,
    -0.16316642,
    0.30345392,
    -0.008626261,
    -0.006473,
    -1.3621367,
    -0.119089246,
    -0.0051336214,
    -0.0013411185,
    0.010755843,
    -1.2026048,
    0.38548076,
    1.398525,
    1.9160999,
    2.1099184,
    2.0770369,
    1.4328448,
    -1.7100422,
    -0.6515236,
    0.332164,
    0.62545145,
    0.0065994086,
    -0.005360393,
    -0.9618395,
    -1.1140851,
    -1.7814239,
    -0.5971449,
    -1.9552374,
    -0.23968147,
    -1.2191556,
    -1.1778564,
    0.42183256,
    -0.11105158,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.4999874,
    0.31543893,
    -0.002408173,
    -0.93778354,
    1.1441715,
    0.0077593178,
    0.79672486,
    0.83366203,
    -0.0054027913,
    0.49028045,
    0.045144238,
    0.0036244253,
    -0.30533037,
    -0.3648391,
    0.09491095,
    3.3036993,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_0KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    1.195554,
    2.1122684,
    1.2399877,
    1.553891,
    0.8140306,
    0.79816216,
    0.8565559,
    2.002138,
    1.9193524,
    1.8506744,
    1.7121592,
    1.6819826,
    1.6250445,
    0.5711659,
    1.0057285,
    1.0605458,
    1.5274165,
    1.5782502,
    1.8979907,
    0.29268545,
    0.9240587,
    1.1000233,
    1.5510293,
    1.8318198,
    2.2283804,
    0.57076347,
    0.6353903,
    0.62531227,
    0.63252044,
    0.6979074,
    0.769372,
    0.39477676,
    0.54465383,
    0.5280246,
    0.60502535,
    0.61315644,
    0.63781697,
    2.5491564,
    0.6978681,
    1.8628387,
    0.43150654,
    1.6583704,
    0.2088883,
    0.8350996,
    1.2864864,
    0.98452705,
    0.13312964,
    -0.047361717,
    -0.6557098,
    0.77172846,
    0.055995528,
    -0.16137855,
    -0.8204961,
    0.6581896,
    0.91057044,
    1.0130424,
    0.75508136,
    0.25285268,
    0.64660937,
    0.99305534,
    1.7469555,
    0.23434755,
    0.35307786,
    0.71650594,
    0.5192039,
    0.6290954,
    0.18349701,
    -0.62349474,
    0.39222097,
    -0.40120897,
    -0.43433687,
    -0.12861396,
    -0.26270133,
    -0.62617636,
    0.45401528,
    0.44697952,
    -0.1907023,
    -0.056173168,
    0.004593045,
    -0.08389811,
    0.12112175,
    -0.49894005,
    -0.5508924,
    -0.51730424,
    -0.5368043,
    0.18383755,
    0.34578404,
    1.0148308,
    1.500289,
    1.5896856,
    1.7492756,
    2.2743413,
    0.64858913,
    0.05213971,
    1.7308712,
    1.9733496,
    1.7218003,
    1.5482619,
    1.3420908,
    1.0963424,
    0.92248213,
    0.6301883,
    0.4647656,
    0.18162426,
    0.40461814,
    0.7632613,
    1.0377654,
    1.2726548,
    1.6343877,
    1.943158,
    2.2373953,
    2.579363,
    -0.2481357,
    -0.14907691,
    0.010229947,
    0.41651514,
    0.17271,
    0.19665025,
    -0.008637231,
    2.4726424,
    0.99787325,
    0.057434957,
    0.18306705,
    0.01536173,
    -0.10210924,
    0.02588821,
    -0.21756142,
    -0.15801677,
    0.0051122922,
    -0.68015957,
    -0.2843084,
    -0.025356218,
    0.30674496,
    0.7208818,
    0.045529544,
    0.02494708,
    0.36040798,
    0.8339525,
    1.1617891,
    0.026246797,
    -0.52195567,
    0.09428352,
    0.7336447,
    1.1288557,
    0.0065089134,
    -0.765527,
    -0.12959467,
    0.63924676,
    1.1343635,
    -0.105390355,
    -0.32421538,
    -0.12248708,
    -0.015249786,
    0.4081056,
    -0.88682544,
    -0.85331917,
    -0.37236822,
    0.18846226,
    0.8382948,
    -0.888576,
    -0.79549,
    -0.27054128,
    0.33530697,
    0.93005675,
    0.16344179,
    0.018992726,
    0.11856566,
    0.41113397,
    0.70617265,
    -0.7675291,
    -0.79273117,
    -0.24257359,
    0.4314726,
    1.045436,
    -0.92798024,
    -0.7785035,
    -0.20108247,
    0.48333663,
    1.2669914,
    0.0010933122,
    0.24673046,
    0.43609685,
    0.23191315,
    0.46265253,
    0.58653504,
    0.0981123,
    0.091017865,
    -0.03568906,
    -0.24567728,
    -0.08747411,
    0.15716466,
    -0.96805817,
    -0.51555467,
    -0.50207216,
    -0.32489914,
    -0.2531699,
    -0.33998555,
    0.0042860033,
    -0.004753387,
    0.009866308,
    0.0054509398,
    -0.0066909315,
    0.0056339707,
    0.005903894,
    -0.0017206976,
    -0.0018851925,
    0.007400766,
    -2.1387792,
    -1.8476299,
    -1.8742443,
    -1.7206635,
    -1.7393633,
    -1.6149797,
    -0.48923966,
    -0.78052354,
    -0.9720104,
    -1.3723742,
    -1.5258976,
    -1.5521746,
    -0.590579,
    -0.715331,
    -0.7067678,
    -1.4700108,
    -1.7739366,
    -2.1345189,
    -0.63341326,
    -0.7981235,
    -0.8141089,
    -0.7438702,
    -0.7644507,
    -0.78626335,
    -0.407409,
    -0.50193727,
    -0.45359674,
    -0.6064462,
    -0.61277944,
    -0.6247721,
    -2.5815966,
    -0.93498725,
    -1.7067574,
    -0.5444553,
    -1.4243516,
    -0.20755717,
    -0.6372107,
    -1.0033209,
    -1.3728585,
    -0.24968326,
    0.24689457,
    0.5115149,
    -1.1194944,
    -0.16026159,
    0.4214668,
    0.8985746,
    -0.59249294,
    -0.63429016,
    -0.61638594,
    -1.1552078,
    -0.10258876,
    -0.55882436,
    -0.39654624,
    -0.9263503,
    -0.22735429,
    -0.46372163,
    -0.80338,
    -0.24603955,
    -0.41725054,
    -0.16550721,
    -0.80973345,
    -0.14024673,
    0.40850312,
    0.30903146,
    -0.03161463,
    0.28109458,
    0.52637285,
    0.20059577,
    0.39464775,
    0.24041606,
    0.08618457,
    -0.050252013,
    -0.342535,
    -0.12230243,
    0.4867817,
    0.5365313,
    0.88505036,
    0.3244817,
    0.045326672,
    0.16320258,
    -0.953545,
    -1.0577474,
    -1.2183977,
    -1.5544643,
    -0.5309001,
    -0.06684582,
    -0.002311611,
    -2.2705936,
    -1.9298182,
    -1.7125815,
    -1.4998771,
    -1.2138566,
    -1.0443932,
    -0.84172356,
    -0.5930368,
    -0.47010797,
    -0.55298257,
    -0.8856116,
    -1.2000715,
    -1.5578792,
    -1.804836,
    -2.0595677,
    -2.4756207,
    -2.7172167,
    -2.8435562,
    0.25014108,
    0.1515511,
    -0.034741223,
    -0.22457047,
    -0.05175932,
    -0.12586145,
    -0.0018706436,
    -1.4482762,
    -0.5812585,
    -0.024348073,
    -0.098373555,
    -0.08289272,
    0.23590025,
    -0.034951113,
    0.21934886,
    0.16774462,
    0.003484105,
    0.5655423,
    0.36429605,
    0.08218329,
    -0.2778651,
    -0.6882204,
    0.05413077,
    0.07208116,
    -0.1518862,
    -0.59323066,
    -1.0224667,
    0.016147392,
    0.58875686,
    -0.085555956,
    -0.687593,
    -1.1336852,
    -0.008107282,
    0.69785947,
    0.109525174,
    -0.62700385,
    -1.1116781,
    0.08102147,
    0.36026332,
    0.13419443,
    0.004833671,
    -0.18199947,
    0.82136816,
    0.86513186,
    0.30981958,
    -0.19317642,
    -0.81689864,
    0.86870056,
    0.74666077,
    0.22105262,
    -0.2698328,
    -0.93584174,
    -0.32270598,
    -0.0066868966,
    -0.05252418,
    -0.41529027,
    -0.799745,
    0.7514107,
    0.7842853,
    0.25059038,
    -0.4135676,
    -0.97602177,
    0.95830095,
    0.8194481,
    0.18460771,
    -0.52429783,
    -1.1215069,
    -0.043362882,
    -0.37548295,
    -0.66618186,
    -0.1252232,
    -0.3524274,
    -0.6863393,
    0.14098802,
    -0.069153644,
    0.07358502,
    0.1686514,
    0.41572577,
    0.17879675,
    0.7234545,
    0.45065105,
    0.5664299,
    0.33794025,
    0.2904011,
    0.4232213,
    0.0053475164,
    -0.008328738,
    -0.005392799,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_0KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    -0.21254763,
    0.23103847,
    -0.033314772,
    0.28951204,
    0.08258201,
    -0.20170505,
    -0.083164066,
    0.039200466,
    -0.00088396505,
    0.3021171,
    0.11830643,
    -0.081436746,
    -0.40565103,
    -0.37145954,
    -0.18355277,
    0.06397571,
    0.20453936,
    0.55752325,
    -0.12067064,
    -0.30509105,
    -0.22406316,
    0.04068911,
    0.06334039,
    0.038877312,
    -2.746777,
    -0.87377214,
    -0.65470624,
    0.73748547,
    1.1899408,
    2.4166262,
    -0.82226,
    -1.3962785,
    -1.4452674,
    0.5082308,
    1.2789531,
    2.7618878,
    -0.3863811,
    0.031400807,
    -0.102757595,
    -0.38964626,
    -0.14711878,
    -0.31159613,
    -2.9462645,
    1.2216566,
    0.49116233,
    -4.1368756,
    -3.0489886,
    0.14062,
    0.4538722,
    -0.20252825,
    0.1369588,
    -0.058979962,
    0.08831377,
    0.02167715,
    -0.26413515,
    0.028735323,
    0.47112805,
    0.67481583,
    -0.037136614,
    -0.023578765,
    0.06294667,
    -0.05659834,
    -1.2630483,
    0.25168982,
    0.096158154,
    0.43390813,
    1.3263559,
    -0.38228187,
    0.30753988,
    -0.17709245,
    0.021742836,
    0.3967858,
    0.37994313,
    -0.5040257,
    -0.60063547,
    -0.5784962,
    -0.09444315,
    0.42124468,
    -0.95363337,
    -0.8204556,
    -0.515455,
    0.36224493,
    3.6014647,
    0.6930546,
    -0.022836408,
    1.229127,
    -0.20067202,
    -0.88029164,
    -1.945374,
    0.27076137,
    0.24485452,
    -0.2529798,
    0.3806981,
    -0.1388048,
    -0.43375793,
    1.5184788,
    0.4213168,
    1.0030801,
    -0.12647864,
    -0.28902504,
    -0.68267906,
    0.3738028,
    0.69471484,
    1.1517682,
    -0.16151088,
    -0.5155371,
    -0.17652579,
    2.4710944,
    0.30520877,
    2.0582628,
    1.0057538,
    0.5753131,
    -4.1801777,
    -0.5127082,
    0.45404467,
    1.4079078,
    0.3417027,
    0.39399534,
    0.1540643,
    0.2801745,
    0.3059642,
    0.2046346,
    -0.05043553,
    0.38525426,
    0.006237678,
    0.3969141,
    0.18871525,
    -1.5612092,
    -0.39385808,
    0.7173354,
    -0.24273492,
    -0.060208935,
    0.20501433,
    0.06431221,
    0.007810466,
    -0.006842167,
    0.25922537,
    0.22373736,
    1.4958718,
    -2.2605436,
    -1.6751494,
    -1.7748834,
    -0.15428533,
    -0.13730817,
    0.3625118,
    0.7318449,
    -2.1013966,
    -1.6390495,
    -0.58728755,
    0.705842,
    0.05825597,
    -1.3842419,
    0.5513746,
    1.3413002,
    1.6110371,
    1.1969258,
    1.6104766,
    0.26784024,
    -0.82374805,
    -0.27678168,
    0.63337976,
    1.37859,
    1.5559744,
    -0.2600439,
    -1.5502057,
    -0.7311096,
    -0.89582264,
    -0.8938125,
    -1.1783751,
    -0.29525974,
    -1.3265866,
    -2.8699765,
    0.3670057,
    -0.02602606,
    -0.094160676,
    0.038038492,
    0.18733682,
    0.1730221,
    0.4983536,
    -0.6600161,
    0.07679693,
    1.6442226,
    0.74923706,
    1.2906911,
    -0.0030353356,
    1.5110451,
    1.8540987,
    0.46657535,
    1.0854816,
    0.6397842,
    0.38965192,
    0.4017657,
    0.15735355,
    0.2403061,
    0.20836167,
    0.8231178,
    3.0737865,
    -0.0031571696,
    -0.0045039677,
    -0.0037830565,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_2KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    0.74340206,
    0.8866524,
    0.19227469,
    0.27914506,
    -0.07435362,
    -0.17425537,
    0.058424983,
    1.9746349,
    1.7218894,
    1.8105286,
    1.531511,
    1.5914743,
    1.4231095,
    0.4235089,
    0.66339827,
    0.63523614,
    0.9153804,
    1.0557065,
    1.0377694,
    0.88337386,
    0.84809065,
    0.940997,
    1.3488222,
    1.6759639,
    1.8004088,
    0.5537621,
    0.61169434,
    0.6802472,
    0.66822344,
    0.7161975,
    0.70100737,
    0.32747075,
    0.41082826,
    0.4001165,
    0.5148007,
    0.5518018,
    0.4865356,
    3.0914547,
    0.9657036,
    1.8307301,
    0.7854516,
    1.6319255,
    0.45455232,
    0.73518443,
    1.2975448,
    1.0345052,
    0.07539412,
    -0.16254115,
    -0.39686382,
    0.54749477,
    0.07604187,
    -0.09408931,
    -0.40679157,
    0.6163981,
    0.64663583,
    1.3272775,
    0.50621593,
    -0.34428293,
    0.5744485,
    0.37662667,
    2.074678,
    0.24922338,
    0.39144802,
    0.51035076,
    0.31404534,
    0.29868874,
    -0.059164185,
    0.49271122,
    0.08926484,
    -0.33997145,
    -0.23081866,
    -0.24764012,
    -0.20499611,
    -0.57144743,
    -0.24692917,
    0.5581246,
    -0.27793485,
    -0.054261696,
    0.07508932,
    0.061357047,
    0.122493744,
    -0.53826827,
    -0.428977,
    -0.23468605,
    -0.47363526,
    0.016462326,
    0.02342304,
    0.78658545,
    1.8085512,
    1.9672012,
    2.051288,
    2.195123,
    1.4760875,
    0.21867009,
    0.5544835,
    1.7766242,
    1.7921289,
    1.7793555,
    1.3578136,
    1.062105,
    0.676992,
    0.3856035,
    0.016221732,
    0.0505759,
    0.21949282,
    0.4945028,
    0.7011359,
    0.9019364,
    1.1966107,
    1.3321413,
    1.5548187,
    1.9031806,
    -0.23732749,
    -0.13759111,
    0.016248431,
    0.28156674,
    0.028572083,
    0.13403529,
    -0.0015116697,
    2.470938,
    0.8567449,
    0.04850138,
    0.1360928,
    0.030853108,
    -0.19256574,
    0.020027008,
    -0.17481746,
    -0.14725745,
    0.0051122922,
    -0.5881908,
    -0.28545934,
    -0.07479224,
    0.25929347,
    0.64034617,
    -0.1467385,
    -0.1807505,
    0.09614199,
    0.5037001,
    0.8043767,
    0.030549055,
    -0.61460996,
    -0.025823163,
    0.5728462,
    1.0480692,
    0.00772154,
    -0.6248999,
    -0.11073841,
    0.6179732,
    1.1149002,
    -0.16685477,
    -0.39335948,
    -0.19945364,
    -0.04434194,
    0.19834568,
    -0.80261016,
    -0.78782547,
    -0.3184363,
    0.1980272,
    0.7859952,
    -0.80369616,
    -0.75402695,
    -0.27930278,
    0.25530982,
    0.77835417,
    0.32921213,
    -0.026143199,
    0.034931317,
    0.25499246,
    0.5698176,
    -0.72880924,
    -0.66718185,
    -0.19075386,
    0.39992994,
    0.97680414,
    -0.83526933,
    -0.736302,
    -0.15814395,
    0.44932702,
    1.0307037,
    -0.014983855,
    0.121036835,
    0.27747187,
    0.049697086,
    0.13362296,
    0.40544462,
    -0.0268566,
    0.019078465,
    -0.07305576,
    -0.31667945,
    -0.49753815,
    -0.22694911,
    -0.5478295,
    -0.3468695,
    -0.3076366,
    -0.10361143,
    -0.076300256,
    -0.443506,
    0.0042860033,
    -0.004753387,
    0.009866308,
    0.0054509398,
    -0.0066909315,
    0.0056339707,
    0.005903894,
    -0.0017206976,
    -0.0018851925,
    0.007400766,
    -2.1220245,
    -1.9092977,
    -1.8550628,
    -1.5736384,
    -1.5751387,
    -1.5348152,
    -0.8187564,
    -1.1642737,
    -1.1240382,
    -1.5156361,
    -1.5742482,
    -1.6432687,
    -0.4822776,
    -0.78303766,
    -0.7328226,
    -1.2233135,
    -1.4766777,
    -1.7968647,
    -0.5146335,
    -0.7049272,
    -0.78095514,
    -0.665415,
    -0.7359586,
    -0.6693967,
    -0.3058136,
    -0.42359746,
    -0.43917972,
    -0.47068208,
    -0.5145429,
    -0.48921472,
    -2.3924565,
    -0.5802498,
    -1.8663318,
    -0.19689512,
    -1.1964437,
    0.17950587,
    -0.5373922,
    -0.9729237,
    -0.8486523,
    -0.29832563,
    0.14315517,
    0.1971672,
    -0.6895767,
    -0.15000547,
    0.20118581,
    0.24677928,
    -0.52687806,
    -0.74365175,
    -1.3410645,
    -0.9197052,
    0.22613958,
    -0.446742,
    -0.84887576,
    -0.9881834,
    -0.2559989,
    -0.27198485,
    -0.20645374,
    -0.24278903,
    -0.3788344,
    0.0034728234,
    -0.1702952,
    0.01466205,
    0.32556155,
    0.30401808,
    0.4196575,
    0.09052346,
    0.42248556,
    -0.11130452,
    -0.26204097,
    0.40554988,
    0.102352336,
    -0.027437765,
    -0.046503473,
    -0.08059348,
    0.3107026,
    0.39930302,
    0.5044414,
    0.28166553,
    0.1800511,
    -0.375814,
    -0.41122568,
    -0.44354212,
    -0.5989346,
    -0.59099656,
    -0.117682725,
    -0.019043261,
    -0.0073848907,
    -2.368632,
    -1.8303246,
    -1.4910878,
    -1.217683,
    -0.7232851,
    -0.72820127,
    -0.701456,
    -0.35118955,
    -0.18738441,
    -0.9762871,
    -1.2672195,
    -1.369697,
    -1.6331558,
    -1.8706524,
    -2.073368,
    -2.3988051,
    -2.6793463,
    -2.0970182,
    0.20724551,
    0.15908164,
    0.0038859416,
    -0.23579583,
    -0.018455552,
    -0.15128641,
    0.11777885,
    -0.86033386,
    -0.4013142,
    -0.04004327,
    -0.10385229,
    -0.036097758,
    0.08052869,
    -0.038410816,
    0.26149362,
    0.21895908,
    0.0020160126,
    0.43437943,
    0.24263602,
    0.026148481,
    -0.22415753,
    -0.51820344,
    -0.13813815,
    -0.24293503,
    -0.36645252,
    -0.53304183,
    -0.7826883,
    0.02044976,
    0.47379643,
    -0.048435755,
    -0.57926416,
    -0.9971271,
    -0.006894713,
    0.5982781,
    0.11539435,
    -0.46048015,
    -1.0532402,
    -0.3859966,
    -0.06076357,
    -0.08599619,
    -0.057627212,
    -0.38657007,
    0.71427613,
    0.6546442,
    0.21170661,
    -0.22532475,
    -0.70426565,
    0.76218075,
    0.5941488,
    0.17996983,
    -0.27427116,
    -0.92141753,
    -0.3777131,
    -0.17690434,
    -0.1803047,
    -0.24875364,
    -0.25724924,
    0.79329455,
    0.6317731,
    0.17893332,
    -0.35920343,
    -0.857438,
    0.88346523,
    0.6900649,
    0.18664534,
    -0.3916747,
    -0.98089993,
    -0.11971266,
    -0.20076762,
    -0.35096866,
    -0.1299435,
    -0.35723317,
    -0.20640692,
    -0.06278743,
    0.02090057,
    0.25095922,
    0.16235793,
    0.14475213,
    0.038749717,
    0.4705613,
    0.0890607,
    0.35051858,
    0.03613461,
    0.08537339,
    0.24298915,
    0.0053475164,
    -0.008328738,
    -0.005392799,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_2KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    0.13053814,
    0.2594758,
    0.24701957,
    0.32714072,
    0.2772792,
    -0.13828218,
    -0.10215987,
    0.098732464,
    0.019896906,
    -0.056102987,
    -0.07790267,
    -0.42510068,
    -0.30549508,
    -0.45333365,
    -0.52566814,
    -0.29246622,
    -0.28865135,
    -0.26258516,
    0.11082738,
    0.17156202,
    -0.038298223,
    0.46970895,
    0.49330792,
    0.45982635,
    -1.5306015,
    -0.70623446,
    -1.6051459,
    1.1686573,
    1.569235,
    2.0058358,
    -2.5606222,
    -1.2750763,
    -2.0411723,
    0.8546261,
    1.8828146,
    2.5776637,
    -0.54405427,
    0.17359827,
    -0.07840562,
    -0.24876921,
    -0.18755311,
    -0.26911703,
    -3.0770643,
    1.1082592,
    0.26119882,
    -2.5300553,
    -2.871422,
    0.03775389,
    0.4238567,
    -0.33088768,
    0.10647789,
    -0.13209525,
    0.08560816,
    0.0468911,
    -0.21627295,
    0.05250266,
    0.38945135,
    0.81790227,
    -0.23717421,
    -0.22604689,
    -0.19218688,
    -0.20800717,
    -0.033787068,
    0.122389324,
    -0.10022763,
    -0.073142864,
    0.6767682,
    -0.04690488,
    0.33146432,
    -0.22365022,
    -0.0036192038,
    0.46967515,
    0.51455325,
    -0.2567931,
    -0.40734252,
    -0.42442977,
    -0.001470779,
    0.22078364,
    -1.2574711,
    -0.85755,
    -0.74906814,
    -0.17770536,
    3.6172705,
    0.54112595,
    0.6423261,
    0.9667451,
    0.199188,
    -1.3389384,
    0.16624917,
    0.19690222,
    -0.4323959,
    -0.23050337,
    0.34784153,
    0.61946857,
    -0.7219571,
    1.2463146,
    0.5738733,
    2.0701928,
    0.049495548,
    -0.42689493,
    -1.0372397,
    0.26199716,
    0.7308859,
    1.6175814,
    -0.0076032556,
    -0.68225515,
    0.12284207,
    2.349499,
    0.1210995,
    2.3559947,
    1.0110165,
    0.4826661,
    -4.137684,
    -0.87189615,
    0.58148867,
    1.5087106,
    0.51515806,
    0.27801824,
    0.1363943,
    0.39705855,
    0.3311712,
    0.13834442,
    -0.009231192,
    0.37948412,
    0.013899716,
    0.34986228,
    0.20538929,
    -1.3363253,
    -0.6954224,
    -0.26191995,
    -0.23036456,
    -0.17417376,
    0.21034743,
    0.08639803,
    0.009099964,
    0.0013535284,
    0.37892112,
    0.085819654,
    1.4048743,
    -2.3133554,
    -1.2493757,
    -1.597994,
    -0.20851141,
    -0.025360083,
    0.2432856,
    0.7032871,
    -1.9057463,
    -1.1427703,
    -0.49652052,
    0.84754634,
    0.08384458,
    -1.2245532,
    0.5221889,
    1.2940357,
    1.6118815,
    1.3088297,
    1.4081663,
    -0.2697331,
    -0.76520354,
    -0.34188744,
    0.6127755,
    1.3039353,
    1.4138254,
    0.12542252,
    -1.4124713,
    -0.9411064,
    -0.9240627,
    -0.92811567,
    -1.1624233,
    -0.3372181,
    -1.4078445,
    -2.251844,
    0.36175016,
    -0.023277655,
    -0.08955618,
    0.0533145,
    0.14049543,
    -0.019719895,
    -0.007010526,
    -0.096855216,
    -0.22378309,
    1.7177029,
    0.7570125,
    1.2928087,
    0.07078977,
    1.540554,
    1.9195119,
    0.41963235,
    0.9632119,
    0.60895467,
    0.32042414,
    0.36884412,
    0.16893406,
    0.3075245,
    -0.011423582,
    0.7850744,
    3.0451703,
    0.0,
    0.0,
    0.0,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_0KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.5261247,
    1.3610411,
    0.723327,
    0.74667186,
    0.3474192,
    0.2224449,
    0.101363,
    1.8596203,
    1.73091,
    1.7715479,
    1.7103584,
    1.7431772,
    1.7094711,
    0.66126156,
    0.9366653,
    0.9694009,
    1.2113607,
    1.2631677,
    1.3892393,
    0.057258677,
    0.78773355,
    0.9260398,
    1.0872235,
    1.4260119,
    1.7454096,
    0.3922527,
    0.47459278,
    0.48079732,
    0.52021444,
    0.57250214,
    0.58713096,
    0.3017438,
    0.41530368,
    0.42760342,
    0.49420914,
    0.53994143,
    0.56596184,
    1.9399853,
    0.62915736,
    1.5293316,
    0.31101817,
    1.3018241,
    0.090411656,
    0.51942986,
    1.1465514,
    0.97871405,
    0.10418347,
    -0.14839526,
    -0.5844859,
    0.64806175,
    0.11827245,
    -0.13940546,
    -0.7597371,
    0.61731404,
    0.83536506,
    -0.06620462,
    0.7753115,
    0.4123568,
    0.49376267,
    0.20967253,
    0.94356525,
    0.11353627,
    0.20589441,
    0.85002106,
    0.25152838,
    0.6074561,
    0.033716384,
    0.0058914237,
    0.20548643,
    -0.41736367,
    -0.2706317,
    0.2916129,
    -0.20017102,
    -0.5553598,
    -0.10773455,
    0.4791119,
    -0.1695479,
    -0.03249219,
    0.05632503,
    -0.26284724,
    0.07030679,
    -0.395844,
    -0.38271916,
    -0.9221553,
    -0.455218,
    0.031083276,
    -0.03240542,
    0.5218518,
    1.0487695,
    1.0870696,
    1.200525,
    1.7895106,
    0.47086832,
    0.105915636,
    0.65531105,
    1.4507463,
    1.3695135,
    1.2006834,
    1.1337366,
    0.97660357,
    0.9425322,
    1.0400804,
    0.46517196,
    0.6318838,
    0.81903505,
    0.91471565,
    1.0384638,
    1.0523885,
    1.046063,
    1.1431087,
    1.1788259,
    1.322581,
    -0.20004824,
    -0.20353088,
    0.022119729,
    0.30157903,
    0.07422292,
    0.19847034,
    0.054767814,
    1.1376625,
    0.7332731,
    0.019735128,
    0.112822816,
    0.07978186,
    -0.16335006,
    0.041503437,
    -0.1656954,
    -0.13413368,
    0.0051122922,
    -0.2832498,
    -0.17018133,
    -0.13281198,
    -0.056267455,
    0.12688279,
    0.34999362,
    0.10588506,
    -0.0084067015,
    0.08781918,
    0.26077473,
    0.57043386,
    0.7641277,
    -0.020718379,
    -0.26791847,
    -0.010921165,
    0.24368893,
    0.67743194,
    0.85018575,
    -0.062046748,
    -0.37623075,
    -0.06476914,
    0.25396106,
    0.63558155,
    0.79520196,
    -0.14923713,
    -0.2704116,
    -0.24353173,
    -0.20893867,
    -0.1017505,
    0.0014665298,
    -0.6992663,
    -0.7025971,
    -0.48461837,
    -0.20666093,
    -0.01417946,
    0.3209578,
    -0.7182337,
    -0.66976446,
    -0.41570446,
    -0.12359731,
    0.17158388,
    0.49967977,
    0.24784221,
    0.05144099,
    -0.042461768,
    0.016704526,
    0.2626129,
    0.5442882,
    -0.51180035,
    -0.4529318,
    -0.23830414,
    0.021417933,
    0.40706092,
    0.8006058,
    -0.6781657,
    -0.55411214,
    -0.30622798,
    0.026780553,
    0.445636,
    0.7973329,
    -0.04268253,
    0.07128026,
    0.40682396,
    0.11456001,
    0.162002,
    0.52571064,
    -0.06742266,
    0.10036264,
    0.029871434,
    -0.51562107,
    -0.15643974,
    -0.14471948,
    -0.5427521,
    -0.87522656,
    -0.42812803,
    -0.341914,
    -0.27633905,
    -0.15982482,
    -0.000116079114,
    -0.009369239,
    0.0092722215,
    0.0030306866,
    -0.00916178,
    -0.0003501959,
    0.00912733,
    -0.008776911,
    -1.8511885,
    -1.7606657,
    -1.749549,
    -1.6927553,
    -1.7501595,
    -1.7851763,
    -0.458107,
    -0.55057853,
    -0.7673636,
    -0.9163981,
    -1.057003,
    -1.2429835,
    -0.37361333,
    -0.594959,
    -0.6569962,
    -1.0389415,
    -1.3062344,
    -1.7987559,
    -0.5178943,
    -0.5665825,
    -0.6196004,
    -0.5829699,
    -0.6939249,
    -0.69518113,
    -0.42996293,
    -0.44462535,
    -0.42727265,
    -0.5624552,
    -0.56585354,
    -0.5956794,
    -2.0081415,
    -0.92081827,
    -1.515209,
    -0.55488825,
    -1.4768518,
    -0.10473161,
    -0.6834862,
    -1.194212,
    -1.2452207,
    -0.17448722,
    0.10580429,
    0.5843849,
    -0.8202764,
    -0.24667837,
    0.07359436,
    0.77466923,
    -0.52586746,
    -0.85201305,
    -1.2940226,
    -0.661108,
    -0.28457192,
    -0.12664528,
    -0.60891813,
    -0.91387093,
    -0.10137418,
    -0.20511068,
    -0.2588419,
    -0.21585733,
    -0.33533302,
    -0.016895438,
    -0.058086134,
    0.04021453,
    0.4012738,
    0.26863876,
    0.33732387,
    0.11732226,
    0.45245576,
    0.11373374,
    -0.028482683,
    0.28071678,
    0.06110915,
    -0.057865247,
    0.051538005,
    -0.062081933,
    0.3792709,
    0.5987695,
    0.5272225,
    0.41325212,
    0.053707425,
    0.11574812,
    -0.96450967,
    -1.0300285,
    -1.1530488,
    -1.3117571,
    -0.16416734,
    -0.01503653,
    -0.0083404025,
    -1.390555,
    -1.2639756,
    -1.2403152,
    -1.0729585,
    -0.98824495,
    -0.819613,
    -0.69524336,
    -0.70404035,
    -0.168219,
    -1.0536278,
    -1.1042153,
    -1.179578,
    -1.1892838,
    -1.1829836,
    -1.3148243,
    -1.4453062,
    -1.5627029,
    -1.8639379,
    0.24693362,
    0.21971396,
    -0.0006153257,
    -0.22042812,
    -0.06647089,
    -0.17888401,
    -0.03153969,
    -1.0020994,
    -0.56335425,
    -0.021258034,
    -0.091879204,
    -0.07037492,
    0.13532108,
    -0.046333354,
    0.17600611,
    0.13963608,
    0.005889902,
    0.20434988,
    0.20490673,
    0.12776783,
    -0.038237892,
    -0.23433971,
    -0.42991436,
    0.09069277,
    0.14907749,
    0.055850256,
    -0.15231802,
    -0.40652618,
    -0.6451971,
    -0.021496898,
    0.27942804,
    0.0584027,
    -0.18379997,
    -0.5533038,
    -0.7331273,
    -0.05704977,
    0.35599503,
    0.11821906,
    -0.15130301,
    -0.51966417,
    -0.8233628,
    0.11587985,
    0.17605075,
    0.20010899,
    0.06737475,
    -0.10185702,
    -0.092958935,
    0.5059075,
    0.5306718,
    0.33650592,
    0.06811619,
    -0.13855924,
    -0.25471312,
    0.5083694,
    0.52963084,
    0.33011347,
    0.07275861,
    -0.19890028,
    -0.5090385,
    -0.057095937,
    0.09134191,
    0.11820791,
    0.025245978,
    -0.19318877,
    -0.40743762,
    0.35898307,
    0.3966839,
    0.19355759,
    -0.07504428,
    -0.39366993,
    -0.6730042,
    0.50102943,
    0.49759525,
    0.23347878,
    -0.07931312,
    -0.45529214,
    -0.70761466,
    0.09035139,
    -0.099134855,
    -0.34993848,
    -0.026447287,
    -0.05643108,
    -0.3345152,
    0.13819566,
    0.10814995,
    -0.32127094,
    0.14174084,
    0.1853268,
    0.1091985,
    0.42446575,
    0.08303159,
    0.4452138,
    0.31611356,
    -0.023141636,
    0.2927434,
    -0.0075867055,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_0KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.071415216,
    0.12442188,
    -0.09566238,
    0.025814263,
    0.39882815,
    0.16391489,
    -0.008581701,
    -0.13815464,
    -0.13051334,
    0.02532715,
    0.32889652,
    0.20524831,
    -0.49096164,
    -0.30895254,
    -0.23303136,
    0.23083706,
    0.2964616,
    0.24874644,
    -0.2457537,
    -0.20580663,
    -0.20578788,
    0.22220248,
    0.24823901,
    0.27056095,
    -1.7412964,
    -1.2658727,
    -0.9884221,
    0.21221639,
    0.76972306,
    2.9932423,
    -0.8941595,
    -1.4919809,
    -0.6434117,
    0.1866445,
    0.6302275,
    3.7471368,
    -0.19908637,
    -0.05053481,
    -0.22026536,
    -0.20168278,
    -0.06375163,
    -0.34524786,
    -2.9306319,
    1.2972493,
    0.24407394,
    -3.5354817,
    -2.9933457,
    -0.10331253,
    0.47185874,
    -0.14110662,
    0.10932957,
    0.0013340656,
    0.07475349,
    -0.016720613,
    -0.23927939,
    -0.011462316,
    0.34377918,
    0.72500736,
    0.85285324,
    -0.110500894,
    -0.105389334,
    -0.017042588,
    0.10457068,
    0.0042217867,
    -0.21249798,
    -0.085640766,
    -0.45459425,
    -0.16079083,
    0.55052006,
    2.0902095,
    -0.37665167,
    0.27560315,
    -0.059153534,
    0.035410654,
    0.26979086,
    0.5431667,
    0.5761751,
    -0.40052012,
    -0.44486472,
    -0.42993188,
    -0.155777,
    0.3429057,
    0.74014395,
    -0.7196886,
    -0.66130596,
    -0.5823512,
    -0.061252877,
    1.1902641,
    2.376007,
    0.48015076,
    -0.05263098,
    0.55019283,
    0.35582376,
    -0.3000633,
    -0.9577861,
    0.37041304,
    0.1807514,
    -0.058853548,
    0.19539088,
    0.03101509,
    -1.0235001,
    1.6822823,
    0.46977645,
    0.50950366,
    -0.1764842,
    -0.2133276,
    -1.0270724,
    0.4235578,
    0.47018492,
    0.59907496,
    -0.095802486,
    -0.2432442,
    -0.01910542,
    2.5890062,
    0.13449658,
    2.3261929,
    0.96748704,
    0.44940996,
    -4.1517406,
    -1.059962,
    0.81751895,
    1.4057382,
    0.43485394,
    0.52264935,
    0.0902257,
    0.27415887,
    0.29622847,
    0.18442348,
    -0.011864232,
    0.33198798,
    0.008446357,
    0.29941043,
    0.24493904,
    -1.3369043,
    0.41626275,
    0.329823,
    -0.10362355,
    0.111990936,
    0.22666475,
    0.06236524,
    0.0052082036,
    -0.0012640925,
    0.34226802,
    -0.037712023,
    1.718424,
    -2.2861829,
    -1.5476025,
    -1.518054,
    -0.16363169,
    0.14955013,
    0.6014917,
    1.1120517,
    -1.9437062,
    -1.5143054,
    -0.46494117,
    0.6082318,
    0.21189173,
    -1.3022004,
    0.3113392,
    1.2015941,
    1.7875376,
    1.4595233,
    1.7871752,
    0.90693253,
    -0.98388606,
    -0.55907655,
    0.42635015,
    1.2506536,
    1.9478662,
    0.16841666,
    -1.632099,
    -0.78296155,
    -1.2520697,
    -1.1554351,
    -1.4457918,
    -0.38163397,
    -1.3265272,
    -2.6471865,
    0.33752015,
    -0.024949715,
    -0.024228316,
    -0.09096827,
    0.036369875,
    0.06127662,
    0.20753954,
    -0.15602651,
    0.38449815,
    0.44087142,
    -0.1416285,
    -0.72993124,
    0.1605913,
    1.8260558,
    1.4085311,
    1.6873645,
    -0.23067553,
    1.8025221,
    2.1915245,
    0.68259877,
    1.5146484,
    0.60728025,
    0.6007257,
    0.6491273,
    0.2172983,
    0.6351415,
    0.4959009,
    0.77732676,
    2.8963873,
    0.00053430814,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_2KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.17289323,
    0.26427096,
    -0.11362809,
    -0.30194107,
    -0.5746442,
    -0.7513764,
    -0.66185546,
    1.7920762,
    1.6406698,
    1.6554422,
    1.5554373,
    1.6181781,
    1.6025087,
    0.31240502,
    0.47395107,
    0.62508667,
    0.8375829,
    0.9854525,
    1.074634,
    0.706242,
    0.5993252,
    0.8515868,
    1.1088092,
    1.4704242,
    1.8403285,
    0.39339882,
    0.5215277,
    0.5874034,
    0.604519,
    0.6698118,
    0.7051213,
    0.29436693,
    0.34365943,
    0.36574322,
    0.45183694,
    0.488889,
    0.52056295,
    2.6389463,
    1.0668191,
    1.758037,
    0.6549366,
    1.5669436,
    0.35796893,
    0.8591601,
    1.2414854,
    1.3721955,
    0.18606849,
    -0.03860168,
    -0.33732578,
    0.8311122,
    0.20476626,
    -0.08133487,
    -0.4231981,
    0.5284454,
    0.61293626,
    0.84667397,
    0.60382855,
    0.151226,
    0.35421517,
    -0.03129155,
    0.7515745,
    0.11222498,
    0.26258796,
    0.49688694,
    0.27369004,
    0.42704406,
    -0.03470376,
    0.2093653,
    0.2750542,
    -0.42127267,
    -0.20782046,
    -0.100518405,
    -0.17308903,
    -0.43136564,
    -0.19885139,
    -0.16048467,
    -0.25942788,
    -0.04952238,
    0.04663218,
    0.024738919,
    0.08344032,
    -0.34110314,
    -0.39957583,
    -0.39570776,
    -0.43341887,
    0.010210244,
    0.00916047,
    0.1671524,
    1.2600591,
    1.3369464,
    1.5364972,
    2.0057597,
    0.7575073,
    0.12609132,
    0.5406614,
    1.5893201,
    1.4848614,
    1.3055946,
    1.1358923,
    1.011639,
    0.77358645,
    0.72526777,
    0.46083125,
    0.64705336,
    0.71660674,
    0.767994,
    0.764268,
    0.7535087,
    0.804159,
    0.8258075,
    0.8792473,
    0.9606267,
    -0.20823878,
    -0.21017382,
    -0.0029396196,
    0.24746323,
    0.016362106,
    0.16751653,
    -0.015573008,
    1.1504261,
    0.58168125,
    0.00959235,
    0.09407758,
    0.052180443,
    -0.13831612,
    0.037424907,
    -0.13478121,
    -0.12372994,
    0.0051122922,
    -0.23030464,
    -0.17582747,
    -0.1537429,
    -0.051055927,
    0.1090894,
    0.30741838,
    -0.02487594,
    -0.020436823,
    0.043637678,
    0.25668874,
    0.49451432,
    0.6514818,
    -0.043178633,
    -0.3506677,
    -0.087600105,
    0.20167334,
    0.5570546,
    0.7217284,
    -0.07177425,
    -0.48781952,
    -0.1783457,
    0.14852034,
    0.5532943,
    0.79946387,
    -0.062743716,
    -0.20380992,
    -0.14227739,
    -0.08604725,
    -0.01777357,
    0.23069783,
    -0.6576737,
    -0.6413284,
    -0.4028841,
    -0.14730051,
    0.16475838,
    0.43992186,
    -0.6126278,
    -0.60857284,
    -0.36087278,
    -0.08558437,
    0.1927275,
    0.58714,
    0.28679007,
    0.01849907,
    -0.045431823,
    0.05254288,
    0.23384486,
    0.48638675,
    -0.45884585,
    -0.46548498,
    -0.23555586,
    0.027835844,
    0.39137942,
    0.6400244,
    -0.66882485,
    -0.56458014,
    -0.2917742,
    0.060243376,
    0.43235677,
    0.7563703,
    -0.043302327,
    0.08291177,
    0.30885342,
    0.09151073,
    0.15867713,
    0.33471072,
    -0.04669855,
    -0.03772542,
    -0.08262773,
    -0.32562095,
    -0.34347013,
    -0.23751348,
    -0.649346,
    -0.7790829,
    -0.33877462,
    -0.30271646,
    -0.34582135,
    -0.3480951,
    -0.000116079114,
    -0.009369239,
    0.0092722215,
    0.0030306866,
    -0.00916178,
    -0.0003501959,
    0.00912733,
    -0.008776911,
    -1.8190669,
    -1.7090372,
    -1.7503017,
    -1.6432669,
    -1.6968378,
    -1.6668901,
    -0.6746299,
    -0.961851,
    -1.0617132,
    -1.201604,
    -1.3394852,
    -1.4287913,
    -0.4975526,
    -0.6588769,
    -0.9108675,
    -1.1243014,
    -1.5186808,
    -1.8291688,
    -0.5115092,
    -0.542859,
    -0.5857586,
    -0.672309,
    -0.65316284,
    -0.6899917,
    -0.30660573,
    -0.38500184,
    -0.4041654,
    -0.48126584,
    -0.5246564,
    -0.53085905,
    -2.2604928,
    -0.5186562,
    -1.779144,
    -0.21655338,
    -1.4862266,
    0.29127157,
    -0.6241826,
    -1.2488543,
    -0.9707874,
    -0.2479608,
    -0.06970907,
    0.29389906,
    -0.753978,
    -0.19892114,
    0.015170229,
    0.3497547,
    -0.3933403,
    -0.7153888,
    -1.165815,
    -0.6993362,
    -0.39194047,
    -0.18220429,
    -0.2247807,
    -0.5973488,
    -0.11816381,
    -0.22013883,
    -0.24338362,
    -0.22480023,
    -0.51169443,
    0.15932877,
    -0.1709303,
    -0.18536894,
    0.38811538,
    0.28534707,
    0.28540337,
    0.12607117,
    0.40793607,
    -0.046109416,
    0.062236305,
    0.17375173,
    0.058306437,
    -0.030390335,
    -0.06352789,
    -0.040653724,
    0.3204568,
    0.45386574,
    0.3056413,
    0.4848708,
    -0.09619282,
    -0.040161222,
    -0.54226846,
    -0.6764205,
    -0.83438903,
    -1.1424141,
    -0.1402649,
    -0.079995915,
    -0.0049278066,
    -1.4953818,
    -1.3186455,
    -1.0757424,
    -0.97960335,
    -0.7688357,
    -0.6740143,
    -0.5369375,
    -0.45295525,
    -0.120508246,
    -1.2246364,
    -1.2833135,
    -1.2965083,
    -1.3299521,
    -1.3469564,
    -1.3492117,
    -1.4247576,
    -1.5328963,
    -1.716537,
    0.19496936,
    0.21663474,
    -0.001133262,
    -0.24204215,
    -0.018062733,
    -0.15768561,
    0.0056446404,
    -0.87162036,
    -0.44390187,
    -0.0035161308,
    -0.0718366,
    -0.10205166,
    0.12319265,
    -0.03915715,
    0.18713354,
    0.12882808,
    0.005889902,
    0.21317036,
    0.15234087,
    0.075964056,
    -0.05102467,
    -0.199924,
    -0.3847898,
    -0.040068064,
    -0.10959654,
    -0.17005822,
    -0.32289508,
    -0.53759634,
    -0.6294278,
    -0.043957077,
    0.20403732,
    0.005306883,
    -0.21835263,
    -0.517107,
    -0.70175874,
    -0.06677743,
    0.34902912,
    0.09646176,
    -0.20272179,
    -0.5806621,
    -0.83325225,
    0.009904095,
    0.23572558,
    0.2058162,
    0.19432293,
    0.032315996,
    -0.09950723,
    0.5050787,
    0.53852475,
    0.3476613,
    0.15055066,
    -0.11374007,
    -0.49101406,
    0.49556163,
    0.47884607,
    0.27335748,
    0.045893613,
    -0.17877232,
    -0.50312495,
    -0.20892833,
    -0.019982778,
    0.05194017,
    -0.015936684,
    -0.18424594,
    -0.43346703,
    0.39498785,
    0.38921326,
    0.20854685,
    -0.047438458,
    -0.3329979,
    -0.63356876,
    0.5867254,
    0.49410743,
    0.27123758,
    -0.016653404,
    -0.38156942,
    -0.7396007,
    0.03757409,
    -0.08533822,
    -0.28292924,
    -0.0047480525,
    -0.14130281,
    -0.27680272,
    0.13919784,
    0.12100178,
    0.14382726,
    0.30474234,
    0.1910857,
    0.03543627,
    0.4778374,
    0.21272106,
    0.027598938,
    0.16966143,
    0.004545411,
    0.18589008,
    -0.0075867055,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_2KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.19618513,
    -0.12603372,
    -0.015536889,
    0.1261336,
    0.39343518,
    0.54471564,
    -0.15491426,
    -0.27759033,
    -0.0069163186,
    -0.0036204353,
    0.2059794,
    0.3110437,
    -0.42611456,
    -0.6068721,
    -0.49104723,
    -0.05461399,
    0.1272986,
    -0.00822559,
    0.1884023,
    -0.13636926,
    -0.13377881,
    0.30591944,
    0.487582,
    0.54234695,
    -1.3201939,
    -0.9234476,
    -0.88198483,
    0.3082681,
    0.94588137,
    2.3325715,
    -1.9623413,
    -0.81226206,
    -1.1284567,
    -0.12128122,
    1.1671778,
    3.1298351,
    -0.39097193,
    0.07514274,
    -0.06557368,
    -0.20560668,
    -0.13817734,
    -0.15567772,
    -1.6164923,
    1.0326616,
    0.21477142,
    -2.8077223,
    -2.551806,
    -0.13339965,
    0.38691,
    -0.30760485,
    0.06981112,
    -0.06082517,
    0.08143008,
    0.050636236,
    -0.19882275,
    0.03367009,
    0.3332777,
    0.6907215,
    0.6812265,
    -0.115635045,
    -0.117798366,
    -0.006480599,
    0.08968755,
    -0.014623408,
    -0.24321537,
    -0.06481637,
    -0.4970192,
    -0.21534547,
    0.51982844,
    1.7268767,
    0.004423392,
    0.30211067,
    -0.06706835,
    0.03738013,
    0.28384575,
    0.4953554,
    0.5341444,
    -0.38101324,
    -0.4474343,
    -0.41911015,
    -0.14857827,
    0.30844328,
    0.6750072,
    -0.97720045,
    -0.56535405,
    -0.17083597,
    0.54298985,
    1.5395478,
    1.096076,
    0.45582753,
    0.016415296,
    -0.33029875,
    0.44426945,
    -0.32968402,
    0.9531575,
    0.41011214,
    0.1216629,
    0.6917996,
    0.18339105,
    0.065131195,
    -0.6355726,
    1.5640646,
    0.46537867,
    1.1751071,
    -0.08667284,
    -0.22987743,
    -0.7127392,
    0.4810418,
    0.8214628,
    0.9918113,
    -0.09119934,
    -0.27208114,
    -0.13251854,
    2.426638,
    -0.104075655,
    2.1405137,
    3.3990076,
    0.45329964,
    -4.655621,
    -0.74131274,
    0.7973329,
    1.3661869,
    0.46773735,
    0.5741953,
    0.087222114,
    0.30638045,
    0.33453366,
    0.08256739,
    0.04432858,
    0.3225368,
    -0.021882322,
    0.32148007,
    0.31549633,
    -1.5004859,
    -0.13966632,
    0.45546106,
    -0.40373558,
    -0.24551375,
    0.18895926,
    0.07625407,
    0.0052082036,
    -0.0012640925,
    0.34141248,
    0.15663096,
    2.02077,
    -2.6822398,
    -1.6883273,
    -1.9041578,
    -0.1886726,
    0.25378472,
    0.5179474,
    1.0816803,
    -2.2359698,
    -1.5015856,
    -0.5805032,
    0.79634327,
    0.31051883,
    -1.2014942,
    0.25040248,
    1.1517992,
    1.6989455,
    1.3853481,
    1.6036713,
    0.7625884,
    -0.92504823,
    -0.5216621,
    0.36561957,
    1.1321492,
    1.6092598,
    0.61432403,
    -2.0228667,
    -0.8177022,
    -1.254545,
    -1.1593713,
    -1.2931123,
    -0.3154228,
    -1.1602424,
    -1.9565928,
    0.32626602,
    -0.028468128,
    -0.036849245,
    -0.112456985,
    0.043217946,
    0.08309858,
    0.24185763,
    -0.17654309,
    0.23051652,
    0.17497836,
    0.30518794,
    -0.17468643,
    -0.17940004,
    1.8823787,
    1.3385825,
    1.6534553,
    0.046787873,
    1.9449157,
    1.957238,
    0.5685186,
    1.369992,
    0.49561453,
    0.5704975,
    0.5515624,
    0.14864062,
    0.68902594,
    0.98338044,
    0.8225161,
    2.7357512,
    0.00053430814,
];
