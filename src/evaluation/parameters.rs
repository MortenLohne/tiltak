use std::{array, mem};

use half::f16;

use crate::{
    evaluation::policy_eval::sigmoid,
    position::{num_line_symmetries, num_square_symmetries, Komi},
};

use super::policy_eval::policy_offset;

pub const NUM_VALUE_FEATURES_4S: usize = 296;
pub const NUM_POLICY_FEATURES_4S: usize = 176;

pub const NUM_VALUE_FEATURES_5S: usize = 376;
pub const NUM_POLICY_FEATURES_5S: usize = 200;

pub const NUM_VALUE_FEATURES_6S: usize = 400;
pub const NUM_POLICY_FEATURES_6S: usize = 208;

const fn value_padding<const S: usize>() -> usize {
    match S {
        4 => 2,
        5 => 2,
        6 => 6,
        _ => unimplemented!(),
    }
}

const fn policy_padding<const S: usize>() -> usize {
    match S {
        4 => 7,
        5 => 3,
        6 => 1,
        _ => unimplemented!(),
    }
}

#[derive(Debug, Clone, Copy)]
pub struct IndexPair {
    start: usize,
    length: usize,
}

impl IndexPair {
    pub const fn next(start: usize, length: usize) -> (Self, usize) {
        (Self { start, length }, start + length)
    }

    pub fn as_slice<'a, T>(&self, slice: &'a [T]) -> &'a [T] {
        &slice[self.start..self.start + self.length]
    }

    pub fn as_mut_slice<'a, T>(&self, slice: &'a mut [T]) -> &'a mut [T] {
        &mut slice[self.start..self.start + self.length]
    }
}

#[derive(Debug)]
pub struct ValueIndexes<const S: usize> {
    pub first_ply: IndexPair,
    pub second_ply: IndexPair,
    pub flat_psqt: IndexPair,
    pub wall_psqt: IndexPair,
    pub cap_psqt: IndexPair,
    pub supports_psqt: IndexPair,
    pub captives_psqt: IndexPair,
    pub flat_win_this_ply: IndexPair,
    pub flat_win_next_ply: IndexPair,
    pub flat_win_two_ply: IndexPair,
    pub flat_win_three_ply: IndexPair,
    pub one_reserve_left_us: IndexPair,
    pub one_reserve_left_them: IndexPair,
    pub shallow_supports_per_piece: IndexPair,
    pub deep_supports_per_piece: IndexPair,
    pub shallow_captives_per_piece: IndexPair,
    pub deep_captives_per_piece: IndexPair,
    pub us_to_move_opening_flatstone_lead: IndexPair,
    pub them_to_move_opening_flatstone_lead: IndexPair,
    pub us_to_move_middlegame_flatstone_lead: IndexPair,
    pub them_to_move_middlegame_flatstone_lead: IndexPair,
    pub us_to_move_endgame_flatstone_lead: IndexPair,
    pub them_to_move_endgame_flatstone_lead: IndexPair,
    pub i_number_of_groups: IndexPair,
    pub critical_squares: IndexPair,
    pub critical_square_cap_attack: IndexPair,
    pub flat_next_to_our_stack: IndexPair,
    pub wall_next_to_our_stack: IndexPair,
    pub cap_next_to_our_stack: IndexPair,
    pub num_lines_occupied: IndexPair,
    pub line_control_empty: IndexPair,
    pub line_control_their_blocking_piece: IndexPair,
    pub line_control_other: IndexPair,
    pub sidelined_cap: IndexPair,
    pub fully_isolated_cap: IndexPair,
    pub semi_isolated_cap: IndexPair,
    pub padding: IndexPair,
}

impl<const S: usize> ValueIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;

        let (first_ply, i) = IndexPair::next(i, 1);
        let (second_ply, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (supports_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (captives_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_win_this_ply, i) = IndexPair::next(i, 1);
        let (flat_win_next_ply, i) = IndexPair::next(i, 2);
        let (flat_win_two_ply, i) = IndexPair::next(i, 2);
        let (flat_win_three_ply, i) = IndexPair::next(i, 3);
        let (one_reserve_left_us, i) = IndexPair::next(i, 4);
        let (one_reserve_left_them, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece, i) = IndexPair::next(i, 4);
        let (deep_supports_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece, i) = IndexPair::next(i, 4);
        let (deep_captives_per_piece, i) = IndexPair::next(i, 4);
        let (us_to_move_opening_flatstone_lead, i) = IndexPair::next(i, 7);
        let (them_to_move_opening_flatstone_lead, i) = IndexPair::next(i, 7);
        let (us_to_move_middlegame_flatstone_lead, i) = IndexPair::next(i, 7);
        let (them_to_move_middlegame_flatstone_lead, i) = IndexPair::next(i, 7);
        let (us_to_move_endgame_flatstone_lead, i) = IndexPair::next(i, 7);
        let (them_to_move_endgame_flatstone_lead, i) = IndexPair::next(i, 7);
        let (i_number_of_groups, i) = IndexPair::next(i, 3);
        let (critical_squares, i) = IndexPair::next(i, 4);
        let (critical_square_cap_attack, i) = IndexPair::next(i, 6);
        let (flat_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (wall_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (cap_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (num_lines_occupied, i) = IndexPair::next(i, S + 1);
        let (line_control_empty, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_their_blocking_piece, i) =
            IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_other, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (sidelined_cap, i) = IndexPair::next(i, 3);
        let (fully_isolated_cap, i) = IndexPair::next(i, 3);
        let (semi_isolated_cap, i) = IndexPair::next(i, 3);
        let (padding, i) = IndexPair::next(i, value_padding::<S>() / 2);

        assert!(i == num_value_features::<S>() / 2);

        ValueIndexes {
            first_ply,
            second_ply,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            supports_psqt,
            captives_psqt,
            flat_win_this_ply,
            flat_win_next_ply,
            flat_win_two_ply,
            flat_win_three_ply,
            one_reserve_left_us,
            one_reserve_left_them,
            shallow_supports_per_piece,
            deep_supports_per_piece,
            shallow_captives_per_piece,
            deep_captives_per_piece,
            us_to_move_opening_flatstone_lead,
            them_to_move_opening_flatstone_lead,
            us_to_move_middlegame_flatstone_lead,
            them_to_move_middlegame_flatstone_lead,
            us_to_move_endgame_flatstone_lead,
            them_to_move_endgame_flatstone_lead,
            i_number_of_groups,
            critical_squares,
            critical_square_cap_attack,
            flat_next_to_our_stack,
            wall_next_to_our_stack,
            cap_next_to_our_stack,
            num_lines_occupied,
            line_control_empty,
            line_control_their_blocking_piece,
            line_control_other,
            sidelined_cap,
            fully_isolated_cap,
            semi_isolated_cap,
            padding,
        }
    }
}

pub const VALUE_INDEXES_4S: ValueIndexes<4> = ValueIndexes::new();
pub const VALUE_INDEXES_5S: ValueIndexes<5> = ValueIndexes::new();
pub const VALUE_INDEXES_6S: ValueIndexes<6> = ValueIndexes::new();

impl<const S: usize> ValueIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> ValueIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn value_indexes<const S: usize>() -> ValueIndexes<S> {
    match S {
        4 => VALUE_INDEXES_4S.downcast_size(),
        5 => VALUE_INDEXES_5S.downcast_size(),
        6 => VALUE_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

#[derive(Debug)]
pub struct PolicyIndexes<const S: usize> {
    pub flat_psqt_white: IndexPair,
    pub flat_psqt_black: IndexPair,
    pub wall_psqt_white: IndexPair,
    pub wall_psqt_black: IndexPair,
    pub cap_psqt_white: IndexPair,
    pub cap_psqt_black: IndexPair,
    pub move_role_bonus_white: IndexPair,
    pub move_role_bonus_black: IndexPair,
    pub decline_win: IndexPair,
    pub place_to_win: IndexPair,
    pub place_to_draw: IndexPair,
    pub place_to_loss: IndexPair,
    pub place_to_allow_opponent_to_end: IndexPair,
    pub two_flats_left: IndexPair,
    pub three_flats_left: IndexPair,
    pub our_road_stones_in_line: IndexPair,
    pub their_road_stones_in_line: IndexPair,
    pub extend_single_group_base: IndexPair,
    pub extend_single_group_linear: IndexPair,
    pub extend_single_group_to_new_line_base: IndexPair,
    pub extend_single_group_to_new_line_linear: IndexPair,
    pub merge_two_groups_base: IndexPair,
    pub merge_two_groups_linear: IndexPair,
    pub block_merger_base: IndexPair,
    pub block_merger_linear: IndexPair,
    pub place_our_critical_square: IndexPair,
    pub place_their_critical_square: IndexPair,
    pub ignore_their_critical_square: IndexPair,
    pub next_to_our_last_stone: IndexPair,
    pub next_to_their_last_stone: IndexPair,
    pub diagonal_to_our_last_stone: IndexPair,
    pub diagonal_to_their_last_stone: IndexPair,
    pub attack_strong_flats: IndexPair,
    pub blocking_stone_blocks_extensions_of_two_flats: IndexPair,
    pub attack_strong_stack_with_wall: IndexPair,
    pub attack_strong_stack_with_cap: IndexPair,
    pub attack_last_movement: IndexPair,
    pub place_last_movement: IndexPair,
    pub simple_movement: IndexPair,
    pub simple_capture: IndexPair,
    pub simple_self_capture: IndexPair,
    pub pure_spread: IndexPair,
    pub fcd_highest_board: IndexPair,
    pub fcd_highest_stack: IndexPair,
    pub fcd_other: IndexPair,
    pub stack_captured_by_movement: IndexPair,
    pub stack_capture_in_strong_line: IndexPair,
    pub stack_capture_in_strong_line_cap: IndexPair,
    pub move_cap_onto_strong_line: IndexPair,
    pub move_cap_onto_strong_line_with_critical_square: IndexPair,
    pub recapture_stack_pure: IndexPair,
    pub recapture_stack_impure: IndexPair,
    pub move_last_placement: IndexPair,
    pub continue_spread: IndexPair,
    pub move_onto_critical_square: IndexPair,
    pub spread_that_connects_groups_to_win: IndexPair,
    pub padding: IndexPair,
}

pub const POLICY_INDEXES_4S: PolicyIndexes<4> = PolicyIndexes::new();
pub const POLICY_INDEXES_5S: PolicyIndexes<5> = PolicyIndexes::new();
pub const POLICY_INDEXES_6S: PolicyIndexes<6> = PolicyIndexes::new();

impl<const S: usize> PolicyIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> PolicyIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn policy_indexes<const S: usize>() -> PolicyIndexes<S> {
    match S {
        4 => POLICY_INDEXES_4S.downcast_size(),
        5 => POLICY_INDEXES_5S.downcast_size(),
        6 => POLICY_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

impl<const S: usize> PolicyIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;
        let (flat_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (move_role_bonus_white, i) = IndexPair::next(i, 3);
        let (move_role_bonus_black, i) = IndexPair::next(i, 3);
        let (decline_win, i) = IndexPair::next(i, 1);
        let (place_to_win, i) = IndexPair::next(i, 1);
        let (place_to_draw, i) = IndexPair::next(i, 1);
        let (place_to_loss, i) = IndexPair::next(i, 1);
        let (place_to_allow_opponent_to_end, i) = IndexPair::next(i, 3);
        let (two_flats_left, i) = IndexPair::next(i, 2);
        let (three_flats_left, i) = IndexPair::next(i, 2);
        let (our_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (their_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (extend_single_group_to_new_line_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_to_new_line_linear, i) = IndexPair::next(i, 3);
        let (extend_single_group_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_linear, i) = IndexPair::next(i, 3);
        let (merge_two_groups_base, i) = IndexPair::next(i, 3);
        let (merge_two_groups_linear, i) = IndexPair::next(i, 3);
        let (block_merger_base, i) = IndexPair::next(i, 3);
        let (block_merger_linear, i) = IndexPair::next(i, 3);
        let (place_our_critical_square, i) = IndexPair::next(i, 1);
        let (place_their_critical_square, i) = IndexPair::next(i, 4);
        let (ignore_their_critical_square, i) = IndexPair::next(i, 2);
        let (next_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (next_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (attack_strong_flats, i) = IndexPair::next(i, 1);
        let (blocking_stone_blocks_extensions_of_two_flats, i) = IndexPair::next(i, 1);
        let (attack_strong_stack_with_wall, i) = IndexPair::next(i, 6);
        let (attack_strong_stack_with_cap, i) = IndexPair::next(i, 6);
        let (attack_last_movement, i) = IndexPair::next(i, 4);
        let (place_last_movement, i) = IndexPair::next(i, 3);
        let (simple_movement, i) = IndexPair::next(i, 3);
        let (simple_capture, i) = IndexPair::next(i, 4);
        let (simple_self_capture, i) = IndexPair::next(i, 4);
        let (pure_spread, i) = IndexPair::next(i, 2);
        let (fcd_highest_board, i) = IndexPair::next(i, 6);
        let (fcd_highest_stack, i) = IndexPair::next(i, 6);
        let (fcd_other, i) = IndexPair::next(i, 8);
        let (stack_captured_by_movement, i) = IndexPair::next(i, 1);
        let (stack_capture_in_strong_line, i) = IndexPair::next(i, S - 3);
        let (stack_capture_in_strong_line_cap, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line_with_critical_square, i) = IndexPair::next(i, S - 3);
        let (recapture_stack_pure, i) = IndexPair::next(i, 3);
        let (recapture_stack_impure, i) = IndexPair::next(i, 3);
        let (move_last_placement, i) = IndexPair::next(i, 3);
        let (continue_spread, i) = IndexPair::next(i, 3);
        let (move_onto_critical_square, i) = IndexPair::next(i, 3);
        let (spread_that_connects_groups_to_win, i) = IndexPair::next(i, 1);
        let (padding, i) = IndexPair::next(i, policy_padding::<S>());

        assert!(i == num_policy_features::<S>());

        PolicyIndexes {
            flat_psqt_white,
            flat_psqt_black,
            wall_psqt_white,
            wall_psqt_black,
            cap_psqt_white,
            cap_psqt_black,
            move_role_bonus_white,
            move_role_bonus_black,
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            attack_strong_stack_with_wall,
            attack_strong_stack_with_cap,
            attack_last_movement,
            place_last_movement,
            simple_movement,
            simple_capture,
            simple_self_capture,
            pure_spread,
            fcd_highest_board,
            fcd_highest_stack,
            fcd_other,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            recapture_stack_pure,
            recapture_stack_impure,
            move_last_placement,
            continue_spread,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
            padding,
        }
    }
}

pub trait ValueApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn finish(&mut self) -> f32;
}

#[derive(Debug, Clone)]
pub struct Value<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for Value<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Value {
            features: vec![f16::ZERO; num_value_features::<S>() / 2],
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn finish(&mut self) -> f32 {
        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>();

        self.features.fill(f16::ZERO);

        total_value
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalValue<const S: usize> {
    val: f32,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for IncrementalValue<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalValue {
            val: 0.0,
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn finish(&mut self) -> f32 {
        let total_value = self.val;

        self.val = 0.0;

        total_value
    }
}

pub trait PolicyApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn eval_one(&mut self, index_pair: IndexPair, index: usize) {
        self.eval_i8(index_pair, index, 1)
    }
    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.eval(index_pair, index, f16::from(val))
    }
    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.eval(index_pair, index, f16::from_f32(val))
    }
    fn set_immediate_win(&mut self);
    fn has_immediate_win(&self) -> bool;
    fn finish(&mut self, num_moves: usize) -> f16;
}

#[derive(Debug, Clone)]
pub struct Policy<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for Policy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Policy {
            features: vec![f16::ZERO; num_policy_features::<S>()],
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);

        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>() + offset;

        self.features.fill(f16::ZERO);
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalPolicy<const S: usize> {
    val: f32,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for IncrementalPolicy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalPolicy {
            val: 0.0,
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.val += index_pair.as_slice(self.parameters)[index] * val as f32
    }

    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.val += index_pair.as_slice(self.parameters)[index] * val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);
        let total_value = self.val + offset;

        self.val = 0.0;
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

pub const fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub const fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn value_features_4s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_4S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_4S_0KOMI,
        4 => &VALUE_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn policy_features_4s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_4S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_4S_0KOMI,
        4 => &POLICY_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn value_features_5s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_5S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_5S_0KOMI,
        4 => &VALUE_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn policy_features_5s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_5S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_5S_0KOMI,
        4 => &POLICY_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn value_features_6s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_6S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_6S_0KOMI,
        4 => &VALUE_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

pub fn policy_features_6s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_6S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_6S_0KOMI,
        4 => &POLICY_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_0KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    1.8275076,
    0.9228609,
    1.3117391,
    0.69226253,
    1.1368978,
    2.183887,
    1.1811556,
    0.05608498,
    0.18330604,
    0.17481948,
    -0.0059250165,
    -0.00050385203,
    -0.00651386,
    0.06710731,
    0.37320504,
    0.35595864,
    -0.28004465,
    -0.8519843,
    -0.5894642,
    0.0075194775,
    0.009250207,
    0.016210428,
    0.000359989,
    0.019285917,
    0.01346395,
    0.0019593565,
    0.010624089,
    -0.0033383297,
    0.006044934,
    0.0042427895,
    0.0034233031,
    -0.0068715415,
    -0.00049247924,
    -0.0037292521,
    0.0010161976,
    0.3994931,
    0.27403343,
    -0.005124028,
    -0.008343117,
    0.05550975,
    0.0866989,
    0.005951524,
    -0.0043248367,
    0.80697584,
    0.79095554,
    -0.005560641,
    0.0036220215,
    0.043802384,
    0.049732637,
    -0.0055643534,
    -0.0015320918,
    0.0067787026,
    0.00016689255,
    0.0037388802,
    0.28228337,
    0.053740438,
    0.0074566915,
    0.009929541,
    -0.0059334445,
    -0.0065603284,
    0.0072561335,
    0.013564421,
    0.2571778,
    0.05694117,
    0.017356949,
    0.00015561287,
    0.0023184253,
    0.028279189,
    0.0547126,
    0.057900865,
    0.02794812,
    0.011875711,
    -0.002499441,
    -0.0007598441,
    0.0013183056,
    0.02275712,
    0.04830269,
    0.045811974,
    0.054724846,
    -0.0009209845,
    -0.014688894,
    -0.0045468314,
    0.029730864,
    0.024821384,
    0.015115179,
    0.018471844,
    -0.004161004,
    -0.00050185726,
    0.00012852436,
    0.0009763575,
    0.014279216,
    0.019097114,
    0.028681325,
    1.4630932,
    0.90979946,
    0.33490124,
    0.21852942,
    0.044815797,
    0.38990155,
    0.14949808,
    -8.111913e-5,
    0.00022801384,
    -0.007706399,
    -0.008808966,
    -0.0034274147,
    0.004325905,
    0.6187273,
    0.58007205,
    -0.0022270367,
    0.00079448544,
    0.23969653,
    0.6656771,
    0.94854593,
    0.46349362,
    0.6262156,
    0.7257821,
    0.24293065,
    0.07158341,
    0.52381915,
    0.6443242,
    0.22638442,
    0.055658795,
    0.10334287,
    0.150923,
    0.111626595,
    0.06656795,
    0.1868279,
    0.3161933,
    0.1718367,
    0.044147942,
    0.86448455,
    1.0716496,
    0.44709477,
    0.17943592,
    0.6962485,
    1.1385211,
    0.5289028,
    0.12275646,
    -0.008000903,
    0.0010137418,
    -0.006815267,
    0.0031001903,
    -0.002478423,
    -0.002353027,
    0.008927224,
    0.009418681,
    -0.007463541,
    -0.009312019,
    0.008915393,
    -0.0005510999,
    0.0035254955,
    0.008046815,
    0.84762686,
    1.6509258,
    0.8310749,
    0.093886375,
    0.25852543,
    0.24509418,
    0.0060925093,
    0.0012618108,
    -0.0039176345,
    0.06882499,
    0.20494756,
    0.12696682,
    -0.22464179,
    -0.8032052,
    -0.5900161,
    -0.011150436,
    -0.010914018,
    -0.01258997,
    -0.007166514,
    0.0051154518,
    -0.009224657,
    -0.0020411003,
    -0.0039953515,
    -0.002093651,
    -0.0016690315,
    0.0052009327,
    0.0082927495,
    0.0016827821,
    0.009531814,
    0.0031658774,
    0.008698886,
    0.20432112,
    0.103781536,
    0.007047029,
    -0.0010688612,
    0.011559675,
    0.077915795,
    -0.006010456,
    -0.0055280733,
    1.0111057,
    0.537394,
    0.0069459323,
    -0.0069796084,
    0.013952149,
    0.054011915,
    0.0042860033,
    -0.004753387,
    0.019787744,
    0.054958805,
    0.24819237,
    0.02229295,
    0.007155137,
    -0.0020856173,
    -0.0017811476,
    0.009699868,
    0.009609599,
    0.043400723,
    0.2909587,
    0.01659749,
    -0.008048263,
    -0.0002874074,
    0.056232173,
    0.039715048,
    0.05386344,
    0.021162404,
    0.0014786038,
    -0.004848113,
    -0.002589072,
    0.012857937,
    0.035958726,
    0.04425214,
    0.043029636,
    0.032922022,
    0.016307656,
    -0.0031202196,
    0.035694428,
    0.024338903,
    0.0064044646,
    0.0005731894,
    -0.0019719752,
    -0.007302238,
    0.0055469903,
    0.008222804,
    0.02388669,
    0.0158053,
    0.016517743,
    0.011793654,
    0.002344246,
    -0.015474955,
    1.357697,
    0.8142757,
    0.23740742,
    0.08194017,
    0.014013698,
    0.12891938,
    0.023945913,
    0.0071725287,
    0.0049608946,
    0.008243782,
    0.0015487336,
    -0.007857392,
    0.00948292,
    1.51359,
    0.37834904,
    0.0015890719,
    0.012485516,
    0.5245068,
    0.8555882,
    0.7601329,
    0.16678381,
    0.6185384,
    0.5339041,
    0.17168513,
    0.027336288,
    0.5180698,
    0.4097573,
    0.15801868,
    0.016040046,
    0.13036495,
    0.09297162,
    0.050072946,
    0.0148441885,
    0.27305776,
    0.19111173,
    0.040669404,
    0.003171407,
    1.2700663,
    1.3294959,
    0.29263422,
    0.057908718,
    1.2276556,
    1.3819283,
    0.36879495,
    0.045801077,
    0.0040632943,
    0.0075244084,
    -0.003553629,
    0.0015270468,
    0.0024552317,
    0.009908594,
    -0.00047137216,
    -0.002311611,
    -0.0068556285,
    -0.0071793436,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_0KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    -0.06596815,
    0.14143576,
    0.2643506,
    0.14499849,
    0.107681885,
    0.11073599,
    -0.19013828,
    -0.40654242,
    0.3318426,
    -0.16691944,
    -0.3575065,
    0.23800719,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.33601677,
    -0.041274536,
    0.0013449714,
    -0.29418692,
    -0.54222,
    0.0075244084,
    -2.7454162,
    1.2056162,
    0.74540424,
    -3.2504718,
    -2.7729948,
    0.068721116,
    0.47504744,
    -0.16477276,
    0.18019468,
    -0.13531236,
    0.14152104,
    0.032580495,
    -0.22254677,
    0.49075425,
    1.1202906,
    -0.07768215,
    -0.10285486,
    -0.28730598,
    -0.60267043,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    0.1747276,
    -0.3360676,
    0.35788158,
    1.2172985,
    -0.7322632,
    -0.5023849,
    -0.49644548,
    0.63201225,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    0.6639308,
    0.34448573,
    -0.0077813696,
    -1.4789531,
    -0.5449256,
    0.0020160126,
    0.20559156,
    -0.025478715,
    -0.0057330895,
    0.48247886,
    0.27221236,
    0.0008187201,
    0.79267675,
    1.5803065,
    -0.002397363,
    0.2934291,
    -0.9169082,
    0.00303144,
    0.18601592,
    0.47252977,
    -0.008103551,
    -0.54003847,
    -0.6874615,
    -0.009149382,
    2.5997837,
    0.21279974,
    1.0009149,
    0.00917124,
    0.5581906,
    -3.4829595,
    -0.7885469,
    0.29876935,
    1.3653431,
    0.3458327,
    0.23525056,
    0.27667275,
    0.6695998,
    0.2019845,
    0.33065692,
    -0.2599935,
    0.50598747,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.32448876,
    0.06516934,
    -0.00813673,
    -0.009886575,
    0.04560957,
    -0.2841685,
    0.00021132734,
    -1.8742533,
    -1.0128005,
    0.0011727996,
    0.07729849,
    0.14006491,
    -0.008626261,
    -0.006473,
    -1.0160459,
    -0.7020004,
    -0.0051336214,
    -0.0013411185,
    0.15417725,
    -1.3802054,
    0.25305972,
    1.4399757,
    1.8268988,
    1.968561,
    2.796725,
    1.1202828,
    -1.7660865,
    -0.804423,
    0.20100431,
    1.3501571,
    0.9508624,
    0.054124333,
    -1.1339825,
    -1.1712068,
    -2.0318532,
    -1.4227827,
    -2.0454004,
    -0.13430345,
    -1.5658052,
    -1.0156312,
    0.39389312,
    -0.0530978,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.397977,
    0.7746763,
    -0.002408173,
    0.22021821,
    1.53287,
    0.0077593178,
    0.2637508,
    0.88056475,
    -0.0054027913,
    0.3666799,
    0.14289705,
    0.0036244253,
    -0.39640427,
    -0.31697965,
    0.16356713,
    3.3073342,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_2KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    0.6361276,
    0.80880475,
    0.15196222,
    -0.17804304,
    1.3670313,
    1.5077324,
    1.5098385,
    0.059694096,
    0.7102914,
    1.1992978,
    -0.0059250165,
    -0.00050385203,
    -0.00651386,
    0.4251821,
    0.7010647,
    0.69762796,
    0.31910396,
    0.52923244,
    0.49349815,
    2.6471436,
    0.42430001,
    1.6063969,
    0.42820343,
    1.1586703,
    0.063349426,
    0.9230795,
    0.63216084,
    0.3187906,
    0.020472508,
    0.10732362,
    -0.5416067,
    0.086546205,
    -0.024691207,
    -0.033029042,
    -0.61811954,
    0.69696504,
    1.3163499,
    -0.005124028,
    -0.008343117,
    0.19034447,
    -0.36033022,
    0.005951524,
    -0.0043248367,
    -0.50847673,
    -0.1443625,
    -0.005560641,
    0.0036220215,
    -0.5573987,
    -0.16161615,
    -0.0055643534,
    -0.0015320918,
    0.48522788,
    0.0855379,
    0.838303,
    -0.01940733,
    0.014518269,
    -0.41653425,
    0.080704756,
    -0.008028274,
    0.83434224,
    0.08968881,
    0.41085085,
    -0.60612774,
    -0.6477685,
    -0.90779465,
    0.48603457,
    0.5310367,
    0.17398572,
    0.28586543,
    -0.006444084,
    -0.34468237,
    -0.4674935,
    -0.22308627,
    0.17560226,
    0.13698919,
    -0.42450026,
    -0.35034603,
    -0.4529882,
    -0.83885074,
    -0.30351627,
    -0.49802107,
    -0.96938103,
    -0.3986818,
    0.51240194,
    1.2105212,
    2.2641585,
    -0.12859611,
    -0.34702763,
    -1.123608,
    -0.93421054,
    -0.016685735,
    0.52074414,
    1.219011,
    -0.31531543,
    0.15125589,
    0.1328274,
    0.31515685,
    0.22303328,
    0.10627985,
    0.06983973,
    -8.111913e-5,
    0.00022801384,
    -0.007706399,
    -0.008808966,
    -0.0034274147,
    0.004325905,
    -0.006881389,
    -0.13721693,
    -0.0022270367,
    -0.08936201,
    -0.48240852,
    -0.25947902,
    0.096181504,
    0.5310366,
    0.034524266,
    -0.42509437,
    0.27622527,
    0.79331523,
    0.103257336,
    -0.24769315,
    0.24826792,
    0.6076288,
    -0.62569153,
    -0.6490313,
    -0.11686439,
    0.254228,
    -0.6353784,
    -0.5489441,
    -0.12050008,
    0.40909868,
    -0.39794183,
    -0.31312835,
    0.14540346,
    0.6412091,
    -0.7074479,
    -0.3589767,
    0.13338156,
    0.7284465,
    -0.008000903,
    0.0010137418,
    -0.006815267,
    0.0031001903,
    -0.002478423,
    -0.002353027,
    0.008927224,
    0.009418681,
    -0.007463541,
    -0.009312019,
    0.008915393,
    -0.0005510999,
    0.0035254955,
    0.008046815,
    -1.6466812,
    -1.6429046,
    -1.5598993,
    -0.9326188,
    -1.5276916,
    -1.8839555,
    0.0060925093,
    0.0012618108,
    -0.0039176345,
    -0.6051938,
    -0.688297,
    -0.6672548,
    -0.14868486,
    -0.37628436,
    -0.4031063,
    -1.3090802,
    -0.24382457,
    -0.73445106,
    0.06692292,
    -0.78765845,
    0.060904443,
    -0.19502032,
    -0.30735257,
    -0.34671932,
    -0.12203804,
    0.0351636,
    0.011143858,
    -0.29277733,
    -0.078449145,
    0.06956738,
    0.00912732,
    -0.7896661,
    -1.1779652,
    0.007047029,
    -0.0010688612,
    -0.1905714,
    0.1943076,
    -0.006010456,
    -0.0055280733,
    0.45273077,
    0.18435714,
    0.0069459323,
    -0.0069796084,
    0.2719702,
    0.017616425,
    0.0042860033,
    -0.004753387,
    0.009866308,
    0.0054509398,
    -0.0066909315,
    0.0056339707,
    0.0059062457,
    -0.006344389,
    -0.83983594,
    0.007400766,
    -0.000116079114,
    -0.009369239,
    0.0092722215,
    0.0030306866,
    -0.009095185,
    1.0651311,
    0.00912733,
    -0.008776911,
    0.006379608,
    -0.0033171491,
    0.0133722825,
    -0.3973278,
    -1.601208,
    -0.002883594,
    0.0066047404,
    -0.00401304,
    -0.00407879,
    0.0004470357,
    0.19194777,
    0.4693297,
    0.00716334,
    -0.000495675,
    -0.008976857,
    0.0012091801,
    0.020976808,
    0.056118887,
    -0.8816736,
    -0.0013148449,
    0.008539425,
    -0.00934294,
    -0.0055856346,
    0.008757076,
    0.17223147,
    1.6395801,
    0.21444412,
    0.032463197,
    -0.09306481,
    -0.104698434,
    -0.11139724,
    -0.11105517,
    0.18380056,
    0.0071725287,
    0.0049608946,
    0.008243782,
    0.0015487336,
    -0.007857392,
    0.00948292,
    -0.0126506,
    0.31537545,
    0.0015890719,
    0.3313493,
    0.12034796,
    0.005660743,
    -0.17233461,
    -0.48776647,
    0.02684766,
    0.39118367,
    -0.102221794,
    -0.83327204,
    0.0975079,
    0.38995484,
    -0.11478809,
    -0.4742351,
    0.30622688,
    0.22827123,
    0.10279724,
    -0.2541814,
    0.038339198,
    0.112925224,
    -0.2588776,
    -0.44776246,
    0.35131404,
    0.27908102,
    -0.21777615,
    -0.73292875,
    0.6481787,
    0.36910543,
    -0.19058904,
    -0.5801538,
    0.0040632943,
    0.0075244084,
    -0.003553629,
    0.0015270468,
    0.0024552317,
    0.009908594,
    -0.00047137216,
    -0.002311611,
    -0.0068556285,
    -0.0071793436,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_2KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    0.3835006,
    0.21164729,
    0.5567637,
    0.14972319,
    0.008378243,
    -0.43465084,
    -0.7308303,
    -0.8912839,
    0.46212968,
    -0.43907836,
    0.26626498,
    0.5782282,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.4975553,
    0.15077943,
    0.0013449714,
    -0.4241401,
    -0.4088393,
    0.0075244084,
    -3.2364414,
    0.9161514,
    0.5318693,
    -2.230449,
    -4.504568,
    -0.487717,
    0.6291668,
    -0.73886293,
    0.26118273,
    -0.27261165,
    0.12881532,
    0.1777136,
    -0.011507088,
    0.41689792,
    1.1819894,
    -0.14281727,
    -0.12822403,
    -0.4899795,
    -0.7057814,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    -0.038640175,
    -0.48866045,
    0.18388642,
    2.1011872,
    -0.47701856,
    -0.35595262,
    -0.5488175,
    -0.12425026,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    -0.0737323,
    1.6342262,
    -0.0077813696,
    0.8013023,
    -0.2317711,
    0.0020160126,
    0.59806335,
    -0.9970204,
    -0.0057330895,
    0.07285249,
    0.6827554,
    0.0008187201,
    0.9157639,
    0.626506,
    -0.002397363,
    -0.088837735,
    0.38987082,
    0.00303144,
    0.2895544,
    -0.16646424,
    -0.008103551,
    -0.26244026,
    -0.4901274,
    -0.009149382,
    2.3455992,
    -0.7211382,
    1.9804211,
    0.00917124,
    0.5224504,
    -4.4372244,
    -0.8496559,
    0.4749193,
    1.473498,
    0.45706263,
    0.046547048,
    0.25537905,
    0.77724373,
    0.07417753,
    0.39354962,
    -0.6581425,
    0.71233255,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.5941038,
    -0.046199616,
    -0.00813673,
    -0.009886575,
    0.1387866,
    -0.22598192,
    0.00021132734,
    -2.1441894,
    -1.8108326,
    0.0011727996,
    -0.16316642,
    0.30345392,
    -0.008626261,
    -0.006473,
    -1.3621367,
    -0.119089246,
    -0.0051336214,
    -0.0013411185,
    0.010755843,
    -1.2026048,
    0.38548076,
    1.398525,
    1.9160999,
    2.1099184,
    2.0770369,
    1.4328448,
    -1.7100422,
    -0.6515236,
    0.332164,
    0.62545145,
    0.0065994086,
    -0.005360393,
    -0.9618395,
    -1.1140851,
    -1.7814239,
    -0.5971449,
    -1.9552374,
    -0.23968147,
    -1.2191556,
    -1.1778564,
    0.42183256,
    -0.11105158,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.4999874,
    0.31543893,
    -0.002408173,
    -0.93778354,
    1.1441715,
    0.0077593178,
    0.79672486,
    0.83366203,
    -0.0054027913,
    0.49028045,
    0.045144238,
    0.0036244253,
    -0.30533037,
    -0.3648391,
    0.09491095,
    3.3036993,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_0KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    1.2565424,
    1.8276184,
    1.294616,
    1.5043164,
    0.937132,
    0.92380464,
    0.96822065,
    1.6146102,
    1.6649741,
    1.5879772,
    1.5882635,
    1.5470752,
    1.4914818,
    0.034722537,
    0.55728275,
    0.6554624,
    1.0983006,
    1.2117659,
    1.4875752,
    -0.36606842,
    0.47770676,
    0.68862903,
    1.2992092,
    1.581148,
    1.9268954,
    0.69158614,
    0.7453249,
    0.7465248,
    0.7840307,
    0.8469737,
    0.96041507,
    0.37313578,
    0.51698285,
    0.5148625,
    0.5863592,
    0.5950614,
    0.6094798,
    2.490339,
    0.5437023,
    1.7531594,
    0.3645474,
    1.385719,
    0.16045885,
    0.7109561,
    1.2130374,
    0.8793261,
    0.058078423,
    -0.015245034,
    -0.67311126,
    0.58804435,
    0.056039814,
    -0.22961915,
    -0.66659075,
    0.69266224,
    1.0981317,
    1.9481785,
    1.4675969,
    0.28213337,
    -0.14961301,
    -0.5352991,
    -0.041071903,
    -0.54189265,
    -0.18192343,
    -0.22595343,
    -0.10063286,
    -0.42905357,
    -0.43523037,
    -0.7785043,
    -0.4983249,
    0.29667073,
    0.40203312,
    0.59571487,
    0.7081361,
    0.85117203,
    1.1252337,
    0.5578816,
    -0.029514156,
    -0.41350678,
    -0.8031889,
    -0.60540545,
    -0.47402787,
    -0.35894153,
    0.12564169,
    1.0319483,
    0.86805886,
    0.7174618,
    0.5691483,
    0.39868772,
    0.27142236,
    0.06525232,
    -0.20796792,
    -0.24003913,
    -0.38726062,
    -0.5173598,
    -0.7053894,
    -0.86602074,
    -1.0447664,
    0.27605572,
    0.40338364,
    0.4591091,
    0.5201654,
    0.63434064,
    0.6952247,
    0.78394336,
    -1.0819553,
    -0.9911726,
    -0.8710257,
    -0.81987536,
    -0.7635435,
    -0.642595,
    -0.558169,
    -0.24480888,
    -0.13489568,
    0.0066729058,
    0.33339092,
    0.21783024,
    0.17287627,
    0.034393568,
    2.793231,
    1.3154022,
    0.09221227,
    0.19668232,
    -0.02026479,
    -0.26781154,
    0.013236806,
    -0.1665555,
    -0.13718945,
    0.005722007,
    -0.74348086,
    -0.30655026,
    -0.013253166,
    0.33639213,
    0.753783,
    0.05179849,
    -0.26228312,
    0.12523581,
    0.6487604,
    1.0310214,
    0.010769631,
    -0.40541145,
    0.11647928,
    0.6566028,
    0.9999915,
    0.0070504197,
    -0.6122943,
    -0.07968056,
    0.57635677,
    1.0423944,
    -0.59237117,
    -0.72567403,
    -0.44789,
    -0.21618803,
    0.27216148,
    -0.83704233,
    -0.85248005,
    -0.4168992,
    0.09630492,
    0.68189603,
    -0.8310406,
    -0.7864657,
    -0.31063607,
    0.22173107,
    0.75982624,
    -0.16777788,
    -0.24791598,
    -0.09208268,
    0.23483767,
    0.46704862,
    -0.5514046,
    -0.6382586,
    -0.16960399,
    0.41259867,
    0.91007715,
    -0.70527506,
    -0.64921856,
    -0.15043215,
    0.44526282,
    1.095556,
    -0.30669913,
    -0.088191524,
    -0.04975655,
    -1.0451381,
    -0.4891474,
    -0.37830022,
    -0.4180132,
    -0.16342978,
    -0.32578358,
    -0.007828684,
    0.0054334905,
    -0.006010456,
    -0.0055280733,
    -0.00082149263,
    -0.005897157,
    0.0069459323,
    -0.0069796084,
    -1.6363536,
    -1.5410327,
    -1.5682912,
    -1.5920062,
    -1.5988979,
    -1.470239,
    -0.2128451,
    -0.5338933,
    -0.7574983,
    -1.0842369,
    -1.2523855,
    -1.318598,
    -0.11557141,
    -0.40206906,
    -0.4387435,
    -1.3008981,
    -1.5370294,
    -1.8296429,
    -0.64983207,
    -0.81088156,
    -0.819831,
    -0.79673356,
    -0.8107341,
    -0.84125334,
    -0.39309004,
    -0.48303857,
    -0.44729054,
    -0.5863235,
    -0.5802371,
    -0.5779613,
    -2.495808,
    -0.8169491,
    -1.6929603,
    -0.5313964,
    -1.2480676,
    -0.25474057,
    -0.70753044,
    -0.89343995,
    -1.3431609,
    -0.27650163,
    0.07195605,
    0.5300632,
    -0.94806486,
    -0.28034836,
    0.16203997,
    0.6852383,
    -0.66937387,
    -1.0068922,
    -1.5422264,
    -1.3839396,
    -0.20954381,
    0.20826417,
    -0.17313209,
    0.08113275,
    0.55518085,
    0.23635066,
    -0.026764,
    0.15002392,
    0.3580659,
    0.4016366,
    1.1317412,
    0.27258873,
    0.11961975,
    -0.3415214,
    -0.4603188,
    -0.62008715,
    -0.8126267,
    -0.42019516,
    -0.036966167,
    0.5589658,
    1.1261479,
    0.84741145,
    0.71702933,
    0.6011136,
    0.3965666,
    0.2834571,
    -1.0339234,
    -0.86725813,
    -0.7051183,
    -0.5290896,
    -0.38352704,
    -0.23484288,
    -0.20472446,
    0.05617507,
    0.26838592,
    0.38998818,
    0.56790054,
    0.71503425,
    0.86195153,
    1.03362,
    -0.55303365,
    -0.64068216,
    -0.7537919,
    -0.817062,
    -0.8645394,
    -0.9930436,
    -1.0686191,
    0.7922815,
    0.7006195,
    0.6272569,
    0.5130673,
    0.4684699,
    0.4016504,
    0.28283867,
    0.2677958,
    0.15123424,
    -0.010943169,
    -0.19102423,
    -0.066320315,
    -0.11585599,
    -0.05109509,
    -1.391181,
    -0.7675283,
    -0.079718366,
    -0.14541383,
    -0.026126191,
    0.31290293,
    -0.015665215,
    0.16942976,
    0.13780348,
    0.0006503097,
    0.65392554,
    0.39081192,
    0.06429019,
    -0.32527056,
    -0.7537497,
    0.0556009,
    0.3203935,
    -0.01570088,
    -0.5614303,
    -1.0720226,
    0.022822822,
    0.4640727,
    -0.107220486,
    -0.6459539,
    -1.0394723,
    0.0036703611,
    0.5941794,
    0.078911655,
    -0.5701907,
    -0.98490185,
    0.66813,
    0.8244192,
    0.4668681,
    0.19021717,
    -0.113464,
    0.80004436,
    0.890095,
    0.38537633,
    -0.070829205,
    -0.612793,
    0.7977024,
    0.74027693,
    0.27223635,
    -0.17212132,
    -0.7475208,
    0.063753046,
    0.25456727,
    0.070011124,
    -0.38929263,
    -0.72496575,
    0.5182748,
    0.629823,
    0.16922498,
    -0.4194942,
    -0.903393,
    0.7036666,
    0.6857257,
    0.13301489,
    -0.48439276,
    -1.0083761,
    0.19006631,
    0.30892986,
    0.22316243,
    0.6045785,
    0.4202872,
    0.4478323,
    0.3723647,
    0.15773241,
    0.3611887,
    -0.009886575,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_0KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    -0.21254763,
    0.23103847,
    -0.033314772,
    0.28951204,
    0.08258201,
    -0.20170505,
    -0.083164066,
    0.039200466,
    -0.00088396505,
    0.3021171,
    0.11830643,
    -0.081436746,
    -0.40565103,
    -0.37145954,
    -0.18355277,
    0.06397571,
    0.20453936,
    0.55752325,
    -0.12067064,
    -0.30509105,
    -0.22406316,
    0.04068911,
    0.06334039,
    0.038877312,
    -2.746777,
    -0.87377214,
    -0.65470624,
    0.73748547,
    1.1899408,
    2.4166262,
    -0.82226,
    -1.3962785,
    -1.4452674,
    0.5082308,
    1.2789531,
    2.7618878,
    -0.3863811,
    0.031400807,
    -0.102757595,
    -0.38964626,
    -0.14711878,
    -0.31159613,
    -2.9462645,
    1.2216566,
    0.49116233,
    -4.1368756,
    -3.0489886,
    0.14062,
    0.4538722,
    -0.20252825,
    0.1369588,
    -0.058979962,
    0.08831377,
    0.02167715,
    -0.26413515,
    0.028735323,
    0.47112805,
    0.67481583,
    -0.037136614,
    -0.023578765,
    0.06294667,
    -0.05659834,
    -1.2630483,
    0.25168982,
    0.096158154,
    0.43390813,
    1.3263559,
    -0.38228187,
    0.30753988,
    -0.17709245,
    0.021742836,
    0.3967858,
    0.37994313,
    -0.5040257,
    -0.60063547,
    -0.5784962,
    -0.09444315,
    0.42124468,
    -0.95363337,
    -0.8204556,
    -0.515455,
    0.36224493,
    3.6014647,
    0.6930546,
    -0.022836408,
    1.229127,
    -0.20067202,
    -0.88029164,
    -1.945374,
    0.27076137,
    0.24485452,
    -0.2529798,
    0.3806981,
    -0.1388048,
    -0.43375793,
    1.5184788,
    0.4213168,
    1.0030801,
    -0.12647864,
    -0.28902504,
    -0.68267906,
    0.3738028,
    0.69471484,
    1.1517682,
    -0.16151088,
    -0.5155371,
    -0.17652579,
    2.4710944,
    0.30520877,
    2.0582628,
    1.0057538,
    0.5753131,
    -4.1801777,
    -0.5127082,
    0.45404467,
    1.4079078,
    0.3417027,
    0.39399534,
    0.1540643,
    0.2801745,
    0.3059642,
    0.2046346,
    -0.05043553,
    0.38525426,
    0.006237678,
    0.3969141,
    0.18871525,
    -1.5612092,
    -0.39385808,
    0.7173354,
    -0.24273492,
    -0.060208935,
    0.20501433,
    0.06431221,
    0.007810466,
    -0.006842167,
    0.25922537,
    0.22373736,
    1.4958718,
    -2.2605436,
    -1.6751494,
    -1.7748834,
    -0.15428533,
    -0.13730817,
    0.3625118,
    0.7318449,
    -2.1013966,
    -1.6390495,
    -0.58728755,
    0.705842,
    0.05825597,
    -1.3842419,
    0.5513746,
    1.3413002,
    1.6110371,
    1.1969258,
    1.6104766,
    0.26784024,
    -0.82374805,
    -0.27678168,
    0.63337976,
    1.37859,
    1.5559744,
    -0.2600439,
    -1.5502057,
    -0.7311096,
    -0.89582264,
    -0.8938125,
    -1.1783751,
    -0.29525974,
    -1.3265866,
    -2.8699765,
    0.3670057,
    -0.02602606,
    -0.094160676,
    0.038038492,
    0.18733682,
    0.1730221,
    0.4983536,
    -0.6600161,
    0.07679693,
    1.6442226,
    0.74923706,
    1.2906911,
    -0.0030353356,
    1.5110451,
    1.8540987,
    0.46657535,
    1.0854816,
    0.6397842,
    0.38965192,
    0.4017657,
    0.15735355,
    0.2403061,
    0.20836167,
    0.8231178,
    3.0737865,
    -0.0031571696,
    -0.0045039677,
    -0.0037830565,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_2KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    0.86504525,
    0.997672,
    0.23847757,
    0.35759825,
    -0.08068718,
    -0.2313868,
    0.06161708,
    1.4082443,
    1.3788921,
    1.472888,
    1.4061346,
    1.4522555,
    1.2841729,
    0.25382787,
    0.4552112,
    0.4414876,
    0.65948176,
    0.7866578,
    0.7457947,
    0.393931,
    0.5444505,
    0.66579187,
    1.2311797,
    1.5268296,
    1.6145172,
    0.6464887,
    0.71035874,
    0.77766335,
    0.77720416,
    0.8516519,
    0.8771303,
    0.33213058,
    0.4125946,
    0.4143944,
    0.51334023,
    0.5547169,
    0.49269822,
    3.303746,
    0.6782084,
    1.8349952,
    0.61749667,
    1.3241113,
    0.29214847,
    0.7590243,
    1.1870741,
    0.75041586,
    0.040236443,
    -0.15181066,
    -0.3465517,
    0.42596838,
    0.03811583,
    -0.09430523,
    -0.327259,
    0.57581425,
    0.8970931,
    1.8484178,
    1.2595414,
    0.034900732,
    -0.3717185,
    0.56881243,
    -0.18494709,
    -0.49418586,
    -0.1355,
    -0.1826677,
    -0.0874816,
    -0.4709248,
    -0.35677123,
    -0.56040174,
    -0.4273769,
    -0.11313025,
    -0.3241299,
    -0.18962047,
    0.23602074,
    0.51829785,
    0.6117208,
    0.7595111,
    -0.0070899986,
    -0.16516483,
    -0.4139795,
    -0.40469864,
    0.010633052,
    0.22181651,
    0.31984204,
    1.1172314,
    0.7315781,
    0.6564642,
    0.15647174,
    -0.119038336,
    -0.49142805,
    -0.91810304,
    0.39327434,
    0.38646075,
    0.12365707,
    -5.040192e-5,
    -0.55314606,
    -0.8061299,
    -1.271784,
    -0.12201752,
    0.059560545,
    0.1451471,
    0.27434447,
    0.45647788,
    0.5438167,
    0.78155446,
    -0.9003319,
    -0.67003447,
    -0.47948566,
    -0.39458555,
    -0.23471723,
    -0.08584146,
    0.04271959,
    -0.27359748,
    -0.13253061,
    0.018176725,
    0.23769006,
    0.08203267,
    0.111572824,
    0.046399042,
    3.2219226,
    1.126289,
    0.106910065,
    0.18476708,
    -0.03218173,
    -0.30688292,
    0.012988166,
    -0.13299167,
    -0.12068208,
    0.005722007,
    -0.69123065,
    -0.34937423,
    -0.09855216,
    0.28163242,
    0.70076704,
    -0.060910355,
    -0.5079386,
    -0.05556207,
    0.53186965,
    0.9957961,
    -0.0285496,
    -0.5510744,
    -0.027116062,
    0.5230637,
    0.9532596,
    -0.03376703,
    -0.5510439,
    -0.10702525,
    0.55573094,
    0.97388,
    -0.7653268,
    -0.80643135,
    -0.41338715,
    -0.05256653,
    0.37091625,
    -0.79759717,
    -0.83428645,
    -0.3721969,
    0.12985386,
    0.67480755,
    -0.74246454,
    -0.76214117,
    -0.32239744,
    0.17894414,
    0.6485311,
    -0.11351339,
    -0.3111434,
    -0.06834127,
    0.30834872,
    0.65954244,
    -0.56763434,
    -0.5920778,
    -0.15625292,
    0.3913455,
    0.9007429,
    -0.65034616,
    -0.6492139,
    -0.11819954,
    0.44677433,
    0.97217673,
    -0.36821714,
    -0.47641724,
    -0.44411778,
    -0.6413414,
    -0.31023306,
    -0.19133073,
    -0.18720436,
    0.01679311,
    -0.4267118,
    -0.007828684,
    0.0054334905,
    -0.006010456,
    -0.0055280733,
    -0.00082149263,
    -0.005897157,
    0.0069459323,
    -0.0069796084,
    -1.5153652,
    -1.5568767,
    -1.4926946,
    -1.4809381,
    -1.4673907,
    -1.4062711,
    -0.54291224,
    -0.9467626,
    -0.9301227,
    -1.3304875,
    -1.414122,
    -1.4739639,
    0.1256495,
    -0.4671523,
    -0.47559685,
    -1.1812052,
    -1.4038506,
    -1.693286,
    -0.5819145,
    -0.7576378,
    -0.848016,
    -0.73701906,
    -0.82536906,
    -0.78856033,
    -0.31529072,
    -0.42431125,
    -0.45416966,
    -0.47651285,
    -0.52363366,
    -0.5017191,
    -2.8777878,
    -0.56438124,
    -2.0233572,
    -0.2422774,
    -1.0668492,
    0.07773958,
    -0.5672469,
    -0.9030822,
    -1.1515679,
    -0.12252995,
    0.2263315,
    -0.01212229,
    -0.8479356,
    -0.30404043,
    0.2961452,
    0.36740676,
    -0.58118206,
    -0.9530645,
    -1.7560318,
    -1.2696648,
    -0.18013382,
    0.21025805,
    -0.21035516,
    0.23522872,
    0.5051498,
    0.17583275,
    0.34343648,
    0.09223151,
    0.24638562,
    0.3526834,
    0.7418556,
    0.24900094,
    0.0015812209,
    0.009482224,
    0.0059623104,
    -0.008494556,
    -0.0017962629,
    -0.0073078736,
    -0.4512846,
    -0.00079724286,
    -0.001203401,
    -0.001678803,
    0.008264789,
    0.0015326263,
    -0.0054076933,
    1.4920089,
    0.0023975773,
    -0.001947679,
    -0.0061800987,
    -0.0007655394,
    -0.012226586,
    -0.99688447,
    -0.7013784,
    -0.0075254655,
    0.0028945897,
    -0.0037946012,
    -0.0038857525,
    0.06561609,
    0.11122001,
    0.93977743,
    0.003634694,
    0.008931463,
    0.024740933,
    0.10041845,
    -0.19705887,
    -1.1518725,
    -1.4734368,
    -0.0004666454,
    -0.0020386784,
    0.048926223,
    0.17534044,
    0.40762928,
    1.1785825,
    0.34450322,
    0.22939627,
    0.16152953,
    0.022360237,
    -0.20218332,
    -0.06031268,
    -0.1468636,
    0.06904838,
    -1.2323935,
    -0.52836573,
    -0.04399645,
    -0.11400963,
    -0.005063154,
    0.15469424,
    -0.022015808,
    0.203047,
    0.18673739,
    -0.0015040664,
    0.59999585,
    0.31547433,
    0.0046430025,
    -0.3428244,
    -0.7287907,
    -0.05710759,
    0.24473687,
    -0.0817364,
    -0.44280398,
    -0.88393897,
    -0.01649575,
    0.3740617,
    -0.0793715,
    -0.5379491,
    -0.89813495,
    -0.03714727,
    0.48969004,
    0.08189121,
    -0.4235553,
    -0.9714061,
    0.35640663,
    0.5086228,
    0.2673847,
    0.0682658,
    -0.46388376,
    0.6396383,
    0.6836657,
    0.25778854,
    -0.15686652,
    -0.5934764,
    0.7026984,
    0.63193643,
    0.24027973,
    -0.17937778,
    -0.7995764,
    0.26856005,
    0.3085174,
    0.10226887,
    -0.17991105,
    -0.34563166,
    0.53790045,
    0.52760136,
    0.12602529,
    -0.3538539,
    -0.7973003,
    0.6498678,
    0.59959656,
    0.14737703,
    -0.3778462,
    -0.8962157,
    0.13699518,
    0.061836064,
    0.0026486767,
    0.5116032,
    0.06617998,
    0.30384305,
    0.083084084,
    0.0029073756,
    0.20210195,
    -0.009886575,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_2KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    0.13053814,
    0.2594758,
    0.24701957,
    0.32714072,
    0.2772792,
    -0.13828218,
    -0.10215987,
    0.098732464,
    0.019896906,
    -0.056102987,
    -0.07790267,
    -0.42510068,
    -0.30549508,
    -0.45333365,
    -0.52566814,
    -0.29246622,
    -0.28865135,
    -0.26258516,
    0.11082738,
    0.17156202,
    -0.038298223,
    0.46970895,
    0.49330792,
    0.45982635,
    -1.5306015,
    -0.70623446,
    -1.6051459,
    1.1686573,
    1.569235,
    2.0058358,
    -2.5606222,
    -1.2750763,
    -2.0411723,
    0.8546261,
    1.8828146,
    2.5776637,
    -0.54405427,
    0.17359827,
    -0.07840562,
    -0.24876921,
    -0.18755311,
    -0.26911703,
    -3.0770643,
    1.1082592,
    0.26119882,
    -2.5300553,
    -2.871422,
    0.03775389,
    0.4238567,
    -0.33088768,
    0.10647789,
    -0.13209525,
    0.08560816,
    0.0468911,
    -0.21627295,
    0.05250266,
    0.38945135,
    0.81790227,
    -0.23717421,
    -0.22604689,
    -0.19218688,
    -0.20800717,
    -0.033787068,
    0.122389324,
    -0.10022763,
    -0.073142864,
    0.6767682,
    -0.04690488,
    0.33146432,
    -0.22365022,
    -0.0036192038,
    0.46967515,
    0.51455325,
    -0.2567931,
    -0.40734252,
    -0.42442977,
    -0.001470779,
    0.22078364,
    -1.2574711,
    -0.85755,
    -0.74906814,
    -0.17770536,
    3.6172705,
    0.54112595,
    0.6423261,
    0.9667451,
    0.199188,
    -1.3389384,
    0.16624917,
    0.19690222,
    -0.4323959,
    -0.23050337,
    0.34784153,
    0.61946857,
    -0.7219571,
    1.2463146,
    0.5738733,
    2.0701928,
    0.049495548,
    -0.42689493,
    -1.0372397,
    0.26199716,
    0.7308859,
    1.6175814,
    -0.0076032556,
    -0.68225515,
    0.12284207,
    2.349499,
    0.1210995,
    2.3559947,
    1.0110165,
    0.4826661,
    -4.137684,
    -0.87189615,
    0.58148867,
    1.5087106,
    0.51515806,
    0.27801824,
    0.1363943,
    0.39705855,
    0.3311712,
    0.13834442,
    -0.009231192,
    0.37948412,
    0.013899716,
    0.34986228,
    0.20538929,
    -1.3363253,
    -0.6954224,
    -0.26191995,
    -0.23036456,
    -0.17417376,
    0.21034743,
    0.08639803,
    0.009099964,
    0.0013535284,
    0.37892112,
    0.085819654,
    1.4048743,
    -2.3133554,
    -1.2493757,
    -1.597994,
    -0.20851141,
    -0.025360083,
    0.2432856,
    0.7032871,
    -1.9057463,
    -1.1427703,
    -0.49652052,
    0.84754634,
    0.08384458,
    -1.2245532,
    0.5221889,
    1.2940357,
    1.6118815,
    1.3088297,
    1.4081663,
    -0.2697331,
    -0.76520354,
    -0.34188744,
    0.6127755,
    1.3039353,
    1.4138254,
    0.12542252,
    -1.4124713,
    -0.9411064,
    -0.9240627,
    -0.92811567,
    -1.1624233,
    -0.3372181,
    -1.4078445,
    -2.251844,
    0.36175016,
    -0.023277655,
    -0.08955618,
    0.0533145,
    0.14049543,
    -0.019719895,
    -0.007010526,
    -0.096855216,
    -0.22378309,
    1.7177029,
    0.7570125,
    1.2928087,
    0.07078977,
    1.540554,
    1.9195119,
    0.41963235,
    0.9632119,
    0.60895467,
    0.32042414,
    0.36884412,
    0.16893406,
    0.3075245,
    -0.011423582,
    0.7850744,
    3.0451703,
    0.0,
    0.0,
    0.0,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_0KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.6377204,
    1.4032532,
    0.84658164,
    0.8691783,
    0.43420428,
    0.28006405,
    0.13335188,
    1.6451455,
    1.6167772,
    1.6521692,
    1.6979281,
    1.7222464,
    1.6884627,
    0.41371724,
    0.7120563,
    0.7775812,
    1.0374361,
    1.0970984,
    1.211509,
    -0.18658803,
    0.56103104,
    0.73289746,
    1.0447459,
    1.3716534,
    1.6541648,
    0.51402706,
    0.59448904,
    0.613424,
    0.6704489,
    0.72675717,
    0.76923376,
    0.34190497,
    0.4550569,
    0.47890037,
    0.5465989,
    0.59155595,
    0.61314136,
    2.666896,
    0.5842289,
    1.7159595,
    0.29722276,
    1.2047921,
    0.101916805,
    0.51677394,
    1.2045727,
    0.96086985,
    0.08301864,
    -0.09949681,
    -0.56805056,
    0.58297837,
    0.11277193,
    -0.11128121,
    -0.7489497,
    0.6828561,
    0.98079216,
    1.0334831,
    1.2043521,
    0.35323006,
    -0.27375272,
    0.001026822,
    -0.1059264,
    -0.538694,
    -0.1299101,
    0.13865924,
    -0.09978115,
    -0.33932096,
    -0.31060416,
    -1.3470472,
    -0.39564714,
    -0.022835532,
    0.24489161,
    0.40665993,
    0.49682158,
    0.6316117,
    0.99362683,
    0.7006052,
    -0.020980487,
    -0.32013077,
    -0.84716266,
    -0.6494519,
    -0.5224008,
    -0.4148108,
    0.030297894,
    0.8481655,
    0.73379046,
    0.5760871,
    0.5123213,
    0.4143988,
    0.320246,
    0.23305736,
    -0.29357955,
    -0.19783038,
    -0.3327234,
    -0.4908961,
    -0.5619484,
    -0.6620897,
    -0.7777374,
    0.51086247,
    0.5186796,
    0.51796246,
    0.46880707,
    0.4209253,
    0.40456107,
    0.38159826,
    -0.6086646,
    -0.5800656,
    -0.5734238,
    -0.5617357,
    -0.62640727,
    -0.66225237,
    -0.70429564,
    -0.23344022,
    -0.20040724,
    0.018645037,
    0.259547,
    0.0925733,
    0.18826787,
    0.07801418,
    1.9374452,
    0.95141524,
    0.04874242,
    0.13571325,
    0.04420755,
    -0.2306852,
    0.030797534,
    -0.13383508,
    -0.11600572,
    0.005722007,
    -0.34639513,
    -0.20190609,
    -0.12962735,
    -0.020707414,
    0.19890788,
    0.45019075,
    0.04253954,
    -0.23513004,
    -0.06795124,
    0.17067249,
    0.56280947,
    0.8538218,
    0.012345157,
    -0.20351988,
    0.012777158,
    0.22748923,
    0.6336186,
    0.80939466,
    -0.014446289,
    -0.29479796,
    -0.024177685,
    0.24900928,
    0.6089015,
    0.7740548,
    -0.5244455,
    -0.5698329,
    -0.44737402,
    -0.3208275,
    -0.11129658,
    0.10490094,
    -0.68474984,
    -0.7224721,
    -0.5133444,
    -0.24512129,
    -0.04870065,
    0.2759506,
    -0.689055,
    -0.675094,
    -0.43062812,
    -0.15363322,
    0.119235575,
    0.43818823,
    -0.019437116,
    -0.15230493,
    -0.15507863,
    -0.032923967,
    0.25858313,
    0.54089105,
    -0.37950048,
    -0.3656543,
    -0.17819299,
    0.064402506,
    0.42874485,
    0.7812937,
    -0.55258137,
    -0.48019835,
    -0.26293352,
    0.051951848,
    0.44445908,
    0.7542027,
    -0.5321308,
    -0.14462407,
    -0.2631583,
    -0.59490883,
    -0.83569235,
    -0.3454366,
    -0.439364,
    -0.24051814,
    -0.15889254,
    0.0042860033,
    -0.004753387,
    0.009866308,
    0.0054509398,
    -0.0066909315,
    0.0056339707,
    0.005903894,
    -0.0017206976,
    -0.0018851925,
    0.007400766,
    -1.6836102,
    -1.6573137,
    -1.6356655,
    -1.6549944,
    -1.696682,
    -1.7267398,
    -0.28692782,
    -0.4339785,
    -0.68904823,
    -0.7850215,
    -0.9698494,
    -1.1561356,
    -0.101616755,
    -0.4451463,
    -0.56739634,
    -0.98374605,
    -1.2663863,
    -1.7040493,
    -0.5753726,
    -0.6305598,
    -0.68959624,
    -0.665956,
    -0.78224325,
    -0.8070766,
    -0.44981247,
    -0.47358745,
    -0.4664969,
    -0.59177274,
    -0.60608083,
    -0.6233252,
    -2.8830001,
    -0.939066,
    -1.776959,
    -0.53596973,
    -1.4540218,
    -0.15117987,
    -0.74725896,
    -1.3113718,
    -1.3451052,
    -0.19519292,
    0.02839292,
    0.51877475,
    -0.8554952,
    -0.3037685,
    -0.00043503018,
    0.769515,
    -0.60565645,
    -0.9244457,
    -1.6975539,
    -1.1178517,
    -0.15258236,
    0.23356698,
    -0.099043466,
    0.22337994,
    0.55119246,
    0.15466025,
    0.40780148,
    0.09835169,
    0.34863564,
    0.5748331,
    0.6737606,
    0.39549288,
    0.015820958,
    -0.41045108,
    -0.51225656,
    -0.6576579,
    -0.85546714,
    -0.32062376,
    -0.017916203,
    0.70194536,
    0.9978856,
    0.62200475,
    0.50033647,
    0.405103,
    0.24249184,
    -0.02596451,
    -0.77562916,
    -0.6599636,
    -0.557552,
    -0.49539095,
    -0.32534912,
    -0.19564667,
    -0.29095033,
    0.233961,
    0.32422343,
    0.41065055,
    0.51256776,
    0.56029737,
    0.7268434,
    0.8489751,
    -0.7061664,
    -0.6668119,
    -0.61465394,
    -0.5540202,
    -0.5729702,
    -0.57755256,
    -0.60042125,
    0.38625792,
    0.41446528,
    0.41774818,
    0.47536287,
    0.5348023,
    0.5145905,
    0.5158417,
    0.28682673,
    0.21939918,
    0.005171794,
    -0.19347677,
    -0.08266029,
    -0.16795816,
    -0.05542135,
    -1.7239308,
    -0.7375441,
    -0.053881016,
    -0.12043736,
    -0.041046124,
    0.19110708,
    -0.034096565,
    0.13929471,
    0.1257254,
    0.005344481,
    0.26575908,
    0.25132206,
    0.15817891,
    -0.024555545,
    -0.24110419,
    -0.4526311,
    0.051140595,
    0.26191312,
    0.10180381,
    -0.15324704,
    -0.44698048,
    -0.76063937,
    0.022192199,
    0.24735892,
    0.05106933,
    -0.16804202,
    -0.5397156,
    -0.7120657,
    -0.016132312,
    0.3186458,
    0.102177106,
    -0.14610961,
    -0.52011347,
    -0.81695944,
    0.404788,
    0.4032966,
    0.3421183,
    0.15253603,
    -0.09176525,
    -0.1368893,
    0.56964153,
    0.5895918,
    0.40225136,
    0.13045356,
    -0.080506235,
    -0.20446613,
    0.57837313,
    0.59943384,
    0.39032805,
    0.13276109,
    -0.14062421,
    -0.4708156,
    0.105491415,
    0.19212587,
    0.15308645,
    0.035687502,
    -0.23309115,
    -0.5187996,
    0.30719626,
    0.35230637,
    0.15782078,
    -0.10753205,
    -0.4224874,
    -0.68915564,
    0.4522055,
    0.46478754,
    0.21097858,
    -0.096768,
    -0.45900607,
    -0.68751293,
    0.19997576,
    0.13082007,
    0.16609566,
    0.43267944,
    0.049641855,
    0.3885829,
    0.38038686,
    -0.064583786,
    0.27773136,
    0.0053475164,
    -0.008328738,
    -0.005392799,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_0KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.071415216,
    0.12442188,
    -0.09566238,
    0.025814263,
    0.39882815,
    0.16391489,
    -0.008581701,
    -0.13815464,
    -0.13051334,
    0.02532715,
    0.32889652,
    0.20524831,
    -0.49096164,
    -0.30895254,
    -0.23303136,
    0.23083706,
    0.2964616,
    0.24874644,
    -0.2457537,
    -0.20580663,
    -0.20578788,
    0.22220248,
    0.24823901,
    0.27056095,
    -1.7412964,
    -1.2658727,
    -0.9884221,
    0.21221639,
    0.76972306,
    2.9932423,
    -0.8941595,
    -1.4919809,
    -0.6434117,
    0.1866445,
    0.6302275,
    3.7471368,
    -0.19908637,
    -0.05053481,
    -0.22026536,
    -0.20168278,
    -0.06375163,
    -0.34524786,
    -2.9306319,
    1.2972493,
    0.24407394,
    -3.5354817,
    -2.9933457,
    -0.10331253,
    0.47185874,
    -0.14110662,
    0.10932957,
    0.0013340656,
    0.07475349,
    -0.016720613,
    -0.23927939,
    -0.011462316,
    0.34377918,
    0.72500736,
    0.85285324,
    -0.110500894,
    -0.105389334,
    -0.017042588,
    0.10457068,
    0.0042217867,
    -0.21249798,
    -0.085640766,
    -0.45459425,
    -0.16079083,
    0.55052006,
    2.0902095,
    -0.37665167,
    0.27560315,
    -0.059153534,
    0.035410654,
    0.26979086,
    0.5431667,
    0.5761751,
    -0.40052012,
    -0.44486472,
    -0.42993188,
    -0.155777,
    0.3429057,
    0.74014395,
    -0.7196886,
    -0.66130596,
    -0.5823512,
    -0.061252877,
    1.1902641,
    2.376007,
    0.48015076,
    -0.05263098,
    0.55019283,
    0.35582376,
    -0.3000633,
    -0.9577861,
    0.37041304,
    0.1807514,
    -0.058853548,
    0.19539088,
    0.03101509,
    -1.0235001,
    1.6822823,
    0.46977645,
    0.50950366,
    -0.1764842,
    -0.2133276,
    -1.0270724,
    0.4235578,
    0.47018492,
    0.59907496,
    -0.095802486,
    -0.2432442,
    -0.01910542,
    2.5890062,
    0.13449658,
    2.3261929,
    0.96748704,
    0.44940996,
    -4.1517406,
    -1.059962,
    0.81751895,
    1.4057382,
    0.43485394,
    0.52264935,
    0.0902257,
    0.27415887,
    0.29622847,
    0.18442348,
    -0.011864232,
    0.33198798,
    0.008446357,
    0.29941043,
    0.24493904,
    -1.3369043,
    0.41626275,
    0.329823,
    -0.10362355,
    0.111990936,
    0.22666475,
    0.06236524,
    0.0052082036,
    -0.0012640925,
    0.34226802,
    -0.037712023,
    1.718424,
    -2.2861829,
    -1.5476025,
    -1.518054,
    -0.16363169,
    0.14955013,
    0.6014917,
    1.1120517,
    -1.9437062,
    -1.5143054,
    -0.46494117,
    0.6082318,
    0.21189173,
    -1.3022004,
    0.3113392,
    1.2015941,
    1.7875376,
    1.4595233,
    1.7871752,
    0.90693253,
    -0.98388606,
    -0.55907655,
    0.42635015,
    1.2506536,
    1.9478662,
    0.16841666,
    -1.632099,
    -0.78296155,
    -1.2520697,
    -1.1554351,
    -1.4457918,
    -0.38163397,
    -1.3265272,
    -2.6471865,
    0.33752015,
    -0.024949715,
    -0.024228316,
    -0.09096827,
    0.036369875,
    0.06127662,
    0.20753954,
    -0.15602651,
    0.38449815,
    0.44087142,
    -0.1416285,
    -0.72993124,
    0.1605913,
    1.8260558,
    1.4085311,
    1.6873645,
    -0.23067553,
    1.8025221,
    2.1915245,
    0.68259877,
    1.5146484,
    0.60728025,
    0.6007257,
    0.6491273,
    0.2172983,
    0.6351415,
    0.4959009,
    0.77732676,
    2.8963873,
    0.00053430814,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_2KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.21838129,
    0.3329357,
    -0.14363301,
    -0.37035593,
    -0.59610206,
    -0.8250733,
    -0.6514451,
    1.5245328,
    1.485448,
    1.4990429,
    1.5180504,
    1.5753218,
    1.5542201,
    0.09754611,
    0.30380872,
    0.49767187,
    0.7064129,
    0.87613964,
    0.96550477,
    0.3561288,
    0.41604495,
    0.68875384,
    1.1049142,
    1.4705071,
    1.7991483,
    0.43666956,
    0.5793406,
    0.65790623,
    0.6922999,
    0.7756826,
    0.8394517,
    0.33707872,
    0.39202124,
    0.4276088,
    0.51328653,
    0.55663276,
    0.5822675,
    2.5095282,
    0.9758299,
    1.6947391,
    0.63223267,
    1.4298342,
    0.36878067,
    0.8536364,
    1.155257,
    1.1971254,
    0.20924352,
    -0.015658008,
    -0.27240938,
    0.79850864,
    0.2384314,
    -0.03652039,
    -0.36012393,
    0.5993056,
    0.8426446,
    1.381625,
    1.06915,
    0.23857349,
    -0.3115512,
    0.10469919,
    0.04455925,
    -0.5589372,
    -0.13162075,
    -0.24267103,
    -0.11128783,
    -0.2738834,
    -0.34805676,
    -0.7176867,
    -0.42028785,
    -0.062923595,
    -0.5842824,
    -0.222508,
    0.09078547,
    0.51173496,
    1.0763491,
    0.2724688,
    -0.047844473,
    -0.06982427,
    -0.937918,
    -0.5047052,
    -0.11112771,
    0.24857618,
    0.7948238,
    0.7538169,
    0.5050595,
    0.2629463,
    0.07807289,
    0.0077210236,
    -0.21959354,
    -0.43707773,
    0.104730815,
    0.341872,
    0.07406563,
    -0.11430923,
    -0.34337175,
    -0.39055845,
    -0.69354445,
    0.40368855,
    0.4169491,
    0.36863437,
    0.31509534,
    0.3228972,
    0.30300918,
    0.35251334,
    -0.4411231,
    -0.38517618,
    -0.36394992,
    -0.41371775,
    -0.43892545,
    -0.44959423,
    -0.47057182,
    -0.25726205,
    -0.21616885,
    -0.0029419772,
    0.21971561,
    0.04301151,
    0.15179616,
    0.017463714,
    1.168134,
    0.8472751,
    0.061136782,
    0.14074704,
    0.012034766,
    -0.22860906,
    0.02893331,
    -0.105976924,
    -0.11272477,
    0.005722007,
    -0.30664086,
    -0.21468125,
    -0.16763091,
    -0.023281815,
    0.18200217,
    0.41678488,
    -0.06137127,
    -0.2910838,
    -0.14142004,
    0.16533068,
    0.50901,
    0.7961474,
    -0.023919942,
    -0.2963257,
    -0.06472338,
    0.19420545,
    0.52976084,
    0.6932975,
    -0.046636675,
    -0.4201662,
    -0.14398277,
    0.1465425,
    0.52295595,
    0.76110023,
    -0.5136088,
    -0.561601,
    -0.39094126,
    -0.22955579,
    -0.04966453,
    0.29146084,
    -0.65068823,
    -0.680078,
    -0.44355947,
    -0.18790345,
    0.117854096,
    0.3898865,
    -0.5890713,
    -0.62991965,
    -0.39191532,
    -0.121502995,
    0.15235059,
    0.54074126,
    -0.028596641,
    -0.23133053,
    -0.1917413,
    -0.027591106,
    0.23775434,
    0.48861188,
    -0.33355054,
    -0.39939493,
    -0.18783411,
    0.06325061,
    0.41510442,
    0.6415421,
    -0.5503085,
    -0.5029362,
    -0.25339705,
    0.08157159,
    0.43952087,
    0.73970133,
    -0.39158615,
    -0.33653426,
    -0.35144985,
    -0.7327765,
    -0.68460476,
    -0.24640608,
    -0.4048623,
    -0.2755272,
    -0.32493746,
    0.0042860033,
    -0.004753387,
    0.009866308,
    0.0054509398,
    -0.0066909315,
    0.0056339707,
    0.005903894,
    -0.0017206976,
    -0.0018851925,
    0.007400766,
    -1.5623641,
    -1.5583752,
    -1.5921087,
    -1.5976784,
    -1.6377499,
    -1.6034986,
    -0.46607056,
    -0.80297893,
    -0.9517651,
    -1.0652455,
    -1.2458452,
    -1.3497555,
    -0.16956924,
    -0.482127,
    -0.78138685,
    -1.0991066,
    -1.4978354,
    -1.7952322,
    -0.550451,
    -0.5922004,
    -0.64343166,
    -0.73982126,
    -0.74678546,
    -0.804465,
    -0.32411745,
    -0.4034721,
    -0.43622717,
    -0.50678134,
    -0.56014687,
    -0.566625,
    -2.1067157,
    -0.44309536,
    -1.6144489,
    -0.20105146,
    -1.2435683,
    0.26087052,
    -0.6018114,
    -1.1243628,
    -0.91456825,
    -0.17012958,
    -0.010982103,
    0.11711455,
    -0.7001525,
    -0.25358373,
    0.038375113,
    0.31245348,
    -0.58877546,
    -0.9246461,
    -1.4703913,
    -1.0939978,
    -0.35391325,
    0.36289763,
    -0.0096100215,
    0.0119374,
    0.5484422,
    0.1680112,
    0.25216296,
    0.101875395,
    0.2751865,
    0.4652876,
    0.5119462,
    0.46748087,
    -0.006872382,
    -0.0035781572,
    0.0023975773,
    -0.0020184517,
    -0.000684235,
    -0.0057525216,
    -0.625698,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    1.0859475,
    -0.0063391924,
    0.0013450973,
    0.0035956516,
    -0.012649576,
    -0.06758502,
    -0.2517351,
    -0.67127997,
    0.0024552317,
    0.009908594,
    -0.0004663229,
    -0.00074847107,
    -0.015188093,
    -0.0037694382,
    0.93826026,
    0.015123661,
    0.015849173,
    -0.04671257,
    -0.49378508,
    -0.83345246,
    -0.7889703,
    -0.80688965,
    0.013385372,
    0.05256551,
    0.2156236,
    0.60364485,
    0.6738881,
    0.5076664,
    0.45111844,
    0.23914684,
    0.22917147,
    0.0027116917,
    -0.21528056,
    -0.046847176,
    -0.15626965,
    -0.032571513,
    -0.8836756,
    -0.5968885,
    -0.023023363,
    -0.08317476,
    -0.09092969,
    0.19774109,
    -0.027722942,
    0.15513627,
    0.12377176,
    0.005344481,
    0.30500445,
    0.21322636,
    0.11076027,
    -0.04916048,
    -0.23394215,
    -0.4528437,
    -0.05277027,
    0.09994743,
    -0.04143878,
    -0.27671432,
    -0.5842178,
    -0.78550833,
    -0.014073241,
    0.1629551,
    -0.017219132,
    -0.21624973,
    -0.5025898,
    -0.6858538,
    -0.048322532,
    0.30097184,
    0.07757683,
    -0.1963036,
    -0.5669899,
    -0.80987656,
    0.43017247,
    0.56241286,
    0.42435372,
    0.30866277,
    0.053863104,
    -0.18075146,
    0.54794306,
    0.6049402,
    0.41010728,
    0.20753168,
    -0.06270608,
    -0.4326777,
    0.5459629,
    0.5436166,
    0.3262854,
    0.095327,
    -0.13843526,
    -0.474275,
    0.08034108,
    0.18664254,
    0.16323392,
    0.027233457,
    -0.22290456,
    -0.45778987,
    0.31761947,
    0.3457648,
    0.17612553,
    -0.07225065,
    -0.35165915,
    -0.639622,
    0.527623,
    0.46811488,
    0.25758713,
    -0.025916846,
    -0.3884239,
    -0.7266973,
    0.32920006,
    0.12743616,
    0.066971466,
    0.53171146,
    0.22085012,
    0.010537447,
    0.22754358,
    -0.03372303,
    0.17046426,
    0.0053475164,
    -0.008328738,
    -0.005392799,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_2KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.19618513,
    -0.12603372,
    -0.015536889,
    0.1261336,
    0.39343518,
    0.54471564,
    -0.15491426,
    -0.27759033,
    -0.0069163186,
    -0.0036204353,
    0.2059794,
    0.3110437,
    -0.42611456,
    -0.6068721,
    -0.49104723,
    -0.05461399,
    0.1272986,
    -0.00822559,
    0.1884023,
    -0.13636926,
    -0.13377881,
    0.30591944,
    0.487582,
    0.54234695,
    -1.3201939,
    -0.9234476,
    -0.88198483,
    0.3082681,
    0.94588137,
    2.3325715,
    -1.9623413,
    -0.81226206,
    -1.1284567,
    -0.12128122,
    1.1671778,
    3.1298351,
    -0.39097193,
    0.07514274,
    -0.06557368,
    -0.20560668,
    -0.13817734,
    -0.15567772,
    -1.6164923,
    1.0326616,
    0.21477142,
    -2.8077223,
    -2.551806,
    -0.13339965,
    0.38691,
    -0.30760485,
    0.06981112,
    -0.06082517,
    0.08143008,
    0.050636236,
    -0.19882275,
    0.03367009,
    0.3332777,
    0.6907215,
    0.6812265,
    -0.115635045,
    -0.117798366,
    -0.006480599,
    0.08968755,
    -0.014623408,
    -0.24321537,
    -0.06481637,
    -0.4970192,
    -0.21534547,
    0.51982844,
    1.7268767,
    0.004423392,
    0.30211067,
    -0.06706835,
    0.03738013,
    0.28384575,
    0.4953554,
    0.5341444,
    -0.38101324,
    -0.4474343,
    -0.41911015,
    -0.14857827,
    0.30844328,
    0.6750072,
    -0.97720045,
    -0.56535405,
    -0.17083597,
    0.54298985,
    1.5395478,
    1.096076,
    0.45582753,
    0.016415296,
    -0.33029875,
    0.44426945,
    -0.32968402,
    0.9531575,
    0.41011214,
    0.1216629,
    0.6917996,
    0.18339105,
    0.065131195,
    -0.6355726,
    1.5640646,
    0.46537867,
    1.1751071,
    -0.08667284,
    -0.22987743,
    -0.7127392,
    0.4810418,
    0.8214628,
    0.9918113,
    -0.09119934,
    -0.27208114,
    -0.13251854,
    2.426638,
    -0.104075655,
    2.1405137,
    3.3990076,
    0.45329964,
    -4.655621,
    -0.74131274,
    0.7973329,
    1.3661869,
    0.46773735,
    0.5741953,
    0.087222114,
    0.30638045,
    0.33453366,
    0.08256739,
    0.04432858,
    0.3225368,
    -0.021882322,
    0.32148007,
    0.31549633,
    -1.5004859,
    -0.13966632,
    0.45546106,
    -0.40373558,
    -0.24551375,
    0.18895926,
    0.07625407,
    0.0052082036,
    -0.0012640925,
    0.34141248,
    0.15663096,
    2.02077,
    -2.6822398,
    -1.6883273,
    -1.9041578,
    -0.1886726,
    0.25378472,
    0.5179474,
    1.0816803,
    -2.2359698,
    -1.5015856,
    -0.5805032,
    0.79634327,
    0.31051883,
    -1.2014942,
    0.25040248,
    1.1517992,
    1.6989455,
    1.3853481,
    1.6036713,
    0.7625884,
    -0.92504823,
    -0.5216621,
    0.36561957,
    1.1321492,
    1.6092598,
    0.61432403,
    -2.0228667,
    -0.8177022,
    -1.254545,
    -1.1593713,
    -1.2931123,
    -0.3154228,
    -1.1602424,
    -1.9565928,
    0.32626602,
    -0.028468128,
    -0.036849245,
    -0.112456985,
    0.043217946,
    0.08309858,
    0.24185763,
    -0.17654309,
    0.23051652,
    0.17497836,
    0.30518794,
    -0.17468643,
    -0.17940004,
    1.8823787,
    1.3385825,
    1.6534553,
    0.046787873,
    1.9449157,
    1.957238,
    0.5685186,
    1.369992,
    0.49561453,
    0.5704975,
    0.5515624,
    0.14864062,
    0.68902594,
    0.98338044,
    0.8225161,
    2.7357512,
    0.00053430814,
];
