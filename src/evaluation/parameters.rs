use std::{array, mem};

use half::f16;

use crate::{
    evaluation::policy_eval::sigmoid,
    position::{num_line_symmetries, num_square_symmetries, Komi},
};

use super::policy_eval::policy_offset;

pub const NUM_VALUE_FEATURES_4S: usize = 384;
pub const NUM_POLICY_FEATURES_4S: usize = 176;

pub const NUM_VALUE_FEATURES_5S: usize = 520;
pub const NUM_POLICY_FEATURES_5S: usize = 200;

pub const NUM_VALUE_FEATURES_6S: usize = 544;
pub const NUM_POLICY_FEATURES_6S: usize = 208;

const fn value_padding<const S: usize>() -> usize {
    match S {
        4 => 10,
        5 => 6,
        6 => 10,
        _ => unimplemented!(),
    }
}

const fn policy_padding<const S: usize>() -> usize {
    match S {
        4 => 7,
        5 => 3,
        6 => 1,
        _ => unimplemented!(),
    }
}

#[derive(Debug, Clone, Copy)]
pub struct IndexPair {
    start: usize,
    length: usize,
}

impl IndexPair {
    pub const fn next(start: usize, length: usize) -> (Self, usize) {
        (Self { start, length }, start + length)
    }

    pub fn as_slice<'a, T>(&self, slice: &'a [T]) -> &'a [T] {
        &slice[self.start..self.start + self.length]
    }

    pub fn as_mut_slice<'a, T>(&self, slice: &'a mut [T]) -> &'a mut [T] {
        &mut slice[self.start..self.start + self.length]
    }
}

#[derive(Debug)]
pub struct ValueIndexes<const S: usize> {
    pub first_ply: IndexPair,
    pub second_ply: IndexPair,
    pub flat_psqt_opening: IndexPair,
    pub flat_psqt_middlegame: IndexPair,
    pub flat_psqt_endgame: IndexPair,
    pub wall_psqt_opening: IndexPair,
    pub wall_psqt_middlegame: IndexPair,
    pub wall_psqt_endgame: IndexPair,
    pub cap_psqt_opening: IndexPair,
    pub cap_psqt_middlegame: IndexPair,
    pub cap_psqt_endgame: IndexPair,
    pub supports_psqt_opening: IndexPair,
    pub supports_psqt_middlegame: IndexPair,
    pub supports_psqt_endgame: IndexPair,
    pub captives_psqt_opening: IndexPair,
    pub captives_psqt_middlegame: IndexPair,
    pub captives_psqt_endgame: IndexPair,
    pub flat_win_this_ply: IndexPair,
    pub flat_win_next_ply: IndexPair,
    pub flat_win_two_ply: IndexPair,
    pub flat_win_three_ply: IndexPair,
    pub one_reserve_left_us: IndexPair,
    pub one_reserve_left_them: IndexPair,
    pub shallow_supports_per_piece: IndexPair,
    pub shallow_supports_per_piece_mobility: IndexPair,
    pub shallow_supports_per_piece_mob_scaled: IndexPair,
    pub deep_supports_per_piece: IndexPair,
    pub shallow_captives_per_piece: IndexPair,
    pub shallow_captives_per_piece_mobility: IndexPair,
    pub shallow_captives_per_piece_mob_scaled: IndexPair,
    pub deep_captives_per_piece: IndexPair,
    pub to_move_opening_flatstone_lead: IndexPair,
    pub to_move_middlegame_flatstone_lead: IndexPair,
    pub to_move_endgame_flatstone_lead: IndexPair,
    pub i_number_of_groups: IndexPair,
    pub critical_squares: IndexPair,
    pub critical_square_cap_attack: IndexPair,
    pub flat_next_to_our_stack: IndexPair,
    pub wall_next_to_our_stack: IndexPair,
    pub cap_next_to_our_stack: IndexPair,
    pub num_lines_occupied: IndexPair,
    pub line_control_empty: IndexPair,
    pub line_control_their_blocking_piece: IndexPair,
    pub line_control_other: IndexPair,
    pub line_control_guarded_flat: IndexPair,
    pub line_control_guarded_wall: IndexPair,
    pub line_control_guarded_cap: IndexPair,
    pub sidelined_cap: IndexPair,
    pub fully_isolated_cap: IndexPair,
    pub semi_isolated_cap: IndexPair,
    pub padding: IndexPair,
}

impl<const S: usize> ValueIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;

        let (first_ply, i) = IndexPair::next(i, 1);
        let (second_ply, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt_opening, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt_middlegame, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt_endgame, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_opening, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_middlegame, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_endgame, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_opening, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_middlegame, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_endgame, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (supports_psqt_opening, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (supports_psqt_middlegame, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (supports_psqt_endgame, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (captives_psqt_opening, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (captives_psqt_middlegame, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (captives_psqt_endgame, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_win_this_ply, i) = IndexPair::next(i, 1);
        let (flat_win_next_ply, i) = IndexPair::next(i, 2);
        let (flat_win_two_ply, i) = IndexPair::next(i, 2);
        let (flat_win_three_ply, i) = IndexPair::next(i, 3);
        let (one_reserve_left_us, i) = IndexPair::next(i, 4);
        let (one_reserve_left_them, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece_mobility, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece_mob_scaled, i) = IndexPair::next(i, 4);
        let (deep_supports_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece_mobility, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece_mob_scaled, i) = IndexPair::next(i, 4);
        let (deep_captives_per_piece, i) = IndexPair::next(i, 4);
        let (to_move_opening_flatstone_lead, i) = IndexPair::next(i, 9);
        let (to_move_middlegame_flatstone_lead, i) = IndexPair::next(i, 9);
        let (to_move_endgame_flatstone_lead, i) = IndexPair::next(i, 9);
        let (i_number_of_groups, i) = IndexPair::next(i, 3);
        let (critical_squares, i) = IndexPair::next(i, 4);
        let (critical_square_cap_attack, i) = IndexPair::next(i, 6);
        let (flat_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (wall_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (cap_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (num_lines_occupied, i) = IndexPair::next(i, S + 1);
        let (line_control_empty, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_their_blocking_piece, i) =
            IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_other, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_guarded_flat, i) = IndexPair::next(i, 3);
        let (line_control_guarded_wall, i) = IndexPair::next(i, 3);
        let (line_control_guarded_cap, i) = IndexPair::next(i, 3);
        let (sidelined_cap, i) = IndexPair::next(i, 3);
        let (fully_isolated_cap, i) = IndexPair::next(i, 3);
        let (semi_isolated_cap, i) = IndexPair::next(i, 3);
        let (padding, i) = IndexPair::next(i, value_padding::<S>() / 2);

        assert!(i == num_value_features::<S>() / 2);

        ValueIndexes {
            first_ply,
            second_ply,
            flat_psqt_opening,
            flat_psqt_middlegame,
            flat_psqt_endgame,
            wall_psqt_opening,
            wall_psqt_middlegame,
            wall_psqt_endgame,
            cap_psqt_opening,
            cap_psqt_middlegame,
            cap_psqt_endgame,
            supports_psqt_opening,
            supports_psqt_middlegame,
            supports_psqt_endgame,
            captives_psqt_opening,
            captives_psqt_middlegame,
            captives_psqt_endgame,
            flat_win_this_ply,
            flat_win_next_ply,
            flat_win_two_ply,
            flat_win_three_ply,
            one_reserve_left_us,
            one_reserve_left_them,
            shallow_supports_per_piece,
            shallow_supports_per_piece_mobility,
            shallow_supports_per_piece_mob_scaled,
            deep_supports_per_piece,
            shallow_captives_per_piece,
            shallow_captives_per_piece_mobility,
            shallow_captives_per_piece_mob_scaled,
            deep_captives_per_piece,
            to_move_opening_flatstone_lead,
            to_move_middlegame_flatstone_lead,
            to_move_endgame_flatstone_lead,
            i_number_of_groups,
            critical_squares,
            critical_square_cap_attack,
            flat_next_to_our_stack,
            wall_next_to_our_stack,
            cap_next_to_our_stack,
            num_lines_occupied,
            line_control_empty,
            line_control_their_blocking_piece,
            line_control_other,
            line_control_guarded_flat,
            line_control_guarded_wall,
            line_control_guarded_cap,
            sidelined_cap,
            fully_isolated_cap,
            semi_isolated_cap,
            padding,
        }
    }
}

pub const VALUE_INDEXES_4S: ValueIndexes<4> = ValueIndexes::new();
pub const VALUE_INDEXES_5S: ValueIndexes<5> = ValueIndexes::new();
pub const VALUE_INDEXES_6S: ValueIndexes<6> = ValueIndexes::new();

impl<const S: usize> ValueIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> ValueIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn value_indexes<const S: usize>() -> ValueIndexes<S> {
    match S {
        4 => VALUE_INDEXES_4S.downcast_size(),
        5 => VALUE_INDEXES_5S.downcast_size(),
        6 => VALUE_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

#[derive(Debug)]
pub struct PolicyIndexes<const S: usize> {
    pub flat_psqt_white: IndexPair,
    pub flat_psqt_black: IndexPair,
    pub wall_psqt_white: IndexPair,
    pub wall_psqt_black: IndexPair,
    pub cap_psqt_white: IndexPair,
    pub cap_psqt_black: IndexPair,
    pub move_role_bonus_white: IndexPair,
    pub move_role_bonus_black: IndexPair,
    pub decline_win: IndexPair,
    pub place_to_win: IndexPair,
    pub place_to_draw: IndexPair,
    pub place_to_loss: IndexPair,
    pub place_to_allow_opponent_to_end: IndexPair,
    pub two_flats_left: IndexPair,
    pub three_flats_left: IndexPair,
    pub our_road_stones_in_line: IndexPair,
    pub their_road_stones_in_line: IndexPair,
    pub extend_single_group_base: IndexPair,
    pub extend_single_group_linear: IndexPair,
    pub extend_single_group_to_new_line_base: IndexPair,
    pub extend_single_group_to_new_line_linear: IndexPair,
    pub merge_two_groups_base: IndexPair,
    pub merge_two_groups_linear: IndexPair,
    pub block_merger_base: IndexPair,
    pub block_merger_linear: IndexPair,
    pub place_our_critical_square: IndexPair,
    pub place_their_critical_square: IndexPair,
    pub ignore_their_critical_square: IndexPair,
    pub next_to_our_last_stone: IndexPair,
    pub next_to_their_last_stone: IndexPair,
    pub diagonal_to_our_last_stone: IndexPair,
    pub diagonal_to_their_last_stone: IndexPair,
    pub attack_strong_flats: IndexPair,
    pub blocking_stone_blocks_extensions_of_two_flats: IndexPair,
    pub attack_strong_stack_with_wall: IndexPair,
    pub attack_strong_stack_with_cap: IndexPair,
    pub attack_last_movement: IndexPair,
    pub place_last_movement: IndexPair,
    pub simple_movement: IndexPair,
    pub simple_capture: IndexPair,
    pub simple_self_capture: IndexPair,
    pub pure_spread: IndexPair,
    pub fcd_highest_board: IndexPair,
    pub fcd_highest_stack: IndexPair,
    pub fcd_other: IndexPair,
    pub stack_captured_by_movement: IndexPair,
    pub stack_capture_in_strong_line: IndexPair,
    pub stack_capture_in_strong_line_cap: IndexPair,
    pub move_cap_onto_strong_line: IndexPair,
    pub move_cap_onto_strong_line_with_critical_square: IndexPair,
    pub recapture_stack_pure: IndexPair,
    pub recapture_stack_impure: IndexPair,
    pub move_last_placement: IndexPair,
    pub continue_spread: IndexPair,
    pub move_onto_critical_square: IndexPair,
    pub spread_that_connects_groups_to_win: IndexPair,
    pub padding: IndexPair,
}

pub const POLICY_INDEXES_4S: PolicyIndexes<4> = PolicyIndexes::new();
pub const POLICY_INDEXES_5S: PolicyIndexes<5> = PolicyIndexes::new();
pub const POLICY_INDEXES_6S: PolicyIndexes<6> = PolicyIndexes::new();

impl<const S: usize> PolicyIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> PolicyIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn policy_indexes<const S: usize>() -> PolicyIndexes<S> {
    match S {
        4 => POLICY_INDEXES_4S.downcast_size(),
        5 => POLICY_INDEXES_5S.downcast_size(),
        6 => POLICY_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

impl<const S: usize> PolicyIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;
        let (flat_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (move_role_bonus_white, i) = IndexPair::next(i, 3);
        let (move_role_bonus_black, i) = IndexPair::next(i, 3);
        let (decline_win, i) = IndexPair::next(i, 1);
        let (place_to_win, i) = IndexPair::next(i, 1);
        let (place_to_draw, i) = IndexPair::next(i, 1);
        let (place_to_loss, i) = IndexPair::next(i, 1);
        let (place_to_allow_opponent_to_end, i) = IndexPair::next(i, 3);
        let (two_flats_left, i) = IndexPair::next(i, 2);
        let (three_flats_left, i) = IndexPair::next(i, 2);
        let (our_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (their_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (extend_single_group_to_new_line_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_to_new_line_linear, i) = IndexPair::next(i, 3);
        let (extend_single_group_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_linear, i) = IndexPair::next(i, 3);
        let (merge_two_groups_base, i) = IndexPair::next(i, 3);
        let (merge_two_groups_linear, i) = IndexPair::next(i, 3);
        let (block_merger_base, i) = IndexPair::next(i, 3);
        let (block_merger_linear, i) = IndexPair::next(i, 3);
        let (place_our_critical_square, i) = IndexPair::next(i, 1);
        let (place_their_critical_square, i) = IndexPair::next(i, 4);
        let (ignore_their_critical_square, i) = IndexPair::next(i, 2);
        let (next_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (next_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (attack_strong_flats, i) = IndexPair::next(i, 1);
        let (blocking_stone_blocks_extensions_of_two_flats, i) = IndexPair::next(i, 1);
        let (attack_strong_stack_with_wall, i) = IndexPair::next(i, 6);
        let (attack_strong_stack_with_cap, i) = IndexPair::next(i, 6);
        let (attack_last_movement, i) = IndexPair::next(i, 4);
        let (place_last_movement, i) = IndexPair::next(i, 3);
        let (simple_movement, i) = IndexPair::next(i, 3);
        let (simple_capture, i) = IndexPair::next(i, 4);
        let (simple_self_capture, i) = IndexPair::next(i, 4);
        let (pure_spread, i) = IndexPair::next(i, 2);
        let (fcd_highest_board, i) = IndexPair::next(i, 6);
        let (fcd_highest_stack, i) = IndexPair::next(i, 6);
        let (fcd_other, i) = IndexPair::next(i, 8);
        let (stack_captured_by_movement, i) = IndexPair::next(i, 1);
        let (stack_capture_in_strong_line, i) = IndexPair::next(i, S - 3);
        let (stack_capture_in_strong_line_cap, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line_with_critical_square, i) = IndexPair::next(i, S - 3);
        let (recapture_stack_pure, i) = IndexPair::next(i, 3);
        let (recapture_stack_impure, i) = IndexPair::next(i, 3);
        let (move_last_placement, i) = IndexPair::next(i, 3);
        let (continue_spread, i) = IndexPair::next(i, 3);
        let (move_onto_critical_square, i) = IndexPair::next(i, 3);
        let (spread_that_connects_groups_to_win, i) = IndexPair::next(i, 1);
        let (padding, i) = IndexPair::next(i, policy_padding::<S>());

        assert!(i == num_policy_features::<S>());

        PolicyIndexes {
            flat_psqt_white,
            flat_psqt_black,
            wall_psqt_white,
            wall_psqt_black,
            cap_psqt_white,
            cap_psqt_black,
            move_role_bonus_white,
            move_role_bonus_black,
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            attack_strong_stack_with_wall,
            attack_strong_stack_with_cap,
            attack_last_movement,
            place_last_movement,
            simple_movement,
            simple_capture,
            simple_self_capture,
            pure_spread,
            fcd_highest_board,
            fcd_highest_stack,
            fcd_other,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            recapture_stack_pure,
            recapture_stack_impure,
            move_last_placement,
            continue_spread,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
            padding,
        }
    }
}

pub trait ValueApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn finish(&mut self) -> f32;
}

#[derive(Debug, Clone)]
pub struct Value<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for Value<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Value {
            features: vec![f16::ZERO; num_value_features::<S>() / 2],
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn finish(&mut self) -> f32 {
        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>();

        self.features.fill(f16::ZERO);

        total_value
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalValue<const S: usize> {
    val: f32,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for IncrementalValue<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalValue {
            val: 0.0,
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn finish(&mut self) -> f32 {
        let total_value = self.val;

        self.val = 0.0;

        total_value
    }
}

pub trait PolicyApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn eval_one(&mut self, index_pair: IndexPair, index: usize) {
        self.eval_i8(index_pair, index, 1)
    }
    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.eval(index_pair, index, f16::from(val))
    }
    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.eval(index_pair, index, f16::from_f32(val))
    }
    fn set_immediate_win(&mut self);
    fn has_immediate_win(&self) -> bool;
    fn finish(&mut self, num_moves: usize) -> f16;
}

#[derive(Debug, Clone)]
pub struct Policy<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for Policy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Policy {
            features: vec![f16::ZERO; num_policy_features::<S>()],
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);

        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>() + offset;

        self.features.fill(f16::ZERO);
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalPolicy<const S: usize> {
    val: f32,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for IncrementalPolicy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalPolicy {
            val: 0.0,
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.val += index_pair.as_slice(self.parameters)[index] * val as f32
    }

    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.val += index_pair.as_slice(self.parameters)[index] * val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);
        let total_value = self.val + offset;

        self.val = 0.0;
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

pub const fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub const fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn value_features_4s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_4S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_4S_0KOMI,
        4 => &VALUE_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn policy_features_4s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_4S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_4S_0KOMI,
        4 => &POLICY_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn value_features_5s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_5S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_5S_0KOMI,
        4 => &VALUE_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn policy_features_5s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_5S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_5S_0KOMI,
        4 => &POLICY_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn value_features_6s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_6S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_6S_0KOMI,
        4 => &VALUE_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

pub fn policy_features_6s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_6S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_6S_0KOMI,
        4 => &POLICY_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_0KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    2.4357963,
    3.890928,
    2.6024597,
    1.4492911,
    0.8032834,
    1.159072,
    1.5524725,
    2.472899,
    2.0396252,
    1.54026,
    2.1184943,
    1.5660702,
    0.8579293,
    -0.68383944,
    1.113215,
    2.1859074,
    1.681783,
    2.086145,
    2.8401904,
    0.23306267,
    0.8042966,
    0.8680228,
    -0.0073812627,
    0.004104538,
    0.0060586967,
    -0.008598236,
    0.0018530292,
    -0.004704423,
    0.005802648,
    0.005024814,
    0.0038007405,
    -0.21487793,
    0.50392306,
    1.208147,
    0.20668745,
    0.6486477,
    0.9545482,
    0.1870762,
    0.13900375,
    0.15920658,
    -0.5636391,
    0.64200944,
    1.1954857,
    0.08727974,
    0.4590291,
    0.8342131,
    0.14190145,
    0.18900701,
    0.058776516,
    2.76742,
    0.3153738,
    1.3764616,
    0.13784212,
    1.5190977,
    -0.014773955,
    0.81346947,
    0.6014609,
    0.07133689,
    -0.07562102,
    -0.62247354,
    0.38321644,
    -0.32171005,
    -0.36431482,
    -0.6212491,
    -0.29643643,
    1.4685451,
    0.7841495,
    -0.00496279,
    0.007571606,
    -0.65273744,
    1.3061956,
    -0.0038658213,
    -0.00062850676,
    0.43019843,
    1.1461996,
    -0.00188174,
    0.00081885327,
    1.0148703,
    0.5741924,
    0.0061870757,
    -0.0077467104,
    -0.71127087,
    -0.5197116,
    -0.00032685045,
    -0.00023208652,
    -1.7386566,
    -0.9152617,
    0.0032768678,
    0.0059308577,
    0.10421033,
    0.15347819,
    -0.0057374667,
    0.00015021767,
    -0.92226166,
    -0.91917855,
    -0.00078115705,
    -0.008447227,
    -0.024646778,
    -0.12983432,
    -0.39336166,
    0.7989443,
    2.7441401,
    1.8993765,
    0.336172,
    0.34914854,
    0.015476182,
    1.2848853,
    1.412236,
    1.2311625,
    1.3865994,
    1.3284178,
    1.845032,
    1.9909893,
    2.9884422,
    2.0030098,
    1.2110032,
    1.5000807,
    1.2451122,
    1.3109763,
    1.7386738,
    1.8938133,
    1.8799374,
    1.4873099,
    1.2677975,
    -1.122757,
    0.23255748,
    0.2580939,
    0.350581,
    0.3813461,
    0.24015045,
    0.047061633,
    0.0074368455,
    -0.0066757104,
    0.004355209,
    -0.0077824043,
    0.0070885587,
    0.008410923,
    -0.03486327,
    -0.2828072,
    0.0010137418,
    -0.4830168,
    -0.2956328,
    0.061494518,
    0.40246838,
    0.83762974,
    0.06293271,
    -0.13816015,
    0.7064363,
    1.4774075,
    0.20570184,
    -0.55293477,
    0.45113015,
    1.5004728,
    -0.10317205,
    -0.2233745,
    -0.013333259,
    0.4741793,
    -1.0920445,
    -0.56640905,
    0.3730191,
    1.1411952,
    0.08623014,
    -0.10656993,
    0.36331958,
    1.001,
    -1.4096997,
    -0.7819904,
    0.30471244,
    1.476953,
    -0.12010209,
    0.057324085,
    0.78952205,
    -0.17220573,
    0.13297741,
    0.514878,
    0.0012055086,
    -0.0018659113,
    0.004368524,
    0.0076928716,
    0.004360006,
    0.009378757,
    0.0029043844,
    0.008424118,
    -0.0050589656,
    -0.0051581357,
    0.007047029,
    -0.0010688612,
    -0.007828684,
    0.0054334905,
    -0.006010456,
    -0.0055280733,
    -0.00082149263,
    -0.005897157,
    0.0069459323,
    -0.0069796084,
    -0.0075576873,
    -1.3126706,
    -1.0674293,
    -1.0299314,
    -2.3490899,
    -1.9678485,
    -1.5690187,
    -2.4184077,
    -1.661258,
    -0.65551686,
    -0.19928299,
    -0.20438936,
    0.70135796,
    -1.196472,
    -2.2388449,
    -3.5637207,
    -0.51877856,
    -0.73041075,
    -0.95938057,
    -0.008776911,
    0.006379608,
    -0.0034764553,
    -0.0019571641,
    -0.0020065904,
    -0.0007181382,
    -0.002883594,
    0.0066047404,
    -0.00401304,
    0.022995492,
    -0.90950066,
    -0.76817214,
    -0.34237543,
    -0.5911617,
    -0.9002356,
    0.0071946653,
    -0.2667528,
    -0.18609011,
    1.715917,
    -0.9218457,
    -1.3391118,
    -0.316409,
    -0.4899847,
    -0.79750896,
    -0.22544591,
    -0.30220196,
    -0.20160615,
    -2.1564085,
    -0.60556084,
    -1.492199,
    -0.3436965,
    -1.2394489,
    -0.008241649,
    -0.5324297,
    -0.5172774,
    -1.1797523,
    -0.103481084,
    -0.28594086,
    0.026253765,
    -0.8716072,
    -0.17198217,
    0.007625446,
    0.7346401,
    -1.0579808,
    -1.1555548,
    0.0059623104,
    -0.008494556,
    0.19261903,
    -1.4049405,
    -0.006632633,
    -0.00079724286,
    -0.5749371,
    -0.7808559,
    0.008264789,
    0.0015326263,
    -1.0265335,
    -0.7028147,
    0.0023975773,
    -0.0020184517,
    0.68484324,
    0.5090038,
    0.0038830638,
    -0.0005412027,
    0.90522385,
    0.59818846,
    0.0028945897,
    -0.005422716,
    0.035113283,
    -0.15301158,
    -0.0063391924,
    0.0013449714,
    0.8615637,
    0.8573158,
    0.0075244084,
    -0.003553629,
    0.12059362,
    0.36592308,
    -0.24051908,
    0.20947446,
    -1.2855688,
    -0.64583385,
    -0.40417516,
    -0.030819222,
    -0.0035659648,
    -1.3464602,
    -1.9851023,
    -2.0032356,
    -2.4276412,
    -2.5305715,
    -2.7645435,
    -2.5187747,
    -2.681742,
    -0.9478993,
    -0.36772442,
    -1.2506609,
    -1.3229231,
    -1.618762,
    -1.8408428,
    -1.7228359,
    -1.872429,
    -1.9928893,
    -1.2219712,
    0.80016625,
    -0.13805439,
    -0.20388442,
    -0.25916132,
    -0.070687525,
    -0.28065845,
    -0.08528691,
    0.005034494,
    0.009757778,
    -0.0077813696,
    0.0040523577,
    0.005344481,
    0.0020160126,
    -0.0028234436,
    0.27239746,
    -0.0057330895,
    0.5097069,
    0.35099548,
    0.19433363,
    -0.09436732,
    -0.40738094,
    0.051116403,
    -0.16680147,
    -0.8819164,
    -1.5126528,
    0.20848711,
    0.8672616,
    -0.21111573,
    -1.441444,
    -0.1717442,
    -0.062048033,
    -0.37246564,
    -0.6805281,
    1.5696565,
    0.66105753,
    -0.31685334,
    -1.2119168,
    0.011895984,
    -0.046995185,
    -0.47918737,
    -1.0489084,
    1.6491839,
    0.89488304,
    -0.22797251,
    -1.3771294,
    0.16801454,
    -0.23747997,
    -0.84345156,
    0.2501719,
    -0.297555,
    -0.44465464,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    -0.004423251,
    0.0056418106,
    -0.00813673,
    -0.009886575,
    -0.0087053105,
    -0.0017166166,
    0.00021132734,
    -0.0017882753,
    0.006511757,
    0.0011727996,
    0.0015943982,
    0.009848841,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_0KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    -0.06596815,
    0.14143576,
    0.2643506,
    0.14499849,
    0.107681885,
    0.11073599,
    -0.19013828,
    -0.40654242,
    0.3318426,
    -0.16691944,
    -0.3575065,
    0.23800719,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.33601677,
    -0.041274536,
    0.0013449714,
    -0.29418692,
    -0.54222,
    0.0075244084,
    -2.7454162,
    1.2056162,
    0.74540424,
    -3.2504718,
    -2.7729948,
    0.068721116,
    0.47504744,
    -0.16477276,
    0.18019468,
    -0.13531236,
    0.14152104,
    0.032580495,
    -0.22254677,
    0.49075425,
    1.1202906,
    -0.07768215,
    -0.10285486,
    -0.28730598,
    -0.60267043,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    0.1747276,
    -0.3360676,
    0.35788158,
    1.2172985,
    -0.7322632,
    -0.5023849,
    -0.49644548,
    0.63201225,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    0.6639308,
    0.34448573,
    -0.0077813696,
    -1.4789531,
    -0.5449256,
    0.0020160126,
    0.20559156,
    -0.025478715,
    -0.0057330895,
    0.48247886,
    0.27221236,
    0.0008187201,
    0.79267675,
    1.5803065,
    -0.002397363,
    0.2934291,
    -0.9169082,
    0.00303144,
    0.18601592,
    0.47252977,
    -0.008103551,
    -0.54003847,
    -0.6874615,
    -0.009149382,
    2.5997837,
    0.21279974,
    1.0009149,
    0.00917124,
    0.5581906,
    -3.4829595,
    -0.7885469,
    0.29876935,
    1.3653431,
    0.3458327,
    0.23525056,
    0.27667275,
    0.6695998,
    0.2019845,
    0.33065692,
    -0.2599935,
    0.50598747,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.32448876,
    0.06516934,
    -0.00813673,
    -0.009886575,
    0.04560957,
    -0.2841685,
    0.00021132734,
    -1.8742533,
    -1.0128005,
    0.0011727996,
    0.07729849,
    0.14006491,
    -0.008626261,
    -0.006473,
    -1.0160459,
    -0.7020004,
    -0.0051336214,
    -0.0013411185,
    0.15417725,
    -1.3802054,
    0.25305972,
    1.4399757,
    1.8268988,
    1.968561,
    2.796725,
    1.1202828,
    -1.7660865,
    -0.804423,
    0.20100431,
    1.3501571,
    0.9508624,
    0.054124333,
    -1.1339825,
    -1.1712068,
    -2.0318532,
    -1.4227827,
    -2.0454004,
    -0.13430345,
    -1.5658052,
    -1.0156312,
    0.39389312,
    -0.0530978,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.397977,
    0.7746763,
    -0.002408173,
    0.22021821,
    1.53287,
    0.0077593178,
    0.2637508,
    0.88056475,
    -0.0054027913,
    0.3666799,
    0.14289705,
    0.0036244253,
    -0.39640427,
    -0.31697965,
    0.16356713,
    3.3073342,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_2KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    0.5248962,
    0.6886665,
    0.11828675,
    -0.1464167,
    1.7527441,
    1.3248014,
    0.9665421,
    2.4147143,
    1.5818328,
    0.5403611,
    3.0817776,
    1.8949406,
    0.7875474,
    -0.66431487,
    0.26797727,
    2.2713451,
    1.2865345,
    1.878514,
    1.8833776,
    0.5482514,
    0.6002085,
    0.9569421,
    -0.0073812627,
    0.004104538,
    0.0060586967,
    -0.008598236,
    0.0018530292,
    -0.004704423,
    0.005802648,
    0.005024814,
    0.0038007405,
    0.29785383,
    0.5304332,
    1.6781939,
    -0.2881816,
    0.14318405,
    0.2561146,
    0.11159974,
    0.30159333,
    0.13639319,
    -0.37120473,
    1.1663918,
    2.3144643,
    -0.1004846,
    0.15773948,
    0.041054048,
    -0.1905115,
    -0.17342909,
    -0.18762249,
    3.7893198,
    0.7795229,
    1.6934744,
    0.5042247,
    1.6933888,
    0.15828018,
    0.8134257,
    0.58014596,
    0.39247164,
    -0.12844205,
    -0.06862253,
    -0.43965572,
    -0.03145381,
    -0.16712257,
    -0.009994145,
    -0.92266834,
    1.0526892,
    0.9237568,
    -0.00496279,
    0.007571606,
    -0.64862525,
    -0.45413017,
    -0.0038658213,
    -0.00062850676,
    0.39780873,
    1.1896341,
    -0.00188174,
    0.00081885327,
    0.7807681,
    0.3852484,
    0.0061870757,
    -0.0077467104,
    -0.67735445,
    -0.54074717,
    -0.00032685045,
    -0.00023208652,
    -1.2723223,
    -0.2532052,
    0.0032768678,
    0.0059308577,
    0.10772221,
    0.0604207,
    -0.0057374667,
    0.00015021767,
    -0.8507695,
    -0.69233364,
    -0.00078115705,
    -0.008447227,
    -0.01154464,
    0.017699052,
    -1.0601748,
    2.3439465,
    1.3977745,
    1.6352184,
    1.0507306,
    1.7043568,
    0.041746315,
    0.15936124,
    1.0384917,
    0.90080065,
    1.243825,
    1.4165356,
    1.4616461,
    1.0535886,
    1.3490204,
    1.509785,
    0.50937295,
    0.35768825,
    1.0087713,
    0.56012815,
    0.751016,
    0.8717804,
    1.3587532,
    1.6698923,
    2.2364993,
    -0.5444966,
    0.114615664,
    0.022470912,
    0.39564186,
    0.108865544,
    0.1500284,
    -0.0050711944,
    0.0074368455,
    -0.0066757104,
    0.004355209,
    -0.0077824043,
    0.0070885587,
    0.008410923,
    -0.042718735,
    -0.16997251,
    0.0010137418,
    -0.25723878,
    -0.1803946,
    -0.25808084,
    -0.09992453,
    0.07057996,
    0.09624321,
    0.26915467,
    0.43033022,
    0.33649057,
    -0.061198875,
    -0.6831808,
    0.25193197,
    1.0719101,
    0.6053166,
    0.29692602,
    0.08507005,
    -0.1344714,
    -1.4488237,
    -0.6916551,
    0.15615372,
    1.0853889,
    0.43934,
    0.25590256,
    0.18268241,
    0.22164267,
    -1.7735894,
    -0.74424714,
    0.18374246,
    1.207723,
    0.18282959,
    -0.08415497,
    -0.11948543,
    0.31082296,
    0.050760105,
    -0.2630066,
    0.0012055086,
    -0.0018659113,
    0.004368524,
    0.0076928716,
    0.004360006,
    0.009378757,
    0.0029043844,
    0.008424118,
    -0.0050589656,
    -0.0051581357,
    0.007047029,
    -0.0010688612,
    -0.007828684,
    0.0054334905,
    -0.006010456,
    -0.0055280733,
    -0.00082149263,
    -0.005897157,
    0.0069459323,
    -0.0069796084,
    -0.0075576873,
    -2.251751,
    -1.8595331,
    -0.78639615,
    -2.8014796,
    -1.7676619,
    -0.8198362,
    -3.1470153,
    -2.1041665,
    -0.8324149,
    -0.17480494,
    -1.300723,
    -1.626019,
    -1.5448158,
    -1.920357,
    -2.331008,
    -1.1038306,
    -1.6946088,
    -1.6955261,
    -0.008776911,
    0.006379608,
    -0.0034764553,
    -0.0019571641,
    -0.0020065904,
    -0.0007181382,
    -0.002883594,
    0.0066047404,
    -0.00401304,
    -2.0767217,
    -2.5555694,
    1.1589952,
    0.06273023,
    -0.20958652,
    -0.22282882,
    0.10843075,
    0.20756869,
    0.113381214,
    -0.4773462,
    -1.0316308,
    0.052299425,
    0.12161466,
    -0.1413328,
    -0.17434442,
    0.009301815,
    -0.0774184,
    -0.076016776,
    -2.6167345,
    -0.28284055,
    -1.7896982,
    -0.18710911,
    -1.2035924,
    0.16021043,
    -0.6375874,
    -1.0170604,
    -0.8352226,
    -0.5742156,
    -0.15334365,
    -0.0033396091,
    -0.7621647,
    -0.5469079,
    -0.09243063,
    0.003192375,
    -0.94344616,
    -1.2013617,
    0.0059623104,
    -0.008494556,
    1.0781909,
    0.030246163,
    -0.006632633,
    -0.00079724286,
    -0.66290885,
    -0.67025983,
    0.008264789,
    0.0015326263,
    -0.92803186,
    -0.38439432,
    0.0023975773,
    -0.0020184517,
    0.38669714,
    0.62248665,
    0.0038830638,
    -0.0005412027,
    1.3448598,
    0.004860402,
    0.0028945897,
    -0.005422716,
    -0.01282793,
    -0.12146275,
    -0.0063391924,
    0.0013449714,
    0.43367574,
    0.2977191,
    0.0075244084,
    -0.003553629,
    0.47984973,
    -0.59057945,
    -0.37965807,
    -0.50268555,
    0.9816188,
    -1.2020351,
    -0.09196049,
    0.00015811757,
    -0.0088056885,
    -1.3210896,
    -1.4082922,
    -1.1665771,
    -1.2523808,
    -1.1904523,
    -1.4937111,
    -1.8770425,
    -1.2426304,
    -0.34342405,
    -1.38349,
    -1.8953629,
    -1.775568,
    -1.8841579,
    -2.4394448,
    -1.7497634,
    -1.7036554,
    -1.0969915,
    -0.37715986,
    0.7070915,
    -0.023412809,
    -0.11485001,
    -0.00568194,
    -0.0124391895,
    -0.1342335,
    0.2750139,
    0.005034494,
    0.009757778,
    -0.0077813696,
    0.0040523577,
    0.005344481,
    0.0020160126,
    0.0035758244,
    0.42985785,
    -0.0057330895,
    0.3093114,
    -0.11915139,
    -0.17610382,
    -0.25214624,
    -0.4566327,
    0.08442729,
    0.082936324,
    0.23405926,
    0.015467814,
    -0.058413476,
    0.7805907,
    -0.10263947,
    -0.9417596,
    -0.9646366,
    -0.42490265,
    0.08327111,
    0.483219,
    0.39535934,
    0.015353169,
    -0.7268028,
    -1.2930208,
    -0.5214309,
    -0.016297711,
    0.12707968,
    0.20007245,
    1.2727311,
    0.5703496,
    -0.30736777,
    -1.0362306,
    -0.013591263,
    0.16927463,
    0.3738292,
    0.20501128,
    0.20187505,
    0.34290814,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    -0.004423251,
    0.0056418106,
    -0.00813673,
    -0.009886575,
    -0.0087053105,
    -0.0017166166,
    0.00021132734,
    -0.0017882753,
    0.006511757,
    0.0011727996,
    0.0015943982,
    0.009848841,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_2KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    0.3835006,
    0.21164729,
    0.5567637,
    0.14972319,
    0.008378243,
    -0.43465084,
    -0.7308303,
    -0.8912839,
    0.46212968,
    -0.43907836,
    0.26626498,
    0.5782282,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.4975553,
    0.15077943,
    0.0013449714,
    -0.4241401,
    -0.4088393,
    0.0075244084,
    -3.2364414,
    0.9161514,
    0.5318693,
    -2.230449,
    -4.504568,
    -0.487717,
    0.6291668,
    -0.73886293,
    0.26118273,
    -0.27261165,
    0.12881532,
    0.1777136,
    -0.011507088,
    0.41689792,
    1.1819894,
    -0.14281727,
    -0.12822403,
    -0.4899795,
    -0.7057814,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    -0.038640175,
    -0.48866045,
    0.18388642,
    2.1011872,
    -0.47701856,
    -0.35595262,
    -0.5488175,
    -0.12425026,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    -0.0737323,
    1.6342262,
    -0.0077813696,
    0.8013023,
    -0.2317711,
    0.0020160126,
    0.59806335,
    -0.9970204,
    -0.0057330895,
    0.07285249,
    0.6827554,
    0.0008187201,
    0.9157639,
    0.626506,
    -0.002397363,
    -0.088837735,
    0.38987082,
    0.00303144,
    0.2895544,
    -0.16646424,
    -0.008103551,
    -0.26244026,
    -0.4901274,
    -0.009149382,
    2.3455992,
    -0.7211382,
    1.9804211,
    0.00917124,
    0.5224504,
    -4.4372244,
    -0.8496559,
    0.4749193,
    1.473498,
    0.45706263,
    0.046547048,
    0.25537905,
    0.77724373,
    0.07417753,
    0.39354962,
    -0.6581425,
    0.71233255,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.5941038,
    -0.046199616,
    -0.00813673,
    -0.009886575,
    0.1387866,
    -0.22598192,
    0.00021132734,
    -2.1441894,
    -1.8108326,
    0.0011727996,
    -0.16316642,
    0.30345392,
    -0.008626261,
    -0.006473,
    -1.3621367,
    -0.119089246,
    -0.0051336214,
    -0.0013411185,
    0.010755843,
    -1.2026048,
    0.38548076,
    1.398525,
    1.9160999,
    2.1099184,
    2.0770369,
    1.4328448,
    -1.7100422,
    -0.6515236,
    0.332164,
    0.62545145,
    0.0065994086,
    -0.005360393,
    -0.9618395,
    -1.1140851,
    -1.7814239,
    -0.5971449,
    -1.9552374,
    -0.23968147,
    -1.2191556,
    -1.1778564,
    0.42183256,
    -0.11105158,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.4999874,
    0.31543893,
    -0.002408173,
    -0.93778354,
    1.1441715,
    0.0077593178,
    0.79672486,
    0.83366203,
    -0.0054027913,
    0.49028045,
    0.045144238,
    0.0036244253,
    -0.30533037,
    -0.3648391,
    0.09491095,
    3.3036993,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_0KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    1.1968938,
    2.1004941,
    1.2520066,
    1.563299,
    0.8099755,
    0.8130019,
    0.84027874,
    0.61652744,
    0.62411445,
    0.6342429,
    0.6180136,
    0.48682502,
    0.26664296,
    1.6538118,
    1.442836,
    1.330738,
    1.1390654,
    1.0604159,
    1.000864,
    2.4420202,
    2.2042248,
    1.9823881,
    1.6876835,
    1.5753473,
    1.5061333,
    -0.70243,
    -0.9968837,
    -0.45368385,
    -0.7200778,
    0.34447092,
    0.26613447,
    1.1481534,
    1.2485288,
    1.2425126,
    1.7734094,
    1.8711008,
    2.3198097,
    0.35188416,
    1.1076962,
    1.1884718,
    1.3935993,
    1.4188256,
    1.6790364,
    -0.9264337,
    -0.046230115,
    0.9192667,
    0.34920335,
    0.87810385,
    1.0825856,
    -0.64224994,
    0.07721725,
    0.09835798,
    0.77313334,
    0.9658148,
    1.4493723,
    -0.39352095,
    -0.2556506,
    -0.20572084,
    -0.3166552,
    -0.16905017,
    0.028792476,
    0.40384772,
    0.73529226,
    -0.39369643,
    -0.6144435,
    -0.25512138,
    -0.05593748,
    0.32820907,
    0.18898265,
    0.20192917,
    0.22679275,
    0.28733733,
    0.32543615,
    0.44270137,
    0.6708068,
    0.69203293,
    0.6688677,
    0.72690034,
    0.78441656,
    0.29678428,
    0.22555512,
    0.10857679,
    0.11843841,
    0.07965907,
    0.42215088,
    0.061450295,
    0.22068065,
    0.202225,
    0.29220867,
    0.2743772,
    0.28312007,
    0.39453426,
    0.5419599,
    0.4936626,
    0.5233596,
    0.5267208,
    0.55045867,
    2.1145382,
    0.2708047,
    1.1904025,
    0.18696323,
    1.1329459,
    -0.066789836,
    0.3944641,
    0.64933825,
    0.52794784,
    -0.006313197,
    -0.0827682,
    -0.30241808,
    0.39385572,
    -0.06146659,
    -0.20591797,
    -0.7323984,
    0.9091607,
    1.0839137,
    1.2756045,
    0.9532147,
    0.3707229,
    0.72563946,
    0.96391064,
    1.5245495,
    0.24644679,
    0.39208153,
    0.7564338,
    0.62913024,
    0.86267513,
    0.41214034,
    -0.7598568,
    0.63110447,
    -0.65465957,
    -0.6515204,
    -0.46356085,
    -0.5625719,
    -0.71183497,
    0.4012923,
    0.2732214,
    -0.09322096,
    -0.05381343,
    -0.009639657,
    0.031044628,
    0.09636732,
    -0.77793443,
    -0.8579877,
    -0.7802003,
    -0.8269497,
    0.023079038,
    -0.07541269,
    -0.12529361,
    0.862781,
    0.89315194,
    1.1348827,
    1.1015788,
    0.36720484,
    0.07478751,
    0.90324396,
    1.1504649,
    1.2619866,
    1.3256354,
    1.43095,
    1.5096177,
    1.7139,
    1.7124653,
    2.0486784,
    0.94933283,
    0.8656434,
    1.1154925,
    1.3770404,
    1.623442,
    1.9772338,
    2.003862,
    2.231897,
    1.8881763,
    -0.3144629,
    -0.11222663,
    0.006854342,
    0.4207437,
    0.18332395,
    0.20544888,
    -0.0021486788,
    2.222595,
    0.9680872,
    0.054727294,
    0.18315123,
    0.03047633,
    -0.061510596,
    0.022656064,
    -0.21971048,
    -0.16689883,
    0.0054334905,
    -0.94375664,
    -0.42833313,
    -0.049879972,
    0.45606723,
    1.0410049,
    0.07126946,
    -0.07000531,
    0.36417878,
    0.94095284,
    1.3400911,
    0.061012246,
    -0.87803465,
    -0.06304139,
    0.80262434,
    1.4228481,
    0.030549746,
    -1.1471068,
    -0.27206954,
    0.770009,
    1.5523603,
    -0.11867737,
    -0.44349298,
    -0.19503681,
    -0.0181808,
    0.47533658,
    -1.1247778,
    -1.0370569,
    -0.35978273,
    0.4089088,
    1.2281783,
    -1.280869,
    -1.0578388,
    -0.27290082,
    0.60247844,
    1.4356728,
    0.09998775,
    -0.11732226,
    0.08454799,
    0.47718215,
    0.85025054,
    -1.0413644,
    -1.0118326,
    -0.2652706,
    0.61763906,
    1.42273,
    -1.3623661,
    -1.0972282,
    -0.25905433,
    0.70452094,
    1.7301039,
    -0.04121455,
    0.27881324,
    0.5362565,
    0.16202693,
    0.4582346,
    0.6089027,
    0.06593991,
    0.1272696,
    0.08040809,
    -0.22153121,
    -0.108943045,
    0.12974569,
    -0.92533606,
    -0.4789576,
    -0.4691289,
    -0.35306412,
    -0.21646991,
    -0.31152606,
    0.0015812209,
    0.009482224,
    0.0059623104,
    -0.008494556,
    -0.001817584,
    -0.009368448,
    -0.006632633,
    -0.00079724286,
    -0.001203401,
    -0.001678803,
    -0.44484305,
    -0.61147314,
    -0.3471109,
    -0.42601228,
    -0.31840518,
    -0.32036966,
    -1.754078,
    -1.326252,
    -1.4050503,
    -1.111467,
    -1.1496159,
    -0.9321292,
    -2.6113698,
    -2.0200438,
    -1.9366812,
    -1.6316938,
    -1.5515676,
    -1.4845215,
    0.8423966,
    0.68782324,
    0.02183099,
    -0.37770718,
    0.11940632,
    0.39501315,
    -0.59378856,
    -1.025195,
    -1.2209104,
    -1.740665,
    -1.8939053,
    -2.0094502,
    -0.6947676,
    -0.8296108,
    -0.97221154,
    -1.264745,
    -1.4338754,
    -1.3341452,
    0.63691896,
    0.5502101,
    0.52379936,
    -0.4769221,
    -0.6619411,
    -0.89181066,
    0.12777802,
    0.0015773248,
    0.01574679,
    -0.80674714,
    -1.1698514,
    -1.5217952,
    -0.21914868,
    -0.034359433,
    -0.020456605,
    -0.23955779,
    -0.19716194,
    -0.59165937,
    -0.06306139,
    -0.89018285,
    -0.5234711,
    0.22013383,
    0.8443627,
    0.046057764,
    -0.33832133,
    -0.45035195,
    -0.4366456,
    -0.3888735,
    -0.41068295,
    -0.29234797,
    -0.5082694,
    -0.70753336,
    -0.72358435,
    -0.6797181,
    -0.69597185,
    -0.8059947,
    -0.38749725,
    -0.36994115,
    0.017969858,
    -0.12107547,
    0.15896834,
    0.13461475,
    -0.09898115,
    -0.19852194,
    -0.08595807,
    -0.2721182,
    -0.29533324,
    -0.2800463,
    -0.44550696,
    -0.49359378,
    -0.508492,
    -0.57326263,
    -0.52706414,
    -0.56816393,
    -1.957993,
    -0.47302213,
    -1.0109646,
    -0.18299906,
    -0.8897048,
    0.061507657,
    -0.1731401,
    -0.3172683,
    -1.0405055,
    -0.06591034,
    0.20822382,
    0.06476548,
    -0.7219562,
    -0.070343554,
    0.37239337,
    0.6164922,
    -0.91370326,
    -0.92917204,
    -0.9489233,
    -1.4803916,
    -0.072025105,
    -0.5466855,
    -0.4094848,
    -0.689761,
    -0.25855854,
    -0.4688371,
    -0.86676246,
    -0.32395214,
    -0.7128764,
    -0.43762884,
    -1.0139304,
    -0.44459504,
    0.59066397,
    0.47725993,
    0.23407497,
    0.54075164,
    0.62954277,
    0.1901225,
    0.41154507,
    0.13889018,
    0.088821776,
    -0.029656567,
    -0.32318866,
    -0.10266873,
    0.7091862,
    0.71989846,
    1.071729,
    0.5688946,
    0.18491605,
    0.2288558,
    -0.55991614,
    -0.616642,
    -0.9013786,
    -1.110565,
    -0.205049,
    -0.07905446,
    -0.005361257,
    -1.0622607,
    -1.0956246,
    -1.2323551,
    -1.380197,
    -1.3594375,
    -1.4908882,
    -1.634926,
    -1.8225753,
    -1.7846316,
    -0.90050787,
    -1.077885,
    -1.2398311,
    -1.5699179,
    -1.9276227,
    -2.0282273,
    -2.3159795,
    -2.2693043,
    -2.0197172,
    0.25905675,
    0.12786089,
    -0.040714066,
    -0.2317173,
    -0.099967934,
    -0.13309021,
    -0.02127338,
    -1.3525194,
    -0.5765043,
    -0.01169161,
    -0.087217905,
    -0.088336274,
    0.2316966,
    -0.030088142,
    0.22347088,
    0.17718217,
    0.004125176,
    0.91146135,
    0.57476676,
    0.09429154,
    -0.4585248,
    -1.0308565,
    0.07627321,
    0.17285596,
    -0.1839484,
    -0.70825714,
    -1.2419466,
    0.059923466,
    0.9444582,
    0.021835303,
    -0.8473922,
    -1.5244391,
    0.02271662,
    1.1268196,
    0.2493339,
    -0.7663204,
    -1.5168272,
    0.13011274,
    0.46615526,
    0.1571667,
    -0.08215871,
    -0.43049917,
    1.2227547,
    1.1446127,
    0.34168878,
    -0.40556785,
    -1.2338904,
    1.2671192,
    1.0222621,
    0.22358643,
    -0.54163754,
    -1.4358602,
    -0.20198017,
    0.14063661,
    -0.047965616,
    -0.5107326,
    -0.9697594,
    1.1592789,
    1.0688163,
    0.29126805,
    -0.6271604,
    -1.4213763,
    1.391164,
    1.1272751,
    0.22172052,
    -0.7527184,
    -1.6072445,
    -0.01966803,
    -0.42253816,
    -0.7910546,
    -0.075491205,
    -0.32977065,
    -0.6572985,
    0.14284766,
    -0.13654515,
    -0.1562064,
    0.15647241,
    0.3731098,
    0.17364167,
    0.6758522,
    0.4167647,
    0.5016467,
    0.35884336,
    0.26332945,
    0.38436717,
    0.005503459,
    0.009021362,
    -0.009674854,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_0KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    -0.21254763,
    0.23103847,
    -0.033314772,
    0.28951204,
    0.08258201,
    -0.20170505,
    -0.083164066,
    0.039200466,
    -0.00088396505,
    0.3021171,
    0.11830643,
    -0.081436746,
    -0.40565103,
    -0.37145954,
    -0.18355277,
    0.06397571,
    0.20453936,
    0.55752325,
    -0.12067064,
    -0.30509105,
    -0.22406316,
    0.04068911,
    0.06334039,
    0.038877312,
    -2.746777,
    -0.87377214,
    -0.65470624,
    0.73748547,
    1.1899408,
    2.4166262,
    -0.82226,
    -1.3962785,
    -1.4452674,
    0.5082308,
    1.2789531,
    2.7618878,
    -0.3863811,
    0.031400807,
    -0.102757595,
    -0.38964626,
    -0.14711878,
    -0.31159613,
    -2.9462645,
    1.2216566,
    0.49116233,
    -4.1368756,
    -3.0489886,
    0.14062,
    0.4538722,
    -0.20252825,
    0.1369588,
    -0.058979962,
    0.08831377,
    0.02167715,
    -0.26413515,
    0.028735323,
    0.47112805,
    0.67481583,
    -0.037136614,
    -0.023578765,
    0.06294667,
    -0.05659834,
    -1.2630483,
    0.25168982,
    0.096158154,
    0.43390813,
    1.3263559,
    -0.38228187,
    0.30753988,
    -0.17709245,
    0.021742836,
    0.3967858,
    0.37994313,
    -0.5040257,
    -0.60063547,
    -0.5784962,
    -0.09444315,
    0.42124468,
    -0.95363337,
    -0.8204556,
    -0.515455,
    0.36224493,
    3.6014647,
    0.6930546,
    -0.022836408,
    1.229127,
    -0.20067202,
    -0.88029164,
    -1.945374,
    0.27076137,
    0.24485452,
    -0.2529798,
    0.3806981,
    -0.1388048,
    -0.43375793,
    1.5184788,
    0.4213168,
    1.0030801,
    -0.12647864,
    -0.28902504,
    -0.68267906,
    0.3738028,
    0.69471484,
    1.1517682,
    -0.16151088,
    -0.5155371,
    -0.17652579,
    2.4710944,
    0.30520877,
    2.0582628,
    1.0057538,
    0.5753131,
    -4.1801777,
    -0.5127082,
    0.45404467,
    1.4079078,
    0.3417027,
    0.39399534,
    0.1540643,
    0.2801745,
    0.3059642,
    0.2046346,
    -0.05043553,
    0.38525426,
    0.006237678,
    0.3969141,
    0.18871525,
    -1.5612092,
    -0.39385808,
    0.7173354,
    -0.24273492,
    -0.060208935,
    0.20501433,
    0.06431221,
    0.007810466,
    -0.006842167,
    0.25922537,
    0.22373736,
    1.4958718,
    -2.2605436,
    -1.6751494,
    -1.7748834,
    -0.15428533,
    -0.13730817,
    0.3625118,
    0.7318449,
    -2.1013966,
    -1.6390495,
    -0.58728755,
    0.705842,
    0.05825597,
    -1.3842419,
    0.5513746,
    1.3413002,
    1.6110371,
    1.1969258,
    1.6104766,
    0.26784024,
    -0.82374805,
    -0.27678168,
    0.63337976,
    1.37859,
    1.5559744,
    -0.2600439,
    -1.5502057,
    -0.7311096,
    -0.89582264,
    -0.8938125,
    -1.1783751,
    -0.29525974,
    -1.3265866,
    -2.8699765,
    0.3670057,
    -0.02602606,
    -0.094160676,
    0.038038492,
    0.18733682,
    0.1730221,
    0.4983536,
    -0.6600161,
    0.07679693,
    1.6442226,
    0.74923706,
    1.2906911,
    -0.0030353356,
    1.5110451,
    1.8540987,
    0.46657535,
    1.0854816,
    0.6397842,
    0.38965192,
    0.4017657,
    0.15735355,
    0.2403061,
    0.20836167,
    0.8231178,
    3.0737865,
    -0.0031571696,
    -0.0045039677,
    -0.0037830565,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_2KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    0.7452693,
    0.8884029,
    0.19034223,
    0.2878733,
    -0.06113673,
    -0.18072972,
    0.05957889,
    0.74406934,
    0.5826557,
    0.60369337,
    0.5399739,
    0.4526437,
    0.0801274,
    1.710338,
    1.345855,
    1.4656348,
    1.0321804,
    1.1249988,
    0.9183174,
    2.3670921,
    1.8248702,
    1.8402843,
    1.271831,
    1.2524304,
    1.3059237,
    -1.1815143,
    -0.84551066,
    -1.9671977,
    -1.1715091,
    -0.5402239,
    -0.3396544,
    0.95385015,
    1.0786659,
    1.0149479,
    1.3325489,
    1.514868,
    1.3694252,
    0.31846407,
    0.59296197,
    0.6074989,
    0.68892175,
    0.7250909,
    0.9592837,
    0.375452,
    0.24341524,
    -0.020134006,
    0.99817663,
    0.9893154,
    0.9930396,
    0.049046073,
    0.16299447,
    0.25464013,
    0.5601901,
    0.98776674,
    1.1246996,
    0.14175273,
    -0.44393423,
    -0.3797762,
    -0.6064716,
    -0.4131032,
    -0.22892988,
    0.6120425,
    0.54539603,
    0.30889955,
    -0.66527784,
    -0.27660906,
    -0.13407247,
    0.2718068,
    0.2610338,
    0.34153175,
    0.37647355,
    0.38597023,
    0.46936756,
    0.42417926,
    0.4934313,
    0.55626553,
    0.5137952,
    0.5888993,
    0.46237022,
    0.15367943,
    0.14634076,
    0.25811657,
    0.40057793,
    0.23533437,
    0.39920646,
    0.122183375,
    0.21159272,
    0.18294734,
    0.27311105,
    0.3173241,
    0.22972694,
    0.2349214,
    0.25285316,
    0.25289696,
    0.3138733,
    0.3355385,
    0.29363024,
    2.9971833,
    0.53007966,
    1.2757199,
    0.3973889,
    1.0685316,
    0.17138916,
    0.21777664,
    0.5923407,
    0.55395776,
    -0.038282882,
    -0.09706147,
    -0.17864221,
    0.16841622,
    -0.05785547,
    -0.056069735,
    -0.23016423,
    0.8334942,
    0.84766763,
    1.5448701,
    0.7056648,
    -0.22933078,
    0.56675565,
    0.36155075,
    1.7986249,
    0.24398944,
    0.3885595,
    0.5434935,
    0.40201938,
    0.5149159,
    0.14555937,
    0.64107573,
    0.30727893,
    -0.5389814,
    -0.42824468,
    -0.52762294,
    -0.44842812,
    -0.60653275,
    -0.22254287,
    0.73957646,
    -0.20463262,
    -0.056046076,
    0.06326287,
    0.0033303173,
    0.10809539,
    -0.7296656,
    -0.6345798,
    -0.57903147,
    -0.7114408,
    0.019711863,
    -0.12856978,
    -0.25283536,
    0.86745006,
    1.2385831,
    1.3392938,
    1.1250145,
    0.7603918,
    0.13970223,
    0.56514984,
    0.8311498,
    1.0232519,
    1.2981528,
    1.2710807,
    1.2851101,
    1.2940427,
    1.2831739,
    1.3783487,
    1.075531,
    1.0241358,
    1.0593121,
    1.0139433,
    1.0940503,
    1.3910645,
    1.4906893,
    1.7093564,
    1.9416988,
    -0.30559385,
    -0.10253417,
    -0.0076153097,
    0.27578437,
    0.031772636,
    0.1379809,
    -0.012525622,
    2.8384624,
    0.7889668,
    0.032205805,
    0.121540785,
    0.04961206,
    -0.16713753,
    0.016010048,
    -0.16914298,
    -0.14813013,
    0.0054334905,
    -0.7334265,
    -0.42722666,
    -0.11137601,
    0.364907,
    0.8783214,
    -0.13287672,
    -0.20868511,
    0.109700784,
    0.56298023,
    0.8903078,
    0.06304267,
    -0.89164513,
    -0.1599225,
    0.63763094,
    1.3204436,
    0.031398475,
    -0.9090991,
    -0.20689648,
    0.7282199,
    1.3745742,
    -0.07911351,
    -0.42099023,
    -0.22646683,
    -0.081296496,
    0.20990267,
    -1.0640345,
    -0.957159,
    -0.31481743,
    0.38502085,
    1.1368365,
    -1.0743997,
    -0.94546324,
    -0.2858097,
    0.42797923,
    1.1337937,
    0.32554758,
    -0.09646693,
    0.012275668,
    0.25405076,
    0.5838089,
    -1.0035142,
    -0.85921854,
    -0.21646814,
    0.5618698,
    1.3369014,
    -1.1007947,
    -0.95251346,
    -0.1920668,
    0.5943271,
    1.34914,
    -0.035431933,
    0.10802721,
    0.29287773,
    -0.001784083,
    0.05441544,
    0.2986462,
    -0.045100268,
    0.0323814,
    0.015017402,
    -0.32585576,
    -0.4961573,
    -0.21684493,
    -0.56425637,
    -0.30114195,
    -0.26079792,
    -0.13541377,
    -0.04856084,
    -0.41063696,
    0.0015812209,
    0.009482224,
    0.0059623104,
    -0.008494556,
    -0.001817584,
    -0.009368448,
    -0.006632633,
    -0.00079724286,
    -0.001203401,
    -0.001678803,
    -0.6531083,
    -0.8227959,
    -0.720212,
    -0.39270186,
    -0.28089738,
    -0.17843051,
    -1.8699031,
    -1.4588947,
    -1.4144516,
    -1.025639,
    -1.0219687,
    -0.97580075,
    -2.5000787,
    -1.9145142,
    -1.8304847,
    -1.2928325,
    -1.3002993,
    -1.205946,
    0.44069615,
    0.782119,
    0.5211002,
    -0.4393066,
    -0.5669086,
    -0.028226087,
    -0.9730817,
    -1.3230426,
    -1.2881117,
    -1.7893777,
    -1.8283598,
    -1.8697228,
    -0.82968456,
    -1.1246688,
    -1.1304692,
    -1.3242332,
    -1.4460608,
    -1.5006644,
    0.27801877,
    0.41605842,
    0.532941,
    -0.034642503,
    -0.2661353,
    -0.39299747,
    -0.09956189,
    -0.37481964,
    -0.24820805,
    -0.7948388,
    -1.0080465,
    -1.4132624,
    -0.44844472,
    -0.26128522,
    -0.34878466,
    -0.17351595,
    -0.39612496,
    -0.4124883,
    -0.6060519,
    -1.0442241,
    -0.16120888,
    0.1302393,
    0.32818362,
    0.15411454,
    -0.13132627,
    -0.45680526,
    -0.5342953,
    -0.398467,
    -0.5000523,
    -0.48209903,
    -0.37168366,
    -0.40740055,
    -0.48832336,
    -0.41267034,
    -0.4475263,
    -0.34968632,
    -0.009164672,
    -0.5714959,
    0.011360626,
    -0.054794136,
    0.040403705,
    -0.389995,
    -0.07261904,
    -0.2052106,
    -0.21501426,
    -0.27134496,
    -0.3128293,
    -0.26019138,
    -0.27280623,
    -0.30961385,
    -0.35480887,
    -0.30418915,
    -0.34957883,
    -0.32784033,
    -2.693682,
    -0.4655432,
    -1.6546177,
    -0.15699217,
    -0.8869281,
    0.1472198,
    -0.3246534,
    -0.6040194,
    -1.0165133,
    -0.63546807,
    -0.32659447,
    -0.17597613,
    -0.8772867,
    -0.5122817,
    -0.24665038,
    0.017018327,
    -0.81290406,
    -1.0055763,
    -1.6524627,
    -1.1192735,
    0.1858645,
    -0.43651214,
    -1.0900251,
    -1.0686463,
    -0.2571654,
    -0.27797925,
    -0.13941932,
    -0.2761457,
    -0.70153546,
    -0.27613583,
    -0.39028805,
    -0.31152344,
    0.4828392,
    0.4682794,
    0.6912335,
    0.3020399,
    0.4971318,
    -0.13534777,
    -0.29117936,
    0.3525775,
    0.09075516,
    -0.021384688,
    -0.077187255,
    -0.078897886,
    0.47750703,
    0.55135524,
    0.71205974,
    0.49924532,
    0.057037577,
    -0.42687207,
    -0.12873712,
    0.00047784447,
    -0.47004038,
    -0.54918116,
    -0.16215391,
    -0.04628914,
    -0.014295458,
    -1.2428293,
    -1.1087011,
    -1.1383184,
    -1.2023358,
    -1.101937,
    -1.3309935,
    -1.6496916,
    -1.7701358,
    -0.97285795,
    -1.009981,
    -1.366158,
    -1.3672799,
    -1.5635875,
    -1.7106496,
    -1.6757752,
    -1.6920881,
    -1.754162,
    -1.7206662,
    0.2844472,
    0.12669401,
    0.0058898665,
    -0.23788473,
    -0.02567568,
    -0.15785661,
    0.102757305,
    -1.1456109,
    -0.41073593,
    -0.030422302,
    -0.096339166,
    -0.04500505,
    0.10005195,
    -0.03201275,
    0.25749302,
    0.22186892,
    -0.0055551147,
    0.66497046,
    0.40460455,
    0.0534405,
    -0.347497,
    -0.7785845,
    -0.12787412,
    -0.20100367,
    -0.3505897,
    -0.5381141,
    -0.8415784,
    0.061953522,
    0.8382977,
    0.115585804,
    -0.6613449,
    -1.2978594,
    0.023565622,
    0.9143543,
    0.21306723,
    -0.5723457,
    -1.3872665,
    -0.49443135,
    -0.042455174,
    -0.06643269,
    -0.07268991,
    -0.49584508,
    1.0257636,
    0.85115767,
    0.20541199,
    -0.44965473,
    -1.1479878,
    1.0914657,
    0.8190784,
    0.16945365,
    -0.5185535,
    -1.3626881,
    -0.3967861,
    -0.10335569,
    -0.15381497,
    -0.26966262,
    -0.30106422,
    1.1550177,
    0.8786784,
    0.2188853,
    -0.5437245,
    -1.2631505,
    1.2731756,
    0.96742284,
    0.23623352,
    -0.5725658,
    -1.3668672,
    -0.094286054,
    -0.1836892,
    -0.37779906,
    -0.06884515,
    -0.2758342,
    -0.13783918,
    -0.031058827,
    0.0013827592,
    0.19629316,
    0.124875605,
    0.13536122,
    0.039903097,
    0.46329695,
    0.02846287,
    0.26726073,
    0.09583619,
    0.06696042,
    0.19807713,
    0.005503459,
    0.009021362,
    -0.009674854,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_2KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    0.13053814,
    0.2594758,
    0.24701957,
    0.32714072,
    0.2772792,
    -0.13828218,
    -0.10215987,
    0.098732464,
    0.019896906,
    -0.056102987,
    -0.07790267,
    -0.42510068,
    -0.30549508,
    -0.45333365,
    -0.52566814,
    -0.29246622,
    -0.28865135,
    -0.26258516,
    0.11082738,
    0.17156202,
    -0.038298223,
    0.46970895,
    0.49330792,
    0.45982635,
    -1.5306015,
    -0.70623446,
    -1.6051459,
    1.1686573,
    1.569235,
    2.0058358,
    -2.5606222,
    -1.2750763,
    -2.0411723,
    0.8546261,
    1.8828146,
    2.5776637,
    -0.54405427,
    0.17359827,
    -0.07840562,
    -0.24876921,
    -0.18755311,
    -0.26911703,
    -3.0770643,
    1.1082592,
    0.26119882,
    -2.5300553,
    -2.871422,
    0.03775389,
    0.4238567,
    -0.33088768,
    0.10647789,
    -0.13209525,
    0.08560816,
    0.0468911,
    -0.21627295,
    0.05250266,
    0.38945135,
    0.81790227,
    -0.23717421,
    -0.22604689,
    -0.19218688,
    -0.20800717,
    -0.033787068,
    0.122389324,
    -0.10022763,
    -0.073142864,
    0.6767682,
    -0.04690488,
    0.33146432,
    -0.22365022,
    -0.0036192038,
    0.46967515,
    0.51455325,
    -0.2567931,
    -0.40734252,
    -0.42442977,
    -0.001470779,
    0.22078364,
    -1.2574711,
    -0.85755,
    -0.74906814,
    -0.17770536,
    3.6172705,
    0.54112595,
    0.6423261,
    0.9667451,
    0.199188,
    -1.3389384,
    0.16624917,
    0.19690222,
    -0.4323959,
    -0.23050337,
    0.34784153,
    0.61946857,
    -0.7219571,
    1.2463146,
    0.5738733,
    2.0701928,
    0.049495548,
    -0.42689493,
    -1.0372397,
    0.26199716,
    0.7308859,
    1.6175814,
    -0.0076032556,
    -0.68225515,
    0.12284207,
    2.349499,
    0.1210995,
    2.3559947,
    1.0110165,
    0.4826661,
    -4.137684,
    -0.87189615,
    0.58148867,
    1.5087106,
    0.51515806,
    0.27801824,
    0.1363943,
    0.39705855,
    0.3311712,
    0.13834442,
    -0.009231192,
    0.37948412,
    0.013899716,
    0.34986228,
    0.20538929,
    -1.3363253,
    -0.6954224,
    -0.26191995,
    -0.23036456,
    -0.17417376,
    0.21034743,
    0.08639803,
    0.009099964,
    0.0013535284,
    0.37892112,
    0.085819654,
    1.4048743,
    -2.3133554,
    -1.2493757,
    -1.597994,
    -0.20851141,
    -0.025360083,
    0.2432856,
    0.7032871,
    -1.9057463,
    -1.1427703,
    -0.49652052,
    0.84754634,
    0.08384458,
    -1.2245532,
    0.5221889,
    1.2940357,
    1.6118815,
    1.3088297,
    1.4081663,
    -0.2697331,
    -0.76520354,
    -0.34188744,
    0.6127755,
    1.3039353,
    1.4138254,
    0.12542252,
    -1.4124713,
    -0.9411064,
    -0.9240627,
    -0.92811567,
    -1.1624233,
    -0.3372181,
    -1.4078445,
    -2.251844,
    0.36175016,
    -0.023277655,
    -0.08955618,
    0.0533145,
    0.14049543,
    -0.019719895,
    -0.007010526,
    -0.096855216,
    -0.22378309,
    1.7177029,
    0.7570125,
    1.2928087,
    0.07078977,
    1.540554,
    1.9195119,
    0.41963235,
    0.9632119,
    0.60895467,
    0.32042414,
    0.36884412,
    0.16893406,
    0.3075245,
    -0.011423582,
    0.7850744,
    3.0451703,
    0.0,
    0.0,
    0.0,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_0KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.5260148,
    1.3536146,
    0.72278893,
    0.7492248,
    0.34588894,
    0.2237298,
    0.10123463,
    0.5132457,
    0.52867484,
    0.6302818,
    0.5386496,
    0.6293917,
    0.5719745,
    1.520479,
    1.3565434,
    1.3623099,
    1.3049121,
    1.2930866,
    1.2219919,
    2.2371595,
    1.9307797,
    1.8703638,
    1.6972665,
    1.6309338,
    1.6186886,
    -0.39511463,
    -0.94362754,
    -0.12492073,
    0.16268127,
    0.0013849669,
    0.95109785,
    0.93615437,
    1.234702,
    1.2934706,
    1.4479475,
    1.493586,
    1.5396183,
    0.8323143,
    1.0385784,
    0.90593904,
    1.2078156,
    1.2147906,
    1.3987948,
    -0.08489356,
    0.21747902,
    0.10208229,
    0.15416242,
    0.6012575,
    0.9874478,
    -1.0970556,
    0.043486074,
    0.292766,
    0.39801162,
    0.6874495,
    0.9690168,
    -0.20907672,
    -0.04613881,
    -0.1785575,
    -0.06949712,
    0.14591669,
    0.3312408,
    -0.30378485,
    0.056668486,
    -0.10186405,
    0.12007309,
    0.10944024,
    -0.09124805,
    0.11403177,
    0.19293071,
    0.17045361,
    0.25238407,
    0.30111453,
    0.35929456,
    0.43802637,
    0.51285565,
    0.5720144,
    0.53854305,
    0.61237544,
    0.5927831,
    -0.15919158,
    0.008372268,
    0.009028152,
    0.13540085,
    0.13910174,
    0.26579747,
    0.0322659,
    0.15343016,
    0.18911849,
    0.24179874,
    0.28409067,
    0.31767294,
    0.34793887,
    0.44250932,
    0.41333976,
    0.48139152,
    0.5140322,
    0.5057068,
    1.518285,
    0.45016682,
    0.99454445,
    0.1559865,
    0.82523805,
    -0.07164724,
    0.1978145,
    0.5911254,
    0.6450385,
    -0.032073036,
    0.0031420656,
    -0.30941895,
    0.3539207,
    0.02317186,
    -0.037797313,
    -0.55243504,
    0.82655656,
    1.043201,
    0.18688926,
    1.0082378,
    0.3862399,
    0.48729807,
    0.2721271,
    0.8954389,
    0.12871854,
    0.20563649,
    0.8004986,
    0.26081702,
    0.76751643,
    0.18537146,
    0.033836663,
    0.3990245,
    -0.6119751,
    -0.4512421,
    0.07975068,
    -0.449863,
    -0.6188947,
    -0.084619515,
    0.4201952,
    -0.11737652,
    -0.028529419,
    0.04763308,
    -0.25193313,
    0.07001725,
    -0.61858416,
    -0.6191782,
    -0.9274837,
    -0.7004601,
    -0.12643804,
    -0.09064909,
    0.27766156,
    0.37425235,
    0.35405552,
    0.54939085,
    1.0588346,
    0.51645714,
    0.22707506,
    0.64498043,
    0.9236956,
    0.9981291,
    1.1203066,
    1.2456367,
    1.2169503,
    1.3537017,
    1.5201713,
    1.4379824,
    0.76596516,
    0.8589588,
    1.0337539,
    1.2389994,
    1.3044423,
    1.4444523,
    1.5766902,
    1.5103908,
    1.8182547,
    -0.26397306,
    -0.0821718,
    0.056018703,
    0.30793366,
    0.10058551,
    0.20217945,
    0.07610583,
    1.0142341,
    0.76568407,
    0.013737986,
    0.118996926,
    0.0888005,
    -0.17952368,
    0.037060596,
    -0.17312782,
    -0.1392547,
    0.0054334905,
    -0.49283922,
    -0.3001193,
    -0.19013721,
    -0.019768003,
    0.27175066,
    0.6001263,
    0.12994139,
    -0.2068132,
    -0.022223288,
    0.24339157,
    0.6324449,
    0.8956618,
    -0.0110164685,
    -0.5577704,
    -0.17516378,
    0.22082742,
    0.7982886,
    1.1055692,
    -0.013470291,
    -0.71347314,
    -0.2681075,
    0.23394524,
    0.7950093,
    1.1330462,
    -0.21488725,
    -0.3886176,
    -0.32451165,
    -0.26465043,
    -0.10180225,
    0.08549266,
    -0.91795146,
    -0.8678859,
    -0.5227564,
    -0.11320846,
    0.21079512,
    0.65663886,
    -1.0768952,
    -0.9154398,
    -0.49350363,
    -0.017473483,
    0.46744487,
    0.9572788,
    0.031300727,
    -0.17097768,
    -0.16426189,
    -0.0211383,
    0.30337492,
    0.631132,
    -0.80839455,
    -0.687988,
    -0.3311294,
    0.07230763,
    0.5964211,
    1.1172984,
    -1.0618695,
    -0.8240399,
    -0.41420776,
    0.09808327,
    0.69760156,
    1.2208768,
    -0.08668628,
    0.08855606,
    0.525307,
    0.039148595,
    0.07410318,
    0.4780233,
    -0.11022356,
    0.12915969,
    0.1424668,
    -0.4826211,
    -0.17183264,
    -0.14855368,
    -0.52941436,
    -0.78909636,
    -0.38900536,
    -0.37619734,
    -0.27783862,
    -0.1318345,
    0.008264789,
    0.0015326263,
    -0.006872382,
    -0.0035781572,
    0.0023975773,
    -0.0020184517,
    -0.00068451837,
    -0.0031730435,
    0.0038830638,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    -0.37160802,
    -0.53368765,
    -0.48016393,
    -0.55578387,
    -0.6045032,
    -0.5673268,
    -1.497102,
    -1.3569679,
    -1.3176363,
    -1.2890171,
    -1.3053344,
    -1.3379956,
    -2.1441078,
    -1.9371884,
    -1.8837392,
    -1.7007173,
    -1.7040383,
    -1.5860411,
    0.4477522,
    0.40812021,
    0.29136795,
    -0.13327006,
    0.30209336,
    0.028984651,
    -0.6996948,
    -0.7380465,
    -0.9677574,
    -1.1698103,
    -1.2763383,
    -1.4607601,
    -0.7375846,
    -0.7724686,
    -0.97815824,
    -0.98808527,
    -1.1768249,
    -1.2958293,
    0.27910787,
    0.21007009,
    0.0073771896,
    -0.3680278,
    -0.5478222,
    -0.75576144,
    0.6159723,
    -0.01662515,
    0.086903095,
    -0.5802947,
    -0.72566694,
    -1.2435728,
    -0.13233936,
    0.14819767,
    0.08575914,
    0.16879134,
    -0.07892476,
    -0.4277751,
    0.052388858,
    -0.23162888,
    -0.123480015,
    -0.24538773,
    0.24130952,
    0.23068044,
    -0.028554972,
    -0.2472604,
    -0.26383638,
    -0.23272003,
    -0.38025764,
    -0.40163457,
    -0.6208902,
    -0.53604096,
    -0.62150306,
    -0.6009614,
    -0.68934524,
    -0.6620832,
    0.49978545,
    -0.14944556,
    0.020246811,
    -0.16400099,
    0.0018855295,
    0.017540963,
    -0.13895813,
    -0.18510056,
    -0.14414646,
    -0.33776608,
    -0.31870705,
    -0.37008074,
    -0.54235524,
    -0.49043548,
    -0.4899758,
    -0.5317113,
    -0.5553725,
    -0.56568307,
    -1.5119742,
    -0.4873463,
    -0.9076629,
    -0.24525596,
    -0.9394716,
    0.11296773,
    -0.32534292,
    -0.59208935,
    -0.8042169,
    0.04473937,
    0.102899395,
    0.23194416,
    -0.38943347,
    -0.06889658,
    0.08780674,
    0.5675712,
    -0.77424324,
    -1.1216848,
    -1.4836822,
    -0.91641223,
    -0.3386797,
    -0.15883154,
    -0.6677606,
    -0.9223785,
    -0.121369176,
    -0.19839434,
    -0.31061128,
    -0.23604935,
    -0.5691667,
    -0.26273805,
    -0.05954537,
    -0.19325304,
    0.576724,
    0.44142655,
    0.43124992,
    0.34542754,
    0.4923232,
    0.0826731,
    0.009860865,
    0.1748796,
    0.05765879,
    -0.05983176,
    0.0983258,
    -0.05181983,
    0.57738394,
    0.8011102,
    0.688393,
    0.6196084,
    0.27349573,
    0.20257503,
    -0.7066332,
    -0.7588722,
    -0.93143827,
    -0.6428466,
    -0.2769798,
    -0.1411699,
    -0.078156054,
    -0.7946493,
    -0.8257768,
    -0.93639505,
    -0.96992433,
    -1.0119247,
    -1.1913724,
    -1.2896032,
    -1.6066061,
    -1.7178559,
    -0.81436193,
    -0.9359756,
    -1.0531203,
    -1.2067497,
    -1.2821192,
    -1.4341031,
    -1.6530752,
    -1.5777385,
    -1.8467673,
    0.30630445,
    0.0946507,
    -0.01260146,
    -0.2301464,
    -0.083972245,
    -0.17981514,
    -0.048201505,
    -0.89521027,
    -0.55874807,
    -0.021922411,
    -0.09826894,
    -0.06601351,
    0.11228751,
    -0.041106418,
    0.180042,
    0.14314388,
    0.0028334782,
    0.46287775,
    0.38818803,
    0.1999241,
    -0.08758921,
    -0.39796486,
    -0.6892506,
    0.1359692,
    0.3512695,
    0.11608529,
    -0.19776787,
    -0.5132567,
    -0.7760772,
    -0.00038290455,
    0.60031426,
    0.22966506,
    -0.17778495,
    -0.71589106,
    -1.0377716,
    -0.020196345,
    0.7918339,
    0.36761907,
    -0.10882677,
    -0.67388976,
    -1.1639535,
    0.26408714,
    0.3280185,
    0.29927653,
    0.15010685,
    -0.08197934,
    -0.17514491,
    0.7913391,
    0.74758685,
    0.39931238,
    -0.020585977,
    -0.36943653,
    -0.61175567,
    0.87357336,
    0.78601784,
    0.40403032,
    -0.038663097,
    -0.5038227,
    -0.98324966,
    0.23439193,
    0.3254196,
    0.22968936,
    0.048913773,
    -0.2330067,
    -0.46130636,
    0.6998236,
    0.66178304,
    0.30772766,
    -0.119313695,
    -0.59324706,
    -1.0176193,
    0.9116672,
    0.7952907,
    0.3482111,
    -0.15111911,
    -0.71778846,
    -1.1580647,
    0.1187584,
    -0.098558694,
    -0.4073549,
    0.09492173,
    0.049338818,
    -0.24668969,
    0.16101074,
    0.060742162,
    -0.49023408,
    0.158471,
    0.20524879,
    0.09314824,
    0.4162699,
    0.051472075,
    0.41416955,
    0.33187917,
    -0.023207845,
    0.2811946,
    -0.0058266926,
    0.0066394918,
    -0.0031571696,
    -0.0045039677,
    -0.0037830565,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_0KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.071415216,
    0.12442188,
    -0.09566238,
    0.025814263,
    0.39882815,
    0.16391489,
    -0.008581701,
    -0.13815464,
    -0.13051334,
    0.02532715,
    0.32889652,
    0.20524831,
    -0.49096164,
    -0.30895254,
    -0.23303136,
    0.23083706,
    0.2964616,
    0.24874644,
    -0.2457537,
    -0.20580663,
    -0.20578788,
    0.22220248,
    0.24823901,
    0.27056095,
    -1.7412964,
    -1.2658727,
    -0.9884221,
    0.21221639,
    0.76972306,
    2.9932423,
    -0.8941595,
    -1.4919809,
    -0.6434117,
    0.1866445,
    0.6302275,
    3.7471368,
    -0.19908637,
    -0.05053481,
    -0.22026536,
    -0.20168278,
    -0.06375163,
    -0.34524786,
    -2.9306319,
    1.2972493,
    0.24407394,
    -3.5354817,
    -2.9933457,
    -0.10331253,
    0.47185874,
    -0.14110662,
    0.10932957,
    0.0013340656,
    0.07475349,
    -0.016720613,
    -0.23927939,
    -0.011462316,
    0.34377918,
    0.72500736,
    0.85285324,
    -0.110500894,
    -0.105389334,
    -0.017042588,
    0.10457068,
    0.0042217867,
    -0.21249798,
    -0.085640766,
    -0.45459425,
    -0.16079083,
    0.55052006,
    2.0902095,
    -0.37665167,
    0.27560315,
    -0.059153534,
    0.035410654,
    0.26979086,
    0.5431667,
    0.5761751,
    -0.40052012,
    -0.44486472,
    -0.42993188,
    -0.155777,
    0.3429057,
    0.74014395,
    -0.7196886,
    -0.66130596,
    -0.5823512,
    -0.061252877,
    1.1902641,
    2.376007,
    0.48015076,
    -0.05263098,
    0.55019283,
    0.35582376,
    -0.3000633,
    -0.9577861,
    0.37041304,
    0.1807514,
    -0.058853548,
    0.19539088,
    0.03101509,
    -1.0235001,
    1.6822823,
    0.46977645,
    0.50950366,
    -0.1764842,
    -0.2133276,
    -1.0270724,
    0.4235578,
    0.47018492,
    0.59907496,
    -0.095802486,
    -0.2432442,
    -0.01910542,
    2.5890062,
    0.13449658,
    2.3261929,
    0.96748704,
    0.44940996,
    -4.1517406,
    -1.059962,
    0.81751895,
    1.4057382,
    0.43485394,
    0.52264935,
    0.0902257,
    0.27415887,
    0.29622847,
    0.18442348,
    -0.011864232,
    0.33198798,
    0.008446357,
    0.29941043,
    0.24493904,
    -1.3369043,
    0.41626275,
    0.329823,
    -0.10362355,
    0.111990936,
    0.22666475,
    0.06236524,
    0.0052082036,
    -0.0012640925,
    0.34226802,
    -0.037712023,
    1.718424,
    -2.2861829,
    -1.5476025,
    -1.518054,
    -0.16363169,
    0.14955013,
    0.6014917,
    1.1120517,
    -1.9437062,
    -1.5143054,
    -0.46494117,
    0.6082318,
    0.21189173,
    -1.3022004,
    0.3113392,
    1.2015941,
    1.7875376,
    1.4595233,
    1.7871752,
    0.90693253,
    -0.98388606,
    -0.55907655,
    0.42635015,
    1.2506536,
    1.9478662,
    0.16841666,
    -1.632099,
    -0.78296155,
    -1.2520697,
    -1.1554351,
    -1.4457918,
    -0.38163397,
    -1.3265272,
    -2.6471865,
    0.33752015,
    -0.024949715,
    -0.024228316,
    -0.09096827,
    0.036369875,
    0.06127662,
    0.20753954,
    -0.15602651,
    0.38449815,
    0.44087142,
    -0.1416285,
    -0.72993124,
    0.1605913,
    1.8260558,
    1.4085311,
    1.6873645,
    -0.23067553,
    1.8025221,
    2.1915245,
    0.68259877,
    1.5146484,
    0.60728025,
    0.6007257,
    0.6491273,
    0.2172983,
    0.6351415,
    0.4959009,
    0.77732676,
    2.8963873,
    0.00053430814,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_2KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.30220807,
    0.3738604,
    -0.14229809,
    -0.3242708,
    -0.9361663,
    -0.9158246,
    -0.78795487,
    1.5159849,
    1.5383557,
    1.5711826,
    1.2648245,
    1.4046402,
    1.2433947,
    1.800591,
    1.3135811,
    1.3054712,
    1.0496671,
    1.0013753,
    0.92558014,
    2.5872664,
    1.9874017,
    1.9237705,
    1.4090238,
    1.3090179,
    1.1613528,
    -0.3705032,
    0.41775566,
    0.36741313,
    0.11570154,
    0.6761863,
    0.9252966,
    1.0351754,
    1.0024774,
    1.1701394,
    1.332689,
    1.3378059,
    1.4438626,
    0.37999398,
    0.6286305,
    0.83706886,
    0.8050453,
    0.9636282,
    0.9970668,
    0.099804655,
    -0.047003593,
    0.66431534,
    0.5523597,
    1.313075,
    1.5999135,
    -0.981456,
    -0.11265874,
    0.15333787,
    0.3653649,
    0.4925363,
    0.936621,
    1.7167921,
    1.3636143,
    1.6441257,
    0.85154265,
    0.96129334,
    1.194674,
    -0.16734716,
    0.86239225,
    -0.318236,
    0.5817172,
    -0.20786327,
    -0.28671962,
    -0.04114538,
    0.06224652,
    0.20589177,
    0.29758206,
    0.24588545,
    0.31277505,
    0.5373692,
    0.63511336,
    0.5430474,
    0.4961898,
    0.6265074,
    0.6883766,
    -0.7439077,
    0.38908938,
    -0.24478644,
    0.36161417,
    0.27901724,
    0.15987232,
    0.18470833,
    0.1558083,
    0.25583208,
    0.32427633,
    0.30106568,
    0.30772486,
    0.40505168,
    0.49903092,
    0.4960012,
    0.49146923,
    0.5094387,
    0.52321404,
    6.111535,
    1.0248499,
    1.9317154,
    0.56756693,
    1.6320711,
    0.3380087,
    0.68527335,
    1.2470046,
    1.3172284,
    -0.0002452115,
    -0.071184546,
    -0.14634962,
    0.72101957,
    -0.010794498,
    -0.11049235,
    -0.26452017,
    0.7249513,
    0.6561027,
    0.8947505,
    0.5223757,
    0.33476424,
    0.21566872,
    -0.0418869,
    1.4996421,
    0.20083849,
    0.5564354,
    0.62102634,
    0.40388694,
    0.99008524,
    0.45657977,
    0.40616623,
    0.42369324,
    -0.40503666,
    -0.2807711,
    -0.32450992,
    -0.39092112,
    -0.62812096,
    -0.12631674,
    0.5517634,
    -0.08930646,
    -0.09534984,
    0.037809197,
    -0.05614133,
    0.053583555,
    -0.7003625,
    -0.6502585,
    -1.4464087,
    -0.52689856,
    0.27373815,
    1.1997719,
    2.785603,
    2.66296,
    2.5684817,
    2.4986358,
    2.433817,
    2.2715917,
    1.293505,
    1.4406084,
    1.4547745,
    1.495287,
    1.567235,
    1.4942905,
    1.4230384,
    1.3904579,
    1.3303369,
    1.355057,
    0.19552763,
    -0.0092268605,
    -0.12727228,
    -0.1769162,
    -0.105572805,
    0.16323793,
    0.13395461,
    0.25578743,
    0.47282416,
    -0.34004083,
    -0.09284009,
    -0.015598254,
    0.30436328,
    0.07716925,
    0.17523037,
    -0.025646504,
    2.7063,
    0.6251796,
    0.0072452626,
    0.11051591,
    -0.019021345,
    0.038681153,
    0.034825213,
    -0.1462324,
    -0.15204155,
    -0.75987345,
    -0.28098238,
    -0.05469078,
    -0.027133808,
    0.09944441,
    0.2745253,
    0.4742357,
    -0.13102108,
    0.09964676,
    0.2324754,
    0.45390892,
    0.70927685,
    0.66184306,
    -0.043439478,
    -0.9988571,
    -0.43126625,
    0.27054554,
    0.96743184,
    1.3844433,
    -0.0679613,
    -1.1389123,
    -0.53774095,
    0.20246695,
    0.96070045,
    1.5356301,
    0.10950612,
    -0.07698248,
    -0.07650846,
    -0.002257342,
    -0.03789968,
    0.20692265,
    -1.2029753,
    -0.9652242,
    -0.453937,
    0.07516999,
    0.6199784,
    1.2378194,
    -1.5037122,
    -1.1210837,
    -0.50493985,
    0.10508629,
    0.75295806,
    1.3563857,
    0.06979248,
    -0.011092561,
    0.00032774024,
    0.079204336,
    0.19931602,
    0.43744606,
    -1.3996017,
    -1.041633,
    -0.548091,
    0.05004638,
    0.65159494,
    1.3146672,
    -1.595606,
    -1.158199,
    -0.5332888,
    0.1719785,
    0.9286805,
    1.6541979,
    -0.0007904031,
    0.091912314,
    0.28105447,
    0.08074403,
    0.0762385,
    0.014701123,
    -0.04760186,
    -0.16891572,
    -0.17430048,
    -0.16194338,
    -0.523302,
    -0.14756186,
    -0.31502303,
    -0.22197941,
    -0.40423158,
    -0.3018378,
    -0.15959165,
    -0.4851647,
    0.008264789,
    0.0015326263,
    -0.006872382,
    -0.0035781572,
    0.0023975773,
    -0.0020184517,
    -0.00068451837,
    -0.0031730435,
    0.0038830638,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    -1.4561743,
    -1.4868969,
    -1.7250972,
    -1.385341,
    -1.401401,
    -1.3029222,
    -1.8545672,
    -1.3903191,
    -1.4379665,
    -0.9230654,
    -1.0015289,
    -0.9394755,
    -2.7161672,
    -2.090473,
    -1.8611871,
    -1.3349875,
    -1.3009387,
    -1.2626517,
    0.12563874,
    -0.55924636,
    -0.83671534,
    -1.2658428,
    -1.3670862,
    -1.415203,
    -1.1876684,
    -1.3398076,
    -1.3555648,
    -1.6974374,
    -1.6867156,
    -1.7544022,
    -0.9282807,
    -1.3531349,
    -1.112004,
    -1.4630072,
    -1.5056481,
    -1.4050748,
    0.30442393,
    0.37528712,
    -0.21445104,
    -0.99781317,
    -1.3891981,
    -1.5019569,
    0.42357117,
    -0.12610544,
    -0.46226716,
    -0.6465947,
    -0.691201,
    -1.0077256,
    -2.0620458,
    -1.6838806,
    -1.4966505,
    -1.2859023,
    -1.3728281,
    -1.3580766,
    -2.0026567,
    -0.7688655,
    0.10601403,
    -0.6256417,
    -0.13203272,
    0.11594881,
    0.12725718,
    0.13328068,
    -0.15963916,
    -0.11252325,
    -0.14792266,
    -0.03971957,
    -0.15727042,
    -0.3327063,
    -0.38529897,
    -0.27874613,
    -0.29311994,
    -0.39647114,
    -0.1545438,
    -0.24250284,
    0.21936914,
    -0.04698851,
    -0.2219474,
    -0.12527943,
    -0.02723616,
    -0.047992676,
    -0.18381986,
    -0.25666896,
    -0.25402966,
    -0.22175196,
    -0.39406747,
    -0.52266854,
    -0.44531617,
    -0.47458586,
    -0.46272156,
    -0.5156968,
    -5.414922,
    -0.74024355,
    -2.7055798,
    -0.38781467,
    -1.7341995,
    0.1972443,
    -0.7626176,
    -1.4448175,
    -1.4344262,
    -0.43195546,
    -0.39617494,
    0.05155281,
    -0.99506193,
    -0.3737151,
    -0.20820706,
    0.50086933,
    -0.87253976,
    -0.94822335,
    -1.409795,
    -0.88955986,
    -0.33888543,
    -0.11574569,
    -1.0532446,
    -0.49109134,
    -0.21372546,
    -0.4533817,
    -0.31522623,
    -0.54273593,
    -0.950003,
    -0.6023775,
    0.9752219,
    -0.6091044,
    0.5045909,
    0.44658378,
    0.5356136,
    0.43555343,
    0.54885155,
    -0.04614433,
    0.24531966,
    -0.05810036,
    0.10113376,
    -0.017904878,
    -0.10015122,
    -0.022271615,
    0.58780575,
    0.5762796,
    0.8870954,
    0.60011613,
    -0.44621277,
    0.100263126,
    0.14866604,
    0.27356863,
    0.3144463,
    0.43829995,
    -0.55276215,
    -2.0749097,
    -0.8444963,
    -0.863209,
    -0.7527881,
    -0.74025166,
    -0.6716021,
    -0.5871562,
    -0.65564024,
    -0.75435495,
    -0.75850934,
    -1.1877036,
    -2.2837481,
    -2.4320033,
    -2.3871217,
    -2.5974135,
    -2.6751695,
    -2.686886,
    -2.5246432,
    -2.3388894,
    -2.340096,
    0.22587173,
    0.09892362,
    -0.043428227,
    -0.27020586,
    -0.035624605,
    -0.15312406,
    -0.06128358,
    -2.8433614,
    -0.38435245,
    0.008914507,
    -0.08581057,
    -0.1021781,
    -0.03361722,
    -0.043919504,
    0.21020833,
    0.15240282,
    0.8112024,
    0.10987735,
    -0.025603177,
    -0.09606237,
    -0.20557171,
    -0.34677884,
    -0.51741165,
    -0.1249949,
    -0.14055672,
    -0.1807429,
    -0.3252666,
    -0.33949384,
    -0.2505008,
    -0.03280532,
    0.8792303,
    0.28234848,
    -0.35070845,
    -1.0644469,
    -1.4420565,
    -0.0746882,
    1.01386,
    0.45782918,
    -0.26429987,
    -0.9842698,
    -1.5087426,
    -0.48614928,
    -0.08799499,
    0.08217395,
    0.2433986,
    0.29225013,
    0.16759601,
    1.2820774,
    0.9786137,
    0.50487113,
    -0.08599404,
    -0.59819996,
    -1.1400245,
    1.3408737,
    0.98383015,
    0.41880232,
    -0.19662346,
    -0.8040082,
    -1.4255363,
    -0.48749357,
    -0.18138511,
    -0.060294896,
    -0.063512385,
    -0.09481325,
    -0.022614833,
    1.3036813,
    0.97874606,
    0.45379692,
    -0.16476218,
    -0.8222986,
    -1.4866188,
    1.5287037,
    1.0774242,
    0.51674616,
    -0.17760019,
    -0.8925787,
    -1.5494381,
    0.026292918,
    0.05259245,
    -0.058954578,
    0.024648132,
    -0.04934692,
    0.37916967,
    0.2753778,
    0.26858038,
    0.58478385,
    0.31623676,
    0.3547359,
    0.017612234,
    0.3115049,
    -0.2667304,
    -0.012319112,
    0.2972484,
    -0.12386471,
    0.13511898,
    -0.0058266926,
    0.0066394918,
    -0.0031571696,
    -0.0045039677,
    -0.0037830565,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_2KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.034293015,
    -0.2726163,
    -0.09165825,
    0.32610634,
    0.6342918,
    0.33983633,
    -0.17609365,
    -0.33304012,
    -0.1593111,
    0.22546469,
    0.45656157,
    -0.004848835,
    -0.25537777,
    -0.5111931,
    -0.42383662,
    -0.051896017,
    0.0012182936,
    0.018284207,
    0.12009834,
    -0.10184888,
    -0.11288789,
    0.2761464,
    0.35039407,
    0.552148,
    -0.93883777,
    -1.4382796,
    -0.6368706,
    0.335089,
    0.82305616,
    2.8245685,
    -1.0189887,
    -1.3260156,
    -0.8676275,
    0.04147663,
    -0.7633981,
    3.3853383,
    -0.30029935,
    0.12031889,
    -0.20160006,
    -0.10959401,
    -0.078737624,
    -0.20489198,
    -3.3729742,
    1.1854011,
    0.10135429,
    -2.6380317,
    -3.6270032,
    -0.22314157,
    0.41061762,
    -0.4616437,
    0.13132365,
    -0.18888071,
    0.08177896,
    0.039611574,
    -0.26538068,
    -0.045468375,
    0.30362713,
    0.6863453,
    1.066253,
    -0.06786355,
    -0.016891215,
    0.07943689,
    0.17648576,
    0.1851178,
    -0.65713114,
    -0.12913509,
    -0.79873353,
    -0.42346394,
    -0.26558542,
    0.7092707,
    0.1233309,
    0.36483833,
    -0.010423479,
    0.15794131,
    0.3753973,
    0.5147866,
    0.35786906,
    -0.37656918,
    -0.47410405,
    -0.45205235,
    -0.15517215,
    0.38569173,
    0.73792523,
    -1.0648081,
    -0.8912948,
    -0.3886981,
    0.079308204,
    0.4106027,
    1.0514277,
    0.48568457,
    0.2902861,
    0.76053876,
    0.5106653,
    -0.40393925,
    -0.73939365,
    0.32808685,
    -0.20221753,
    -0.20474078,
    0.11592676,
    0.3048033,
    0.11555844,
    1.4664952,
    0.34765008,
    1.1490734,
    -0.13232805,
    -0.14277059,
    -0.45911413,
    0.45618156,
    0.67226744,
    1.2430073,
    -0.1717508,
    -0.11413313,
    -0.28873026,
    2.4947116,
    -0.04596866,
    2.0976284,
    0.67700416,
    0.44548517,
    -4.1189017,
    -1.1463,
    0.8760699,
    1.2805681,
    0.41476744,
    0.48299357,
    0.084488094,
    0.3208795,
    0.23803923,
    0.14218336,
    -0.00034888435,
    0.37524867,
    -0.045770466,
    0.38341168,
    0.30356175,
    -1.0824132,
    0.61855054,
    0.2908475,
    -0.2808934,
    0.099959,
    0.19656704,
    0.016482417,
    -0.0014096666,
    0.009049231,
    0.2654408,
    0.2116272,
    1.8629464,
    -2.3741293,
    -1.6419584,
    -1.9734153,
    -0.2904329,
    0.2083936,
    0.6062653,
    1.376544,
    -2.0575845,
    -1.2390045,
    -0.0364446,
    1.2122029,
    0.31868774,
    -1.1042459,
    0.3237313,
    1.0862924,
    1.6343127,
    1.372214,
    1.6610684,
    0.28258747,
    -0.8379375,
    -0.46549368,
    0.42319888,
    1.089035,
    1.4939499,
    1.2573801,
    -1.5714331,
    -0.81349355,
    -1.1027268,
    -1.1277444,
    -1.2307273,
    -0.35661182,
    -1.2985973,
    -2.1946619,
    0.29937196,
    -0.022679364,
    -0.026289979,
    -0.10987998,
    0.040174697,
    0.08141623,
    0.11784387,
    -0.12947907,
    0.21461253,
    -0.29466027,
    -0.09323764,
    -0.044384114,
    1.1531861,
    1.8587049,
    1.3346646,
    1.6651247,
    0.13728803,
    1.803414,
    2.1795456,
    0.55319005,
    1.3672936,
    0.6505462,
    0.5951326,
    0.5766594,
    0.07502555,
    0.55073094,
    0.60593575,
    0.86197454,
    2.7707715,
    1.08890235e-5,
];
