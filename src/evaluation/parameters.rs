use std::{array, mem};

use half::f16;

use crate::{
    evaluation::policy_eval::sigmoid,
    position::{num_line_symmetries, num_square_symmetries, Komi},
};

use super::policy_eval::policy_offset;

pub const NUM_VALUE_FEATURES_4S: usize = 304;
pub const NUM_POLICY_FEATURES_4S: usize = 176;

pub const NUM_VALUE_FEATURES_5S: usize = 384;
pub const NUM_POLICY_FEATURES_5S: usize = 200;

pub const NUM_VALUE_FEATURES_6S: usize = 400;
pub const NUM_POLICY_FEATURES_6S: usize = 208;

const fn value_padding<const S: usize>() -> usize {
    match S {
        4 => 6,
        5 => 6,
        6 => 2,
        _ => unimplemented!(),
    }
}

const fn policy_padding<const S: usize>() -> usize {
    match S {
        4 => 7,
        5 => 3,
        6 => 1,
        _ => unimplemented!(),
    }
}

#[derive(Debug, Clone, Copy)]
pub struct IndexPair {
    start: usize,
    length: usize,
}

impl IndexPair {
    pub const fn next(start: usize, length: usize) -> (Self, usize) {
        (Self { start, length }, start + length)
    }

    pub fn as_slice<'a, T>(&self, slice: &'a [T]) -> &'a [T] {
        &slice[self.start..self.start + self.length]
    }

    pub fn as_mut_slice<'a, T>(&self, slice: &'a mut [T]) -> &'a mut [T] {
        &mut slice[self.start..self.start + self.length]
    }
}

#[derive(Debug)]
pub struct ValueIndexes<const S: usize> {
    pub first_ply: IndexPair,
    pub second_ply: IndexPair,
    pub flat_psqt: IndexPair,
    pub wall_psqt: IndexPair,
    pub cap_psqt: IndexPair,
    pub supports_psqt: IndexPair,
    pub captives_psqt: IndexPair,
    pub flat_win_this_ply: IndexPair,
    pub flat_win_next_ply: IndexPair,
    pub flat_win_two_ply: IndexPair,
    pub flat_win_three_ply: IndexPair,
    pub one_reserve_left_us: IndexPair,
    pub one_reserve_left_them: IndexPair,
    pub shallow_supports_per_piece: IndexPair,
    pub shallow_supports_per_piece_mobility: IndexPair,
    pub deep_supports_per_piece: IndexPair,
    pub shallow_captives_per_piece: IndexPair,
    pub shallow_captives_per_piece_mobility: IndexPair,
    pub deep_captives_per_piece: IndexPair,
    pub to_move_opening_flatstone_lead: IndexPair,
    pub to_move_middlegame_flatstone_lead: IndexPair,
    pub to_move_endgame_flatstone_lead: IndexPair,
    pub i_number_of_groups: IndexPair,
    pub critical_squares: IndexPair,
    pub critical_square_cap_attack: IndexPair,
    pub flat_next_to_our_stack: IndexPair,
    pub wall_next_to_our_stack: IndexPair,
    pub cap_next_to_our_stack: IndexPair,
    pub num_lines_occupied: IndexPair,
    pub line_control_empty: IndexPair,
    pub line_control_their_blocking_piece: IndexPair,
    pub line_control_other: IndexPair,
    pub line_control_guarded_flat: IndexPair,
    pub line_control_guarded_wall: IndexPair,
    pub line_control_guarded_cap: IndexPair,
    pub sidelined_cap: IndexPair,
    pub fully_isolated_cap: IndexPair,
    pub semi_isolated_cap: IndexPair,
    pub padding: IndexPair,
}

impl<const S: usize> ValueIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;

        let (first_ply, i) = IndexPair::next(i, 1);
        let (second_ply, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (supports_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (captives_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_win_this_ply, i) = IndexPair::next(i, 1);
        let (flat_win_next_ply, i) = IndexPair::next(i, 2);
        let (flat_win_two_ply, i) = IndexPair::next(i, 2);
        let (flat_win_three_ply, i) = IndexPair::next(i, 3);
        let (one_reserve_left_us, i) = IndexPair::next(i, 4);
        let (one_reserve_left_them, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece_mobility, i) = IndexPair::next(i, 4);
        let (deep_supports_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece_mobility, i) = IndexPair::next(i, 4);
        let (deep_captives_per_piece, i) = IndexPair::next(i, 4);
        let (to_move_opening_flatstone_lead, i) = IndexPair::next(i, 9);
        let (to_move_middlegame_flatstone_lead, i) = IndexPair::next(i, 9);
        let (to_move_endgame_flatstone_lead, i) = IndexPair::next(i, 9);
        let (i_number_of_groups, i) = IndexPair::next(i, 3);
        let (critical_squares, i) = IndexPair::next(i, 4);
        let (critical_square_cap_attack, i) = IndexPair::next(i, 6);
        let (flat_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (wall_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (cap_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (num_lines_occupied, i) = IndexPair::next(i, S + 1);
        let (line_control_empty, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_their_blocking_piece, i) =
            IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_other, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_guarded_flat, i) = IndexPair::next(i, 3);
        let (line_control_guarded_wall, i) = IndexPair::next(i, 3);
        let (line_control_guarded_cap, i) = IndexPair::next(i, 3);
        let (sidelined_cap, i) = IndexPair::next(i, 3);
        let (fully_isolated_cap, i) = IndexPair::next(i, 3);
        let (semi_isolated_cap, i) = IndexPair::next(i, 3);
        let (padding, i) = IndexPair::next(i, value_padding::<S>() / 2);

        assert!(i == num_value_features::<S>() / 2);

        ValueIndexes {
            first_ply,
            second_ply,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            supports_psqt,
            captives_psqt,
            flat_win_this_ply,
            flat_win_next_ply,
            flat_win_two_ply,
            flat_win_three_ply,
            one_reserve_left_us,
            one_reserve_left_them,
            shallow_supports_per_piece,
            shallow_supports_per_piece_mobility,
            deep_supports_per_piece,
            shallow_captives_per_piece,
            shallow_captives_per_piece_mobility,
            deep_captives_per_piece,
            to_move_opening_flatstone_lead,
            to_move_middlegame_flatstone_lead,
            to_move_endgame_flatstone_lead,
            i_number_of_groups,
            critical_squares,
            critical_square_cap_attack,
            flat_next_to_our_stack,
            wall_next_to_our_stack,
            cap_next_to_our_stack,
            num_lines_occupied,
            line_control_empty,
            line_control_their_blocking_piece,
            line_control_other,
            line_control_guarded_flat,
            line_control_guarded_wall,
            line_control_guarded_cap,
            sidelined_cap,
            fully_isolated_cap,
            semi_isolated_cap,
            padding,
        }
    }
}

pub const VALUE_INDEXES_4S: ValueIndexes<4> = ValueIndexes::new();
pub const VALUE_INDEXES_5S: ValueIndexes<5> = ValueIndexes::new();
pub const VALUE_INDEXES_6S: ValueIndexes<6> = ValueIndexes::new();

impl<const S: usize> ValueIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> ValueIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn value_indexes<const S: usize>() -> ValueIndexes<S> {
    match S {
        4 => VALUE_INDEXES_4S.downcast_size(),
        5 => VALUE_INDEXES_5S.downcast_size(),
        6 => VALUE_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

#[derive(Debug)]
pub struct PolicyIndexes<const S: usize> {
    pub flat_psqt_white: IndexPair,
    pub flat_psqt_black: IndexPair,
    pub wall_psqt_white: IndexPair,
    pub wall_psqt_black: IndexPair,
    pub cap_psqt_white: IndexPair,
    pub cap_psqt_black: IndexPair,
    pub move_role_bonus_white: IndexPair,
    pub move_role_bonus_black: IndexPair,
    pub decline_win: IndexPair,
    pub place_to_win: IndexPair,
    pub place_to_draw: IndexPair,
    pub place_to_loss: IndexPair,
    pub place_to_allow_opponent_to_end: IndexPair,
    pub two_flats_left: IndexPair,
    pub three_flats_left: IndexPair,
    pub our_road_stones_in_line: IndexPair,
    pub their_road_stones_in_line: IndexPair,
    pub extend_single_group_base: IndexPair,
    pub extend_single_group_linear: IndexPair,
    pub extend_single_group_to_new_line_base: IndexPair,
    pub extend_single_group_to_new_line_linear: IndexPair,
    pub merge_two_groups_base: IndexPair,
    pub merge_two_groups_linear: IndexPair,
    pub block_merger_base: IndexPair,
    pub block_merger_linear: IndexPair,
    pub place_our_critical_square: IndexPair,
    pub place_their_critical_square: IndexPair,
    pub ignore_their_critical_square: IndexPair,
    pub next_to_our_last_stone: IndexPair,
    pub next_to_their_last_stone: IndexPair,
    pub diagonal_to_our_last_stone: IndexPair,
    pub diagonal_to_their_last_stone: IndexPair,
    pub attack_strong_flats: IndexPair,
    pub blocking_stone_blocks_extensions_of_two_flats: IndexPair,
    pub attack_strong_stack_with_wall: IndexPair,
    pub attack_strong_stack_with_cap: IndexPair,
    pub attack_last_movement: IndexPair,
    pub place_last_movement: IndexPair,
    pub simple_movement: IndexPair,
    pub simple_capture: IndexPair,
    pub simple_self_capture: IndexPair,
    pub pure_spread: IndexPair,
    pub fcd_highest_board: IndexPair,
    pub fcd_highest_stack: IndexPair,
    pub fcd_other: IndexPair,
    pub stack_captured_by_movement: IndexPair,
    pub stack_capture_in_strong_line: IndexPair,
    pub stack_capture_in_strong_line_cap: IndexPair,
    pub move_cap_onto_strong_line: IndexPair,
    pub move_cap_onto_strong_line_with_critical_square: IndexPair,
    pub recapture_stack_pure: IndexPair,
    pub recapture_stack_impure: IndexPair,
    pub move_last_placement: IndexPair,
    pub continue_spread: IndexPair,
    pub move_onto_critical_square: IndexPair,
    pub spread_that_connects_groups_to_win: IndexPair,
    pub padding: IndexPair,
}

pub const POLICY_INDEXES_4S: PolicyIndexes<4> = PolicyIndexes::new();
pub const POLICY_INDEXES_5S: PolicyIndexes<5> = PolicyIndexes::new();
pub const POLICY_INDEXES_6S: PolicyIndexes<6> = PolicyIndexes::new();

impl<const S: usize> PolicyIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> PolicyIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn policy_indexes<const S: usize>() -> PolicyIndexes<S> {
    match S {
        4 => POLICY_INDEXES_4S.downcast_size(),
        5 => POLICY_INDEXES_5S.downcast_size(),
        6 => POLICY_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

impl<const S: usize> PolicyIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;
        let (flat_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (move_role_bonus_white, i) = IndexPair::next(i, 3);
        let (move_role_bonus_black, i) = IndexPair::next(i, 3);
        let (decline_win, i) = IndexPair::next(i, 1);
        let (place_to_win, i) = IndexPair::next(i, 1);
        let (place_to_draw, i) = IndexPair::next(i, 1);
        let (place_to_loss, i) = IndexPair::next(i, 1);
        let (place_to_allow_opponent_to_end, i) = IndexPair::next(i, 3);
        let (two_flats_left, i) = IndexPair::next(i, 2);
        let (three_flats_left, i) = IndexPair::next(i, 2);
        let (our_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (their_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (extend_single_group_to_new_line_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_to_new_line_linear, i) = IndexPair::next(i, 3);
        let (extend_single_group_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_linear, i) = IndexPair::next(i, 3);
        let (merge_two_groups_base, i) = IndexPair::next(i, 3);
        let (merge_two_groups_linear, i) = IndexPair::next(i, 3);
        let (block_merger_base, i) = IndexPair::next(i, 3);
        let (block_merger_linear, i) = IndexPair::next(i, 3);
        let (place_our_critical_square, i) = IndexPair::next(i, 1);
        let (place_their_critical_square, i) = IndexPair::next(i, 4);
        let (ignore_their_critical_square, i) = IndexPair::next(i, 2);
        let (next_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (next_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (attack_strong_flats, i) = IndexPair::next(i, 1);
        let (blocking_stone_blocks_extensions_of_two_flats, i) = IndexPair::next(i, 1);
        let (attack_strong_stack_with_wall, i) = IndexPair::next(i, 6);
        let (attack_strong_stack_with_cap, i) = IndexPair::next(i, 6);
        let (attack_last_movement, i) = IndexPair::next(i, 4);
        let (place_last_movement, i) = IndexPair::next(i, 3);
        let (simple_movement, i) = IndexPair::next(i, 3);
        let (simple_capture, i) = IndexPair::next(i, 4);
        let (simple_self_capture, i) = IndexPair::next(i, 4);
        let (pure_spread, i) = IndexPair::next(i, 2);
        let (fcd_highest_board, i) = IndexPair::next(i, 6);
        let (fcd_highest_stack, i) = IndexPair::next(i, 6);
        let (fcd_other, i) = IndexPair::next(i, 8);
        let (stack_captured_by_movement, i) = IndexPair::next(i, 1);
        let (stack_capture_in_strong_line, i) = IndexPair::next(i, S - 3);
        let (stack_capture_in_strong_line_cap, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line_with_critical_square, i) = IndexPair::next(i, S - 3);
        let (recapture_stack_pure, i) = IndexPair::next(i, 3);
        let (recapture_stack_impure, i) = IndexPair::next(i, 3);
        let (move_last_placement, i) = IndexPair::next(i, 3);
        let (continue_spread, i) = IndexPair::next(i, 3);
        let (move_onto_critical_square, i) = IndexPair::next(i, 3);
        let (spread_that_connects_groups_to_win, i) = IndexPair::next(i, 1);
        let (padding, i) = IndexPair::next(i, policy_padding::<S>());

        assert!(i == num_policy_features::<S>());

        PolicyIndexes {
            flat_psqt_white,
            flat_psqt_black,
            wall_psqt_white,
            wall_psqt_black,
            cap_psqt_white,
            cap_psqt_black,
            move_role_bonus_white,
            move_role_bonus_black,
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            attack_strong_stack_with_wall,
            attack_strong_stack_with_cap,
            attack_last_movement,
            place_last_movement,
            simple_movement,
            simple_capture,
            simple_self_capture,
            pure_spread,
            fcd_highest_board,
            fcd_highest_stack,
            fcd_other,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            recapture_stack_pure,
            recapture_stack_impure,
            move_last_placement,
            continue_spread,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
            padding,
        }
    }
}

pub trait ValueApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn finish(&mut self) -> f32;
}

#[derive(Debug, Clone)]
pub struct Value<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for Value<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Value {
            features: vec![f16::ZERO; num_value_features::<S>() / 2],
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn finish(&mut self) -> f32 {
        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>();

        self.features.fill(f16::ZERO);

        total_value
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalValue<const S: usize> {
    val: f32,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for IncrementalValue<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalValue {
            val: 0.0,
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn finish(&mut self) -> f32 {
        let total_value = self.val;

        self.val = 0.0;

        total_value
    }
}

pub trait PolicyApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn eval_one(&mut self, index_pair: IndexPair, index: usize) {
        self.eval_i8(index_pair, index, 1)
    }
    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.eval(index_pair, index, f16::from(val))
    }
    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.eval(index_pair, index, f16::from_f32(val))
    }
    fn set_immediate_win(&mut self);
    fn has_immediate_win(&self) -> bool;
    fn finish(&mut self, num_moves: usize) -> f16;
}

#[derive(Debug, Clone)]
pub struct Policy<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for Policy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Policy {
            features: vec![f16::ZERO; num_policy_features::<S>()],
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);

        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>() + offset;

        self.features.fill(f16::ZERO);
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalPolicy<const S: usize> {
    val: f32,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for IncrementalPolicy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalPolicy {
            val: 0.0,
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.val += index_pair.as_slice(self.parameters)[index] * val as f32
    }

    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.val += index_pair.as_slice(self.parameters)[index] * val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);
        let total_value = self.val + offset;

        self.val = 0.0;
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

pub const fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub const fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn value_features_4s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_4S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_4S_0KOMI,
        4 => &VALUE_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn policy_features_4s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_4S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_4S_0KOMI,
        4 => &POLICY_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn value_features_5s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_5S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_5S_0KOMI,
        4 => &VALUE_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn policy_features_5s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_5S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_5S_0KOMI,
        4 => &POLICY_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn value_features_6s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_6S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_6S_0KOMI,
        4 => &VALUE_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

pub fn policy_features_6s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_6S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_6S_0KOMI,
        4 => &POLICY_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_0KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    2.4316607,
    3.948234,
    2.6022382,
    1.4444559,
    2.7725964,
    2.6853547,
    2.4694963,
    0.6456372,
    1.3376486,
    1.9471525,
    -0.0059250165,
    -0.00050385203,
    -0.00651386,
    0.6298386,
    0.8478108,
    1.0267628,
    0.3646087,
    0.65035766,
    0.87383395,
    3.181548,
    0.67289674,
    1.4704818,
    0.3295483,
    1.7054638,
    0.30953056,
    0.7860367,
    0.7171965,
    0.31087294,
    -0.19592777,
    -0.3354864,
    -0.06270446,
    -0.047015138,
    -0.23130597,
    -0.6747112,
    -0.75386566,
    1.2540966,
    0.47478652,
    -0.005124028,
    -0.008343117,
    0.4502785,
    2.738278,
    0.005951524,
    -0.0043248367,
    0.66803735,
    0.104168616,
    -0.005560641,
    0.0036220215,
    -0.28920466,
    -0.16284779,
    -0.0055643534,
    -0.0015320918,
    -0.9019353,
    -0.23588982,
    -0.009827926,
    0.00059686694,
    -0.77141523,
    -0.6836219,
    0.0076304395,
    -0.0060374904,
    0.19825573,
    1.5824981,
    2.3749042,
    1.9221747,
    1.8022909,
    2.0026157,
    1.6333548,
    1.66393,
    -0.03078534,
    2.195885,
    2.2829652,
    1.5371269,
    1.3463248,
    1.1244818,
    1.1226524,
    0.861089,
    1.9853731,
    1.8382295,
    0.5394786,
    0.57464707,
    1.1580384,
    1.680245,
    2.2719595,
    2.922314,
    3.681033,
    2.6075218,
    1.4693128,
    -0.29159686,
    0.3667428,
    0.27157003,
    0.30727696,
    0.42632064,
    0.20321327,
    0.053844545,
    0.008557079,
    -0.0009557083,
    -0.00078115705,
    -0.008447227,
    -0.009191279,
    -0.0018326258,
    -0.022083364,
    -0.32067132,
    0.00022801384,
    -0.12849472,
    -0.20888318,
    -0.022015786,
    0.19898704,
    0.57707036,
    0.004107034,
    -0.08599316,
    0.58905095,
    1.3625441,
    0.22846593,
    -0.07444185,
    0.5652265,
    1.1756088,
    -0.05152581,
    -0.1914915,
    -0.11640325,
    0.3278621,
    -0.6404898,
    -0.47814745,
    -0.03943243,
    0.36418498,
    0.3084402,
    -0.03174029,
    0.26740316,
    0.9023104,
    -0.7598787,
    -0.5188656,
    0.17066951,
    0.9134854,
    -0.05141203,
    -0.03260874,
    0.58204496,
    -0.041261457,
    0.08081483,
    0.41292343,
    0.0043121455,
    -0.008000903,
    0.0010137418,
    -0.006815267,
    0.0031001903,
    -0.002478423,
    -0.002353027,
    0.008927224,
    0.009418681,
    -0.007463541,
    -0.009312019,
    0.008915393,
    -0.0005510999,
    0.0035254955,
    0.008046815,
    0.008674609,
    0.008508706,
    -0.0008124877,
    0.004095099,
    -3.032847,
    -2.6445708,
    -2.297356,
    -0.7322831,
    -1.405693,
    -2.3109975,
    -0.005868571,
    -0.0075792954,
    0.00952702,
    -0.548034,
    -0.89242476,
    -1.033523,
    -0.5278578,
    -0.73150647,
    -0.93173045,
    -2.5224686,
    -0.95631695,
    -1.8790292,
    -0.326836,
    -1.4393933,
    -0.17172302,
    -0.6617695,
    -0.49360335,
    -1.9183853,
    -0.57131374,
    -0.60526025,
    0.11044675,
    -1.3220683,
    -0.50244457,
    -0.108516395,
    0.7152695,
    -0.7885764,
    -0.9001365,
    -0.006010456,
    -0.0055280733,
    -0.9644257,
    -1.8761377,
    0.0069459323,
    -0.0069796084,
    -0.6072811,
    -0.18442312,
    0.0042860033,
    -0.004753387,
    0.490536,
    0.25390023,
    -0.0066909315,
    0.0056339707,
    0.57347906,
    -0.03773678,
    -0.0018851925,
    0.007400766,
    0.8519584,
    0.5810329,
    0.0092722215,
    0.0030306866,
    -0.07946182,
    -1.1671888,
    -1.7959044,
    -1.7916896,
    -1.6636328,
    -1.1216886,
    -1.128799,
    0.062783495,
    -0.008504454,
    -2.4580555,
    -3.2035835,
    -2.7939694,
    -2.6410935,
    -2.497593,
    -2.3075492,
    -1.644572,
    -2.1267548,
    -1.312306,
    0.15490162,
    0.098456845,
    -0.79874545,
    -1.7376605,
    -2.2331936,
    -2.5538356,
    -3.2979653,
    -2.8555193,
    -1.2035868,
    0.2660342,
    -0.1748763,
    -0.34909663,
    -0.20885655,
    -0.09937494,
    -0.21402863,
    0.04145042,
    0.008153329,
    0.002645051,
    0.004003441,
    0.0071725287,
    0.0049608946,
    0.008243782,
    -0.016886072,
    0.2743469,
    0.00948292,
    0.17882922,
    0.17736728,
    0.22346197,
    0.06281587,
    -0.19408545,
    0.01643628,
    -0.24420884,
    -0.72825295,
    -1.2837764,
    0.2205423,
    0.37509492,
    -0.26474893,
    -1.1563938,
    -0.28712055,
    -0.04974909,
    -0.123236,
    -0.3059569,
    1.1131511,
    0.55147105,
    -0.045114357,
    -0.65456104,
    -0.31463942,
    -0.13753715,
    -0.30598685,
    -0.77985066,
    1.021701,
    0.66817296,
    -0.103586376,
    -0.86488557,
    0.080472276,
    -0.08018608,
    -0.5443543,
    0.15388334,
    -0.23335904,
    -0.2519362,
    0.0015270468,
    0.0024552317,
    0.009908594,
    -0.00047137216,
    -0.002311611,
    -0.0068556285,
    -0.0071793436,
    0.0004826784,
    -0.0035659648,
    -0.0024085473,
    0.00952634,
    0.0013488671,
    -0.004505658,
    0.006838942,
    0.0048156017,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_0KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    -0.06596815,
    0.14143576,
    0.2643506,
    0.14499849,
    0.107681885,
    0.11073599,
    -0.19013828,
    -0.40654242,
    0.3318426,
    -0.16691944,
    -0.3575065,
    0.23800719,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.33601677,
    -0.041274536,
    0.0013449714,
    -0.29418692,
    -0.54222,
    0.0075244084,
    -2.7454162,
    1.2056162,
    0.74540424,
    -3.2504718,
    -2.7729948,
    0.068721116,
    0.47504744,
    -0.16477276,
    0.18019468,
    -0.13531236,
    0.14152104,
    0.032580495,
    -0.22254677,
    0.49075425,
    1.1202906,
    -0.07768215,
    -0.10285486,
    -0.28730598,
    -0.60267043,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    0.1747276,
    -0.3360676,
    0.35788158,
    1.2172985,
    -0.7322632,
    -0.5023849,
    -0.49644548,
    0.63201225,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    0.6639308,
    0.34448573,
    -0.0077813696,
    -1.4789531,
    -0.5449256,
    0.0020160126,
    0.20559156,
    -0.025478715,
    -0.0057330895,
    0.48247886,
    0.27221236,
    0.0008187201,
    0.79267675,
    1.5803065,
    -0.002397363,
    0.2934291,
    -0.9169082,
    0.00303144,
    0.18601592,
    0.47252977,
    -0.008103551,
    -0.54003847,
    -0.6874615,
    -0.009149382,
    2.5997837,
    0.21279974,
    1.0009149,
    0.00917124,
    0.5581906,
    -3.4829595,
    -0.7885469,
    0.29876935,
    1.3653431,
    0.3458327,
    0.23525056,
    0.27667275,
    0.6695998,
    0.2019845,
    0.33065692,
    -0.2599935,
    0.50598747,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.32448876,
    0.06516934,
    -0.00813673,
    -0.009886575,
    0.04560957,
    -0.2841685,
    0.00021132734,
    -1.8742533,
    -1.0128005,
    0.0011727996,
    0.07729849,
    0.14006491,
    -0.008626261,
    -0.006473,
    -1.0160459,
    -0.7020004,
    -0.0051336214,
    -0.0013411185,
    0.15417725,
    -1.3802054,
    0.25305972,
    1.4399757,
    1.8268988,
    1.968561,
    2.796725,
    1.1202828,
    -1.7660865,
    -0.804423,
    0.20100431,
    1.3501571,
    0.9508624,
    0.054124333,
    -1.1339825,
    -1.1712068,
    -2.0318532,
    -1.4227827,
    -2.0454004,
    -0.13430345,
    -1.5658052,
    -1.0156312,
    0.39389312,
    -0.0530978,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.397977,
    0.7746763,
    -0.002408173,
    0.22021821,
    1.53287,
    0.0077593178,
    0.2637508,
    0.88056475,
    -0.0054027913,
    0.3666799,
    0.14289705,
    0.0036244253,
    -0.39640427,
    -0.31697965,
    0.16356713,
    3.3073342,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_2KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    0.52429,
    0.68893915,
    0.11723282,
    -0.14886938,
    3.5339468,
    2.4858508,
    1.3320192,
    0.5897218,
    1.2349315,
    1.5847373,
    -0.0059250165,
    -0.00050385203,
    -0.00651386,
    0.30413458,
    0.60066754,
    0.585936,
    0.27747995,
    0.50866705,
    0.4718101,
    3.8469164,
    0.7773746,
    1.8651912,
    0.58217114,
    1.9865575,
    0.07986077,
    0.8951192,
    0.8741737,
    0.43828675,
    0.105449036,
    0.27625027,
    -0.37590623,
    0.04578136,
    0.03894673,
    0.07617995,
    -0.90207785,
    0.6963765,
    0.5452865,
    -0.005124028,
    -0.008343117,
    0.39673215,
    2.0560133,
    0.005951524,
    -0.0043248367,
    0.42766416,
    -0.18191823,
    -0.005560641,
    0.0036220215,
    -0.23393331,
    -0.21480957,
    -0.0055643534,
    -0.0015320918,
    -0.6201588,
    0.05866232,
    -0.009827926,
    0.00059686694,
    -0.6359298,
    -0.19155984,
    0.0076304395,
    -0.0060374904,
    -0.0073329057,
    1.0882515,
    1.6315265,
    2.2865894,
    1.3095273,
    1.0958549,
    0.50345117,
    1.0906723,
    -0.9198386,
    -0.005442661,
    1.0889075,
    0.9048378,
    0.6534195,
    0.8961703,
    0.67892134,
    0.22661947,
    0.026577663,
    0.40733767,
    -0.03858814,
    -0.2739997,
    0.31540608,
    0.4690904,
    1.3372418,
    2.3901124,
    3.1644223,
    4.195002,
    3.9688473,
    -0.27533773,
    0.17142802,
    0.03770945,
    0.35307604,
    0.0825674,
    0.13906325,
    0.012941918,
    0.008557079,
    -0.0009557083,
    -0.00078115705,
    -0.008447227,
    -0.009191279,
    -0.0018326258,
    -0.0069718147,
    -0.18608472,
    0.00022801384,
    0.45180544,
    -0.25586006,
    -0.44872898,
    -0.4753107,
    -0.4419908,
    0.35149807,
    0.576417,
    0.30050486,
    -0.24655187,
    -0.32760438,
    -0.44139394,
    0.23319869,
    0.7384209,
    1.2493399,
    0.59473467,
    -0.0038482135,
    -0.6755991,
    -1.1608081,
    -0.56961364,
    -0.03433775,
    0.6316661,
    1.1496592,
    0.6557117,
    0.12960815,
    -0.3134066,
    -1.5203936,
    -0.59795463,
    0.03728718,
    0.74441874,
    0.58514774,
    -0.1301679,
    -0.7587223,
    0.6873814,
    -0.031453356,
    -0.7020222,
    0.0043121455,
    -0.008000903,
    0.0010137418,
    -0.006815267,
    0.0031001903,
    -0.002478423,
    -0.002353027,
    0.008927224,
    0.009418681,
    -0.007463541,
    -0.009312019,
    0.008915393,
    -0.0005510999,
    0.0035254955,
    0.008046815,
    0.008674609,
    0.008508706,
    -0.0008124877,
    0.004095099,
    -3.0704432,
    -2.4933693,
    -1.7673687,
    -1.2633189,
    -1.7970295,
    -2.0775409,
    -0.005868571,
    -0.0075792954,
    0.00952702,
    -0.4075466,
    -0.57603663,
    -0.5444189,
    -0.11908211,
    -0.37698713,
    -0.3965246,
    -2.2272253,
    -0.13783081,
    -1.1743498,
    -0.09427089,
    -1.0977554,
    0.16787964,
    -0.40625194,
    -0.6227526,
    -0.61625713,
    -0.33013564,
    0.021447528,
    0.03244048,
    -0.5116448,
    -0.19525214,
    0.2845262,
    0.0065825637,
    -0.6593522,
    -0.56550854,
    -0.006010456,
    -0.0055280733,
    -0.62841564,
    -1.4784036,
    0.0069459323,
    -0.0069796084,
    -0.38398543,
    0.074410126,
    0.0042860033,
    -0.004753387,
    0.20717366,
    0.27154583,
    -0.0066909315,
    0.0056339707,
    0.5737717,
    -0.12585312,
    -0.0018851925,
    0.007400766,
    0.29815802,
    0.10203528,
    0.0092722215,
    0.0030306866,
    -1.8135285,
    -2.027833,
    -1.5655462,
    -1.3475527,
    -0.14485219,
    -0.28304484,
    1.4412184,
    -0.004338976,
    -0.028544435,
    -2.6164312,
    -2.4394634,
    -2.0292408,
    -1.9581802,
    -2.1600285,
    -1.8075325,
    -1.9948127,
    -1.5771171,
    -0.28050014,
    1.4215115,
    0.39595857,
    0.012841025,
    -0.9893835,
    -2.2025082,
    -2.5774856,
    -1.4600112,
    -0.7804209,
    -0.22854514,
    0.12789029,
    -0.053083226,
    -0.12465205,
    -0.11110279,
    -0.012352408,
    -0.13015433,
    0.32610905,
    0.008153329,
    0.002645051,
    0.004003441,
    0.0071725287,
    0.0049608946,
    0.008243782,
    -0.019086776,
    0.41505888,
    0.00948292,
    -0.09106063,
    -0.16338338,
    -0.1823654,
    -0.25317866,
    -0.44836012,
    0.36382782,
    0.073753566,
    0.2623317,
    0.18028197,
    -0.33552864,
    0.33023572,
    -0.076525986,
    -0.43629795,
    -0.9898158,
    -0.40246817,
    0.19037203,
    0.4182858,
    -0.40326446,
    -0.30955458,
    -0.5492488,
    -0.64738584,
    -0.6218218,
    -0.06700427,
    0.14947127,
    0.25139436,
    0.5272059,
    0.26679143,
    -0.20381989,
    -0.4752476,
    -0.06291156,
    0.14218172,
    0.3436011,
    0.20922472,
    0.14459349,
    0.39875776,
    0.0015270468,
    0.0024552317,
    0.009908594,
    -0.00047137216,
    -0.002311611,
    -0.0068556285,
    -0.0071793436,
    0.0004826784,
    -0.0035659648,
    -0.0024085473,
    0.00952634,
    0.0013488671,
    -0.004505658,
    0.006838942,
    0.0048156017,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_2KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    0.3835006,
    0.21164729,
    0.5567637,
    0.14972319,
    0.008378243,
    -0.43465084,
    -0.7308303,
    -0.8912839,
    0.46212968,
    -0.43907836,
    0.26626498,
    0.5782282,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.4975553,
    0.15077943,
    0.0013449714,
    -0.4241401,
    -0.4088393,
    0.0075244084,
    -3.2364414,
    0.9161514,
    0.5318693,
    -2.230449,
    -4.504568,
    -0.487717,
    0.6291668,
    -0.73886293,
    0.26118273,
    -0.27261165,
    0.12881532,
    0.1777136,
    -0.011507088,
    0.41689792,
    1.1819894,
    -0.14281727,
    -0.12822403,
    -0.4899795,
    -0.7057814,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    -0.038640175,
    -0.48866045,
    0.18388642,
    2.1011872,
    -0.47701856,
    -0.35595262,
    -0.5488175,
    -0.12425026,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    -0.0737323,
    1.6342262,
    -0.0077813696,
    0.8013023,
    -0.2317711,
    0.0020160126,
    0.59806335,
    -0.9970204,
    -0.0057330895,
    0.07285249,
    0.6827554,
    0.0008187201,
    0.9157639,
    0.626506,
    -0.002397363,
    -0.088837735,
    0.38987082,
    0.00303144,
    0.2895544,
    -0.16646424,
    -0.008103551,
    -0.26244026,
    -0.4901274,
    -0.009149382,
    2.3455992,
    -0.7211382,
    1.9804211,
    0.00917124,
    0.5224504,
    -4.4372244,
    -0.8496559,
    0.4749193,
    1.473498,
    0.45706263,
    0.046547048,
    0.25537905,
    0.77724373,
    0.07417753,
    0.39354962,
    -0.6581425,
    0.71233255,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.5941038,
    -0.046199616,
    -0.00813673,
    -0.009886575,
    0.1387866,
    -0.22598192,
    0.00021132734,
    -2.1441894,
    -1.8108326,
    0.0011727996,
    -0.16316642,
    0.30345392,
    -0.008626261,
    -0.006473,
    -1.3621367,
    -0.119089246,
    -0.0051336214,
    -0.0013411185,
    0.010755843,
    -1.2026048,
    0.38548076,
    1.398525,
    1.9160999,
    2.1099184,
    2.0770369,
    1.4328448,
    -1.7100422,
    -0.6515236,
    0.332164,
    0.62545145,
    0.0065994086,
    -0.005360393,
    -0.9618395,
    -1.1140851,
    -1.7814239,
    -0.5971449,
    -1.9552374,
    -0.23968147,
    -1.2191556,
    -1.1778564,
    0.42183256,
    -0.11105158,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.4999874,
    0.31543893,
    -0.002408173,
    -0.93778354,
    1.1441715,
    0.0077593178,
    0.79672486,
    0.83366203,
    -0.0054027913,
    0.49028045,
    0.045144238,
    0.0036244253,
    -0.30533037,
    -0.3648391,
    0.09491095,
    3.3036993,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_0KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    1.1928203,
    2.1070662,
    1.2441907,
    1.5578821,
    0.8132782,
    0.8026824,
    0.85453176,
    1.9690738,
    1.8800824,
    1.8096281,
    1.6723523,
    1.6419703,
    1.5867978,
    0.5266489,
    0.96528804,
    1.0269507,
    1.468423,
    1.5215062,
    1.819773,
    0.31145108,
    0.96304286,
    1.1395545,
    1.5785692,
    1.8641505,
    2.2049448,
    0.517726,
    0.60241765,
    0.59061235,
    0.60262394,
    0.66951936,
    0.7388366,
    0.45516452,
    0.60961986,
    0.5920616,
    0.6687753,
    0.67481065,
    0.67357177,
    2.5924962,
    0.71791726,
    1.8902876,
    0.46696702,
    1.6810297,
    0.2368942,
    0.89302397,
    1.2978514,
    1.0763754,
    0.21747583,
    0.033867702,
    -0.5839421,
    0.85528237,
    0.11190376,
    -0.15795344,
    -0.76875204,
    0.73581576,
    0.92057544,
    1.0344652,
    0.6616598,
    0.5717498,
    0.91676,
    2.1951437,
    1.7104051,
    0.61477184,
    0.10875934,
    -0.63789964,
    0.28395602,
    -0.34383854,
    -0.34340194,
    -0.5642386,
    -0.2253903,
    -0.43064907,
    0.21420923,
    0.29463074,
    0.11922831,
    -0.44266346,
    -0.5059046,
    -0.70854926,
    -0.5507744,
    0.103425965,
    0.33652097,
    0.9421522,
    1.3903724,
    1.5342762,
    1.7304975,
    2.21449,
    0.5381837,
    0.0462782,
    1.683738,
    2.03494,
    1.7273984,
    1.5432281,
    1.3334589,
    1.0670695,
    0.8633169,
    0.55835754,
    0.4723224,
    0.19376945,
    0.4262517,
    0.8000384,
    1.0509565,
    1.279152,
    1.6470128,
    1.9497055,
    2.216754,
    2.638693,
    -0.25438058,
    -0.14733131,
    0.003705402,
    0.40147805,
    0.17601441,
    0.1830201,
    -0.001174798,
    2.4470987,
    1.1473757,
    0.097849034,
    0.22005373,
    -0.014863612,
    -0.09440721,
    0.021318667,
    -0.212859,
    -0.15782623,
    0.0011965558,
    -0.6802703,
    -0.28444788,
    -0.021505214,
    0.31426722,
    0.725807,
    0.04861894,
    0.022395486,
    0.35460377,
    0.8186577,
    1.1477909,
    0.020816429,
    -0.5125699,
    0.09975668,
    0.7350411,
    1.1361241,
    0.0041389,
    -0.72789055,
    -0.10185401,
    0.6502742,
    1.1194495,
    -0.12099037,
    -0.3536748,
    -0.1621543,
    -0.06253067,
    0.38536447,
    -0.90042037,
    -0.8620838,
    -0.38860455,
    0.16664527,
    0.81956667,
    -0.8924154,
    -0.8043265,
    -0.2816984,
    0.30919588,
    0.9190814,
    0.15811087,
    0.017348154,
    0.119109005,
    0.40503943,
    0.7044783,
    -0.7460125,
    -0.7744139,
    -0.22339065,
    0.45067206,
    1.0531454,
    -0.9031834,
    -0.77834356,
    -0.1969934,
    0.47723556,
    1.2437361,
    0.0033503517,
    0.24015038,
    0.44044933,
    0.21035512,
    0.43758863,
    0.5880961,
    0.10375298,
    0.11180697,
    -0.054874063,
    -0.3336152,
    -0.06320067,
    0.16781487,
    -1.0435556,
    -0.44259098,
    -0.46363604,
    -0.42849964,
    -0.19675662,
    -0.29619652,
    -0.006010456,
    -0.0055280733,
    -0.00082149263,
    -0.005897157,
    0.0069459323,
    -0.0069796084,
    -0.0075576873,
    -0.00044307671,
    0.0042860033,
    -0.004753387,
    -2.0936751,
    -1.8101083,
    -1.8364398,
    -1.6872697,
    -1.7081169,
    -1.5787632,
    -0.4309761,
    -0.7451281,
    -0.9484365,
    -1.3352867,
    -1.48405,
    -1.5347865,
    -0.57844085,
    -0.7317599,
    -0.72284424,
    -1.4768298,
    -1.7695742,
    -2.107465,
    -0.5612714,
    -0.7470295,
    -0.75745964,
    -0.69089335,
    -0.71684897,
    -0.7429865,
    -0.44371578,
    -0.5506147,
    -0.4986936,
    -0.6476761,
    -0.647275,
    -0.6409796,
    -2.5714076,
    -0.9697408,
    -1.7405392,
    -0.5898505,
    -1.5196791,
    -0.21539329,
    -0.68531215,
    -1.0640965,
    -1.4058892,
    -0.3059946,
    0.1780091,
    0.4632711,
    -1.0998688,
    -0.21734932,
    0.3337348,
    0.84397787,
    -0.68102217,
    -0.6838092,
    -0.58862555,
    -1.0966622,
    -0.49869123,
    -0.9707208,
    -2.1250613,
    -0.8748231,
    -0.40944406,
    -0.055052105,
    -0.55827,
    -0.107034594,
    0.376191,
    0.24546412,
    0.12600291,
    0.2677606,
    0.43855026,
    0.014077116,
    -0.11173343,
    -0.10563513,
    0.41504,
    0.5104568,
    1.1716671,
    0.34226274,
    0.034468766,
    0.13448167,
    -0.91674167,
    -1.0617892,
    -1.2753325,
    -1.5724424,
    -0.48978204,
    -0.056099676,
    0.0021412876,
    -2.2745485,
    -1.9295343,
    -1.695296,
    -1.456617,
    -1.168899,
    -0.99638087,
    -0.7450253,
    -0.56338406,
    -0.45589548,
    -0.5344145,
    -0.8638079,
    -1.1738772,
    -1.5298804,
    -1.767229,
    -2.0007198,
    -2.4205163,
    -2.7022078,
    -2.8618484,
    0.26976946,
    0.14407937,
    -0.033904314,
    -0.2163266,
    -0.05321831,
    -0.11565789,
    -0.0067419023,
    -1.401822,
    -0.65911907,
    -0.066302314,
    -0.14311677,
    -0.05234293,
    0.236291,
    -0.026807414,
    0.21644105,
    0.17115621,
    0.009300139,
    0.56652296,
    0.36006233,
    0.07335235,
    -0.285104,
    -0.69186497,
    0.06294977,
    0.08626766,
    -0.13357468,
    -0.5709021,
    -0.99409026,
    0.018414011,
    0.56736857,
    -0.08885451,
    -0.6851428,
    -1.1335344,
    -0.002255978,
    0.6834278,
    0.09771102,
    -0.63633233,
    -1.1132287,
    0.09029246,
    0.366278,
    0.15866646,
    0.044523273,
    -0.16651995,
    0.8343959,
    0.8672732,
    0.32271302,
    -0.17062128,
    -0.7962079,
    0.87390405,
    0.76451427,
    0.2391873,
    -0.24331492,
    -0.9026406,
    -0.31184247,
    0.0037084462,
    -0.0496494,
    -0.41353345,
    -0.7890362,
    0.73757493,
    0.7690768,
    0.23919031,
    -0.42382103,
    -0.97509,
    0.91949433,
    0.8141576,
    0.18595916,
    -0.51863337,
    -1.1053522,
    -0.03888931,
    -0.37213227,
    -0.66277474,
    -0.110021256,
    -0.3224403,
    -0.6621227,
    0.13498296,
    -0.06997698,
    0.100266695,
    0.24203323,
    0.39377648,
    0.12729771,
    0.77301854,
    0.388145,
    0.5082158,
    0.3946428,
    0.19055621,
    0.3777883,
    0.0011727996,
    0.0015943982,
    0.009848841,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_0KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    -0.21254763,
    0.23103847,
    -0.033314772,
    0.28951204,
    0.08258201,
    -0.20170505,
    -0.083164066,
    0.039200466,
    -0.00088396505,
    0.3021171,
    0.11830643,
    -0.081436746,
    -0.40565103,
    -0.37145954,
    -0.18355277,
    0.06397571,
    0.20453936,
    0.55752325,
    -0.12067064,
    -0.30509105,
    -0.22406316,
    0.04068911,
    0.06334039,
    0.038877312,
    -2.746777,
    -0.87377214,
    -0.65470624,
    0.73748547,
    1.1899408,
    2.4166262,
    -0.82226,
    -1.3962785,
    -1.4452674,
    0.5082308,
    1.2789531,
    2.7618878,
    -0.3863811,
    0.031400807,
    -0.102757595,
    -0.38964626,
    -0.14711878,
    -0.31159613,
    -2.9462645,
    1.2216566,
    0.49116233,
    -4.1368756,
    -3.0489886,
    0.14062,
    0.4538722,
    -0.20252825,
    0.1369588,
    -0.058979962,
    0.08831377,
    0.02167715,
    -0.26413515,
    0.028735323,
    0.47112805,
    0.67481583,
    -0.037136614,
    -0.023578765,
    0.06294667,
    -0.05659834,
    -1.2630483,
    0.25168982,
    0.096158154,
    0.43390813,
    1.3263559,
    -0.38228187,
    0.30753988,
    -0.17709245,
    0.021742836,
    0.3967858,
    0.37994313,
    -0.5040257,
    -0.60063547,
    -0.5784962,
    -0.09444315,
    0.42124468,
    -0.95363337,
    -0.8204556,
    -0.515455,
    0.36224493,
    3.6014647,
    0.6930546,
    -0.022836408,
    1.229127,
    -0.20067202,
    -0.88029164,
    -1.945374,
    0.27076137,
    0.24485452,
    -0.2529798,
    0.3806981,
    -0.1388048,
    -0.43375793,
    1.5184788,
    0.4213168,
    1.0030801,
    -0.12647864,
    -0.28902504,
    -0.68267906,
    0.3738028,
    0.69471484,
    1.1517682,
    -0.16151088,
    -0.5155371,
    -0.17652579,
    2.4710944,
    0.30520877,
    2.0582628,
    1.0057538,
    0.5753131,
    -4.1801777,
    -0.5127082,
    0.45404467,
    1.4079078,
    0.3417027,
    0.39399534,
    0.1540643,
    0.2801745,
    0.3059642,
    0.2046346,
    -0.05043553,
    0.38525426,
    0.006237678,
    0.3969141,
    0.18871525,
    -1.5612092,
    -0.39385808,
    0.7173354,
    -0.24273492,
    -0.060208935,
    0.20501433,
    0.06431221,
    0.007810466,
    -0.006842167,
    0.25922537,
    0.22373736,
    1.4958718,
    -2.2605436,
    -1.6751494,
    -1.7748834,
    -0.15428533,
    -0.13730817,
    0.3625118,
    0.7318449,
    -2.1013966,
    -1.6390495,
    -0.58728755,
    0.705842,
    0.05825597,
    -1.3842419,
    0.5513746,
    1.3413002,
    1.6110371,
    1.1969258,
    1.6104766,
    0.26784024,
    -0.82374805,
    -0.27678168,
    0.63337976,
    1.37859,
    1.5559744,
    -0.2600439,
    -1.5502057,
    -0.7311096,
    -0.89582264,
    -0.8938125,
    -1.1783751,
    -0.29525974,
    -1.3265866,
    -2.8699765,
    0.3670057,
    -0.02602606,
    -0.094160676,
    0.038038492,
    0.18733682,
    0.1730221,
    0.4983536,
    -0.6600161,
    0.07679693,
    1.6442226,
    0.74923706,
    1.2906911,
    -0.0030353356,
    1.5110451,
    1.8540987,
    0.46657535,
    1.0854816,
    0.6397842,
    0.38965192,
    0.4017657,
    0.15735355,
    0.2403061,
    0.20836167,
    0.8231178,
    3.0737865,
    -0.0031571696,
    -0.0045039677,
    -0.0037830565,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_2KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    0.74446344,
    0.8859245,
    0.1992634,
    0.29286447,
    -0.06170318,
    -0.18319705,
    0.04429413,
    2.27261,
    1.8881348,
    1.9775624,
    1.5754788,
    1.627925,
    1.4468323,
    0.46256867,
    0.6822469,
    0.6601342,
    0.90277475,
    1.0556202,
    1.0046836,
    1.238945,
    1.0448554,
    1.1599337,
    1.3919702,
    1.714937,
    1.8122239,
    0.56403035,
    0.6339404,
    0.7107489,
    0.69304717,
    0.74074906,
    0.7352482,
    0.42237368,
    0.5085308,
    0.50632375,
    0.6073982,
    0.63904154,
    0.55835897,
    4.45692,
    0.9670821,
    2.308254,
    0.7836844,
    1.8483094,
    0.42790747,
    0.73493975,
    1.5414227,
    1.0467908,
    0.07190475,
    -0.19339876,
    -0.39113688,
    0.54257125,
    0.061539035,
    -0.11077739,
    -0.3923549,
    0.65980995,
    0.6308859,
    1.3536993,
    0.44564486,
    0.2894399,
    0.8741134,
    1.339828,
    1.5041411,
    0.21303825,
    -0.19559672,
    0.99083114,
    -0.020527389,
    -0.24895494,
    -0.12233473,
    -0.6051478,
    -0.1441094,
    -0.41427273,
    0.011824107,
    0.5159989,
    0.0886589,
    -0.4889106,
    -0.3604543,
    -0.83525056,
    -0.44741115,
    -0.012111282,
    0.09556177,
    1.6603909,
    1.8145037,
    1.9766862,
    2.0512106,
    2.1773953,
    2.3949952,
    0.5754396,
    1.7786462,
    2.1640656,
    1.9261633,
    1.8571584,
    1.3458751,
    0.9763788,
    0.53390193,
    0.097183056,
    -0.3172609,
    0.18559107,
    0.29868925,
    0.5501,
    0.67700076,
    0.81704074,
    1.0381272,
    1.0967755,
    1.256124,
    1.517816,
    -0.2532174,
    -0.13279389,
    0.014015469,
    0.2738714,
    0.034040973,
    0.11930274,
    -0.0022282195,
    3.911661,
    0.9997815,
    0.10756198,
    0.19441013,
    -0.016228357,
    -0.19558957,
    0.018293671,
    -0.1754363,
    -0.14931251,
    0.0011965558,
    -0.53276193,
    -0.24287295,
    -0.04634478,
    0.271975,
    0.6298383,
    -0.19805695,
    -0.037858315,
    0.12096359,
    0.40508375,
    0.5641099,
    0.073435605,
    -0.5847123,
    0.0026287804,
    0.60230577,
    1.0794917,
    0.031975977,
    -0.618399,
    -0.10225221,
    0.6393168,
    1.1254218,
    0.06837201,
    -0.257664,
    -0.192437,
    -0.1591609,
    -0.03724256,
    -0.83463717,
    -0.7952384,
    -0.3195344,
    0.20303847,
    0.7996726,
    -0.8397736,
    -0.7614584,
    -0.27960095,
    0.2632095,
    0.8065905,
    0.5729252,
    0.121667564,
    0.06499005,
    0.166798,
    0.3573487,
    -0.7282707,
    -0.6485974,
    -0.16734242,
    0.43314585,
    1.010886,
    -0.854548,
    -0.7363255,
    -0.14680006,
    0.47496605,
    1.060031,
    0.007330484,
    0.045496866,
    0.080127046,
    0.06048889,
    0.041217886,
    0.18282504,
    -0.0026177336,
    -0.07030694,
    -0.30398974,
    -0.3768397,
    -0.47924203,
    -0.19281021,
    -0.59367496,
    -0.24151008,
    -0.27177098,
    -0.18144347,
    0.012418627,
    -0.40664542,
    -0.006010456,
    -0.0055280733,
    -0.00082149263,
    -0.005897157,
    0.0069459323,
    -0.0069796084,
    -0.0075576873,
    -0.00044307671,
    0.0042860033,
    -0.004753387,
    -2.531786,
    -2.1177216,
    -2.064841,
    -1.5796459,
    -1.5821562,
    -1.5464638,
    -0.7896057,
    -1.1379808,
    -1.122659,
    -1.482195,
    -1.5552973,
    -1.6302608,
    -0.8527904,
    -0.97190654,
    -0.962631,
    -1.1915269,
    -1.4486474,
    -1.7799574,
    -0.4962957,
    -0.7063533,
    -0.79800934,
    -0.67111385,
    -0.7408751,
    -0.67925286,
    -0.33392233,
    -0.45333374,
    -0.47941178,
    -0.49579868,
    -0.5360278,
    -0.50276834,
    -3.8795092,
    -0.71586394,
    -2.7295434,
    -0.27944016,
    -1.3507223,
    0.08627692,
    -0.6351521,
    -1.1155646,
    -1.3684022,
    -0.34398982,
    0.19023511,
    0.35511237,
    -1.0122914,
    -0.22941394,
    0.30473223,
    0.5204549,
    -0.5874297,
    -0.7349494,
    -1.1017764,
    -0.8669587,
    -0.40801987,
    -0.6626383,
    -1.2579926,
    -0.8613904,
    -0.35975644,
    0.09339003,
    -0.59427357,
    0.096587315,
    0.32866272,
    0.26388553,
    0.58630323,
    0.078436285,
    0.4218916,
    -0.09021611,
    -0.2441141,
    0.06510367,
    0.2917281,
    0.3958432,
    0.56902313,
    0.31367296,
    0.42196107,
    -0.47100398,
    -0.4596075,
    -0.4724965,
    -0.63612014,
    -0.39186376,
    -0.3153429,
    -0.026108561,
    -0.0009600875,
    -2.659071,
    -2.0184665,
    -1.6147215,
    -1.2777876,
    -0.68750787,
    -0.57742715,
    -0.44770935,
    -0.14593428,
    -0.17780232,
    -1.3786016,
    -1.5625219,
    -1.5939487,
    -1.7870045,
    -1.9720681,
    -2.1126823,
    -2.4019933,
    -2.6860003,
    -3.0875945,
    0.20432372,
    0.15129799,
    0.013938812,
    -0.2232782,
    -0.015540384,
    -0.14194742,
    0.101163514,
    -1.8428217,
    -0.4493768,
    -0.0696989,
    -0.13811767,
    -0.010655463,
    0.08838447,
    -0.029466467,
    0.2560379,
    0.22876334,
    0.007477794,
    0.35427654,
    0.21253842,
    0.045614745,
    -0.15861186,
    -0.40303168,
    -0.18372642,
    -0.4548651,
    -0.39260954,
    -0.3718016,
    -0.43206328,
    0.071033195,
    0.49815828,
    -0.046320613,
    -0.5989704,
    -1.0416217,
    0.025580395,
    0.6070106,
    0.108398005,
    -0.47502953,
    -1.0912676,
    -0.72844374,
    -0.276695,
    -0.107974365,
    0.10803582,
    -0.051705293,
    0.8276564,
    0.69750035,
    0.22898465,
    -0.2231582,
    -0.71578366,
    0.8632608,
    0.6233799,
    0.19183461,
    -0.2692477,
    -0.931921,
    -0.7127728,
    -0.3830574,
    -0.21387303,
    -0.10126068,
    0.08173569,
    0.8732113,
    0.65376157,
    0.17976648,
    -0.37660488,
    -0.8929636,
    0.9574273,
    0.70445794,
    0.1823866,
    -0.40663797,
    -1.0071309,
    -0.13735858,
    -0.071567036,
    -0.024194432,
    -0.14666806,
    -0.2154403,
    0.14518414,
    -0.09511636,
    0.16196261,
    0.58283925,
    0.18830256,
    0.113657154,
    0.035777677,
    0.5150568,
    0.07032767,
    0.32537,
    0.08320267,
    0.03686488,
    0.21979481,
    0.0011727996,
    0.0015943982,
    0.009848841,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_2KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    0.13053814,
    0.2594758,
    0.24701957,
    0.32714072,
    0.2772792,
    -0.13828218,
    -0.10215987,
    0.098732464,
    0.019896906,
    -0.056102987,
    -0.07790267,
    -0.42510068,
    -0.30549508,
    -0.45333365,
    -0.52566814,
    -0.29246622,
    -0.28865135,
    -0.26258516,
    0.11082738,
    0.17156202,
    -0.038298223,
    0.46970895,
    0.49330792,
    0.45982635,
    -1.5306015,
    -0.70623446,
    -1.6051459,
    1.1686573,
    1.569235,
    2.0058358,
    -2.5606222,
    -1.2750763,
    -2.0411723,
    0.8546261,
    1.8828146,
    2.5776637,
    -0.54405427,
    0.17359827,
    -0.07840562,
    -0.24876921,
    -0.18755311,
    -0.26911703,
    -3.0770643,
    1.1082592,
    0.26119882,
    -2.5300553,
    -2.871422,
    0.03775389,
    0.4238567,
    -0.33088768,
    0.10647789,
    -0.13209525,
    0.08560816,
    0.0468911,
    -0.21627295,
    0.05250266,
    0.38945135,
    0.81790227,
    -0.23717421,
    -0.22604689,
    -0.19218688,
    -0.20800717,
    -0.033787068,
    0.122389324,
    -0.10022763,
    -0.073142864,
    0.6767682,
    -0.04690488,
    0.33146432,
    -0.22365022,
    -0.0036192038,
    0.46967515,
    0.51455325,
    -0.2567931,
    -0.40734252,
    -0.42442977,
    -0.001470779,
    0.22078364,
    -1.2574711,
    -0.85755,
    -0.74906814,
    -0.17770536,
    3.6172705,
    0.54112595,
    0.6423261,
    0.9667451,
    0.199188,
    -1.3389384,
    0.16624917,
    0.19690222,
    -0.4323959,
    -0.23050337,
    0.34784153,
    0.61946857,
    -0.7219571,
    1.2463146,
    0.5738733,
    2.0701928,
    0.049495548,
    -0.42689493,
    -1.0372397,
    0.26199716,
    0.7308859,
    1.6175814,
    -0.0076032556,
    -0.68225515,
    0.12284207,
    2.349499,
    0.1210995,
    2.3559947,
    1.0110165,
    0.4826661,
    -4.137684,
    -0.87189615,
    0.58148867,
    1.5087106,
    0.51515806,
    0.27801824,
    0.1363943,
    0.39705855,
    0.3311712,
    0.13834442,
    -0.009231192,
    0.37948412,
    0.013899716,
    0.34986228,
    0.20538929,
    -1.3363253,
    -0.6954224,
    -0.26191995,
    -0.23036456,
    -0.17417376,
    0.21034743,
    0.08639803,
    0.009099964,
    0.0013535284,
    0.37892112,
    0.085819654,
    1.4048743,
    -2.3133554,
    -1.2493757,
    -1.597994,
    -0.20851141,
    -0.025360083,
    0.2432856,
    0.7032871,
    -1.9057463,
    -1.1427703,
    -0.49652052,
    0.84754634,
    0.08384458,
    -1.2245532,
    0.5221889,
    1.2940357,
    1.6118815,
    1.3088297,
    1.4081663,
    -0.2697331,
    -0.76520354,
    -0.34188744,
    0.6127755,
    1.3039353,
    1.4138254,
    0.12542252,
    -1.4124713,
    -0.9411064,
    -0.9240627,
    -0.92811567,
    -1.1624233,
    -0.3372181,
    -1.4078445,
    -2.251844,
    0.36175016,
    -0.023277655,
    -0.08955618,
    0.0533145,
    0.14049543,
    -0.019719895,
    -0.007010526,
    -0.096855216,
    -0.22378309,
    1.7177029,
    0.7570125,
    1.2928087,
    0.07078977,
    1.540554,
    1.9195119,
    0.41963235,
    0.9632119,
    0.60895467,
    0.32042414,
    0.36884412,
    0.16893406,
    0.3075245,
    -0.011423582,
    0.7850744,
    3.0451703,
    0.0,
    0.0,
    0.0,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_0KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.5253215,
    1.3762075,
    0.72730494,
    0.7440856,
    0.3515928,
    0.22421339,
    0.10221959,
    1.925999,
    1.7639575,
    1.8038899,
    1.7175462,
    1.7466991,
    1.7071389,
    0.6779204,
    0.9245847,
    0.9662424,
    1.1833712,
    1.240461,
    1.3463519,
    0.17968313,
    0.8669231,
    1.0097479,
    1.1275097,
    1.4636419,
    1.7468617,
    0.39508116,
    0.49705023,
    0.49915227,
    0.5489564,
    0.6036633,
    0.6205196,
    0.39374897,
    0.51148427,
    0.5209159,
    0.58763105,
    0.63067764,
    0.6428661,
    2.328944,
    0.687426,
    1.774563,
    0.3590999,
    1.413541,
    0.12299153,
    0.5477659,
    1.270343,
    1.1409347,
    0.15526539,
    -0.10718679,
    -0.60501957,
    0.7226654,
    0.14557783,
    -0.13143736,
    -0.8276589,
    0.6436797,
    0.8055839,
    0.4133738,
    0.72099394,
    0.39773124,
    0.5432647,
    1.4638195,
    0.80314183,
    0.5662986,
    -0.08868053,
    0.017469134,
    0.08606761,
    -0.3200623,
    -0.15377608,
    -0.43625697,
    -0.11345321,
    -0.35420528,
    0.020165835,
    0.3958578,
    0.006311472,
    -0.34029907,
    -0.34542295,
    -1.1627085,
    -0.42495808,
    0.030147014,
    -0.031978924,
    0.5166396,
    0.94809395,
    1.0407002,
    1.2088215,
    1.9648633,
    0.63346046,
    0.13475816,
    0.889201,
    1.529552,
    1.4141421,
    1.2000058,
    1.1280923,
    0.9416862,
    0.8596245,
    0.9389782,
    0.44974622,
    0.776107,
    0.9280245,
    0.99374586,
    1.0896912,
    1.0667611,
    1.0358291,
    1.1064796,
    1.1210536,
    1.2285006,
    -0.20710298,
    -0.20243366,
    0.020790873,
    0.2952964,
    0.06777797,
    0.19040745,
    0.05938006,
    1.433867,
    0.8450785,
    0.053868964,
    0.15060851,
    0.05551107,
    -0.16563398,
    0.036960155,
    -0.16634974,
    -0.14023794,
    0.0011965558,
    -0.27293563,
    -0.16049002,
    -0.12678865,
    -0.055507846,
    0.12435743,
    0.33889943,
    0.104946464,
    0.04080964,
    0.108427934,
    0.25435498,
    0.53518844,
    0.71518624,
    -0.024179492,
    -0.2674189,
    -0.0105931265,
    0.24616334,
    0.6884112,
    0.8728321,
    -0.05702909,
    -0.36433175,
    -0.046779804,
    0.27406543,
    0.65835637,
    0.81570226,
    -0.10467647,
    -0.24787965,
    -0.25530404,
    -0.2519775,
    -0.16258115,
    -0.06614574,
    -0.7320094,
    -0.729103,
    -0.50782824,
    -0.23069738,
    -0.038094997,
    0.30785292,
    -0.75570935,
    -0.69443893,
    -0.43364704,
    -0.14011195,
    0.1527702,
    0.48863837,
    0.31460762,
    0.103253216,
    -0.018630765,
    0.013705474,
    0.23944926,
    0.50354654,
    -0.509019,
    -0.43990088,
    -0.22536555,
    0.037484054,
    0.43057016,
    0.8296029,
    -0.6723295,
    -0.5496064,
    -0.2986983,
    0.040045064,
    0.46014467,
    0.8121928,
    -0.047152333,
    0.04760333,
    0.3587935,
    0.10391628,
    0.133498,
    0.46417397,
    -0.055113006,
    0.0865202,
    -0.031219894,
    -0.57651067,
    -0.15005273,
    -0.14026043,
    -0.57495815,
    -0.79957247,
    -0.40756136,
    -0.43350923,
    -0.23560959,
    -0.1172012,
    0.009866308,
    0.0054509398,
    -0.0066909315,
    0.0056339707,
    0.005903894,
    -0.0017206976,
    -0.0018851925,
    0.007400766,
    -1.8900775,
    -1.7871385,
    -1.7733483,
    -1.6998065,
    -1.7572179,
    -1.7933517,
    -0.42571646,
    -0.53345615,
    -0.76052433,
    -0.89550763,
    -1.0576999,
    -1.2353834,
    -0.36773595,
    -0.6201628,
    -0.7010968,
    -1.0620342,
    -1.3453082,
    -1.8011515,
    -0.48144963,
    -0.53631395,
    -0.5984394,
    -0.56839985,
    -0.68604285,
    -0.6915131,
    -0.45653886,
    -0.47597077,
    -0.4604547,
    -0.59617454,
    -0.60254705,
    -0.61453146,
    -2.4635189,
    -1.0519779,
    -1.786378,
    -0.616205,
    -1.6738445,
    -0.13927944,
    -0.7400635,
    -1.3752116,
    -1.4651967,
    -0.23208939,
    0.08126829,
    0.60013807,
    -0.91170126,
    -0.28645805,
    0.048485972,
    0.8118066,
    -0.58324504,
    -0.8617632,
    -1.2975961,
    -0.62298,
    -0.34083772,
    -0.3564448,
    -0.8830335,
    -0.77906036,
    -0.32906568,
    0.070248455,
    -0.060204964,
    0.10595138,
    0.38507682,
    0.21388042,
    0.5523565,
    0.089031726,
    0.34090006,
    -0.019460456,
    0.024474598,
    0.05571595,
    0.33556297,
    0.6350486,
    0.55854696,
    0.44841287,
    0.09063015,
    0.15724608,
    -0.965008,
    -1.0833607,
    -1.2627232,
    -1.5180786,
    -0.23763992,
    -0.018025657,
    -0.0015951212,
    -1.5381778,
    -1.3650976,
    -1.2840654,
    -1.0917001,
    -0.9979869,
    -0.7789371,
    -0.62929875,
    -0.76370585,
    -0.1790527,
    -1.1635579,
    -1.1727182,
    -1.2191904,
    -1.202029,
    -1.157659,
    -1.2629862,
    -1.3724914,
    -1.4663517,
    -1.7571698,
    0.25636,
    0.22004683,
    -0.00046516364,
    -0.21585853,
    -0.06911305,
    -0.17315118,
    -0.031282447,
    -1.3043046,
    -0.6104238,
    -0.045888186,
    -0.11885417,
    -0.05265238,
    0.1239771,
    -0.038392525,
    0.17351927,
    0.14643039,
    0.005978748,
    0.20837763,
    0.20755073,
    0.12999,
    -0.036830418,
    -0.23380914,
    -0.42384002,
    0.10456899,
    0.105868585,
    0.026828764,
    -0.15494953,
    -0.39513633,
    -0.6223809,
    -0.022913925,
    0.26851907,
    0.053499885,
    -0.18892293,
    -0.56732255,
    -0.7532428,
    -0.0671299,
    0.34240192,
    0.10409668,
    -0.16620666,
    -0.5378861,
    -0.84111625,
    0.065524265,
    0.13433541,
    0.17873327,
    0.06657747,
    -0.08699031,
    -0.09062244,
    0.53489804,
    0.54845697,
    0.3609705,
    0.09254684,
    -0.11207768,
    -0.2446962,
    0.5438391,
    0.5577878,
    0.35354802,
    0.09962254,
    -0.17342012,
    -0.50166714,
    -0.11699893,
    0.041926797,
    0.08608339,
    0.008406764,
    -0.19797522,
    -0.40894142,
    0.35854775,
    0.38723287,
    0.18098193,
    -0.089684285,
    -0.4107651,
    -0.6941487,
    0.49329364,
    0.49487394,
    0.2282827,
    -0.08685141,
    -0.4635629,
    -0.7149052,
    0.078359425,
    -0.09524654,
    -0.33624437,
    -0.032955877,
    -0.036220502,
    -0.33854374,
    0.12310246,
    0.08939046,
    -0.28702775,
    0.20345879,
    0.1682643,
    0.092467636,
    0.4468478,
    0.02779658,
    0.40558934,
    0.3666894,
    -0.06638849,
    0.25690126,
    -0.005392799,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_0KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.071415216,
    0.12442188,
    -0.09566238,
    0.025814263,
    0.39882815,
    0.16391489,
    -0.008581701,
    -0.13815464,
    -0.13051334,
    0.02532715,
    0.32889652,
    0.20524831,
    -0.49096164,
    -0.30895254,
    -0.23303136,
    0.23083706,
    0.2964616,
    0.24874644,
    -0.2457537,
    -0.20580663,
    -0.20578788,
    0.22220248,
    0.24823901,
    0.27056095,
    -1.7412964,
    -1.2658727,
    -0.9884221,
    0.21221639,
    0.76972306,
    2.9932423,
    -0.8941595,
    -1.4919809,
    -0.6434117,
    0.1866445,
    0.6302275,
    3.7471368,
    -0.19908637,
    -0.05053481,
    -0.22026536,
    -0.20168278,
    -0.06375163,
    -0.34524786,
    -2.9306319,
    1.2972493,
    0.24407394,
    -3.5354817,
    -2.9933457,
    -0.10331253,
    0.47185874,
    -0.14110662,
    0.10932957,
    0.0013340656,
    0.07475349,
    -0.016720613,
    -0.23927939,
    -0.011462316,
    0.34377918,
    0.72500736,
    0.85285324,
    -0.110500894,
    -0.105389334,
    -0.017042588,
    0.10457068,
    0.0042217867,
    -0.21249798,
    -0.085640766,
    -0.45459425,
    -0.16079083,
    0.55052006,
    2.0902095,
    -0.37665167,
    0.27560315,
    -0.059153534,
    0.035410654,
    0.26979086,
    0.5431667,
    0.5761751,
    -0.40052012,
    -0.44486472,
    -0.42993188,
    -0.155777,
    0.3429057,
    0.74014395,
    -0.7196886,
    -0.66130596,
    -0.5823512,
    -0.061252877,
    1.1902641,
    2.376007,
    0.48015076,
    -0.05263098,
    0.55019283,
    0.35582376,
    -0.3000633,
    -0.9577861,
    0.37041304,
    0.1807514,
    -0.058853548,
    0.19539088,
    0.03101509,
    -1.0235001,
    1.6822823,
    0.46977645,
    0.50950366,
    -0.1764842,
    -0.2133276,
    -1.0270724,
    0.4235578,
    0.47018492,
    0.59907496,
    -0.095802486,
    -0.2432442,
    -0.01910542,
    2.5890062,
    0.13449658,
    2.3261929,
    0.96748704,
    0.44940996,
    -4.1517406,
    -1.059962,
    0.81751895,
    1.4057382,
    0.43485394,
    0.52264935,
    0.0902257,
    0.27415887,
    0.29622847,
    0.18442348,
    -0.011864232,
    0.33198798,
    0.008446357,
    0.29941043,
    0.24493904,
    -1.3369043,
    0.41626275,
    0.329823,
    -0.10362355,
    0.111990936,
    0.22666475,
    0.06236524,
    0.0052082036,
    -0.0012640925,
    0.34226802,
    -0.037712023,
    1.718424,
    -2.2861829,
    -1.5476025,
    -1.518054,
    -0.16363169,
    0.14955013,
    0.6014917,
    1.1120517,
    -1.9437062,
    -1.5143054,
    -0.46494117,
    0.6082318,
    0.21189173,
    -1.3022004,
    0.3113392,
    1.2015941,
    1.7875376,
    1.4595233,
    1.7871752,
    0.90693253,
    -0.98388606,
    -0.55907655,
    0.42635015,
    1.2506536,
    1.9478662,
    0.16841666,
    -1.632099,
    -0.78296155,
    -1.2520697,
    -1.1554351,
    -1.4457918,
    -0.38163397,
    -1.3265272,
    -2.6471865,
    0.33752015,
    -0.024949715,
    -0.024228316,
    -0.09096827,
    0.036369875,
    0.06127662,
    0.20753954,
    -0.15602651,
    0.38449815,
    0.44087142,
    -0.1416285,
    -0.72993124,
    0.1605913,
    1.8260558,
    1.4085311,
    1.6873645,
    -0.23067553,
    1.8025221,
    2.1915245,
    0.68259877,
    1.5146484,
    0.60728025,
    0.6007257,
    0.6491273,
    0.2172983,
    0.6351415,
    0.4959009,
    0.77732676,
    2.8963873,
    0.00053430814,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_2KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.17281419,
    0.264805,
    -0.11186912,
    -0.29102337,
    -0.61092955,
    -0.76786673,
    -0.7554043,
    1.8842833,
    1.6793996,
    1.6940719,
    1.5433341,
    1.604221,
    1.5845268,
    0.2984087,
    0.4450218,
    0.6053174,
    0.808239,
    0.9603414,
    1.0309373,
    0.826145,
    0.6797363,
    0.93133235,
    1.135476,
    1.4949002,
    1.8196776,
    0.35303763,
    0.49421906,
    0.56364065,
    0.58904684,
    0.6619775,
    0.6993996,
    0.3583335,
    0.40644994,
    0.43033993,
    0.51581675,
    0.55393565,
    0.5700895,
    3.288247,
    1.0900425,
    2.0327883,
    0.68778485,
    1.738845,
    0.36787635,
    0.9020738,
    1.3354539,
    1.4455373,
    0.22053765,
    -0.014441917,
    -0.31269214,
    0.87022203,
    0.2241461,
    -0.07109215,
    -0.4211904,
    0.58365875,
    0.612944,
    0.89678055,
    0.54070634,
    0.27352288,
    0.550251,
    0.9104687,
    0.7754562,
    0.38492268,
    -0.13821165,
    0.2911486,
    0.18958636,
    -0.35929275,
    -0.123502575,
    -0.2887502,
    -0.12023692,
    -0.31738773,
    -0.035067797,
    -0.046032082,
    -0.0120725855,
    -0.26186544,
    -0.37565136,
    -0.86947656,
    -0.4468686,
    0.0017178736,
    0.023806604,
    0.25448182,
    1.1034623,
    1.2362546,
    1.4917396,
    2.0100183,
    0.9852764,
    0.18650676,
    0.88753647,
    1.7162877,
    1.4799799,
    1.2705824,
    1.0813687,
    0.9483497,
    0.70009184,
    0.58412683,
    0.26370537,
    0.7718064,
    0.8094338,
    0.8529817,
    0.82691216,
    0.7840699,
    0.8098613,
    0.7994403,
    0.8288054,
    0.87703466,
    -0.21357866,
    -0.2081319,
    -0.004002547,
    0.23896669,
    0.01843733,
    0.15520686,
    -0.014545052,
    1.4265842,
    0.6798554,
    0.05120361,
    0.1365403,
    0.023485243,
    -0.13383321,
    0.031369563,
    -0.1332541,
    -0.12725382,
    0.0011965558,
    -0.19836581,
    -0.15260199,
    -0.14100824,
    -0.050334793,
    0.0974065,
    0.27667612,
    -0.028700136,
    0.08716952,
    0.095877595,
    0.25183603,
    0.43874037,
    0.5449883,
    -0.04111116,
    -0.33918458,
    -0.081004485,
    0.20568566,
    0.56150377,
    0.7255978,
    -0.06321236,
    -0.47076634,
    -0.16456765,
    0.16006476,
    0.5610546,
    0.80051863,
    0.056986462,
    -0.11822691,
    -0.10882406,
    -0.11071367,
    -0.088106245,
    0.12690352,
    -0.68561804,
    -0.65037376,
    -0.41394112,
    -0.16001326,
    0.15261202,
    0.428022,
    -0.635732,
    -0.6131387,
    -0.36571792,
    -0.093445465,
    0.18341479,
    0.5770836,
    0.43526217,
    0.12750779,
    0.011702701,
    0.05948873,
    0.1929896,
    0.39329502,
    -0.46047124,
    -0.45137402,
    -0.22214232,
    0.040973548,
    0.4051423,
    0.6529103,
    -0.66764873,
    -0.5518896,
    -0.2793152,
    0.07317324,
    0.4455046,
    0.76234496,
    -0.03863445,
    0.048894003,
    0.22315869,
    0.096084245,
    0.1157918,
    0.22913374,
    -0.04027001,
    -0.07756221,
    -0.19409607,
    -0.40087935,
    -0.33339643,
    -0.22964358,
    -0.6946231,
    -0.7064074,
    -0.29563707,
    -0.38670555,
    -0.28900674,
    -0.29456967,
    0.009866308,
    0.0054509398,
    -0.0066909315,
    0.0056339707,
    0.005903894,
    -0.0017206976,
    -0.0018851925,
    0.007400766,
    -1.9025247,
    -1.7425479,
    -1.7797096,
    -1.6284101,
    -1.6789584,
    -1.6520143,
    -0.62500244,
    -0.9183362,
    -1.0323185,
    -1.1631757,
    -1.3171886,
    -1.4020954,
    -0.57035965,
    -0.70606697,
    -0.98280674,
    -1.1282097,
    -1.5274031,
    -1.8259516,
    -0.4847857,
    -0.53311163,
    -0.5804887,
    -0.67604184,
    -0.66289485,
    -0.7025512,
    -0.34072718,
    -0.42110103,
    -0.4446203,
    -0.5186575,
    -0.5626296,
    -0.56167924,
    -2.847587,
    -0.56854284,
    -2.07213,
    -0.25286362,
    -1.5702834,
    0.25198495,
    -0.6563695,
    -1.3111328,
    -1.2163734,
    -0.28524005,
    -0.13306016,
    0.3003233,
    -0.9218822,
    -0.2852375,
    0.016928941,
    0.43093374,
    -0.430605,
    -0.7108876,
    -1.2436647,
    -0.65993595,
    -0.42045292,
    -0.41935605,
    -0.4510095,
    -0.6051989,
    -0.5031299,
    0.26565072,
    -0.26377144,
    -0.10996143,
    0.35356736,
    0.22157945,
    0.44042408,
    0.08490908,
    0.31361908,
    -0.057505462,
    -0.16518144,
    0.030783841,
    0.27205443,
    0.45850462,
    0.5346894,
    0.4953043,
    -0.14763853,
    -0.014792236,
    -0.5681891,
    -0.75653857,
    -0.97408396,
    -1.4103861,
    -0.20049226,
    -0.13964891,
    0.0024515367,
    -1.5948328,
    -1.3751838,
    -1.1191384,
    -1.0157688,
    -0.78117275,
    -0.6248849,
    -0.38705528,
    -0.47485027,
    -0.13056596,
    -1.2910465,
    -1.3074727,
    -1.2913764,
    -1.2978929,
    -1.2874966,
    -1.2693439,
    -1.3243597,
    -1.3972489,
    -1.5105149,
    0.19667254,
    0.21671258,
    -0.0005950375,
    -0.23429374,
    -0.020088593,
    -0.15035008,
    -3.9791925e-5,
    -1.3094358,
    -0.47357458,
    -0.029012706,
    -0.09222093,
    -0.09053831,
    0.10981825,
    -0.031488623,
    0.18236105,
    0.1375754,
    0.005978748,
    0.19650765,
    0.1441219,
    0.076810434,
    -0.041973397,
    -0.18331753,
    -0.35645717,
    -0.029077917,
    -0.21546164,
    -0.2261186,
    -0.32972044,
    -0.49599537,
    -0.53314155,
    -0.03984559,
    0.20229289,
    0.005425007,
    -0.219436,
    -0.52291185,
    -0.702637,
    -0.073311605,
    0.34135014,
    0.08945098,
    -0.2111388,
    -0.5863494,
    -0.8353207,
    -0.10361628,
    0.14738375,
    0.17223692,
    0.21085824,
    0.09402973,
    -0.015165068,
    0.53183293,
    0.5517496,
    0.36246535,
    0.1693063,
    -0.095525295,
    -0.4838605,
    0.5380929,
    0.5019184,
    0.2896796,
    0.06550718,
    -0.15971291,
    -0.4952261,
    -0.3437202,
    -0.11930537,
    -0.0022514865,
    -0.027230065,
    -0.15176667,
    -0.35704568,
    0.3959393,
    0.3779669,
    0.19599721,
    -0.06054718,
    -0.34872517,
    -0.6490866,
    0.58492863,
    0.4870187,
    0.26167694,
    -0.026893638,
    -0.3932909,
    -0.74484843,
    0.0302986,
    -0.058691364,
    -0.21338576,
    -0.011950933,
    -0.10540295,
    -0.18303609,
    0.12348479,
    0.14778523,
    0.22239034,
    0.34733197,
    0.17782913,
    0.02569337,
    0.49957815,
    0.18567564,
    0.0056250487,
    0.21071737,
    -0.020200944,
    0.15282497,
    -0.005392799,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_2KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.19618513,
    -0.12603372,
    -0.015536889,
    0.1261336,
    0.39343518,
    0.54471564,
    -0.15491426,
    -0.27759033,
    -0.0069163186,
    -0.0036204353,
    0.2059794,
    0.3110437,
    -0.42611456,
    -0.6068721,
    -0.49104723,
    -0.05461399,
    0.1272986,
    -0.00822559,
    0.1884023,
    -0.13636926,
    -0.13377881,
    0.30591944,
    0.487582,
    0.54234695,
    -1.3201939,
    -0.9234476,
    -0.88198483,
    0.3082681,
    0.94588137,
    2.3325715,
    -1.9623413,
    -0.81226206,
    -1.1284567,
    -0.12128122,
    1.1671778,
    3.1298351,
    -0.39097193,
    0.07514274,
    -0.06557368,
    -0.20560668,
    -0.13817734,
    -0.15567772,
    -1.6164923,
    1.0326616,
    0.21477142,
    -2.8077223,
    -2.551806,
    -0.13339965,
    0.38691,
    -0.30760485,
    0.06981112,
    -0.06082517,
    0.08143008,
    0.050636236,
    -0.19882275,
    0.03367009,
    0.3332777,
    0.6907215,
    0.6812265,
    -0.115635045,
    -0.117798366,
    -0.006480599,
    0.08968755,
    -0.014623408,
    -0.24321537,
    -0.06481637,
    -0.4970192,
    -0.21534547,
    0.51982844,
    1.7268767,
    0.004423392,
    0.30211067,
    -0.06706835,
    0.03738013,
    0.28384575,
    0.4953554,
    0.5341444,
    -0.38101324,
    -0.4474343,
    -0.41911015,
    -0.14857827,
    0.30844328,
    0.6750072,
    -0.97720045,
    -0.56535405,
    -0.17083597,
    0.54298985,
    1.5395478,
    1.096076,
    0.45582753,
    0.016415296,
    -0.33029875,
    0.44426945,
    -0.32968402,
    0.9531575,
    0.41011214,
    0.1216629,
    0.6917996,
    0.18339105,
    0.065131195,
    -0.6355726,
    1.5640646,
    0.46537867,
    1.1751071,
    -0.08667284,
    -0.22987743,
    -0.7127392,
    0.4810418,
    0.8214628,
    0.9918113,
    -0.09119934,
    -0.27208114,
    -0.13251854,
    2.426638,
    -0.104075655,
    2.1405137,
    3.3990076,
    0.45329964,
    -4.655621,
    -0.74131274,
    0.7973329,
    1.3661869,
    0.46773735,
    0.5741953,
    0.087222114,
    0.30638045,
    0.33453366,
    0.08256739,
    0.04432858,
    0.3225368,
    -0.021882322,
    0.32148007,
    0.31549633,
    -1.5004859,
    -0.13966632,
    0.45546106,
    -0.40373558,
    -0.24551375,
    0.18895926,
    0.07625407,
    0.0052082036,
    -0.0012640925,
    0.34141248,
    0.15663096,
    2.02077,
    -2.6822398,
    -1.6883273,
    -1.9041578,
    -0.1886726,
    0.25378472,
    0.5179474,
    1.0816803,
    -2.2359698,
    -1.5015856,
    -0.5805032,
    0.79634327,
    0.31051883,
    -1.2014942,
    0.25040248,
    1.1517992,
    1.6989455,
    1.3853481,
    1.6036713,
    0.7625884,
    -0.92504823,
    -0.5216621,
    0.36561957,
    1.1321492,
    1.6092598,
    0.61432403,
    -2.0228667,
    -0.8177022,
    -1.254545,
    -1.1593713,
    -1.2931123,
    -0.3154228,
    -1.1602424,
    -1.9565928,
    0.32626602,
    -0.028468128,
    -0.036849245,
    -0.112456985,
    0.043217946,
    0.08309858,
    0.24185763,
    -0.17654309,
    0.23051652,
    0.17497836,
    0.30518794,
    -0.17468643,
    -0.17940004,
    1.8823787,
    1.3385825,
    1.6534553,
    0.046787873,
    1.9449157,
    1.957238,
    0.5685186,
    1.369992,
    0.49561453,
    0.5704975,
    0.5515624,
    0.14864062,
    0.68902594,
    0.98338044,
    0.8225161,
    2.7357512,
    0.00053430814,
];
