use std::{array, mem};

use half::f16;

use crate::{
    evaluation::policy_eval::sigmoid,
    position::{num_line_symmetries, num_square_symmetries, Komi},
};

use super::policy_eval::policy_offset;

pub const NUM_VALUE_FEATURES_4S: usize = 280;
pub const NUM_POLICY_FEATURES_4S: usize = 176;

pub const NUM_VALUE_FEATURES_5S: usize = 360;
pub const NUM_POLICY_FEATURES_5S: usize = 200;

pub const NUM_VALUE_FEATURES_6S: usize = 384;
pub const NUM_POLICY_FEATURES_6S: usize = 208;

const fn value_padding<const S: usize>() -> usize {
    match S {
        4 => 0,
        5 => 0,
        6 => 4,
        _ => unimplemented!(),
    }
}

const fn policy_padding<const S: usize>() -> usize {
    match S {
        4 => 7,
        5 => 3,
        6 => 1,
        _ => unimplemented!(),
    }
}

#[derive(Debug, Clone, Copy)]
pub struct IndexPair {
    start: usize,
    length: usize,
}

impl IndexPair {
    pub const fn next(start: usize, length: usize) -> (Self, usize) {
        (Self { start, length }, start + length)
    }

    pub fn as_slice<'a, T>(&self, slice: &'a [T]) -> &'a [T] {
        &slice[self.start..self.start + self.length]
    }

    pub fn as_mut_slice<'a, T>(&self, slice: &'a mut [T]) -> &'a mut [T] {
        &mut slice[self.start..self.start + self.length]
    }
}

#[derive(Debug)]
pub struct ValueIndexes<const S: usize> {
    pub first_ply: IndexPair,
    pub second_ply: IndexPair,
    pub flat_psqt: IndexPair,
    pub wall_psqt: IndexPair,
    pub cap_psqt: IndexPair,
    pub supports_psqt: IndexPair,
    pub captives_psqt: IndexPair,
    pub flat_win_this_ply: IndexPair,
    pub flat_win_next_ply: IndexPair,
    pub flat_win_two_ply: IndexPair,
    pub flat_win_three_ply: IndexPair,
    pub one_reserve_left_us: IndexPair,
    pub one_reserve_left_them: IndexPair,
    pub shallow_supports_per_piece: IndexPair,
    pub shallow_supports_per_piece_mobility: IndexPair,
    pub deep_supports_per_piece: IndexPair,
    pub shallow_captives_per_piece: IndexPair,
    pub shallow_captives_per_piece_mobility: IndexPair,
    pub deep_captives_per_piece: IndexPair,
    pub to_move_opening_flatstone_lead: IndexPair,
    pub to_move_middlegame_flatstone_lead: IndexPair,
    pub to_move_endgame_flatstone_lead: IndexPair,
    pub i_number_of_groups: IndexPair,
    pub critical_squares: IndexPair,
    pub critical_square_cap_attack: IndexPair,
    pub flat_next_to_our_stack: IndexPair,
    pub wall_next_to_our_stack: IndexPair,
    pub cap_next_to_our_stack: IndexPair,
    pub num_lines_occupied: IndexPair,
    pub line_control_empty: IndexPair,
    pub line_control_their_blocking_piece: IndexPair,
    pub line_control_other: IndexPair,
    pub sidelined_cap: IndexPair,
    pub fully_isolated_cap: IndexPair,
    pub semi_isolated_cap: IndexPair,
    pub padding: IndexPair,
}

impl<const S: usize> ValueIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;

        let (first_ply, i) = IndexPair::next(i, 1);
        let (second_ply, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (supports_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (captives_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_win_this_ply, i) = IndexPair::next(i, 1);
        let (flat_win_next_ply, i) = IndexPair::next(i, 2);
        let (flat_win_two_ply, i) = IndexPair::next(i, 2);
        let (flat_win_three_ply, i) = IndexPair::next(i, 3);
        let (one_reserve_left_us, i) = IndexPair::next(i, 4);
        let (one_reserve_left_them, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece_mobility, i) = IndexPair::next(i, 4);
        let (deep_supports_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece_mobility, i) = IndexPair::next(i, 4);
        let (deep_captives_per_piece, i) = IndexPair::next(i, 4);
        let (to_move_opening_flatstone_lead, i) = IndexPair::next(i, 9);
        let (to_move_middlegame_flatstone_lead, i) = IndexPair::next(i, 9);
        let (to_move_endgame_flatstone_lead, i) = IndexPair::next(i, 9);
        let (i_number_of_groups, i) = IndexPair::next(i, 3);
        let (critical_squares, i) = IndexPair::next(i, 4);
        let (critical_square_cap_attack, i) = IndexPair::next(i, 6);
        let (flat_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (wall_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (cap_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (num_lines_occupied, i) = IndexPair::next(i, S + 1);
        let (line_control_empty, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_their_blocking_piece, i) =
            IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_other, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (sidelined_cap, i) = IndexPair::next(i, 3);
        let (fully_isolated_cap, i) = IndexPair::next(i, 3);
        let (semi_isolated_cap, i) = IndexPair::next(i, 3);
        let (padding, i) = IndexPair::next(i, value_padding::<S>() / 2);

        assert!(i == num_value_features::<S>() / 2);

        ValueIndexes {
            first_ply,
            second_ply,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            supports_psqt,
            captives_psqt,
            flat_win_this_ply,
            flat_win_next_ply,
            flat_win_two_ply,
            flat_win_three_ply,
            one_reserve_left_us,
            one_reserve_left_them,
            shallow_supports_per_piece,
            shallow_supports_per_piece_mobility,
            deep_supports_per_piece,
            shallow_captives_per_piece,
            shallow_captives_per_piece_mobility,
            deep_captives_per_piece,
            to_move_opening_flatstone_lead,
            to_move_middlegame_flatstone_lead,
            to_move_endgame_flatstone_lead,
            i_number_of_groups,
            critical_squares,
            critical_square_cap_attack,
            flat_next_to_our_stack,
            wall_next_to_our_stack,
            cap_next_to_our_stack,
            num_lines_occupied,
            line_control_empty,
            line_control_their_blocking_piece,
            line_control_other,
            sidelined_cap,
            fully_isolated_cap,
            semi_isolated_cap,
            padding,
        }
    }
}

pub const VALUE_INDEXES_4S: ValueIndexes<4> = ValueIndexes::new();
pub const VALUE_INDEXES_5S: ValueIndexes<5> = ValueIndexes::new();
pub const VALUE_INDEXES_6S: ValueIndexes<6> = ValueIndexes::new();

impl<const S: usize> ValueIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> ValueIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn value_indexes<const S: usize>() -> ValueIndexes<S> {
    match S {
        4 => VALUE_INDEXES_4S.downcast_size(),
        5 => VALUE_INDEXES_5S.downcast_size(),
        6 => VALUE_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

#[derive(Debug)]
pub struct PolicyIndexes<const S: usize> {
    pub flat_psqt_white: IndexPair,
    pub flat_psqt_black: IndexPair,
    pub wall_psqt_white: IndexPair,
    pub wall_psqt_black: IndexPair,
    pub cap_psqt_white: IndexPair,
    pub cap_psqt_black: IndexPair,
    pub move_role_bonus_white: IndexPair,
    pub move_role_bonus_black: IndexPair,
    pub decline_win: IndexPair,
    pub place_to_win: IndexPair,
    pub place_to_draw: IndexPair,
    pub place_to_loss: IndexPair,
    pub place_to_allow_opponent_to_end: IndexPair,
    pub two_flats_left: IndexPair,
    pub three_flats_left: IndexPair,
    pub our_road_stones_in_line: IndexPair,
    pub their_road_stones_in_line: IndexPair,
    pub extend_single_group_base: IndexPair,
    pub extend_single_group_linear: IndexPair,
    pub extend_single_group_to_new_line_base: IndexPair,
    pub extend_single_group_to_new_line_linear: IndexPair,
    pub merge_two_groups_base: IndexPair,
    pub merge_two_groups_linear: IndexPair,
    pub block_merger_base: IndexPair,
    pub block_merger_linear: IndexPair,
    pub place_our_critical_square: IndexPair,
    pub place_their_critical_square: IndexPair,
    pub ignore_their_critical_square: IndexPair,
    pub next_to_our_last_stone: IndexPair,
    pub next_to_their_last_stone: IndexPair,
    pub diagonal_to_our_last_stone: IndexPair,
    pub diagonal_to_their_last_stone: IndexPair,
    pub attack_strong_flats: IndexPair,
    pub blocking_stone_blocks_extensions_of_two_flats: IndexPair,
    pub attack_strong_stack_with_wall: IndexPair,
    pub attack_strong_stack_with_cap: IndexPair,
    pub attack_last_movement: IndexPair,
    pub place_last_movement: IndexPair,
    pub simple_movement: IndexPair,
    pub simple_capture: IndexPair,
    pub simple_self_capture: IndexPair,
    pub pure_spread: IndexPair,
    pub fcd_highest_board: IndexPair,
    pub fcd_highest_stack: IndexPair,
    pub fcd_other: IndexPair,
    pub stack_captured_by_movement: IndexPair,
    pub stack_capture_in_strong_line: IndexPair,
    pub stack_capture_in_strong_line_cap: IndexPair,
    pub move_cap_onto_strong_line: IndexPair,
    pub move_cap_onto_strong_line_with_critical_square: IndexPair,
    pub recapture_stack_pure: IndexPair,
    pub recapture_stack_impure: IndexPair,
    pub move_last_placement: IndexPair,
    pub continue_spread: IndexPair,
    pub move_onto_critical_square: IndexPair,
    pub spread_that_connects_groups_to_win: IndexPair,
    pub padding: IndexPair,
}

pub const POLICY_INDEXES_4S: PolicyIndexes<4> = PolicyIndexes::new();
pub const POLICY_INDEXES_5S: PolicyIndexes<5> = PolicyIndexes::new();
pub const POLICY_INDEXES_6S: PolicyIndexes<6> = PolicyIndexes::new();

impl<const S: usize> PolicyIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> PolicyIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn policy_indexes<const S: usize>() -> PolicyIndexes<S> {
    match S {
        4 => POLICY_INDEXES_4S.downcast_size(),
        5 => POLICY_INDEXES_5S.downcast_size(),
        6 => POLICY_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

impl<const S: usize> PolicyIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;
        let (flat_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (move_role_bonus_white, i) = IndexPair::next(i, 3);
        let (move_role_bonus_black, i) = IndexPair::next(i, 3);
        let (decline_win, i) = IndexPair::next(i, 1);
        let (place_to_win, i) = IndexPair::next(i, 1);
        let (place_to_draw, i) = IndexPair::next(i, 1);
        let (place_to_loss, i) = IndexPair::next(i, 1);
        let (place_to_allow_opponent_to_end, i) = IndexPair::next(i, 3);
        let (two_flats_left, i) = IndexPair::next(i, 2);
        let (three_flats_left, i) = IndexPair::next(i, 2);
        let (our_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (their_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (extend_single_group_to_new_line_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_to_new_line_linear, i) = IndexPair::next(i, 3);
        let (extend_single_group_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_linear, i) = IndexPair::next(i, 3);
        let (merge_two_groups_base, i) = IndexPair::next(i, 3);
        let (merge_two_groups_linear, i) = IndexPair::next(i, 3);
        let (block_merger_base, i) = IndexPair::next(i, 3);
        let (block_merger_linear, i) = IndexPair::next(i, 3);
        let (place_our_critical_square, i) = IndexPair::next(i, 1);
        let (place_their_critical_square, i) = IndexPair::next(i, 4);
        let (ignore_their_critical_square, i) = IndexPair::next(i, 2);
        let (next_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (next_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (attack_strong_flats, i) = IndexPair::next(i, 1);
        let (blocking_stone_blocks_extensions_of_two_flats, i) = IndexPair::next(i, 1);
        let (attack_strong_stack_with_wall, i) = IndexPair::next(i, 6);
        let (attack_strong_stack_with_cap, i) = IndexPair::next(i, 6);
        let (attack_last_movement, i) = IndexPair::next(i, 4);
        let (place_last_movement, i) = IndexPair::next(i, 3);
        let (simple_movement, i) = IndexPair::next(i, 3);
        let (simple_capture, i) = IndexPair::next(i, 4);
        let (simple_self_capture, i) = IndexPair::next(i, 4);
        let (pure_spread, i) = IndexPair::next(i, 2);
        let (fcd_highest_board, i) = IndexPair::next(i, 6);
        let (fcd_highest_stack, i) = IndexPair::next(i, 6);
        let (fcd_other, i) = IndexPair::next(i, 8);
        let (stack_captured_by_movement, i) = IndexPair::next(i, 1);
        let (stack_capture_in_strong_line, i) = IndexPair::next(i, S - 3);
        let (stack_capture_in_strong_line_cap, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line_with_critical_square, i) = IndexPair::next(i, S - 3);
        let (recapture_stack_pure, i) = IndexPair::next(i, 3);
        let (recapture_stack_impure, i) = IndexPair::next(i, 3);
        let (move_last_placement, i) = IndexPair::next(i, 3);
        let (continue_spread, i) = IndexPair::next(i, 3);
        let (move_onto_critical_square, i) = IndexPair::next(i, 3);
        let (spread_that_connects_groups_to_win, i) = IndexPair::next(i, 1);
        let (padding, i) = IndexPair::next(i, policy_padding::<S>());

        assert!(i == num_policy_features::<S>());

        PolicyIndexes {
            flat_psqt_white,
            flat_psqt_black,
            wall_psqt_white,
            wall_psqt_black,
            cap_psqt_white,
            cap_psqt_black,
            move_role_bonus_white,
            move_role_bonus_black,
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            attack_strong_stack_with_wall,
            attack_strong_stack_with_cap,
            attack_last_movement,
            place_last_movement,
            simple_movement,
            simple_capture,
            simple_self_capture,
            pure_spread,
            fcd_highest_board,
            fcd_highest_stack,
            fcd_other,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            recapture_stack_pure,
            recapture_stack_impure,
            move_last_placement,
            continue_spread,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
            padding,
        }
    }
}

pub trait ValueApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn finish(&mut self) -> f32;
}

#[derive(Debug, Clone)]
pub struct Value<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for Value<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Value {
            features: vec![f16::ZERO; num_value_features::<S>() / 2],
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn finish(&mut self) -> f32 {
        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>();

        self.features.fill(f16::ZERO);

        total_value
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalValue<const S: usize> {
    val: f32,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for IncrementalValue<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalValue {
            val: 0.0,
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn finish(&mut self) -> f32 {
        let total_value = self.val;

        self.val = 0.0;

        total_value
    }
}

pub trait PolicyApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn eval_one(&mut self, index_pair: IndexPair, index: usize) {
        self.eval_i8(index_pair, index, 1)
    }
    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.eval(index_pair, index, f16::from(val))
    }
    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.eval(index_pair, index, f16::from_f32(val))
    }
    fn set_immediate_win(&mut self);
    fn has_immediate_win(&self) -> bool;
    fn finish(&mut self, num_moves: usize) -> f16;
}

#[derive(Debug, Clone)]
pub struct Policy<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for Policy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Policy {
            features: vec![f16::ZERO; num_policy_features::<S>()],
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);

        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>() + offset;

        self.features.fill(f16::ZERO);
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalPolicy<const S: usize> {
    val: f32,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for IncrementalPolicy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalPolicy {
            val: 0.0,
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.val += index_pair.as_slice(self.parameters)[index] * val as f32
    }

    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.val += index_pair.as_slice(self.parameters)[index] * val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);
        let total_value = self.val + offset;

        self.val = 0.0;
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

pub const fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub const fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn value_features_4s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_4S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_4S_0KOMI,
        4 => &VALUE_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn policy_features_4s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_4S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_4S_0KOMI,
        4 => &POLICY_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn value_features_5s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_5S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_5S_0KOMI,
        4 => &VALUE_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn policy_features_5s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_5S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_5S_0KOMI,
        4 => &POLICY_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn value_features_6s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_6S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_6S_0KOMI,
        4 => &VALUE_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

pub fn policy_features_6s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_6S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_6S_0KOMI,
        4 => &POLICY_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_0KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    2.4298604,
    3.8704958,
    2.6069407,
    1.4441929,
    2.1969094,
    2.352722,
    2.3692293,
    0.60718554,
    1.3463765,
    2.007144,
    -0.0059250165,
    -0.00050385203,
    -0.00651386,
    0.6210083,
    0.8329756,
    1.0048952,
    0.37340406,
    0.6415944,
    0.8561685,
    3.0187547,
    0.71935475,
    1.3463422,
    0.34067026,
    1.7155155,
    0.24420382,
    0.79242927,
    0.6140218,
    0.3136143,
    -0.16245459,
    -0.31585428,
    -0.057589043,
    -0.04419964,
    -0.20003228,
    -0.66795284,
    -0.6919035,
    1.2268846,
    0.47955742,
    -0.005124028,
    -0.008343117,
    0.45675454,
    2.6696146,
    0.005951524,
    -0.0043248367,
    0.64855355,
    0.10058148,
    -0.005560641,
    0.0036220215,
    -0.28768986,
    -0.17115575,
    -0.0055643534,
    -0.0015320918,
    -0.8989751,
    -0.22581144,
    -0.009827926,
    0.00059686694,
    -0.7555871,
    -0.6750129,
    0.0076304395,
    -0.0060374904,
    0.17038342,
    1.3860676,
    2.246275,
    1.8785685,
    1.7441773,
    1.967547,
    1.5650111,
    1.4430815,
    -0.013343771,
    2.1292303,
    2.2135592,
    1.482288,
    1.3109516,
    1.105196,
    1.0918638,
    0.8540532,
    2.0813994,
    1.742397,
    0.5805264,
    0.59990203,
    1.2190361,
    1.6776142,
    2.2394032,
    2.9036016,
    3.5846522,
    2.45217,
    1.3587985,
    -0.33424968,
    0.29853788,
    0.2279289,
    0.33821267,
    0.57343936,
    0.23069955,
    0.107317284,
    0.008557079,
    -0.0009557083,
    -0.00078115705,
    -0.008447227,
    -0.009191279,
    -0.0018326258,
    -0.021408748,
    -0.30990133,
    0.00022801384,
    -0.36861295,
    -0.35390085,
    -0.072613314,
    0.22793005,
    0.67373675,
    0.13633266,
    -0.5362321,
    0.41670653,
    1.4229106,
    0.06955124,
    -0.16972157,
    0.51207423,
    1.1187439,
    -0.7316789,
    -0.6397346,
    -0.26459128,
    0.39910355,
    -0.6763439,
    -0.54895157,
    -0.04382602,
    0.37547085,
    -0.3477748,
    -0.4795969,
    0.033103127,
    0.8595274,
    -0.8287442,
    -0.5823758,
    0.15059012,
    0.9096278,
    0.0074368455,
    -0.0066757104,
    0.004355209,
    -0.0077824043,
    0.0070885587,
    0.008410923,
    0.0043121455,
    -0.008000903,
    0.0010137418,
    -0.006815267,
    0.0031001903,
    -0.002478423,
    -0.002353027,
    -2.176645,
    -2.233227,
    -2.3460839,
    -0.75853103,
    -1.404795,
    -2.334627,
    0.0035254955,
    0.008046815,
    0.008674609,
    -0.5486583,
    -0.8876932,
    -1.0083133,
    -0.52997726,
    -0.7203394,
    -0.9124549,
    -2.3193507,
    -0.85909486,
    -1.7175533,
    -0.2895423,
    -1.4420053,
    -0.16429552,
    -0.6561721,
    -0.56007534,
    -1.8014185,
    -0.606085,
    -0.55422246,
    0.074700154,
    -1.2537694,
    -0.4920499,
    -0.051006917,
    0.6353766,
    -0.7872399,
    -0.8932555,
    0.004368524,
    0.0076928716,
    -0.9354201,
    -1.8283511,
    0.0029043844,
    0.008424118,
    -0.60739267,
    -0.17945626,
    0.007047029,
    -0.0010688612,
    0.48645222,
    0.25152636,
    -0.006010456,
    -0.0055280733,
    0.5577807,
    -0.048205446,
    0.0069459323,
    -0.0069796084,
    0.8333389,
    0.5831493,
    0.0042860033,
    -0.004753387,
    -0.0653788,
    -1.1220118,
    -1.780472,
    -1.7718289,
    -1.6966674,
    -1.1984828,
    -1.1150855,
    0.0777092,
    -0.0065054954,
    -2.2606184,
    -3.133059,
    -2.752191,
    -2.5767245,
    -2.4164593,
    -2.2839174,
    -1.6619169,
    -2.1682928,
    -1.1619954,
    0.062361944,
    0.08139059,
    -0.763874,
    -1.6891422,
    -2.1890776,
    -2.4436283,
    -3.218858,
    -2.6425128,
    -1.0021273,
    0.28501064,
    -0.13864589,
    -0.3351712,
    -0.22162522,
    -0.18984863,
    -0.23459789,
    0.0038803637,
    0.0071501285,
    -0.0013148449,
    0.008539425,
    -0.00934294,
    -0.0056089186,
    0.008402593,
    -0.019080581,
    0.26899984,
    0.0031465264,
    0.50745463,
    0.31655195,
    0.16243994,
    -0.20065752,
    -0.64016324,
    0.146703,
    0.46224162,
    -0.43771505,
    -1.4141582,
    0.06980858,
    0.383829,
    -0.21684419,
    -1.0757954,
    0.67072153,
    0.6660037,
    0.1487764,
    -0.41707325,
    0.84852356,
    0.5055038,
    -0.06357907,
    -0.6303844,
    0.5837139,
    0.60311544,
    -0.0026713405,
    -0.73381007,
    0.7702327,
    0.62667155,
    -0.11639084,
    -0.8550144,
    0.0023975773,
    -0.0020184517,
    -0.00068451837,
    -0.0031730435,
    0.0038830638,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_0KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    -0.06596815,
    0.14143576,
    0.2643506,
    0.14499849,
    0.107681885,
    0.11073599,
    -0.19013828,
    -0.40654242,
    0.3318426,
    -0.16691944,
    -0.3575065,
    0.23800719,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.33601677,
    -0.041274536,
    0.0013449714,
    -0.29418692,
    -0.54222,
    0.0075244084,
    -2.7454162,
    1.2056162,
    0.74540424,
    -3.2504718,
    -2.7729948,
    0.068721116,
    0.47504744,
    -0.16477276,
    0.18019468,
    -0.13531236,
    0.14152104,
    0.032580495,
    -0.22254677,
    0.49075425,
    1.1202906,
    -0.07768215,
    -0.10285486,
    -0.28730598,
    -0.60267043,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    0.1747276,
    -0.3360676,
    0.35788158,
    1.2172985,
    -0.7322632,
    -0.5023849,
    -0.49644548,
    0.63201225,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    0.6639308,
    0.34448573,
    -0.0077813696,
    -1.4789531,
    -0.5449256,
    0.0020160126,
    0.20559156,
    -0.025478715,
    -0.0057330895,
    0.48247886,
    0.27221236,
    0.0008187201,
    0.79267675,
    1.5803065,
    -0.002397363,
    0.2934291,
    -0.9169082,
    0.00303144,
    0.18601592,
    0.47252977,
    -0.008103551,
    -0.54003847,
    -0.6874615,
    -0.009149382,
    2.5997837,
    0.21279974,
    1.0009149,
    0.00917124,
    0.5581906,
    -3.4829595,
    -0.7885469,
    0.29876935,
    1.3653431,
    0.3458327,
    0.23525056,
    0.27667275,
    0.6695998,
    0.2019845,
    0.33065692,
    -0.2599935,
    0.50598747,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.32448876,
    0.06516934,
    -0.00813673,
    -0.009886575,
    0.04560957,
    -0.2841685,
    0.00021132734,
    -1.8742533,
    -1.0128005,
    0.0011727996,
    0.07729849,
    0.14006491,
    -0.008626261,
    -0.006473,
    -1.0160459,
    -0.7020004,
    -0.0051336214,
    -0.0013411185,
    0.15417725,
    -1.3802054,
    0.25305972,
    1.4399757,
    1.8268988,
    1.968561,
    2.796725,
    1.1202828,
    -1.7660865,
    -0.804423,
    0.20100431,
    1.3501571,
    0.9508624,
    0.054124333,
    -1.1339825,
    -1.1712068,
    -2.0318532,
    -1.4227827,
    -2.0454004,
    -0.13430345,
    -1.5658052,
    -1.0156312,
    0.39389312,
    -0.0530978,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.397977,
    0.7746763,
    -0.002408173,
    0.22021821,
    1.53287,
    0.0077593178,
    0.2637508,
    0.88056475,
    -0.0054027913,
    0.3666799,
    0.14289705,
    0.0036244253,
    -0.39640427,
    -0.31697965,
    0.16356713,
    3.3073342,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_2KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    0.52563196,
    0.6895727,
    0.12051098,
    -0.14463861,
    1.3559645,
    1.4986935,
    1.5103669,
    0.57664406,
    1.2602904,
    1.7125074,
    -0.0059250165,
    -0.00050385203,
    -0.00651386,
    0.29529762,
    0.5914435,
    0.5539336,
    0.27953234,
    0.49553716,
    0.4554167,
    3.731096,
    0.75402933,
    1.7876699,
    0.6090844,
    1.9383496,
    0.13928328,
    0.8691706,
    0.8686578,
    0.46380666,
    0.17571191,
    0.23960954,
    -0.3641506,
    0.05516088,
    0.03848884,
    0.04844327,
    -0.8498393,
    0.6950612,
    0.49150193,
    -0.005124028,
    -0.008343117,
    0.40286937,
    2.0349727,
    0.005951524,
    -0.0043248367,
    0.42071405,
    -0.16990857,
    -0.005560641,
    0.0036220215,
    -0.23138031,
    -0.17884941,
    -0.0055643534,
    -0.0015320918,
    -0.6274872,
    -0.017832387,
    -0.009827926,
    0.00059686694,
    -0.64849114,
    -0.19004714,
    0.0076304395,
    -0.0060374904,
    -0.00733969,
    0.6445007,
    1.2752436,
    2.253157,
    1.2250239,
    1.0642511,
    0.49581653,
    1.0864027,
    -0.827332,
    0.24476194,
    1.0592394,
    0.9327018,
    0.73668,
    0.9983244,
    0.76378316,
    0.29846576,
    0.06678227,
    0.40878716,
    0.065479234,
    -0.10275615,
    0.5438606,
    0.5410977,
    1.2087458,
    2.2994306,
    2.991999,
    4.0046268,
    3.706299,
    -0.27888462,
    0.1797798,
    0.090434186,
    0.37182933,
    0.20708577,
    0.13868359,
    0.039193463,
    0.008557079,
    -0.0009557083,
    -0.00078115705,
    -0.008447227,
    -0.009191279,
    -0.0018326258,
    -0.0011303644,
    -0.17999835,
    0.00022801384,
    -0.11648235,
    -0.5161546,
    -0.28304598,
    0.09118552,
    0.52203393,
    0.0038743126,
    -0.49442217,
    0.2653555,
    0.7613437,
    0.10712364,
    -0.32350272,
    0.24583846,
    0.6095975,
    -0.48286754,
    -0.4977955,
    -0.020869797,
    0.37714654,
    -0.5454034,
    -0.45790127,
    -0.037332527,
    0.49143147,
    -0.61186045,
    -0.44798827,
    0.03516028,
    0.56303954,
    -0.885371,
    -0.45554113,
    0.06427329,
    0.6549117,
    0.0074368455,
    -0.0066757104,
    0.004355209,
    -0.0077824043,
    0.0070885587,
    0.008410923,
    0.0043121455,
    -0.008000903,
    0.0010137418,
    -0.006815267,
    0.0031001903,
    -0.002478423,
    -0.002353027,
    -1.6936111,
    -1.7054353,
    -1.6180553,
    -1.2752738,
    -1.7690604,
    -2.0229201,
    0.0035254955,
    0.008046815,
    0.008674609,
    -0.40506473,
    -0.55994135,
    -0.5115778,
    -0.12348774,
    -0.37379164,
    -0.3769996,
    -2.104562,
    -0.169954,
    -1.0099543,
    -0.025277289,
    -1.0100139,
    0.20886718,
    -0.15721823,
    -0.5310777,
    -0.5525833,
    -0.32562983,
    0.0059612137,
    0.013781554,
    -0.4867603,
    -0.21772908,
    0.24751057,
    0.0051351883,
    -0.58981043,
    -0.58239776,
    0.004368524,
    0.0076928716,
    -0.7355953,
    -1.4319865,
    0.0029043844,
    0.008424118,
    -0.37486622,
    0.04782088,
    0.007047029,
    -0.0010688612,
    0.20561983,
    0.25319397,
    -0.006010456,
    -0.0055280733,
    0.54855984,
    -0.09351131,
    0.0069459323,
    -0.0069796084,
    0.2966056,
    0.110562734,
    0.0042860033,
    -0.004753387,
    -1.7771188,
    -1.9777857,
    -1.553316,
    -1.3561604,
    -0.19463855,
    -0.6260654,
    1.4061255,
    0.005834893,
    -0.030551918,
    -2.5539973,
    -2.3062813,
    -1.888228,
    -1.8257332,
    -2.0689764,
    -1.719846,
    -1.7233189,
    -1.3386667,
    -0.26976877,
    1.2507838,
    0.2428695,
    -0.08113176,
    -1.0281936,
    -2.065985,
    -2.4030273,
    -1.3284899,
    -0.64843744,
    -0.21425116,
    0.2288029,
    0.0007445662,
    -0.08536966,
    -0.15847558,
    -0.13997893,
    -0.12700516,
    0.3761492,
    0.0071501285,
    -0.0013148449,
    0.008539425,
    -0.00934294,
    -0.0056089186,
    0.008402593,
    -0.017137634,
    0.39247382,
    0.0031465264,
    0.28978127,
    0.091555744,
    -0.012570185,
    -0.17540117,
    -0.45674232,
    0.014244745,
    0.51806736,
    0.005419742,
    -0.69725937,
    0.10738103,
    0.5749198,
    -0.0079256985,
    -0.33500484,
    0.13477127,
    0.059413154,
    -0.030558169,
    -0.5873188,
    -0.18123595,
    -0.09555541,
    -0.51754075,
    -0.77751696,
    0.4091395,
    0.37045053,
    -0.118455365,
    -0.6200585,
    0.7349613,
    0.4705866,
    -0.09459881,
    -0.44987735,
    0.0023975773,
    -0.0020184517,
    -0.00068451837,
    -0.0031730435,
    0.0038830638,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_2KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    0.3835006,
    0.21164729,
    0.5567637,
    0.14972319,
    0.008378243,
    -0.43465084,
    -0.7308303,
    -0.8912839,
    0.46212968,
    -0.43907836,
    0.26626498,
    0.5782282,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.4975553,
    0.15077943,
    0.0013449714,
    -0.4241401,
    -0.4088393,
    0.0075244084,
    -3.2364414,
    0.9161514,
    0.5318693,
    -2.230449,
    -4.504568,
    -0.487717,
    0.6291668,
    -0.73886293,
    0.26118273,
    -0.27261165,
    0.12881532,
    0.1777136,
    -0.011507088,
    0.41689792,
    1.1819894,
    -0.14281727,
    -0.12822403,
    -0.4899795,
    -0.7057814,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    -0.038640175,
    -0.48866045,
    0.18388642,
    2.1011872,
    -0.47701856,
    -0.35595262,
    -0.5488175,
    -0.12425026,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    -0.0737323,
    1.6342262,
    -0.0077813696,
    0.8013023,
    -0.2317711,
    0.0020160126,
    0.59806335,
    -0.9970204,
    -0.0057330895,
    0.07285249,
    0.6827554,
    0.0008187201,
    0.9157639,
    0.626506,
    -0.002397363,
    -0.088837735,
    0.38987082,
    0.00303144,
    0.2895544,
    -0.16646424,
    -0.008103551,
    -0.26244026,
    -0.4901274,
    -0.009149382,
    2.3455992,
    -0.7211382,
    1.9804211,
    0.00917124,
    0.5224504,
    -4.4372244,
    -0.8496559,
    0.4749193,
    1.473498,
    0.45706263,
    0.046547048,
    0.25537905,
    0.77724373,
    0.07417753,
    0.39354962,
    -0.6581425,
    0.71233255,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.5941038,
    -0.046199616,
    -0.00813673,
    -0.009886575,
    0.1387866,
    -0.22598192,
    0.00021132734,
    -2.1441894,
    -1.8108326,
    0.0011727996,
    -0.16316642,
    0.30345392,
    -0.008626261,
    -0.006473,
    -1.3621367,
    -0.119089246,
    -0.0051336214,
    -0.0013411185,
    0.010755843,
    -1.2026048,
    0.38548076,
    1.398525,
    1.9160999,
    2.1099184,
    2.0770369,
    1.4328448,
    -1.7100422,
    -0.6515236,
    0.332164,
    0.62545145,
    0.0065994086,
    -0.005360393,
    -0.9618395,
    -1.1140851,
    -1.7814239,
    -0.5971449,
    -1.9552374,
    -0.23968147,
    -1.2191556,
    -1.1778564,
    0.42183256,
    -0.11105158,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.4999874,
    0.31543893,
    -0.002408173,
    -0.93778354,
    1.1441715,
    0.0077593178,
    0.79672486,
    0.83366203,
    -0.0054027913,
    0.49028045,
    0.045144238,
    0.0036244253,
    -0.30533037,
    -0.3648391,
    0.09491095,
    3.3036993,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_0KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    1.1972758,
    2.0695524,
    1.2542441,
    1.5436742,
    0.8169561,
    0.80575347,
    0.8467236,
    1.6308086,
    1.6921701,
    1.6292949,
    1.6269044,
    1.5975564,
    1.5512186,
    0.50824684,
    0.9510083,
    1.0025207,
    1.4448718,
    1.4914145,
    1.7603734,
    -0.0074883453,
    0.8084535,
    0.9497882,
    1.5858629,
    1.8333187,
    2.1459985,
    0.5235906,
    0.60308146,
    0.5996238,
    0.6092406,
    0.67819536,
    0.74613774,
    0.4443709,
    0.59904623,
    0.58137137,
    0.66090757,
    0.66875327,
    0.6665273,
    2.279428,
    0.71682143,
    1.6747433,
    0.45677945,
    1.5958358,
    0.23985705,
    0.8409804,
    1.1851839,
    1.0368658,
    0.22187957,
    0.010078146,
    -0.527144,
    0.8181287,
    0.10910366,
    -0.12146731,
    -0.76553756,
    0.7054867,
    0.88304657,
    1.0572449,
    0.6502819,
    0.57667613,
    0.90869814,
    2.043404,
    1.6582317,
    0.58781826,
    0.09171928,
    -0.47798863,
    0.26264402,
    -0.33455813,
    -0.33624014,
    -0.5527426,
    -0.22762357,
    -0.43842942,
    0.20745593,
    0.31614825,
    0.124690324,
    -0.43464637,
    -0.5135018,
    -0.68360436,
    -0.5488052,
    0.103771746,
    0.2741284,
    0.85683215,
    1.3422097,
    1.5018522,
    1.7112043,
    2.0187078,
    0.41868082,
    0.0381746,
    1.4854143,
    1.9816804,
    1.7115693,
    1.522338,
    1.2978679,
    1.0446432,
    0.860363,
    0.54741335,
    0.44771466,
    0.20414796,
    0.44452968,
    0.80102366,
    1.0404513,
    1.2740883,
    1.6270053,
    1.9319665,
    2.190622,
    2.5970206,
    -0.2578162,
    -0.15055948,
    -0.0015622632,
    0.41285843,
    0.22307098,
    0.19630277,
    0.016672986,
    2.0465226,
    1.0799766,
    0.06592965,
    0.19409089,
    0.006248293,
    -0.083474085,
    0.021852983,
    -0.20972648,
    -0.1559312,
    0.0011965558,
    -0.80951476,
    -0.35148513,
    -0.02617183,
    0.37907404,
    0.8535509,
    0.057740804,
    -0.37498063,
    0.10323767,
    0.7110274,
    1.1583922,
    0.020869935,
    -0.5086865,
    0.106751576,
    0.7270699,
    1.0962601,
    0.0035673971,
    -0.71868646,
    -0.09827257,
    0.64803725,
    1.0787138,
    -0.6052154,
    -0.7478832,
    -0.40590072,
    -0.15999526,
    0.41170037,
    -0.8368714,
    -0.87513846,
    -0.3954223,
    0.1631176,
    0.7966903,
    -0.8180864,
    -0.806042,
    -0.29120553,
    0.2945214,
    0.871017,
    -0.31725365,
    -0.37217182,
    -0.16373815,
    0.24087217,
    0.5443514,
    -0.6779322,
    -0.7826665,
    -0.23378766,
    0.43495023,
    1.0222434,
    -0.8207742,
    -0.77489096,
    -0.20065364,
    0.45665872,
    1.2040466,
    -0.33159503,
    -0.060227886,
    0.17309275,
    -1.0549828,
    -0.45849985,
    -0.46190938,
    -0.4218675,
    -0.14846545,
    -0.27582264,
    0.009378757,
    0.0029043844,
    0.008424118,
    -0.0050589656,
    -0.0051581357,
    0.007047029,
    -0.0010688612,
    -1.7033813,
    -1.6062411,
    -1.6400293,
    -1.6612122,
    -1.6807895,
    -1.5529777,
    -0.42837542,
    -0.7250733,
    -0.93395126,
    -1.2933791,
    -1.4494246,
    -1.5101709,
    -0.2427129,
    -0.558196,
    -0.53604126,
    -1.4756106,
    -1.7552328,
    -2.0842547,
    -0.5386639,
    -0.7247154,
    -0.73449653,
    -0.67182446,
    -0.6976339,
    -0.71993995,
    -0.4237215,
    -0.526492,
    -0.473312,
    -0.62446165,
    -0.6225371,
    -0.61612314,
    -2.2534294,
    -0.9226293,
    -1.5235544,
    -0.5803333,
    -1.4423274,
    -0.20136343,
    -0.693403,
    -0.9695765,
    -1.3238896,
    -0.27156687,
    0.12342928,
    0.39336997,
    -1.0589885,
    -0.18283069,
    0.2684437,
    0.73796105,
    -0.6703655,
    -0.68068236,
    -0.66759044,
    -1.0901951,
    -0.5106813,
    -0.96412265,
    -1.9438301,
    -0.85578424,
    -0.41996324,
    -0.05746117,
    -0.3703086,
    -0.12315621,
    0.37754792,
    0.25224248,
    0.1764429,
    0.2722863,
    0.43875793,
    0.023116589,
    -0.1834752,
    -0.09653374,
    0.41532075,
    0.518231,
    0.94465345,
    0.35518748,
    0.024738887,
    0.11807369,
    -0.88900566,
    -1.0449126,
    -1.2628095,
    -1.5389984,
    -0.38585764,
    -0.049278054,
    -0.001203401,
    -2.1516373,
    -1.8969449,
    -1.6666429,
    -1.4373965,
    -1.1399691,
    -0.96070504,
    -0.7591397,
    -0.57233524,
    -0.38420576,
    -0.5134428,
    -0.8149971,
    -1.1328924,
    -1.4882698,
    -1.7303176,
    -1.9398566,
    -2.362598,
    -2.628697,
    -2.7015107,
    0.29946396,
    0.16395292,
    -0.016732011,
    -0.2179417,
    -0.08594879,
    -0.12179102,
    -0.031838257,
    -1.133217,
    -0.65203005,
    -0.07354866,
    -0.13969897,
    -0.053670775,
    0.2387594,
    -0.02341763,
    0.21328878,
    0.16788854,
    0.0029841808,
    0.70596975,
    0.4277372,
    0.07245287,
    -0.3538455,
    -0.82144934,
    0.059238266,
    0.4682887,
    0.07421347,
    -0.5396107,
    -1.1266553,
    0.009628562,
    0.56731033,
    -0.07952969,
    -0.66858876,
    -1.1137723,
    -0.013439064,
    0.6720101,
    0.09254162,
    -0.6232515,
    -1.0895752,
    0.59844166,
    0.7503044,
    0.35989845,
    0.06809973,
    -0.30433115,
    0.7656578,
    0.87432474,
    0.3256659,
    -0.17850627,
    -0.78100276,
    0.7934581,
    0.76180786,
    0.2473535,
    -0.22395408,
    -0.85138994,
    0.17839378,
    0.38019207,
    0.1670859,
    -0.35043854,
    -0.7185335,
    0.66553617,
    0.7800855,
    0.25535333,
    -0.3985635,
    -0.9379245,
    0.8315205,
    0.81046355,
    0.19371231,
    -0.48908424,
    -1.06029,
    0.24463423,
    0.37040946,
    0.13473278,
    0.76268834,
    0.40193778,
    0.49190488,
    0.3941561,
    0.17311601,
    0.36899433,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_0KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    -0.21254763,
    0.23103847,
    -0.033314772,
    0.28951204,
    0.08258201,
    -0.20170505,
    -0.083164066,
    0.039200466,
    -0.00088396505,
    0.3021171,
    0.11830643,
    -0.081436746,
    -0.40565103,
    -0.37145954,
    -0.18355277,
    0.06397571,
    0.20453936,
    0.55752325,
    -0.12067064,
    -0.30509105,
    -0.22406316,
    0.04068911,
    0.06334039,
    0.038877312,
    -2.746777,
    -0.87377214,
    -0.65470624,
    0.73748547,
    1.1899408,
    2.4166262,
    -0.82226,
    -1.3962785,
    -1.4452674,
    0.5082308,
    1.2789531,
    2.7618878,
    -0.3863811,
    0.031400807,
    -0.102757595,
    -0.38964626,
    -0.14711878,
    -0.31159613,
    -2.9462645,
    1.2216566,
    0.49116233,
    -4.1368756,
    -3.0489886,
    0.14062,
    0.4538722,
    -0.20252825,
    0.1369588,
    -0.058979962,
    0.08831377,
    0.02167715,
    -0.26413515,
    0.028735323,
    0.47112805,
    0.67481583,
    -0.037136614,
    -0.023578765,
    0.06294667,
    -0.05659834,
    -1.2630483,
    0.25168982,
    0.096158154,
    0.43390813,
    1.3263559,
    -0.38228187,
    0.30753988,
    -0.17709245,
    0.021742836,
    0.3967858,
    0.37994313,
    -0.5040257,
    -0.60063547,
    -0.5784962,
    -0.09444315,
    0.42124468,
    -0.95363337,
    -0.8204556,
    -0.515455,
    0.36224493,
    3.6014647,
    0.6930546,
    -0.022836408,
    1.229127,
    -0.20067202,
    -0.88029164,
    -1.945374,
    0.27076137,
    0.24485452,
    -0.2529798,
    0.3806981,
    -0.1388048,
    -0.43375793,
    1.5184788,
    0.4213168,
    1.0030801,
    -0.12647864,
    -0.28902504,
    -0.68267906,
    0.3738028,
    0.69471484,
    1.1517682,
    -0.16151088,
    -0.5155371,
    -0.17652579,
    2.4710944,
    0.30520877,
    2.0582628,
    1.0057538,
    0.5753131,
    -4.1801777,
    -0.5127082,
    0.45404467,
    1.4079078,
    0.3417027,
    0.39399534,
    0.1540643,
    0.2801745,
    0.3059642,
    0.2046346,
    -0.05043553,
    0.38525426,
    0.006237678,
    0.3969141,
    0.18871525,
    -1.5612092,
    -0.39385808,
    0.7173354,
    -0.24273492,
    -0.060208935,
    0.20501433,
    0.06431221,
    0.007810466,
    -0.006842167,
    0.25922537,
    0.22373736,
    1.4958718,
    -2.2605436,
    -1.6751494,
    -1.7748834,
    -0.15428533,
    -0.13730817,
    0.3625118,
    0.7318449,
    -2.1013966,
    -1.6390495,
    -0.58728755,
    0.705842,
    0.05825597,
    -1.3842419,
    0.5513746,
    1.3413002,
    1.6110371,
    1.1969258,
    1.6104766,
    0.26784024,
    -0.82374805,
    -0.27678168,
    0.63337976,
    1.37859,
    1.5559744,
    -0.2600439,
    -1.5502057,
    -0.7311096,
    -0.89582264,
    -0.8938125,
    -1.1783751,
    -0.29525974,
    -1.3265866,
    -2.8699765,
    0.3670057,
    -0.02602606,
    -0.094160676,
    0.038038492,
    0.18733682,
    0.1730221,
    0.4983536,
    -0.6600161,
    0.07679693,
    1.6442226,
    0.74923706,
    1.2906911,
    -0.0030353356,
    1.5110451,
    1.8540987,
    0.46657535,
    1.0854816,
    0.6397842,
    0.38965192,
    0.4017657,
    0.15735355,
    0.2403061,
    0.20836167,
    0.8231178,
    3.0737865,
    -0.0031571696,
    -0.0045039677,
    -0.0037830565,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_2KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    0.7431918,
    0.8846564,
    0.1845974,
    0.28660935,
    -0.061812345,
    -0.17662258,
    0.053832892,
    1.4672474,
    1.4385068,
    1.5482235,
    1.4727604,
    1.5351564,
    1.3637509,
    0.45801193,
    0.6665342,
    0.64514804,
    0.8651726,
    1.0164679,
    0.9695221,
    0.5295546,
    0.6881439,
    0.8086551,
    1.3799706,
    1.6979948,
    1.7989008,
    0.5160399,
    0.5850857,
    0.65952677,
    0.6444313,
    0.69192976,
    0.69345033,
    0.3760276,
    0.46164772,
    0.4591789,
    0.561115,
    0.5929972,
    0.51636547,
    3.4950302,
    0.9697058,
    2.0151951,
    0.7794253,
    1.7577865,
    0.4409191,
    0.7163169,
    1.4060153,
    1.0667478,
    0.091189615,
    -0.1697639,
    -0.38422424,
    0.55636436,
    0.08508141,
    -0.072667666,
    -0.37555075,
    0.6816124,
    0.65859884,
    1.3348441,
    0.46856806,
    0.29430506,
    0.85798395,
    1.3738317,
    1.4838951,
    0.25269234,
    -0.15869208,
    0.539253,
    0.013746569,
    -0.27717456,
    -0.15855353,
    -0.60349315,
    -0.17649274,
    -0.42509958,
    0.003723758,
    0.44198614,
    0.08058394,
    -0.5267777,
    -0.40069315,
    -0.3516375,
    -0.48329446,
    -0.005224982,
    0.041406307,
    1.1384104,
    1.6430545,
    1.89399,
    2.057301,
    2.2064188,
    1.7571275,
    0.31434548,
    0.89554286,
    1.912994,
    1.8336282,
    1.7972158,
    1.3156295,
    0.9926529,
    0.5780983,
    0.23003992,
    -0.14753038,
    0.155181,
    0.2998766,
    0.5589297,
    0.71200544,
    0.88540566,
    1.1329614,
    1.2310313,
    1.4092203,
    1.7211108,
    -0.2588201,
    -0.13884483,
    0.008613938,
    0.28169343,
    0.08776774,
    0.1318394,
    0.021283418,
    2.9635968,
    0.996956,
    0.08707932,
    0.18143943,
    -0.004912998,
    -0.198776,
    0.01884541,
    -0.17474571,
    -0.14637865,
    0.0011965558,
    -0.7656875,
    -0.39074624,
    -0.10391989,
    0.3126952,
    0.76296014,
    -0.075470746,
    -0.5866744,
    -0.068876825,
    0.5756323,
    1.0835325,
    -0.02998161,
    -0.6307077,
    -0.037839457,
    0.5734767,
    1.0349436,
    -0.031387184,
    -0.64293295,
    -0.12392305,
    0.6076983,
    1.0771825,
    -0.7621117,
    -0.8090763,
    -0.37700135,
    0.014109384,
    0.48454392,
    -0.8088335,
    -0.8578106,
    -0.35564026,
    0.18188913,
    0.77194166,
    -0.75652564,
    -0.778454,
    -0.30349708,
    0.23439799,
    0.7581506,
    -0.2423661,
    -0.4244477,
    -0.13820232,
    0.2818641,
    0.66440654,
    -0.68792826,
    -0.70340896,
    -0.21143463,
    0.39280403,
    0.9656693,
    -0.7637005,
    -0.7540897,
    -0.17299089,
    0.43889934,
    1.0089946,
    -0.37335247,
    -0.45606005,
    -0.18274784,
    -0.60404956,
    -0.27178296,
    -0.27405828,
    -0.16709863,
    0.059404396,
    -0.39653376,
    0.009378757,
    0.0029043844,
    0.008424118,
    -0.0050589656,
    -0.0051581357,
    0.007047029,
    -0.0010688612,
    -1.5830702,
    -1.6385546,
    -1.5797147,
    -1.5743935,
    -1.5680804,
    -1.5137986,
    -0.7889628,
    -1.1173724,
    -1.0997547,
    -1.467508,
    -1.5406178,
    -1.6039227,
    -0.021810303,
    -0.58638704,
    -0.5613051,
    -1.3020766,
    -1.5236421,
    -1.8378314,
    -0.4649411,
    -0.67358524,
    -0.7582045,
    -0.63692844,
    -0.7086263,
    -0.6535926,
    -0.32211593,
    -0.43790895,
    -0.4598203,
    -0.48276028,
    -0.52044547,
    -0.4889638,
    -2.8385801,
    -0.65240425,
    -2.1945267,
    -0.25416422,
    -1.304083,
    0.106970906,
    -0.6032774,
    -1.0520804,
    -1.0563271,
    -0.31863844,
    0.16054754,
    0.19535187,
    -0.8101712,
    -0.19007038,
    0.2101425,
    0.3133252,
    -0.59581226,
    -0.7559469,
    -1.1133054,
    -0.8680103,
    -0.42127725,
    -0.6430208,
    -1.2472246,
    -0.85559905,
    -0.3885483,
    0.065331295,
    -0.29931304,
    0.06735784,
    0.32065412,
    0.26069328,
    0.5534797,
    0.07244746,
    0.42660657,
    -0.08229594,
    -0.19249184,
    0.075703025,
    0.29228482,
    0.39812854,
    0.5283129,
    0.31124735,
    0.2431865,
    -0.3367002,
    -0.37088707,
    -0.4645384,
    -0.7031541,
    -0.60153,
    -0.18121213,
    -0.017533395,
    -0.0044962317,
    -2.4705508,
    -1.893978,
    -1.5178452,
    -1.2200019,
    -0.67537034,
    -0.60710686,
    -0.5934572,
    -0.27150482,
    -0.18240376,
    -1.1299914,
    -1.3553871,
    -1.4229317,
    -1.6493583,
    -1.8613967,
    -2.0241337,
    -2.329168,
    -2.6611326,
    -2.4098756,
    0.23337023,
    0.170565,
    0.022355814,
    -0.22719565,
    -0.04757354,
    -0.15240987,
    0.07128969,
    -1.1154665,
    -0.42575172,
    -0.048117697,
    -0.121634066,
    -0.01303587,
    0.07051585,
    -0.028084971,
    0.2529485,
    0.22525309,
    0.0013488671,
    0.64448327,
    0.33072782,
    -0.005944722,
    -0.37885523,
    -0.7880831,
    -0.07397333,
    0.32537824,
    -0.05425748,
    -0.4687388,
    -0.9407522,
    -0.04122283,
    0.45277965,
    -0.06534508,
    -0.5871598,
    -0.98759145,
    -0.0483935,
    0.58433414,
    0.10861595,
    -0.45415074,
    -1.0375292,
    0.34515992,
    0.4990248,
    0.21451426,
    -0.0066204877,
    -0.5616248,
    0.6079144,
    0.6757527,
    0.22366336,
    -0.21561147,
    -0.66862094,
    0.659168,
    0.61399204,
    0.20180336,
    -0.2438921,
    -0.864213,
    0.33813357,
    0.38959002,
    0.13947742,
    -0.18040363,
    -0.36063242,
    0.6292542,
    0.61921537,
    0.17609297,
    -0.35305586,
    -0.8407019,
    0.74546945,
    0.69297165,
    0.19440667,
    -0.3717661,
    -0.95908004,
    0.17920223,
    0.10275268,
    0.037320703,
    0.519833,
    0.09148508,
    0.31934044,
    0.07971477,
    -0.019601805,
    0.20833403,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_2KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    0.13053814,
    0.2594758,
    0.24701957,
    0.32714072,
    0.2772792,
    -0.13828218,
    -0.10215987,
    0.098732464,
    0.019896906,
    -0.056102987,
    -0.07790267,
    -0.42510068,
    -0.30549508,
    -0.45333365,
    -0.52566814,
    -0.29246622,
    -0.28865135,
    -0.26258516,
    0.11082738,
    0.17156202,
    -0.038298223,
    0.46970895,
    0.49330792,
    0.45982635,
    -1.5306015,
    -0.70623446,
    -1.6051459,
    1.1686573,
    1.569235,
    2.0058358,
    -2.5606222,
    -1.2750763,
    -2.0411723,
    0.8546261,
    1.8828146,
    2.5776637,
    -0.54405427,
    0.17359827,
    -0.07840562,
    -0.24876921,
    -0.18755311,
    -0.26911703,
    -3.0770643,
    1.1082592,
    0.26119882,
    -2.5300553,
    -2.871422,
    0.03775389,
    0.4238567,
    -0.33088768,
    0.10647789,
    -0.13209525,
    0.08560816,
    0.0468911,
    -0.21627295,
    0.05250266,
    0.38945135,
    0.81790227,
    -0.23717421,
    -0.22604689,
    -0.19218688,
    -0.20800717,
    -0.033787068,
    0.122389324,
    -0.10022763,
    -0.073142864,
    0.6767682,
    -0.04690488,
    0.33146432,
    -0.22365022,
    -0.0036192038,
    0.46967515,
    0.51455325,
    -0.2567931,
    -0.40734252,
    -0.42442977,
    -0.001470779,
    0.22078364,
    -1.2574711,
    -0.85755,
    -0.74906814,
    -0.17770536,
    3.6172705,
    0.54112595,
    0.6423261,
    0.9667451,
    0.199188,
    -1.3389384,
    0.16624917,
    0.19690222,
    -0.4323959,
    -0.23050337,
    0.34784153,
    0.61946857,
    -0.7219571,
    1.2463146,
    0.5738733,
    2.0701928,
    0.049495548,
    -0.42689493,
    -1.0372397,
    0.26199716,
    0.7308859,
    1.6175814,
    -0.0076032556,
    -0.68225515,
    0.12284207,
    2.349499,
    0.1210995,
    2.3559947,
    1.0110165,
    0.4826661,
    -4.137684,
    -0.87189615,
    0.58148867,
    1.5087106,
    0.51515806,
    0.27801824,
    0.1363943,
    0.39705855,
    0.3311712,
    0.13834442,
    -0.009231192,
    0.37948412,
    0.013899716,
    0.34986228,
    0.20538929,
    -1.3363253,
    -0.6954224,
    -0.26191995,
    -0.23036456,
    -0.17417376,
    0.21034743,
    0.08639803,
    0.009099964,
    0.0013535284,
    0.37892112,
    0.085819654,
    1.4048743,
    -2.3133554,
    -1.2493757,
    -1.597994,
    -0.20851141,
    -0.025360083,
    0.2432856,
    0.7032871,
    -1.9057463,
    -1.1427703,
    -0.49652052,
    0.84754634,
    0.08384458,
    -1.2245532,
    0.5221889,
    1.2940357,
    1.6118815,
    1.3088297,
    1.4081663,
    -0.2697331,
    -0.76520354,
    -0.34188744,
    0.6127755,
    1.3039353,
    1.4138254,
    0.12542252,
    -1.4124713,
    -0.9411064,
    -0.9240627,
    -0.92811567,
    -1.1624233,
    -0.3372181,
    -1.4078445,
    -2.251844,
    0.36175016,
    -0.023277655,
    -0.08955618,
    0.0533145,
    0.14049543,
    -0.019719895,
    -0.007010526,
    -0.096855216,
    -0.22378309,
    1.7177029,
    0.7570125,
    1.2928087,
    0.07078977,
    1.540554,
    1.9195119,
    0.41963235,
    0.9632119,
    0.60895467,
    0.32042414,
    0.36884412,
    0.16893406,
    0.3075245,
    -0.011423582,
    0.7850744,
    3.0451703,
    0.0,
    0.0,
    0.0,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_0KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.52677685,
    1.3776163,
    0.72810984,
    0.74450064,
    0.35262477,
    0.22489741,
    0.10288154,
    1.6575699,
    1.6362503,
    1.6762651,
    1.7296436,
    1.7553563,
    1.7154024,
    0.71689695,
    0.94949853,
    0.98590076,
    1.191967,
    1.2423357,
    1.3419768,
    -0.03979104,
    0.7728359,
    0.9023577,
    1.1651727,
    1.4857488,
    1.7583991,
    0.3961836,
    0.49722832,
    0.49863383,
    0.5478813,
    0.6034816,
    0.6227017,
    0.39394715,
    0.5111089,
    0.51972556,
    0.58713776,
    0.63106626,
    0.64295465,
    2.323359,
    0.69057,
    1.7722232,
    0.35910806,
    1.414186,
    0.12294925,
    0.55165684,
    1.2703333,
    1.1485337,
    0.15646523,
    -0.10737495,
    -0.5946889,
    0.72604567,
    0.14227667,
    -0.1342823,
    -0.8233654,
    0.64035136,
    0.8066801,
    0.41075405,
    0.7230843,
    0.40080222,
    0.53828645,
    1.4745706,
    0.79656696,
    0.5682789,
    -0.0876107,
    0.022663163,
    0.08228226,
    -0.31862795,
    -0.15351166,
    -0.42730877,
    -0.1122215,
    -0.35489747,
    0.020045422,
    0.38068625,
    0.004962443,
    -0.33914983,
    -0.34676778,
    -1.17509,
    -0.42234838,
    0.02962439,
    -0.033302523,
    0.4955061,
    0.93817747,
    1.0390549,
    1.2134665,
    1.9667195,
    0.6322555,
    0.13329017,
    0.8788953,
    1.5319477,
    1.4187906,
    1.1952261,
    1.1205842,
    0.93437505,
    0.8501854,
    0.9264345,
    0.43751803,
    0.7940154,
    0.9416509,
    1.0048789,
    1.0986173,
    1.0722828,
    1.0359914,
    1.1049614,
    1.1191949,
    1.2196469,
    -0.20725995,
    -0.2031392,
    0.01741985,
    0.3016369,
    0.09408706,
    0.19695292,
    0.068682216,
    1.447181,
    0.84525305,
    0.04215191,
    0.1431699,
    0.059723984,
    -0.1665012,
    0.036800664,
    -0.16661787,
    -0.13958026,
    0.0011965558,
    -0.3684968,
    -0.2117921,
    -0.13463981,
    -0.018338695,
    0.20830256,
    0.46716586,
    0.039810926,
    -0.2838245,
    -0.08379958,
    0.19598818,
    0.6058959,
    0.90774053,
    0.01782463,
    -0.25503814,
    -0.0028462098,
    0.24673478,
    0.68284255,
    0.8533692,
    -0.017771948,
    -0.34813178,
    -0.03510451,
    0.27883953,
    0.6572555,
    0.8052202,
    -0.5137994,
    -0.56117445,
    -0.43358406,
    -0.29591548,
    -0.07366374,
    0.14917396,
    -0.67243534,
    -0.7215666,
    -0.4997469,
    -0.22306706,
    -0.035236914,
    0.30495173,
    -0.68838894,
    -0.68133384,
    -0.42564332,
    -0.13869901,
    0.14689483,
    0.4709461,
    -0.09716116,
    -0.22113325,
    -0.2079032,
    -0.07112636,
    0.2407405,
    0.57027286,
    -0.44574216,
    -0.42779562,
    -0.21858782,
    0.04059342,
    0.428635,
    0.8151522,
    -0.60600865,
    -0.536882,
    -0.29193303,
    0.04061725,
    0.4529686,
    0.7957314,
    -0.5765388,
    -0.14659385,
    -0.14029077,
    -0.5765928,
    -0.80026805,
    -0.40756023,
    -0.43321082,
    -0.23226875,
    -0.11596294,
    -0.0055280733,
    -0.00082149263,
    -0.005897157,
    0.0069459323,
    -0.0069796084,
    -0.0075576873,
    -0.00044307671,
    0.0042860033,
    -0.004753387,
    -1.7108212,
    -1.6927016,
    -1.6755744,
    -1.689655,
    -1.741076,
    -1.774119,
    -0.45203015,
    -0.54393435,
    -0.77253133,
    -0.8851289,
    -1.0538572,
    -1.2347349,
    -0.22589399,
    -0.5443098,
    -0.6236035,
    -1.0709316,
    -1.3465515,
    -1.7902461,
    -0.4861489,
    -0.5390469,
    -0.6011688,
    -0.57005966,
    -0.688834,
    -0.6969319,
    -0.45658216,
    -0.47412288,
    -0.4579253,
    -0.59335184,
    -0.60064656,
    -0.61365145,
    -2.454331,
    -1.0519127,
    -1.7678195,
    -0.6109258,
    -1.6602814,
    -0.13720523,
    -0.7395815,
    -1.3633318,
    -1.4635445,
    -0.22373909,
    0.075237766,
    0.6203086,
    -0.90246403,
    -0.28566217,
    0.052646674,
    0.813734,
    -0.5791051,
    -0.8580506,
    -1.2939769,
    -0.61700624,
    -0.3404574,
    -0.35545766,
    -0.8733906,
    -0.7765755,
    -0.33031693,
    0.073283605,
    -0.049641673,
    0.10915266,
    0.38492873,
    0.21463168,
    0.5315532,
    0.09083994,
    0.34069005,
    -0.019084679,
    0.03862203,
    0.056769133,
    0.3394418,
    0.63759005,
    0.5768151,
    0.4467732,
    0.08184431,
    0.1664119,
    -0.95797974,
    -1.0814726,
    -1.2686728,
    -1.531486,
    -0.23283865,
    -0.019619396,
    -0.0028463053,
    -1.5463454,
    -1.3720031,
    -1.2901881,
    -1.09623,
    -1.0008837,
    -0.77542424,
    -0.6258004,
    -0.76104313,
    -0.16855958,
    -1.1657301,
    -1.170087,
    -1.2152046,
    -1.1941228,
    -1.1473842,
    -1.248301,
    -1.3551257,
    -1.4500514,
    -1.744627,
    0.26207352,
    0.22698463,
    0.005967949,
    -0.2175663,
    -0.08241258,
    -0.17570959,
    -0.04003892,
    -1.298933,
    -0.61153954,
    -0.04850853,
    -0.12009117,
    -0.050116368,
    0.12108745,
    -0.037981197,
    0.1729927,
    0.14611691,
    0.007477794,
    0.27245647,
    0.25172493,
    0.15503004,
    -0.03358431,
    -0.25343722,
    -0.46471986,
    0.043973923,
    0.32485086,
    0.1553138,
    -0.11391202,
    -0.44492835,
    -0.754806,
    0.00568806,
    0.29229808,
    0.06812497,
    -0.17943546,
    -0.56289715,
    -0.74985325,
    -0.024518821,
    0.37043393,
    0.12322845,
    -0.15621816,
    -0.53769356,
    -0.85171825,
    0.34719577,
    0.33373845,
    0.2863405,
    0.08293446,
    -0.15849078,
    -0.23281938,
    0.53795785,
    0.5693505,
    0.37409064,
    0.094197854,
    -0.12096052,
    -0.25746155,
    0.5592565,
    0.58858615,
    0.37465376,
    0.11141922,
    -0.17040052,
    -0.50346804,
    0.16965704,
    0.26077047,
    0.21360631,
    0.08621939,
    -0.19394912,
    -0.49720454,
    0.36645865,
    0.4114592,
    0.19731049,
    -0.08293207,
    -0.41021487,
    -0.6985602,
    0.5091297,
    0.5256399,
    0.25089547,
    -0.07286224,
    -0.45669407,
    -0.71479636,
    0.2051366,
    0.15477476,
    0.09131627,
    0.44674346,
    0.034987636,
    0.390291,
    0.3694105,
    -0.07653813,
    0.2536276,
    0.0015943982,
    0.009848841,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_0KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.071415216,
    0.12442188,
    -0.09566238,
    0.025814263,
    0.39882815,
    0.16391489,
    -0.008581701,
    -0.13815464,
    -0.13051334,
    0.02532715,
    0.32889652,
    0.20524831,
    -0.49096164,
    -0.30895254,
    -0.23303136,
    0.23083706,
    0.2964616,
    0.24874644,
    -0.2457537,
    -0.20580663,
    -0.20578788,
    0.22220248,
    0.24823901,
    0.27056095,
    -1.7412964,
    -1.2658727,
    -0.9884221,
    0.21221639,
    0.76972306,
    2.9932423,
    -0.8941595,
    -1.4919809,
    -0.6434117,
    0.1866445,
    0.6302275,
    3.7471368,
    -0.19908637,
    -0.05053481,
    -0.22026536,
    -0.20168278,
    -0.06375163,
    -0.34524786,
    -2.9306319,
    1.2972493,
    0.24407394,
    -3.5354817,
    -2.9933457,
    -0.10331253,
    0.47185874,
    -0.14110662,
    0.10932957,
    0.0013340656,
    0.07475349,
    -0.016720613,
    -0.23927939,
    -0.011462316,
    0.34377918,
    0.72500736,
    0.85285324,
    -0.110500894,
    -0.105389334,
    -0.017042588,
    0.10457068,
    0.0042217867,
    -0.21249798,
    -0.085640766,
    -0.45459425,
    -0.16079083,
    0.55052006,
    2.0902095,
    -0.37665167,
    0.27560315,
    -0.059153534,
    0.035410654,
    0.26979086,
    0.5431667,
    0.5761751,
    -0.40052012,
    -0.44486472,
    -0.42993188,
    -0.155777,
    0.3429057,
    0.74014395,
    -0.7196886,
    -0.66130596,
    -0.5823512,
    -0.061252877,
    1.1902641,
    2.376007,
    0.48015076,
    -0.05263098,
    0.55019283,
    0.35582376,
    -0.3000633,
    -0.9577861,
    0.37041304,
    0.1807514,
    -0.058853548,
    0.19539088,
    0.03101509,
    -1.0235001,
    1.6822823,
    0.46977645,
    0.50950366,
    -0.1764842,
    -0.2133276,
    -1.0270724,
    0.4235578,
    0.47018492,
    0.59907496,
    -0.095802486,
    -0.2432442,
    -0.01910542,
    2.5890062,
    0.13449658,
    2.3261929,
    0.96748704,
    0.44940996,
    -4.1517406,
    -1.059962,
    0.81751895,
    1.4057382,
    0.43485394,
    0.52264935,
    0.0902257,
    0.27415887,
    0.29622847,
    0.18442348,
    -0.011864232,
    0.33198798,
    0.008446357,
    0.29941043,
    0.24493904,
    -1.3369043,
    0.41626275,
    0.329823,
    -0.10362355,
    0.111990936,
    0.22666475,
    0.06236524,
    0.0052082036,
    -0.0012640925,
    0.34226802,
    -0.037712023,
    1.718424,
    -2.2861829,
    -1.5476025,
    -1.518054,
    -0.16363169,
    0.14955013,
    0.6014917,
    1.1120517,
    -1.9437062,
    -1.5143054,
    -0.46494117,
    0.6082318,
    0.21189173,
    -1.3022004,
    0.3113392,
    1.2015941,
    1.7875376,
    1.4595233,
    1.7871752,
    0.90693253,
    -0.98388606,
    -0.55907655,
    0.42635015,
    1.2506536,
    1.9478662,
    0.16841666,
    -1.632099,
    -0.78296155,
    -1.2520697,
    -1.1554351,
    -1.4457918,
    -0.38163397,
    -1.3265272,
    -2.6471865,
    0.33752015,
    -0.024949715,
    -0.024228316,
    -0.09096827,
    0.036369875,
    0.06127662,
    0.20753954,
    -0.15602651,
    0.38449815,
    0.44087142,
    -0.1416285,
    -0.72993124,
    0.1605913,
    1.8260558,
    1.4085311,
    1.6873645,
    -0.23067553,
    1.8025221,
    2.1915245,
    0.68259877,
    1.5146484,
    0.60728025,
    0.6007257,
    0.6491273,
    0.2172983,
    0.6351415,
    0.4959009,
    0.77732676,
    2.8963873,
    0.00053430814,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_2KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.17229153,
    0.264087,
    -0.11551477,
    -0.2951409,
    -0.6340139,
    -0.7685744,
    -0.7749833,
    1.5372435,
    1.5092891,
    1.525709,
    1.5499895,
    1.6084298,
    1.5887618,
    0.30863583,
    0.45061687,
    0.6094576,
    0.8064083,
    0.959253,
    1.031676,
    0.5051543,
    0.5391304,
    0.78070325,
    1.1836715,
    1.5253447,
    1.8399162,
    0.35733765,
    0.49771166,
    0.56471807,
    0.59162474,
    0.6641804,
    0.70285743,
    0.3619808,
    0.40967125,
    0.43293595,
    0.52111745,
    0.5584253,
    0.5747827,
    3.4650912,
    1.0985377,
    2.0768583,
    0.6913695,
    1.7492591,
    0.37055948,
    0.9179304,
    1.336736,
    1.4634312,
    0.2108562,
    -0.014977078,
    -0.31417167,
    0.8755782,
    0.2273331,
    -0.0767475,
    -0.41906473,
    0.5782624,
    0.6088123,
    0.90024847,
    0.53059334,
    0.27372912,
    0.5458853,
    0.89940846,
    0.7760888,
    0.38641942,
    -0.14528191,
    0.32873985,
    0.19016244,
    -0.35136896,
    -0.11777934,
    -0.2785619,
    -0.1123709,
    -0.32046947,
    -0.035665534,
    -0.054751325,
    -0.013830796,
    -0.25439528,
    -0.36349788,
    -0.9462539,
    -0.44470134,
    0.00077606644,
    0.021450194,
    0.26786473,
    1.0601447,
    1.2171279,
    1.4891306,
    2.0205555,
    1.0578886,
    0.21421742,
    1.0109899,
    1.7711909,
    1.5023983,
    1.2776086,
    1.0736384,
    0.9429681,
    0.68969613,
    0.559586,
    0.2315759,
    0.8058793,
    0.8376798,
    0.86985016,
    0.832715,
    0.7848382,
    0.7959257,
    0.77694225,
    0.79591155,
    0.8355637,
    -0.21627444,
    -0.21252656,
    -0.006382326,
    0.24422906,
    0.04576478,
    0.15990077,
    -0.0035749278,
    1.5380396,
    0.68067557,
    0.043168128,
    0.12968823,
    0.028285038,
    -0.13895537,
    0.031363584,
    -0.13323519,
    -0.12686588,
    0.0011965558,
    -0.3281977,
    -0.2259473,
    -0.16275458,
    -0.016559593,
    0.18904544,
    0.4219087,
    -0.06194341,
    -0.34153154,
    -0.15963764,
    0.16768803,
    0.5263147,
    0.79377973,
    -0.018911917,
    -0.33942387,
    -0.08376899,
    0.20097221,
    0.55426985,
    0.7112755,
    -0.040880475,
    -0.4678851,
    -0.16329244,
    0.15827283,
    0.5580852,
    0.791999,
    -0.49518558,
    -0.5398061,
    -0.3553466,
    -0.18503831,
    0.008449885,
    0.39075682,
    -0.63101006,
    -0.6579789,
    -0.415014,
    -0.15758066,
    0.15691742,
    0.4259432,
    -0.57291967,
    -0.6128423,
    -0.36707288,
    -0.09660915,
    0.17814593,
    0.57202655,
    -0.11002744,
    -0.29816216,
    -0.24068601,
    -0.06266228,
    0.21736628,
    0.48279455,
    -0.40104184,
    -0.45173776,
    -0.22293104,
    0.040642492,
    0.40232292,
    0.6457046,
    -0.60695153,
    -0.5512893,
    -0.28228074,
    0.06555796,
    0.43610123,
    0.7509893,
    -0.38897997,
    -0.3188491,
    -0.22325103,
    -0.69138336,
    -0.70358986,
    -0.29685387,
    -0.38099775,
    -0.26591885,
    -0.2884034,
    -0.0055280733,
    -0.00082149263,
    -0.005897157,
    0.0069459323,
    -0.0069796084,
    -0.0075576873,
    -0.00044307671,
    0.0042860033,
    -0.004753387,
    -1.5926778,
    -1.5860778,
    -1.622855,
    -1.6286465,
    -1.6719478,
    -1.6382838,
    -0.6395288,
    -0.92179334,
    -1.0363075,
    -1.1549753,
    -1.3084995,
    -1.3970642,
    -0.29979607,
    -0.5799602,
    -0.8495356,
    -1.17072,
    -1.5463668,
    -1.8309733,
    -0.49304953,
    -0.5413261,
    -0.5872105,
    -0.6818672,
    -0.66960084,
    -0.71020144,
    -0.3395552,
    -0.42106557,
    -0.44324753,
    -0.51925427,
    -0.5625778,
    -0.5629027,
    -3.038486,
    -0.5746488,
    -2.1339061,
    -0.25974077,
    -1.5809911,
    0.26206616,
    -0.65856665,
    -1.3149089,
    -1.2780025,
    -0.27729368,
    -0.14350499,
    0.3124162,
    -0.93821734,
    -0.267488,
    0.04123879,
    0.45775348,
    -0.42089283,
    -0.7011009,
    -1.2488247,
    -0.6442938,
    -0.42009985,
    -0.41599837,
    -0.4257754,
    -0.60466224,
    -0.50042784,
    0.27040932,
    -0.3058565,
    -0.09536414,
    0.34901237,
    0.21932901,
    0.44861314,
    0.07781213,
    0.31515792,
    -0.056498867,
    -0.17958269,
    0.03519349,
    0.27513435,
    0.45598802,
    0.5564565,
    0.49193224,
    -0.17318295,
    -0.014992692,
    -0.56546146,
    -0.77318317,
    -1.0101633,
    -1.4803888,
    -0.2267055,
    -0.16191544,
    0.0009892297,
    -1.6273572,
    -1.3859569,
    -1.1258521,
    -1.0200708,
    -0.77055275,
    -0.60834175,
    -0.36606526,
    -0.46879396,
    -0.13208462,
    -1.3267335,
    -1.327898,
    -1.301158,
    -1.2971542,
    -1.279153,
    -1.2473298,
    -1.2989886,
    -1.3783206,
    -1.4841461,
    0.20905079,
    0.22623026,
    0.0068231258,
    -0.23532467,
    -0.04446581,
    -0.15603775,
    -0.013159306,
    -1.465774,
    -0.47924876,
    -0.014797211,
    -0.080611,
    -0.09647655,
    0.11078001,
    -0.031185066,
    0.18141149,
    0.13798071,
    0.007477794,
    0.31240374,
    0.21314771,
    0.10472828,
    -0.058980733,
    -0.24710302,
    -0.46143165,
    -0.05778052,
    0.15335616,
    -0.008639259,
    -0.26372793,
    -0.5824746,
    -0.77015096,
    -0.031049047,
    0.21480343,
    0.011496659,
    -0.21172325,
    -0.5143131,
    -0.7049415,
    -0.04762732,
    0.3640666,
    0.10049949,
    -0.2007253,
    -0.58475804,
    -0.8357805,
    0.38812158,
    0.5167361,
    0.37993607,
    0.263736,
    -0.008222746,
    -0.2598166,
    0.5119715,
    0.573046,
    0.37468287,
    0.17204106,
    -0.09863129,
    -0.4995051,
    0.5193584,
    0.5254586,
    0.30471575,
    0.07313611,
    -0.15866391,
    -0.49629816,
    0.14120509,
    0.24804534,
    0.21064621,
    0.06798307,
    -0.19417469,
    -0.44567162,
    0.37035024,
    0.39414254,
    0.20738044,
    -0.053459555,
    -0.34459695,
    -0.6465355,
    0.57027346,
    0.5117275,
    0.28199753,
    -0.012164514,
    -0.3830853,
    -0.73667634,
    0.33793145,
    0.14585415,
    0.02361368,
    0.49919868,
    0.20406537,
    0.004168112,
    0.20786104,
    -0.04893791,
    0.14994046,
    0.0015943982,
    0.009848841,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_2KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.19618513,
    -0.12603372,
    -0.015536889,
    0.1261336,
    0.39343518,
    0.54471564,
    -0.15491426,
    -0.27759033,
    -0.0069163186,
    -0.0036204353,
    0.2059794,
    0.3110437,
    -0.42611456,
    -0.6068721,
    -0.49104723,
    -0.05461399,
    0.1272986,
    -0.00822559,
    0.1884023,
    -0.13636926,
    -0.13377881,
    0.30591944,
    0.487582,
    0.54234695,
    -1.3201939,
    -0.9234476,
    -0.88198483,
    0.3082681,
    0.94588137,
    2.3325715,
    -1.9623413,
    -0.81226206,
    -1.1284567,
    -0.12128122,
    1.1671778,
    3.1298351,
    -0.39097193,
    0.07514274,
    -0.06557368,
    -0.20560668,
    -0.13817734,
    -0.15567772,
    -1.6164923,
    1.0326616,
    0.21477142,
    -2.8077223,
    -2.551806,
    -0.13339965,
    0.38691,
    -0.30760485,
    0.06981112,
    -0.06082517,
    0.08143008,
    0.050636236,
    -0.19882275,
    0.03367009,
    0.3332777,
    0.6907215,
    0.6812265,
    -0.115635045,
    -0.117798366,
    -0.006480599,
    0.08968755,
    -0.014623408,
    -0.24321537,
    -0.06481637,
    -0.4970192,
    -0.21534547,
    0.51982844,
    1.7268767,
    0.004423392,
    0.30211067,
    -0.06706835,
    0.03738013,
    0.28384575,
    0.4953554,
    0.5341444,
    -0.38101324,
    -0.4474343,
    -0.41911015,
    -0.14857827,
    0.30844328,
    0.6750072,
    -0.97720045,
    -0.56535405,
    -0.17083597,
    0.54298985,
    1.5395478,
    1.096076,
    0.45582753,
    0.016415296,
    -0.33029875,
    0.44426945,
    -0.32968402,
    0.9531575,
    0.41011214,
    0.1216629,
    0.6917996,
    0.18339105,
    0.065131195,
    -0.6355726,
    1.5640646,
    0.46537867,
    1.1751071,
    -0.08667284,
    -0.22987743,
    -0.7127392,
    0.4810418,
    0.8214628,
    0.9918113,
    -0.09119934,
    -0.27208114,
    -0.13251854,
    2.426638,
    -0.104075655,
    2.1405137,
    3.3990076,
    0.45329964,
    -4.655621,
    -0.74131274,
    0.7973329,
    1.3661869,
    0.46773735,
    0.5741953,
    0.087222114,
    0.30638045,
    0.33453366,
    0.08256739,
    0.04432858,
    0.3225368,
    -0.021882322,
    0.32148007,
    0.31549633,
    -1.5004859,
    -0.13966632,
    0.45546106,
    -0.40373558,
    -0.24551375,
    0.18895926,
    0.07625407,
    0.0052082036,
    -0.0012640925,
    0.34141248,
    0.15663096,
    2.02077,
    -2.6822398,
    -1.6883273,
    -1.9041578,
    -0.1886726,
    0.25378472,
    0.5179474,
    1.0816803,
    -2.2359698,
    -1.5015856,
    -0.5805032,
    0.79634327,
    0.31051883,
    -1.2014942,
    0.25040248,
    1.1517992,
    1.6989455,
    1.3853481,
    1.6036713,
    0.7625884,
    -0.92504823,
    -0.5216621,
    0.36561957,
    1.1321492,
    1.6092598,
    0.61432403,
    -2.0228667,
    -0.8177022,
    -1.254545,
    -1.1593713,
    -1.2931123,
    -0.3154228,
    -1.1602424,
    -1.9565928,
    0.32626602,
    -0.028468128,
    -0.036849245,
    -0.112456985,
    0.043217946,
    0.08309858,
    0.24185763,
    -0.17654309,
    0.23051652,
    0.17497836,
    0.30518794,
    -0.17468643,
    -0.17940004,
    1.8823787,
    1.3385825,
    1.6534553,
    0.046787873,
    1.9449157,
    1.957238,
    0.5685186,
    1.369992,
    0.49561453,
    0.5704975,
    0.5515624,
    0.14864062,
    0.68902594,
    0.98338044,
    0.8225161,
    2.7357512,
    0.00053430814,
];
