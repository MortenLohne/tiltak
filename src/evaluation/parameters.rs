use std::{array, mem};

use half::f16;

use crate::{
    evaluation::policy_eval::sigmoid,
    position::{num_line_symmetries, num_square_symmetries, Komi},
};

use super::policy_eval::policy_offset;

pub const NUM_VALUE_FEATURES_4S: usize = 320;
pub const NUM_POLICY_FEATURES_4S: usize = 176;

pub const NUM_VALUE_FEATURES_5S: usize = 416;
pub const NUM_POLICY_FEATURES_5S: usize = 200;

pub const NUM_VALUE_FEATURES_6S: usize = 432;
pub const NUM_POLICY_FEATURES_6S: usize = 208;

const fn value_padding<const S: usize>() -> usize {
    match S {
        4 => 10,
        5 => 14,
        6 => 4,
        _ => unimplemented!(),
    }
}

const fn policy_padding<const S: usize>() -> usize {
    match S {
        4 => 7,
        5 => 3,
        6 => 1,
        _ => unimplemented!(),
    }
}

#[derive(Debug, Clone, Copy)]
pub struct IndexPair {
    start: usize,
    length: usize,
}

impl IndexPair {
    pub const fn next(start: usize, length: usize) -> (Self, usize) {
        (Self { start, length }, start + length)
    }

    pub fn as_slice<'a, T>(&self, slice: &'a [T]) -> &'a [T] {
        &slice[self.start..self.start + self.length]
    }

    pub fn as_mut_slice<'a, T>(&self, slice: &'a mut [T]) -> &'a mut [T] {
        &mut slice[self.start..self.start + self.length]
    }
}

#[derive(Debug)]
pub struct ValueIndexes<const S: usize> {
    pub first_ply: IndexPair,
    pub second_ply: IndexPair,
    pub flat_psqt: IndexPair,
    pub wall_psqt: IndexPair,
    pub cap_psqt: IndexPair,
    pub supports_psqt: IndexPair,
    pub captives_psqt: IndexPair,
    pub flat_win_this_ply: IndexPair,
    pub flat_win_next_ply: IndexPair,
    pub flat_win_two_ply: IndexPair,
    pub flat_win_three_ply: IndexPair,
    pub one_reserve_left_us: IndexPair,
    pub one_reserve_left_them: IndexPair,
    pub shallow_supports_per_piece: IndexPair,
    pub shallow_supports_per_piece_mobility: IndexPair,
    pub deep_supports_per_piece: IndexPair,
    pub shallow_captives_per_piece: IndexPair,
    pub shallow_captives_per_piece_mobility: IndexPair,
    pub deep_captives_per_piece: IndexPair,
    pub to_move_opening_flatstone_lead: IndexPair,
    pub to_move_middlegame_flatstone_lead: IndexPair,
    pub to_move_endgame_flatstone_lead: IndexPair,
    pub i_number_of_groups: IndexPair,
    pub critical_squares: IndexPair,
    pub critical_square_cap_attack: IndexPair,
    pub flat_next_to_our_stack: IndexPair,
    pub wall_next_to_our_stack: IndexPair,
    pub cap_next_to_our_stack: IndexPair,
    pub num_lines_occupied: IndexPair,
    pub line_control_empty: IndexPair,
    pub line_control_their_blocking_piece: IndexPair,
    pub line_control_almost_empty: IndexPair,
    pub line_control_other: IndexPair,
    pub line_control_guarded_flat: IndexPair,
    pub line_control_guarded_wall: IndexPair,
    pub line_control_guarded_cap: IndexPair,
    pub sidelined_cap: IndexPair,
    pub fully_isolated_cap: IndexPair,
    pub semi_isolated_cap: IndexPair,
    pub padding: IndexPair,
}

impl<const S: usize> ValueIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;

        let (first_ply, i) = IndexPair::next(i, 1);
        let (second_ply, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (supports_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (captives_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_win_this_ply, i) = IndexPair::next(i, 1);
        let (flat_win_next_ply, i) = IndexPair::next(i, 2);
        let (flat_win_two_ply, i) = IndexPair::next(i, 2);
        let (flat_win_three_ply, i) = IndexPair::next(i, 3);
        let (one_reserve_left_us, i) = IndexPair::next(i, 4);
        let (one_reserve_left_them, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_supports_per_piece_mobility, i) = IndexPair::next(i, 4);
        let (deep_supports_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece_mobility, i) = IndexPair::next(i, 4);
        let (deep_captives_per_piece, i) = IndexPair::next(i, 4);
        let (to_move_opening_flatstone_lead, i) = IndexPair::next(i, 9);
        let (to_move_middlegame_flatstone_lead, i) = IndexPair::next(i, 9);
        let (to_move_endgame_flatstone_lead, i) = IndexPair::next(i, 9);
        let (i_number_of_groups, i) = IndexPair::next(i, 3);
        let (critical_squares, i) = IndexPair::next(i, 4);
        let (critical_square_cap_attack, i) = IndexPair::next(i, 6);
        let (flat_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (wall_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (cap_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (num_lines_occupied, i) = IndexPair::next(i, S + 1);
        let (line_control_almost_empty, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_empty, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_their_blocking_piece, i) =
            IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_other, i) = IndexPair::next(i, (S - 1) * num_line_symmetries::<S>());
        let (line_control_guarded_flat, i) = IndexPair::next(i, 3);
        let (line_control_guarded_wall, i) = IndexPair::next(i, 3);
        let (line_control_guarded_cap, i) = IndexPair::next(i, 3);
        let (sidelined_cap, i) = IndexPair::next(i, 3);
        let (fully_isolated_cap, i) = IndexPair::next(i, 3);
        let (semi_isolated_cap, i) = IndexPair::next(i, 3);
        let (padding, i) = IndexPair::next(i, value_padding::<S>() / 2);

        assert!(i == num_value_features::<S>() / 2);

        ValueIndexes {
            first_ply,
            second_ply,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            supports_psqt,
            captives_psqt,
            flat_win_this_ply,
            flat_win_next_ply,
            flat_win_two_ply,
            flat_win_three_ply,
            one_reserve_left_us,
            one_reserve_left_them,
            shallow_supports_per_piece,
            shallow_supports_per_piece_mobility,
            deep_supports_per_piece,
            shallow_captives_per_piece,
            shallow_captives_per_piece_mobility,
            deep_captives_per_piece,
            to_move_opening_flatstone_lead,
            to_move_middlegame_flatstone_lead,
            to_move_endgame_flatstone_lead,
            i_number_of_groups,
            critical_squares,
            critical_square_cap_attack,
            flat_next_to_our_stack,
            wall_next_to_our_stack,
            cap_next_to_our_stack,
            num_lines_occupied,
            line_control_almost_empty,
            line_control_empty,
            line_control_their_blocking_piece,
            line_control_other,
            line_control_guarded_flat,
            line_control_guarded_wall,
            line_control_guarded_cap,
            sidelined_cap,
            fully_isolated_cap,
            semi_isolated_cap,
            padding,
        }
    }
}

pub const VALUE_INDEXES_4S: ValueIndexes<4> = ValueIndexes::new();
pub const VALUE_INDEXES_5S: ValueIndexes<5> = ValueIndexes::new();
pub const VALUE_INDEXES_6S: ValueIndexes<6> = ValueIndexes::new();

impl<const S: usize> ValueIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> ValueIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn value_indexes<const S: usize>() -> ValueIndexes<S> {
    match S {
        4 => VALUE_INDEXES_4S.downcast_size(),
        5 => VALUE_INDEXES_5S.downcast_size(),
        6 => VALUE_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

#[derive(Debug)]
pub struct PolicyIndexes<const S: usize> {
    pub flat_psqt_white: IndexPair,
    pub flat_psqt_black: IndexPair,
    pub wall_psqt_white: IndexPair,
    pub wall_psqt_black: IndexPair,
    pub cap_psqt_white: IndexPair,
    pub cap_psqt_black: IndexPair,
    pub move_role_bonus_white: IndexPair,
    pub move_role_bonus_black: IndexPair,
    pub decline_win: IndexPair,
    pub place_to_win: IndexPair,
    pub place_to_draw: IndexPair,
    pub place_to_loss: IndexPair,
    pub place_to_allow_opponent_to_end: IndexPair,
    pub two_flats_left: IndexPair,
    pub three_flats_left: IndexPair,
    pub our_road_stones_in_line: IndexPair,
    pub their_road_stones_in_line: IndexPair,
    pub extend_single_group_base: IndexPair,
    pub extend_single_group_linear: IndexPair,
    pub extend_single_group_to_new_line_base: IndexPair,
    pub extend_single_group_to_new_line_linear: IndexPair,
    pub merge_two_groups_base: IndexPair,
    pub merge_two_groups_linear: IndexPair,
    pub block_merger_base: IndexPair,
    pub block_merger_linear: IndexPair,
    pub place_our_critical_square: IndexPair,
    pub place_their_critical_square: IndexPair,
    pub ignore_their_critical_square: IndexPair,
    pub next_to_our_last_stone: IndexPair,
    pub next_to_their_last_stone: IndexPair,
    pub diagonal_to_our_last_stone: IndexPair,
    pub diagonal_to_their_last_stone: IndexPair,
    pub attack_strong_flats: IndexPair,
    pub blocking_stone_blocks_extensions_of_two_flats: IndexPair,
    pub attack_strong_stack_with_wall: IndexPair,
    pub attack_strong_stack_with_cap: IndexPair,
    pub attack_last_movement: IndexPair,
    pub place_last_movement: IndexPair,
    pub simple_movement: IndexPair,
    pub simple_capture: IndexPair,
    pub simple_self_capture: IndexPair,
    pub pure_spread: IndexPair,
    pub fcd_highest_board: IndexPair,
    pub fcd_highest_stack: IndexPair,
    pub fcd_other: IndexPair,
    pub stack_captured_by_movement: IndexPair,
    pub stack_capture_in_strong_line: IndexPair,
    pub stack_capture_in_strong_line_cap: IndexPair,
    pub move_cap_onto_strong_line: IndexPair,
    pub move_cap_onto_strong_line_with_critical_square: IndexPair,
    pub recapture_stack_pure: IndexPair,
    pub recapture_stack_impure: IndexPair,
    pub move_last_placement: IndexPair,
    pub continue_spread: IndexPair,
    pub move_onto_critical_square: IndexPair,
    pub spread_that_connects_groups_to_win: IndexPair,
    pub padding: IndexPair,
}

pub const POLICY_INDEXES_4S: PolicyIndexes<4> = PolicyIndexes::new();
pub const POLICY_INDEXES_5S: PolicyIndexes<5> = PolicyIndexes::new();
pub const POLICY_INDEXES_6S: PolicyIndexes<6> = PolicyIndexes::new();

impl<const S: usize> PolicyIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> PolicyIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn policy_indexes<const S: usize>() -> PolicyIndexes<S> {
    match S {
        4 => POLICY_INDEXES_4S.downcast_size(),
        5 => POLICY_INDEXES_5S.downcast_size(),
        6 => POLICY_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

impl<const S: usize> PolicyIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;
        let (flat_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (move_role_bonus_white, i) = IndexPair::next(i, 3);
        let (move_role_bonus_black, i) = IndexPair::next(i, 3);
        let (decline_win, i) = IndexPair::next(i, 1);
        let (place_to_win, i) = IndexPair::next(i, 1);
        let (place_to_draw, i) = IndexPair::next(i, 1);
        let (place_to_loss, i) = IndexPair::next(i, 1);
        let (place_to_allow_opponent_to_end, i) = IndexPair::next(i, 3);
        let (two_flats_left, i) = IndexPair::next(i, 2);
        let (three_flats_left, i) = IndexPair::next(i, 2);
        let (our_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (their_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (extend_single_group_to_new_line_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_to_new_line_linear, i) = IndexPair::next(i, 3);
        let (extend_single_group_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_linear, i) = IndexPair::next(i, 3);
        let (merge_two_groups_base, i) = IndexPair::next(i, 3);
        let (merge_two_groups_linear, i) = IndexPair::next(i, 3);
        let (block_merger_base, i) = IndexPair::next(i, 3);
        let (block_merger_linear, i) = IndexPair::next(i, 3);
        let (place_our_critical_square, i) = IndexPair::next(i, 1);
        let (place_their_critical_square, i) = IndexPair::next(i, 4);
        let (ignore_their_critical_square, i) = IndexPair::next(i, 2);
        let (next_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (next_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (attack_strong_flats, i) = IndexPair::next(i, 1);
        let (blocking_stone_blocks_extensions_of_two_flats, i) = IndexPair::next(i, 1);
        let (attack_strong_stack_with_wall, i) = IndexPair::next(i, 6);
        let (attack_strong_stack_with_cap, i) = IndexPair::next(i, 6);
        let (attack_last_movement, i) = IndexPair::next(i, 4);
        let (place_last_movement, i) = IndexPair::next(i, 3);
        let (simple_movement, i) = IndexPair::next(i, 3);
        let (simple_capture, i) = IndexPair::next(i, 4);
        let (simple_self_capture, i) = IndexPair::next(i, 4);
        let (pure_spread, i) = IndexPair::next(i, 2);
        let (fcd_highest_board, i) = IndexPair::next(i, 6);
        let (fcd_highest_stack, i) = IndexPair::next(i, 6);
        let (fcd_other, i) = IndexPair::next(i, 8);
        let (stack_captured_by_movement, i) = IndexPair::next(i, 1);
        let (stack_capture_in_strong_line, i) = IndexPair::next(i, S - 3);
        let (stack_capture_in_strong_line_cap, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line_with_critical_square, i) = IndexPair::next(i, S - 3);
        let (recapture_stack_pure, i) = IndexPair::next(i, 3);
        let (recapture_stack_impure, i) = IndexPair::next(i, 3);
        let (move_last_placement, i) = IndexPair::next(i, 3);
        let (continue_spread, i) = IndexPair::next(i, 3);
        let (move_onto_critical_square, i) = IndexPair::next(i, 3);
        let (spread_that_connects_groups_to_win, i) = IndexPair::next(i, 1);
        let (padding, i) = IndexPair::next(i, policy_padding::<S>());

        assert!(i == num_policy_features::<S>());

        PolicyIndexes {
            flat_psqt_white,
            flat_psqt_black,
            wall_psqt_white,
            wall_psqt_black,
            cap_psqt_white,
            cap_psqt_black,
            move_role_bonus_white,
            move_role_bonus_black,
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            attack_strong_stack_with_wall,
            attack_strong_stack_with_cap,
            attack_last_movement,
            place_last_movement,
            simple_movement,
            simple_capture,
            simple_self_capture,
            pure_spread,
            fcd_highest_board,
            fcd_highest_stack,
            fcd_other,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            recapture_stack_pure,
            recapture_stack_impure,
            move_last_placement,
            continue_spread,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
            padding,
        }
    }
}

pub trait ValueApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn finish(&mut self) -> f32;
}

#[derive(Debug, Clone)]
pub struct Value<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for Value<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Value {
            features: vec![f16::ZERO; num_value_features::<S>() / 2],
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn finish(&mut self) -> f32 {
        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>();

        self.features.fill(f16::ZERO);

        total_value
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalValue<const S: usize> {
    val: f32,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for IncrementalValue<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalValue {
            val: 0.0,
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn finish(&mut self) -> f32 {
        let total_value = self.val;

        self.val = 0.0;

        total_value
    }
}

pub trait PolicyApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn eval_one(&mut self, index_pair: IndexPair, index: usize) {
        self.eval_i8(index_pair, index, 1)
    }
    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.eval(index_pair, index, f16::from(val))
    }
    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.eval(index_pair, index, f16::from_f32(val))
    }
    fn set_immediate_win(&mut self);
    fn has_immediate_win(&self) -> bool;
    fn finish(&mut self, num_moves: usize) -> f16;
}

#[derive(Debug, Clone)]
pub struct Policy<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for Policy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Policy {
            features: vec![f16::ZERO; num_policy_features::<S>()],
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);

        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>() + offset;

        self.features.fill(f16::ZERO);
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalPolicy<const S: usize> {
    val: f32,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for IncrementalPolicy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalPolicy {
            val: 0.0,
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.val += index_pair.as_slice(self.parameters)[index] * val as f32
    }

    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.val += index_pair.as_slice(self.parameters)[index] * val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, num_moves: usize) -> f16 {
        if num_moves < 2 {
            eprintln!("Warning: Got {} legal moves", num_moves,);
        }
        let offset = policy_offset(num_moves);
        let total_value = self.val + offset;

        self.val = 0.0;
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

pub const fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub const fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn value_features_4s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_4S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_4S_0KOMI,
        4 => &VALUE_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn policy_features_4s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_4S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_4S_0KOMI,
        4 => &POLICY_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn value_features_5s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_5S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_5S_0KOMI,
        4 => &VALUE_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn policy_features_5s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_5S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_5S_0KOMI,
        4 => &POLICY_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn value_features_6s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_6S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_6S_0KOMI,
        4 => &VALUE_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

pub fn policy_features_6s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_6S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_6S_0KOMI,
        4 => &POLICY_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_0KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    2.4316607,
    3.948234,
    2.6022382,
    1.4444559,
    2.7725964,
    2.6853547,
    2.4694963,
    0.6456372,
    1.3376486,
    1.9471525,
    -0.0059250165,
    -0.00050385203,
    -0.00651386,
    0.6298386,
    0.8478108,
    1.0267628,
    0.3646087,
    0.65035766,
    0.87383395,
    3.181548,
    0.67289674,
    1.4704818,
    0.3295483,
    1.7054638,
    0.30953056,
    0.7860367,
    0.7171965,
    0.31087294,
    -0.19592777,
    -0.3354864,
    -0.06270446,
    -0.047015138,
    -0.23130597,
    -0.6747112,
    -0.75386566,
    1.2540966,
    0.47478652,
    -0.005124028,
    -0.008343117,
    0.4502785,
    2.738278,
    0.005951524,
    -0.0043248367,
    0.66803735,
    0.104168616,
    -0.005560641,
    0.0036220215,
    -0.28920466,
    -0.16284779,
    -0.0055643534,
    -0.0015320918,
    -0.9019353,
    -0.23588982,
    -0.009827926,
    0.00059686694,
    -0.77141523,
    -0.6836219,
    0.0076304395,
    -0.0060374904,
    0.19825573,
    1.5824981,
    2.3749042,
    1.9221747,
    1.8022909,
    2.0026157,
    1.6333548,
    1.66393,
    -0.03078534,
    2.195885,
    2.2829652,
    1.5371269,
    1.3463248,
    1.1244818,
    1.1226524,
    0.861089,
    1.9853731,
    1.8382295,
    0.5394786,
    0.57464707,
    1.1580384,
    1.680245,
    2.2719595,
    2.922314,
    3.681033,
    2.6075218,
    1.4693128,
    -0.29159686,
    0.3667428,
    0.27157003,
    0.30727696,
    0.42632064,
    0.20321327,
    0.053844545,
    0.008557079,
    -0.0009557083,
    -0.00078115705,
    -0.008447227,
    -0.009191279,
    -0.0018326258,
    -0.022083364,
    -0.32067132,
    0.00022801384,
    -0.12849472,
    -0.20888318,
    -0.022015786,
    0.19898704,
    0.57707036,
    0.004107034,
    -0.08599316,
    0.58905095,
    1.3625441,
    0.22846593,
    -0.07444185,
    0.5652265,
    1.1756088,
    -0.05152581,
    -0.1914915,
    -0.11640325,
    0.3278621,
    -0.6404898,
    -0.47814745,
    -0.03943243,
    0.36418498,
    0.3084402,
    -0.03174029,
    0.26740316,
    0.9023104,
    -0.7598787,
    -0.5188656,
    0.17066951,
    0.9134854,
    -0.05141203,
    -0.03260874,
    0.58204496,
    -0.041261457,
    0.08081483,
    0.41292343,
    0.0043121455,
    -0.008000903,
    0.0010137418,
    -0.006815267,
    0.0031001903,
    -0.002478423,
    -0.002353027,
    0.008927224,
    0.009418681,
    -0.007463541,
    -0.009312019,
    0.008915393,
    -0.0005510999,
    0.0035254955,
    0.008046815,
    0.008674609,
    0.008508706,
    -0.0008124877,
    0.004095099,
    -3.032847,
    -2.6445708,
    -2.297356,
    -0.7322831,
    -1.405693,
    -2.3109975,
    -0.005868571,
    -0.0075792954,
    0.00952702,
    -0.548034,
    -0.89242476,
    -1.033523,
    -0.5278578,
    -0.73150647,
    -0.93173045,
    -2.5224686,
    -0.95631695,
    -1.8790292,
    -0.326836,
    -1.4393933,
    -0.17172302,
    -0.6617695,
    -0.49360335,
    -1.9183853,
    -0.57131374,
    -0.60526025,
    0.11044675,
    -1.3220683,
    -0.50244457,
    -0.108516395,
    0.7152695,
    -0.7885764,
    -0.9001365,
    -0.006010456,
    -0.0055280733,
    -0.9644257,
    -1.8761377,
    0.0069459323,
    -0.0069796084,
    -0.6072811,
    -0.18442312,
    0.0042860033,
    -0.004753387,
    0.490536,
    0.25390023,
    -0.0066909315,
    0.0056339707,
    0.57347906,
    -0.03773678,
    -0.0018851925,
    0.007400766,
    0.8519584,
    0.5810329,
    0.0092722215,
    0.0030306866,
    -0.07946182,
    -1.1671888,
    -1.7959044,
    -1.7916896,
    -1.6636328,
    -1.1216886,
    -1.128799,
    0.062783495,
    -0.008504454,
    -2.4580555,
    -3.2035835,
    -2.7939694,
    -2.6410935,
    -2.497593,
    -2.3075492,
    -1.644572,
    -2.1267548,
    -1.312306,
    0.15490162,
    0.098456845,
    -0.79874545,
    -1.7376605,
    -2.2331936,
    -2.5538356,
    -3.2979653,
    -2.8555193,
    -1.2035868,
    0.2660342,
    -0.1748763,
    -0.34909663,
    -0.20885655,
    -0.09937494,
    -0.21402863,
    0.04145042,
    0.008153329,
    0.002645051,
    0.004003441,
    0.0071725287,
    0.0049608946,
    0.008243782,
    -0.016886072,
    0.2743469,
    0.00948292,
    0.17882922,
    0.17736728,
    0.22346197,
    0.06281587,
    -0.19408545,
    0.01643628,
    -0.24420884,
    -0.72825295,
    -1.2837764,
    0.2205423,
    0.37509492,
    -0.26474893,
    -1.1563938,
    -0.28712055,
    -0.04974909,
    -0.123236,
    -0.3059569,
    1.1131511,
    0.55147105,
    -0.045114357,
    -0.65456104,
    -0.31463942,
    -0.13753715,
    -0.30598685,
    -0.77985066,
    1.021701,
    0.66817296,
    -0.103586376,
    -0.86488557,
    0.080472276,
    -0.08018608,
    -0.5443543,
    0.15388334,
    -0.23335904,
    -0.2519362,
    0.0015270468,
    0.0024552317,
    0.009908594,
    -0.00047137216,
    -0.002311611,
    -0.0068556285,
    -0.0071793436,
    0.0004826784,
    -0.0035659648,
    -0.0024085473,
    0.00952634,
    0.0013488671,
    -0.004505658,
    0.006838942,
    0.0048156017,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_0KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    -0.06596815,
    0.14143576,
    0.2643506,
    0.14499849,
    0.107681885,
    0.11073599,
    -0.19013828,
    -0.40654242,
    0.3318426,
    -0.16691944,
    -0.3575065,
    0.23800719,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.33601677,
    -0.041274536,
    0.0013449714,
    -0.29418692,
    -0.54222,
    0.0075244084,
    -2.7454162,
    1.2056162,
    0.74540424,
    -3.2504718,
    -2.7729948,
    0.068721116,
    0.47504744,
    -0.16477276,
    0.18019468,
    -0.13531236,
    0.14152104,
    0.032580495,
    -0.22254677,
    0.49075425,
    1.1202906,
    -0.07768215,
    -0.10285486,
    -0.28730598,
    -0.60267043,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    0.1747276,
    -0.3360676,
    0.35788158,
    1.2172985,
    -0.7322632,
    -0.5023849,
    -0.49644548,
    0.63201225,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    0.6639308,
    0.34448573,
    -0.0077813696,
    -1.4789531,
    -0.5449256,
    0.0020160126,
    0.20559156,
    -0.025478715,
    -0.0057330895,
    0.48247886,
    0.27221236,
    0.0008187201,
    0.79267675,
    1.5803065,
    -0.002397363,
    0.2934291,
    -0.9169082,
    0.00303144,
    0.18601592,
    0.47252977,
    -0.008103551,
    -0.54003847,
    -0.6874615,
    -0.009149382,
    2.5997837,
    0.21279974,
    1.0009149,
    0.00917124,
    0.5581906,
    -3.4829595,
    -0.7885469,
    0.29876935,
    1.3653431,
    0.3458327,
    0.23525056,
    0.27667275,
    0.6695998,
    0.2019845,
    0.33065692,
    -0.2599935,
    0.50598747,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.32448876,
    0.06516934,
    -0.00813673,
    -0.009886575,
    0.04560957,
    -0.2841685,
    0.00021132734,
    -1.8742533,
    -1.0128005,
    0.0011727996,
    0.07729849,
    0.14006491,
    -0.008626261,
    -0.006473,
    -1.0160459,
    -0.7020004,
    -0.0051336214,
    -0.0013411185,
    0.15417725,
    -1.3802054,
    0.25305972,
    1.4399757,
    1.8268988,
    1.968561,
    2.796725,
    1.1202828,
    -1.7660865,
    -0.804423,
    0.20100431,
    1.3501571,
    0.9508624,
    0.054124333,
    -1.1339825,
    -1.1712068,
    -2.0318532,
    -1.4227827,
    -2.0454004,
    -0.13430345,
    -1.5658052,
    -1.0156312,
    0.39389312,
    -0.0530978,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.397977,
    0.7746763,
    -0.002408173,
    0.22021821,
    1.53287,
    0.0077593178,
    0.2637508,
    0.88056475,
    -0.0054027913,
    0.3666799,
    0.14289705,
    0.0036244253,
    -0.39640427,
    -0.31697965,
    0.16356713,
    3.3073342,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_2KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    0.52429,
    0.68893915,
    0.11723282,
    -0.14886938,
    3.5339468,
    2.4858508,
    1.3320192,
    0.5897218,
    1.2349315,
    1.5847373,
    -0.0059250165,
    -0.00050385203,
    -0.00651386,
    0.30413458,
    0.60066754,
    0.585936,
    0.27747995,
    0.50866705,
    0.4718101,
    3.8469164,
    0.7773746,
    1.8651912,
    0.58217114,
    1.9865575,
    0.07986077,
    0.8951192,
    0.8741737,
    0.43828675,
    0.105449036,
    0.27625027,
    -0.37590623,
    0.04578136,
    0.03894673,
    0.07617995,
    -0.90207785,
    0.6963765,
    0.5452865,
    -0.005124028,
    -0.008343117,
    0.39673215,
    2.0560133,
    0.005951524,
    -0.0043248367,
    0.42766416,
    -0.18191823,
    -0.005560641,
    0.0036220215,
    -0.23393331,
    -0.21480957,
    -0.0055643534,
    -0.0015320918,
    -0.6201588,
    0.05866232,
    -0.009827926,
    0.00059686694,
    -0.6359298,
    -0.19155984,
    0.0076304395,
    -0.0060374904,
    -0.0073329057,
    1.0882515,
    1.6315265,
    2.2865894,
    1.3095273,
    1.0958549,
    0.50345117,
    1.0906723,
    -0.9198386,
    -0.005442661,
    1.0889075,
    0.9048378,
    0.6534195,
    0.8961703,
    0.67892134,
    0.22661947,
    0.026577663,
    0.40733767,
    -0.03858814,
    -0.2739997,
    0.31540608,
    0.4690904,
    1.3372418,
    2.3901124,
    3.1644223,
    4.195002,
    3.9688473,
    -0.27533773,
    0.17142802,
    0.03770945,
    0.35307604,
    0.0825674,
    0.13906325,
    0.012941918,
    0.008557079,
    -0.0009557083,
    -0.00078115705,
    -0.008447227,
    -0.009191279,
    -0.0018326258,
    -0.0069718147,
    -0.18608472,
    0.00022801384,
    0.45180544,
    -0.25586006,
    -0.44872898,
    -0.4753107,
    -0.4419908,
    0.35149807,
    0.576417,
    0.30050486,
    -0.24655187,
    -0.32760438,
    -0.44139394,
    0.23319869,
    0.7384209,
    1.2493399,
    0.59473467,
    -0.0038482135,
    -0.6755991,
    -1.1608081,
    -0.56961364,
    -0.03433775,
    0.6316661,
    1.1496592,
    0.6557117,
    0.12960815,
    -0.3134066,
    -1.5203936,
    -0.59795463,
    0.03728718,
    0.74441874,
    0.58514774,
    -0.1301679,
    -0.7587223,
    0.6873814,
    -0.031453356,
    -0.7020222,
    0.0043121455,
    -0.008000903,
    0.0010137418,
    -0.006815267,
    0.0031001903,
    -0.002478423,
    -0.002353027,
    0.008927224,
    0.009418681,
    -0.007463541,
    -0.009312019,
    0.008915393,
    -0.0005510999,
    0.0035254955,
    0.008046815,
    0.008674609,
    0.008508706,
    -0.0008124877,
    0.004095099,
    -3.0704432,
    -2.4933693,
    -1.7673687,
    -1.2633189,
    -1.7970295,
    -2.0775409,
    -0.005868571,
    -0.0075792954,
    0.00952702,
    -0.4075466,
    -0.57603663,
    -0.5444189,
    -0.11908211,
    -0.37698713,
    -0.3965246,
    -2.2272253,
    -0.13783081,
    -1.1743498,
    -0.09427089,
    -1.0977554,
    0.16787964,
    -0.40625194,
    -0.6227526,
    -0.61625713,
    -0.33013564,
    0.021447528,
    0.03244048,
    -0.5116448,
    -0.19525214,
    0.2845262,
    0.0065825637,
    -0.6593522,
    -0.56550854,
    -0.006010456,
    -0.0055280733,
    -0.62841564,
    -1.4784036,
    0.0069459323,
    -0.0069796084,
    -0.38398543,
    0.074410126,
    0.0042860033,
    -0.004753387,
    0.20717366,
    0.27154583,
    -0.0066909315,
    0.0056339707,
    0.5737717,
    -0.12585312,
    -0.0018851925,
    0.007400766,
    0.29815802,
    0.10203528,
    0.0092722215,
    0.0030306866,
    -1.8135285,
    -2.027833,
    -1.5655462,
    -1.3475527,
    -0.14485219,
    -0.28304484,
    1.4412184,
    -0.004338976,
    -0.028544435,
    -2.6164312,
    -2.4394634,
    -2.0292408,
    -1.9581802,
    -2.1600285,
    -1.8075325,
    -1.9948127,
    -1.5771171,
    -0.28050014,
    1.4215115,
    0.39595857,
    0.012841025,
    -0.9893835,
    -2.2025082,
    -2.5774856,
    -1.4600112,
    -0.7804209,
    -0.22854514,
    0.12789029,
    -0.053083226,
    -0.12465205,
    -0.11110279,
    -0.012352408,
    -0.13015433,
    0.32610905,
    0.008153329,
    0.002645051,
    0.004003441,
    0.0071725287,
    0.0049608946,
    0.008243782,
    -0.019086776,
    0.41505888,
    0.00948292,
    -0.09106063,
    -0.16338338,
    -0.1823654,
    -0.25317866,
    -0.44836012,
    0.36382782,
    0.073753566,
    0.2623317,
    0.18028197,
    -0.33552864,
    0.33023572,
    -0.076525986,
    -0.43629795,
    -0.9898158,
    -0.40246817,
    0.19037203,
    0.4182858,
    -0.40326446,
    -0.30955458,
    -0.5492488,
    -0.64738584,
    -0.6218218,
    -0.06700427,
    0.14947127,
    0.25139436,
    0.5272059,
    0.26679143,
    -0.20381989,
    -0.4752476,
    -0.06291156,
    0.14218172,
    0.3436011,
    0.20922472,
    0.14459349,
    0.39875776,
    0.0015270468,
    0.0024552317,
    0.009908594,
    -0.00047137216,
    -0.002311611,
    -0.0068556285,
    -0.0071793436,
    0.0004826784,
    -0.0035659648,
    -0.0024085473,
    0.00952634,
    0.0013488671,
    -0.004505658,
    0.006838942,
    0.0048156017,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_2KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    0.3835006,
    0.21164729,
    0.5567637,
    0.14972319,
    0.008378243,
    -0.43465084,
    -0.7308303,
    -0.8912839,
    0.46212968,
    -0.43907836,
    0.26626498,
    0.5782282,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.4975553,
    0.15077943,
    0.0013449714,
    -0.4241401,
    -0.4088393,
    0.0075244084,
    -3.2364414,
    0.9161514,
    0.5318693,
    -2.230449,
    -4.504568,
    -0.487717,
    0.6291668,
    -0.73886293,
    0.26118273,
    -0.27261165,
    0.12881532,
    0.1777136,
    -0.011507088,
    0.41689792,
    1.1819894,
    -0.14281727,
    -0.12822403,
    -0.4899795,
    -0.7057814,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    -0.038640175,
    -0.48866045,
    0.18388642,
    2.1011872,
    -0.47701856,
    -0.35595262,
    -0.5488175,
    -0.12425026,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    -0.0737323,
    1.6342262,
    -0.0077813696,
    0.8013023,
    -0.2317711,
    0.0020160126,
    0.59806335,
    -0.9970204,
    -0.0057330895,
    0.07285249,
    0.6827554,
    0.0008187201,
    0.9157639,
    0.626506,
    -0.002397363,
    -0.088837735,
    0.38987082,
    0.00303144,
    0.2895544,
    -0.16646424,
    -0.008103551,
    -0.26244026,
    -0.4901274,
    -0.009149382,
    2.3455992,
    -0.7211382,
    1.9804211,
    0.00917124,
    0.5224504,
    -4.4372244,
    -0.8496559,
    0.4749193,
    1.473498,
    0.45706263,
    0.046547048,
    0.25537905,
    0.77724373,
    0.07417753,
    0.39354962,
    -0.6581425,
    0.71233255,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.5941038,
    -0.046199616,
    -0.00813673,
    -0.009886575,
    0.1387866,
    -0.22598192,
    0.00021132734,
    -2.1441894,
    -1.8108326,
    0.0011727996,
    -0.16316642,
    0.30345392,
    -0.008626261,
    -0.006473,
    -1.3621367,
    -0.119089246,
    -0.0051336214,
    -0.0013411185,
    0.010755843,
    -1.2026048,
    0.38548076,
    1.398525,
    1.9160999,
    2.1099184,
    2.0770369,
    1.4328448,
    -1.7100422,
    -0.6515236,
    0.332164,
    0.62545145,
    0.0065994086,
    -0.005360393,
    -0.9618395,
    -1.1140851,
    -1.7814239,
    -0.5971449,
    -1.9552374,
    -0.23968147,
    -1.2191556,
    -1.1778564,
    0.42183256,
    -0.11105158,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.4999874,
    0.31543893,
    -0.002408173,
    -0.93778354,
    1.1441715,
    0.0077593178,
    0.79672486,
    0.83366203,
    -0.0054027913,
    0.49028045,
    0.045144238,
    0.0036244253,
    -0.30533037,
    -0.3648391,
    0.09491095,
    3.3036993,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_0KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    1.1934254,
    2.120323,
    1.2430247,
    1.5578215,
    0.8117153,
    0.80191374,
    0.8562086,
    2.0053537,
    1.9708236,
    1.8948846,
    1.8255349,
    1.7871963,
    1.7220316,
    0.5266797,
    0.9778132,
    1.0258836,
    1.5100344,
    1.5503709,
    1.8350066,
    0.3007276,
    1.0268393,
    1.1924803,
    1.7332131,
    2.0178351,
    2.3564794,
    0.51068044,
    0.59444654,
    0.58296585,
    0.59347135,
    0.65844125,
    0.7259616,
    0.46325848,
    0.61478347,
    0.59494126,
    0.6763882,
    0.68163186,
    0.6764723,
    2.6706195,
    0.7023365,
    1.9226613,
    0.449804,
    1.6907427,
    0.21325855,
    0.8668024,
    1.2791498,
    1.0777186,
    0.20063144,
    0.0325292,
    -0.61441153,
    0.8071817,
    0.11018914,
    -0.14571346,
    -0.7755071,
    0.7466078,
    0.92895424,
    0.9679354,
    0.66469526,
    0.5754342,
    0.93658453,
    2.3148484,
    1.7294459,
    0.63050115,
    0.12631623,
    -0.6953421,
    0.29651612,
    -0.35572377,
    -0.340796,
    -0.5830323,
    -0.22383194,
    -0.40741822,
    0.21540955,
    0.33331642,
    0.12449331,
    -0.44232416,
    -0.5021624,
    -0.7337739,
    -0.5365259,
    0.13491912,
    0.3515157,
    1.021414,
    1.4568235,
    1.5318941,
    1.6800811,
    2.2144501,
    0.56353605,
    0.0522281,
    1.7152855,
    2.013777,
    1.7044408,
    1.527529,
    1.3126302,
    1.0643998,
    0.86527383,
    0.5552744,
    0.4961382,
    0.16985632,
    0.41075563,
    0.78996354,
    1.0417092,
    1.2733637,
    1.6447752,
    1.958245,
    2.2313056,
    2.684822,
    -0.25319389,
    -0.14089634,
    -0.00042947117,
    0.40849167,
    0.15757892,
    0.19240065,
    0.0039651175,
    2.5330312,
    1.1496936,
    0.088246025,
    0.21619347,
    -0.018445926,
    -0.09947163,
    0.021181094,
    -0.20960723,
    -0.15553854,
    0.0011965558,
    -0.7711064,
    -0.33462226,
    -0.022167776,
    0.36664745,
    0.83304906,
    -0.05155115,
    -0.26906085,
    0.11133369,
    0.37005797,
    0.64382666,
    -0.582015,
    -0.6899284,
    -0.07974318,
    0.49344015,
    1.0204072,
    -0.6946636,
    -0.6975323,
    -0.08622348,
    0.54572326,
    1.2114333,
    0.051270057,
    -0.19594707,
    0.31481135,
    0.7558196,
    1.0607862,
    0.04180372,
    -0.48880428,
    0.22865881,
    0.7804369,
    1.0953442,
    0.011131986,
    -0.641227,
    -0.017278342,
    0.67587614,
    1.0690733,
    -0.2245545,
    -0.45071855,
    -0.23752868,
    -0.14942531,
    0.27806848,
    -0.69804704,
    -0.7528831,
    -0.31344828,
    0.18480103,
    0.7662458,
    -0.6478573,
    -0.6734279,
    -0.20159787,
    0.3294253,
    0.8703914,
    0.16403131,
    -0.051825043,
    0.037121918,
    0.326264,
    -0.5088197,
    -0.66873044,
    -0.16486837,
    0.4576661,
    -0.64018905,
    -0.6234017,
    -0.13846448,
    0.4281582,
    -0.024577213,
    0.19658335,
    0.38660857,
    0.16253957,
    0.39644837,
    0.5470701,
    0.073524766,
    0.06648111,
    -0.11331355,
    -0.34050196,
    -0.06794067,
    0.1636326,
    -0.9895545,
    -0.40780735,
    -0.40873307,
    -0.44506785,
    -0.2132794,
    -0.31229034,
    -0.0066909315,
    0.0056339707,
    0.005903894,
    -0.0017206976,
    -0.0018851925,
    0.007400766,
    -0.000116079114,
    -0.009369239,
    0.0092722215,
    0.0030306866,
    -0.00916178,
    -0.0003501959,
    0.00912733,
    -0.008776911,
    -2.095985,
    -1.8689729,
    -1.9149458,
    -1.8001412,
    -1.8411449,
    -1.7335951,
    -0.353579,
    -0.67275184,
    -0.9003035,
    -1.2646599,
    -1.4356898,
    -1.5096813,
    -0.4900218,
    -0.70925087,
    -0.7292637,
    -1.5361589,
    -1.8510695,
    -2.2163115,
    -0.55822134,
    -0.74321145,
    -0.749655,
    -0.6858374,
    -0.7158706,
    -0.7415396,
    -0.44839773,
    -0.554707,
    -0.50514334,
    -0.65249324,
    -0.65489197,
    -0.650609,
    -2.640129,
    -0.99079555,
    -1.7968231,
    -0.6326289,
    -1.5495824,
    -0.2415972,
    -0.71111757,
    -1.0856165,
    -1.4564115,
    -0.33479616,
    0.17600133,
    0.46915403,
    -1.1546757,
    -0.2315491,
    0.31479636,
    0.8630783,
    -0.68411046,
    -0.69212383,
    -0.5551443,
    -1.090844,
    -0.5048212,
    -0.96655196,
    -2.1603408,
    -0.8897757,
    -0.4256363,
    -0.072818846,
    -0.611021,
    -0.09907416,
    0.38140354,
    0.22853199,
    0.100554004,
    0.26715943,
    0.43214673,
    0.035134062,
    -0.08830915,
    -0.11004916,
    0.4244821,
    0.5180266,
    1.220428,
    0.33398932,
    0.047453094,
    0.1423579,
    -0.9749962,
    -1.0671275,
    -1.2090956,
    -1.4607978,
    -0.4937212,
    -0.057877466,
    -0.002311611,
    -2.2776039,
    -1.9298275,
    -1.6983771,
    -1.4808214,
    -1.1877689,
    -1.0232127,
    -0.762387,
    -0.553453,
    -0.46398017,
    -0.5181929,
    -0.8615421,
    -1.1829005,
    -1.5407465,
    -1.7824261,
    -2.0161123,
    -2.4445806,
    -2.7328498,
    -2.9151418,
    0.26559386,
    0.14206205,
    -0.031242086,
    -0.21607694,
    -0.060737178,
    -0.12395811,
    -0.009359051,
    -1.4593757,
    -0.6475967,
    -0.060757544,
    -0.13929994,
    -0.050806947,
    0.23346047,
    -0.027341237,
    0.21560906,
    0.16817875,
    0.0038835995,
    0.59463257,
    0.37976375,
    0.08203165,
    -0.2867285,
    -0.7000718,
    -0.17344941,
    0.23576488,
    -0.059059586,
    -0.38548285,
    -0.78052014,
    0.65868765,
    0.7058092,
    0.18761602,
    -0.4420316,
    -0.9232201,
    0.74603164,
    0.72087485,
    0.106026694,
    -0.5502029,
    -1.0431743,
    0.050491665,
    0.29655954,
    -0.13391039,
    -0.5678117,
    -0.9832728,
    0.051638346,
    0.52292484,
    -0.14201885,
    -0.67778826,
    -1.065145,
    0.011358016,
    0.57518554,
    0.02662194,
    -0.63919,
    -1.0471883,
    0.11800437,
    0.36788422,
    0.16063023,
    0.057796583,
    -0.1334468,
    0.5969874,
    0.69941163,
    0.23558089,
    -0.19123891,
    -0.7423414,
    0.6179788,
    0.5919814,
    0.1529298,
    -0.25781667,
    -0.839087,
    -0.37504083,
    -0.07825148,
    -0.06855627,
    -0.4871538,
    0.44077566,
    0.53345525,
    0.12605302,
    -0.45133865,
    0.6442798,
    0.60811156,
    0.09579721,
    -0.49108452,
    -0.056778904,
    -0.38410217,
    -0.67221206,
    -0.1453815,
    -0.34331146,
    -0.6601029,
    0.093107015,
    -0.09563013,
    0.10127511,
    0.24693692,
    0.39835462,
    0.12163839,
    0.73232764,
    0.33835533,
    0.47674802,
    0.38958058,
    0.19597532,
    0.3830076,
    0.0028358363,
    0.0036063595,
    0.008521158,
    0.0024795057,
    -0.0011674287,
    -3.0069612e-5,
    -0.0075867055,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_0KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    -0.21254763,
    0.23103847,
    -0.033314772,
    0.28951204,
    0.08258201,
    -0.20170505,
    -0.083164066,
    0.039200466,
    -0.00088396505,
    0.3021171,
    0.11830643,
    -0.081436746,
    -0.40565103,
    -0.37145954,
    -0.18355277,
    0.06397571,
    0.20453936,
    0.55752325,
    -0.12067064,
    -0.30509105,
    -0.22406316,
    0.04068911,
    0.06334039,
    0.038877312,
    -2.746777,
    -0.87377214,
    -0.65470624,
    0.73748547,
    1.1899408,
    2.4166262,
    -0.82226,
    -1.3962785,
    -1.4452674,
    0.5082308,
    1.2789531,
    2.7618878,
    -0.3863811,
    0.031400807,
    -0.102757595,
    -0.38964626,
    -0.14711878,
    -0.31159613,
    -2.9462645,
    1.2216566,
    0.49116233,
    -4.1368756,
    -3.0489886,
    0.14062,
    0.4538722,
    -0.20252825,
    0.1369588,
    -0.058979962,
    0.08831377,
    0.02167715,
    -0.26413515,
    0.028735323,
    0.47112805,
    0.67481583,
    -0.037136614,
    -0.023578765,
    0.06294667,
    -0.05659834,
    -1.2630483,
    0.25168982,
    0.096158154,
    0.43390813,
    1.3263559,
    -0.38228187,
    0.30753988,
    -0.17709245,
    0.021742836,
    0.3967858,
    0.37994313,
    -0.5040257,
    -0.60063547,
    -0.5784962,
    -0.09444315,
    0.42124468,
    -0.95363337,
    -0.8204556,
    -0.515455,
    0.36224493,
    3.6014647,
    0.6930546,
    -0.022836408,
    1.229127,
    -0.20067202,
    -0.88029164,
    -1.945374,
    0.27076137,
    0.24485452,
    -0.2529798,
    0.3806981,
    -0.1388048,
    -0.43375793,
    1.5184788,
    0.4213168,
    1.0030801,
    -0.12647864,
    -0.28902504,
    -0.68267906,
    0.3738028,
    0.69471484,
    1.1517682,
    -0.16151088,
    -0.5155371,
    -0.17652579,
    2.4710944,
    0.30520877,
    2.0582628,
    1.0057538,
    0.5753131,
    -4.1801777,
    -0.5127082,
    0.45404467,
    1.4079078,
    0.3417027,
    0.39399534,
    0.1540643,
    0.2801745,
    0.3059642,
    0.2046346,
    -0.05043553,
    0.38525426,
    0.006237678,
    0.3969141,
    0.18871525,
    -1.5612092,
    -0.39385808,
    0.7173354,
    -0.24273492,
    -0.060208935,
    0.20501433,
    0.06431221,
    0.007810466,
    -0.006842167,
    0.25922537,
    0.22373736,
    1.4958718,
    -2.2605436,
    -1.6751494,
    -1.7748834,
    -0.15428533,
    -0.13730817,
    0.3625118,
    0.7318449,
    -2.1013966,
    -1.6390495,
    -0.58728755,
    0.705842,
    0.05825597,
    -1.3842419,
    0.5513746,
    1.3413002,
    1.6110371,
    1.1969258,
    1.6104766,
    0.26784024,
    -0.82374805,
    -0.27678168,
    0.63337976,
    1.37859,
    1.5559744,
    -0.2600439,
    -1.5502057,
    -0.7311096,
    -0.89582264,
    -0.8938125,
    -1.1783751,
    -0.29525974,
    -1.3265866,
    -2.8699765,
    0.3670057,
    -0.02602606,
    -0.094160676,
    0.038038492,
    0.18733682,
    0.1730221,
    0.4983536,
    -0.6600161,
    0.07679693,
    1.6442226,
    0.74923706,
    1.2906911,
    -0.0030353356,
    1.5110451,
    1.8540987,
    0.46657535,
    1.0854816,
    0.6397842,
    0.38965192,
    0.4017657,
    0.15735355,
    0.2403061,
    0.20836167,
    0.8231178,
    3.0737865,
    -0.0031571696,
    -0.0045039677,
    -0.0037830565,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_2KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    0.7437009,
    0.88545287,
    0.19526407,
    0.29426312,
    -0.065220475,
    -0.17301296,
    0.0607466,
    2.0713103,
    1.8167791,
    1.919212,
    1.6310564,
    1.6999768,
    1.5359058,
    0.41772538,
    0.63971794,
    0.6102413,
    0.85090774,
    1.0000782,
    0.94863147,
    1.0098729,
    0.973291,
    1.0891591,
    1.4621317,
    1.7862892,
    1.8896858,
    0.52403134,
    0.5951296,
    0.6707763,
    0.6534833,
    0.701061,
    0.69654423,
    0.38658276,
    0.4732608,
    0.4710909,
    0.5678616,
    0.60141766,
    0.52438164,
    3.7124982,
    0.98155034,
    2.1033177,
    0.7905679,
    1.8011534,
    0.44629934,
    0.7296002,
    1.4639292,
    1.0526316,
    0.09663061,
    -0.1646864,
    -0.37136966,
    0.5485016,
    0.076244086,
    -0.087424725,
    -0.3829868,
    0.6861073,
    0.66112655,
    1.3278128,
    0.46389264,
    0.2886341,
    0.8644502,
    1.4120444,
    1.5059712,
    0.24260882,
    -0.1617824,
    0.61243075,
    0.008533716,
    -0.28586876,
    -0.14746663,
    -0.59308827,
    -0.17563926,
    -0.4097066,
    -0.0030846521,
    0.4437847,
    0.08495883,
    -0.518074,
    -0.3833789,
    -0.4537251,
    -0.47809204,
    -0.0047400133,
    0.05526029,
    1.3132437,
    1.7403417,
    1.9350436,
    2.020546,
    2.1697469,
    1.8572448,
    0.30753398,
    1.0016495,
    1.9681445,
    1.849649,
    1.813982,
    1.3533915,
    1.0218441,
    0.61412597,
    0.23548426,
    -0.16628109,
    0.10521538,
    0.25683796,
    0.53122175,
    0.69867605,
    0.8771424,
    1.1381037,
    1.2362769,
    1.4296772,
    1.7488784,
    -0.2500977,
    -0.13253221,
    0.009791512,
    0.27186063,
    0.03437335,
    0.12110568,
    -0.0008263552,
    3.1106114,
    0.98438287,
    0.103923775,
    0.19065051,
    -0.014997564,
    -0.19389538,
    0.01814469,
    -0.17391151,
    -0.14582519,
    0.0011965558,
    -0.5818916,
    -0.27687624,
    -0.058846954,
    0.2814983,
    0.65700305,
    0.3382503,
    -0.08985159,
    0.043535955,
    0.21941994,
    0.47822765,
    -0.66139543,
    -0.54940766,
    -0.1279494,
    0.43981096,
    0.9447187,
    -0.65702605,
    -0.62342435,
    -0.10741967,
    0.47014546,
    0.9823252,
    -0.148522,
    -0.19237718,
    0.093786076,
    0.44742814,
    0.6739421,
    0.029517014,
    -0.46726492,
    0.03906727,
    0.581224,
    0.9955951,
    0.0033624638,
    -0.51643753,
    -0.044720456,
    0.6188425,
    1.043875,
    -0.11412034,
    -0.3615239,
    -0.21962227,
    -0.11381071,
    0.07139206,
    -0.61163944,
    -0.6572478,
    -0.26043224,
    0.20111924,
    0.7312903,
    -0.5867197,
    -0.6044934,
    -0.20965493,
    0.25752887,
    0.7148344,
    0.43765527,
    0.047210626,
    0.055866636,
    0.22065887,
    -0.45117188,
    -0.47552294,
    -0.097515516,
    0.41689855,
    -0.5860475,
    -0.5548116,
    -0.049090803,
    0.47743678,
    -0.006767434,
    0.0920626,
    0.20538099,
    0.056619354,
    0.097664826,
    0.3105088,
    -0.008017384,
    -0.0021619163,
    -0.16160774,
    -0.37050027,
    -0.47566363,
    -0.18764415,
    -0.5877954,
    -0.23738754,
    -0.26300544,
    -0.18415312,
    0.008758573,
    -0.41006532,
    -0.0066909315,
    0.0056339707,
    0.005903894,
    -0.0017206976,
    -0.0018851925,
    0.007400766,
    -0.000116079114,
    -0.009369239,
    0.0092722215,
    0.0030306866,
    -0.00916178,
    -0.0003501959,
    0.00912733,
    -0.008776911,
    -2.239426,
    -2.021194,
    -1.9702089,
    -1.6842271,
    -1.6855975,
    -1.6526088,
    -0.7669632,
    -1.1356806,
    -1.11782,
    -1.5022734,
    -1.5667585,
    -1.6366625,
    -0.6063267,
    -0.93105096,
    -0.92720854,
    -1.3618859,
    -1.6175842,
    -1.9479764,
    -0.46848792,
    -0.6762221,
    -0.76547325,
    -0.64253306,
    -0.7117808,
    -0.65308064,
    -0.32415715,
    -0.44382837,
    -0.4685479,
    -0.4879138,
    -0.527195,
    -0.49504402,
    -3.044955,
    -0.66107136,
    -2.3201048,
    -0.25031057,
    -1.3145955,
    0.114775784,
    -0.61069155,
    -1.0580244,
    -1.1104802,
    -0.30853087,
    0.1607429,
    0.25181735,
    -0.85540783,
    -0.19898857,
    0.23591617,
    0.33579713,
    -0.60893357,
    -0.7544964,
    -1.1108301,
    -0.87922204,
    -0.40844586,
    -0.66576725,
    -1.2592542,
    -0.8686467,
    -0.38750345,
    0.06145276,
    -0.34788644,
    0.07361616,
    0.3373113,
    0.26718038,
    0.56466305,
    0.077224165,
    0.40723214,
    -0.09321381,
    -0.2153665,
    0.06744895,
    0.30342454,
    0.39701617,
    0.49668798,
    0.3121308,
    0.26770908,
    -0.40897334,
    -0.4349228,
    -0.45781237,
    -0.6480581,
    -0.47344804,
    -0.19181895,
    -0.0200856,
    -0.005590409,
    -2.4683003,
    -1.8808335,
    -1.5122947,
    -1.2105953,
    -0.67312443,
    -0.6112307,
    -0.546114,
    -0.3038917,
    -0.20546705,
    -1.1232316,
    -1.3680482,
    -1.4395629,
    -1.6733555,
    -1.891849,
    -2.069022,
    -2.3817623,
    -2.7360692,
    -2.6496422,
    0.20745976,
    0.14819598,
    0.012384178,
    -0.21984011,
    -0.007499698,
    -0.14558305,
    0.09687771,
    -1.2688937,
    -0.45021525,
    -0.06591257,
    -0.134539,
    -0.0091740815,
    0.08852262,
    -0.02902677,
    0.25125736,
    0.22539195,
    0.0020160126,
    0.43682098,
    0.25366735,
    0.042066887,
    -0.20999454,
    -0.5019765,
    -0.42391515,
    -0.110022284,
    -0.20082912,
    -0.19277826,
    -0.12715302,
    0.60158324,
    0.523674,
    0.05762273,
    -0.40900135,
    -0.8283509,
    0.7167685,
    0.5760551,
    0.07013515,
    -0.45124513,
    -0.9479701,
    -0.14930047,
    -0.21062149,
    -0.36587644,
    -0.46210366,
    -0.6355787,
    0.039351486,
    0.46774897,
    -0.17189384,
    -0.6371208,
    -0.9978289,
    0.0035884446,
    0.47513935,
    0.016028289,
    -0.4940402,
    -1.0308825,
    -0.45566222,
    -0.09486141,
    -0.05904847,
    0.034736067,
    -0.23514087,
    0.5883943,
    0.56767726,
    0.1568857,
    -0.23081557,
    -0.65090495,
    0.61836857,
    0.49275476,
    0.11226957,
    -0.2760121,
    -0.85527766,
    -0.4789955,
    -0.23166142,
    -0.16960587,
    -0.19660826,
    0.6301705,
    0.52656454,
    0.13504598,
    -0.34680808,
    0.6753455,
    0.55189174,
    0.10849106,
    -0.38290882,
    -0.1145856,
    -0.15288198,
    -0.23853426,
    -0.12235262,
    -0.29655564,
    -0.0677183,
    -0.07652717,
    0.06469969,
    0.3655002,
    0.18705714,
    0.112792455,
    0.038995665,
    0.46951136,
    0.060199346,
    0.2972079,
    0.09310398,
    0.041367326,
    0.22415102,
    0.0028358363,
    0.0036063595,
    0.008521158,
    0.0024795057,
    -0.0011674287,
    -3.0069612e-5,
    -0.0075867055,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_2KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    0.13053814,
    0.2594758,
    0.24701957,
    0.32714072,
    0.2772792,
    -0.13828218,
    -0.10215987,
    0.098732464,
    0.019896906,
    -0.056102987,
    -0.07790267,
    -0.42510068,
    -0.30549508,
    -0.45333365,
    -0.52566814,
    -0.29246622,
    -0.28865135,
    -0.26258516,
    0.11082738,
    0.17156202,
    -0.038298223,
    0.46970895,
    0.49330792,
    0.45982635,
    -1.5306015,
    -0.70623446,
    -1.6051459,
    1.1686573,
    1.569235,
    2.0058358,
    -2.5606222,
    -1.2750763,
    -2.0411723,
    0.8546261,
    1.8828146,
    2.5776637,
    -0.54405427,
    0.17359827,
    -0.07840562,
    -0.24876921,
    -0.18755311,
    -0.26911703,
    -3.0770643,
    1.1082592,
    0.26119882,
    -2.5300553,
    -2.871422,
    0.03775389,
    0.4238567,
    -0.33088768,
    0.10647789,
    -0.13209525,
    0.08560816,
    0.0468911,
    -0.21627295,
    0.05250266,
    0.38945135,
    0.81790227,
    -0.23717421,
    -0.22604689,
    -0.19218688,
    -0.20800717,
    -0.033787068,
    0.122389324,
    -0.10022763,
    -0.073142864,
    0.6767682,
    -0.04690488,
    0.33146432,
    -0.22365022,
    -0.0036192038,
    0.46967515,
    0.51455325,
    -0.2567931,
    -0.40734252,
    -0.42442977,
    -0.001470779,
    0.22078364,
    -1.2574711,
    -0.85755,
    -0.74906814,
    -0.17770536,
    3.6172705,
    0.54112595,
    0.6423261,
    0.9667451,
    0.199188,
    -1.3389384,
    0.16624917,
    0.19690222,
    -0.4323959,
    -0.23050337,
    0.34784153,
    0.61946857,
    -0.7219571,
    1.2463146,
    0.5738733,
    2.0701928,
    0.049495548,
    -0.42689493,
    -1.0372397,
    0.26199716,
    0.7308859,
    1.6175814,
    -0.0076032556,
    -0.68225515,
    0.12284207,
    2.349499,
    0.1210995,
    2.3559947,
    1.0110165,
    0.4826661,
    -4.137684,
    -0.87189615,
    0.58148867,
    1.5087106,
    0.51515806,
    0.27801824,
    0.1363943,
    0.39705855,
    0.3311712,
    0.13834442,
    -0.009231192,
    0.37948412,
    0.013899716,
    0.34986228,
    0.20538929,
    -1.3363253,
    -0.6954224,
    -0.26191995,
    -0.23036456,
    -0.17417376,
    0.21034743,
    0.08639803,
    0.009099964,
    0.0013535284,
    0.37892112,
    0.085819654,
    1.4048743,
    -2.3133554,
    -1.2493757,
    -1.597994,
    -0.20851141,
    -0.025360083,
    0.2432856,
    0.7032871,
    -1.9057463,
    -1.1427703,
    -0.49652052,
    0.84754634,
    0.08384458,
    -1.2245532,
    0.5221889,
    1.2940357,
    1.6118815,
    1.3088297,
    1.4081663,
    -0.2697331,
    -0.76520354,
    -0.34188744,
    0.6127755,
    1.3039353,
    1.4138254,
    0.12542252,
    -1.4124713,
    -0.9411064,
    -0.9240627,
    -0.92811567,
    -1.1624233,
    -0.3372181,
    -1.4078445,
    -2.251844,
    0.36175016,
    -0.023277655,
    -0.08955618,
    0.0533145,
    0.14049543,
    -0.019719895,
    -0.007010526,
    -0.096855216,
    -0.22378309,
    1.7177029,
    0.7570125,
    1.2928087,
    0.07078977,
    1.540554,
    1.9195119,
    0.41963235,
    0.9632119,
    0.60895467,
    0.32042414,
    0.36884412,
    0.16893406,
    0.3075245,
    -0.011423582,
    0.7850744,
    3.0451703,
    0.0,
    0.0,
    0.0,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_0KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.5260254,
    1.3981665,
    0.72397816,
    0.7480217,
    0.34915733,
    0.22474474,
    0.104319565,
    2.0247045,
    1.8725119,
    1.9148173,
    1.8326218,
    1.8607532,
    1.8237123,
    0.7036025,
    0.9422245,
    0.98083466,
    1.1995453,
    1.2472026,
    1.3503917,
    0.24518037,
    0.91849625,
    1.0735738,
    1.1956267,
    1.5352968,
    1.8216234,
    0.3873904,
    0.4902689,
    0.4932914,
    0.5406109,
    0.59765464,
    0.6164048,
    0.41335326,
    0.5268837,
    0.5369838,
    0.60244703,
    0.6442422,
    0.6559075,
    2.7517238,
    0.67429024,
    1.9399052,
    0.34584996,
    1.4416008,
    0.11752538,
    0.54169905,
    1.3291014,
    1.2009625,
    0.14865388,
    -0.12718442,
    -0.62834615,
    0.72712874,
    0.14936167,
    -0.1350595,
    -0.86022276,
    0.645478,
    0.8044357,
    0.33058703,
    0.7166871,
    0.40451533,
    0.55055946,
    1.5722682,
    0.810789,
    0.5700084,
    -0.0738667,
    0.04605738,
    0.08660799,
    -0.3029962,
    -0.14400913,
    -0.38618973,
    -0.10004794,
    -0.35520455,
    0.025080249,
    0.36211365,
    0.0076295533,
    -0.3205864,
    -0.3301498,
    -1.4023331,
    -0.4036131,
    0.04246789,
    -0.056903064,
    0.70958793,
    0.9972265,
    1.0323231,
    1.1433917,
    2.0012074,
    0.75995946,
    0.18049878,
    1.1382614,
    1.6150917,
    1.4496311,
    1.209325,
    1.1119984,
    0.9093921,
    0.7976904,
    0.8385424,
    0.3832492,
    0.8965266,
    1.0049195,
    1.045653,
    1.1171058,
    1.0701063,
    1.0085479,
    1.0542511,
    1.043286,
    1.1167165,
    -0.20745036,
    -0.19930933,
    0.01884569,
    0.29508638,
    0.057431977,
    0.19512218,
    0.06295723,
    1.8070332,
    0.8474731,
    0.045506276,
    0.14388882,
    0.05971458,
    -0.17401087,
    0.036062676,
    -0.16531664,
    -0.13995354,
    0.0011965558,
    -0.27779916,
    -0.17068897,
    -0.13668737,
    -0.06288651,
    0.118713625,
    0.3348358,
    0.22642851,
    -0.023978617,
    0.032729827,
    -0.0049439915,
    0.19810167,
    0.42254373,
    -0.48232397,
    -0.36366725,
    -0.121734105,
    0.10963349,
    0.41941896,
    0.7757055,
    -0.53706765,
    -0.4686869,
    -0.2076317,
    0.09858584,
    0.47334006,
    0.74932736,
    0.10421352,
    -0.12878314,
    0.15696976,
    0.2639221,
    0.5070129,
    0.64591545,
    -0.016114336,
    -0.28458968,
    0.06770645,
    0.27951497,
    0.67854923,
    0.82952416,
    -0.06445232,
    -0.29498026,
    0.023267064,
    0.30086845,
    0.6438913,
    0.7631808,
    -0.118277155,
    -0.21287724,
    -0.24297118,
    -0.27623022,
    -0.22071745,
    -0.17154884,
    -0.6015765,
    -0.64025545,
    -0.46463126,
    -0.22319575,
    -0.065043285,
    0.23847279,
    -0.5913643,
    -0.5799439,
    -0.37732983,
    -0.1230137,
    0.12931944,
    0.41911927,
    0.40042093,
    0.10638707,
    -0.009283888,
    0.04057498,
    0.20492032,
    -0.36444148,
    -0.34534657,
    -0.20742156,
    0.0027235777,
    0.3786954,
    -0.5050344,
    -0.42664927,
    -0.2550058,
    0.031246189,
    0.38984394,
    -0.052780192,
    0.014400152,
    0.28421688,
    0.0874923,
    0.08952927,
    0.38697383,
    -0.060501754,
    0.050283007,
    -0.10843704,
    -0.5712236,
    -0.1553447,
    -0.1427077,
    -0.525301,
    -0.7824406,
    -0.39503077,
    -0.44023353,
    -0.24107076,
    -0.1271978,
    -0.008776911,
    0.006379608,
    -0.0034764553,
    -0.0019571641,
    -0.0020065904,
    -0.0007181382,
    -0.002883594,
    0.0066047404,
    -0.00401304,
    -1.9479016,
    -1.8645626,
    -1.8587121,
    -1.7953298,
    -1.8637584,
    -1.909721,
    -0.38585633,
    -0.51091474,
    -0.7388113,
    -0.8815363,
    -1.053469,
    -1.2388775,
    -0.38502455,
    -0.65981555,
    -0.74209934,
    -1.1221787,
    -1.413949,
    -1.8765242,
    -0.48172122,
    -0.5393453,
    -0.6000646,
    -0.5705135,
    -0.6881096,
    -0.6937526,
    -0.4628134,
    -0.48218668,
    -0.4678363,
    -0.6001672,
    -0.60776347,
    -0.6200816,
    -2.9423313,
    -1.0733209,
    -1.9720051,
    -0.6264398,
    -1.7307589,
    -0.16018885,
    -0.756001,
    -1.4604536,
    -1.5988214,
    -0.22758669,
    0.07897866,
    0.63390046,
    -0.9393373,
    -0.28837788,
    0.05044465,
    0.8656982,
    -0.5770915,
    -0.8555534,
    -1.3543518,
    -0.617612,
    -0.34474996,
    -0.36099026,
    -0.8069862,
    -0.7824545,
    -0.33095998,
    0.07173737,
    -0.06622965,
    0.11685979,
    0.37502143,
    0.20357169,
    0.6225095,
    0.08614482,
    0.34539208,
    -0.015830373,
    -0.061672747,
    0.053593338,
    0.33770278,
    0.6275799,
    0.5772417,
    0.4402966,
    0.11322234,
    0.14997195,
    -1.0598725,
    -1.1164343,
    -1.2348412,
    -1.4416676,
    -0.3054299,
    -0.022976555,
    -0.012352286,
    -1.6773183,
    -1.4560381,
    -1.3451983,
    -1.1370934,
    -1.0157899,
    -0.7768901,
    -0.588037,
    -0.8801219,
    -0.20488967,
    -1.2733647,
    -1.2518464,
    -1.2741492,
    -1.2286752,
    -1.1570795,
    -1.2360414,
    -1.3193092,
    -1.3760091,
    -1.6137987,
    0.2539971,
    0.21406147,
    -7.877605e-6,
    -0.21371952,
    -0.07252865,
    -0.17596357,
    -0.032876488,
    -1.676009,
    -0.61468023,
    -0.04000796,
    -0.11425937,
    -0.054268222,
    0.1336214,
    -0.038800944,
    0.1730891,
    0.14773819,
    0.005889902,
    0.19710633,
    0.19772805,
    0.1205751,
    -0.046415262,
    -0.2439407,
    -0.4326298,
    0.005010138,
    0.14634825,
    0.07682004,
    -0.0024627899,
    -0.1825878,
    -0.36774185,
    0.34934697,
    0.313462,
    0.14398038,
    -0.1251985,
    -0.4206541,
    -0.6356213,
    0.39226347,
    0.42599288,
    0.15019631,
    -0.11745217,
    -0.4892255,
    -0.64696676,
    0.0965015,
    0.20203382,
    -0.0353319,
    -0.20268819,
    -0.42338333,
    -0.6341992,
    -0.017567717,
    0.2912971,
    -0.0052550556,
    -0.21435687,
    -0.5544463,
    -0.6947705,
    -0.05235132,
    0.26012805,
    0.04064835,
    -0.18917567,
    -0.5199291,
    -0.7888113,
    -0.00848152,
    0.04898878,
    0.11526181,
    0.034143668,
    -0.09209209,
    -0.08715492,
    0.39757076,
    0.45110333,
    0.3170013,
    0.08286006,
    -0.089408584,
    -0.18060414,
    0.39353034,
    0.44947994,
    0.30373067,
    0.089972235,
    -0.1422,
    -0.43037933,
    -0.25622985,
    -0.0766612,
    -0.0037016429,
    -0.040843625,
    -0.23293403,
    0.20326725,
    0.26185572,
    0.142444,
    -0.07186468,
    -0.33626702,
    0.33046356,
    0.37326303,
    0.19495608,
    -0.079004966,
    -0.36820465,
    0.043319046,
    -0.10721519,
    -0.30588722,
    -0.06592867,
    -0.042580064,
    -0.3000596,
    0.08669763,
    0.07153176,
    -0.253532,
    0.21312654,
    0.17701538,
    0.088096604,
    0.41539904,
    0.009816156,
    0.39361173,
    0.3672288,
    -0.063781135,
    0.25938812,
    0.009574549,
    -0.0005557751,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_0KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.071415216,
    0.12442188,
    -0.09566238,
    0.025814263,
    0.39882815,
    0.16391489,
    -0.008581701,
    -0.13815464,
    -0.13051334,
    0.02532715,
    0.32889652,
    0.20524831,
    -0.49096164,
    -0.30895254,
    -0.23303136,
    0.23083706,
    0.2964616,
    0.24874644,
    -0.2457537,
    -0.20580663,
    -0.20578788,
    0.22220248,
    0.24823901,
    0.27056095,
    -1.7412964,
    -1.2658727,
    -0.9884221,
    0.21221639,
    0.76972306,
    2.9932423,
    -0.8941595,
    -1.4919809,
    -0.6434117,
    0.1866445,
    0.6302275,
    3.7471368,
    -0.19908637,
    -0.05053481,
    -0.22026536,
    -0.20168278,
    -0.06375163,
    -0.34524786,
    -2.9306319,
    1.2972493,
    0.24407394,
    -3.5354817,
    -2.9933457,
    -0.10331253,
    0.47185874,
    -0.14110662,
    0.10932957,
    0.0013340656,
    0.07475349,
    -0.016720613,
    -0.23927939,
    -0.011462316,
    0.34377918,
    0.72500736,
    0.85285324,
    -0.110500894,
    -0.105389334,
    -0.017042588,
    0.10457068,
    0.0042217867,
    -0.21249798,
    -0.085640766,
    -0.45459425,
    -0.16079083,
    0.55052006,
    2.0902095,
    -0.37665167,
    0.27560315,
    -0.059153534,
    0.035410654,
    0.26979086,
    0.5431667,
    0.5761751,
    -0.40052012,
    -0.44486472,
    -0.42993188,
    -0.155777,
    0.3429057,
    0.74014395,
    -0.7196886,
    -0.66130596,
    -0.5823512,
    -0.061252877,
    1.1902641,
    2.376007,
    0.48015076,
    -0.05263098,
    0.55019283,
    0.35582376,
    -0.3000633,
    -0.9577861,
    0.37041304,
    0.1807514,
    -0.058853548,
    0.19539088,
    0.03101509,
    -1.0235001,
    1.6822823,
    0.46977645,
    0.50950366,
    -0.1764842,
    -0.2133276,
    -1.0270724,
    0.4235578,
    0.47018492,
    0.59907496,
    -0.095802486,
    -0.2432442,
    -0.01910542,
    2.5890062,
    0.13449658,
    2.3261929,
    0.96748704,
    0.44940996,
    -4.1517406,
    -1.059962,
    0.81751895,
    1.4057382,
    0.43485394,
    0.52264935,
    0.0902257,
    0.27415887,
    0.29622847,
    0.18442348,
    -0.011864232,
    0.33198798,
    0.008446357,
    0.29941043,
    0.24493904,
    -1.3369043,
    0.41626275,
    0.329823,
    -0.10362355,
    0.111990936,
    0.22666475,
    0.06236524,
    0.0052082036,
    -0.0012640925,
    0.34226802,
    -0.037712023,
    1.718424,
    -2.2861829,
    -1.5476025,
    -1.518054,
    -0.16363169,
    0.14955013,
    0.6014917,
    1.1120517,
    -1.9437062,
    -1.5143054,
    -0.46494117,
    0.6082318,
    0.21189173,
    -1.3022004,
    0.3113392,
    1.2015941,
    1.7875376,
    1.4595233,
    1.7871752,
    0.90693253,
    -0.98388606,
    -0.55907655,
    0.42635015,
    1.2506536,
    1.9478662,
    0.16841666,
    -1.632099,
    -0.78296155,
    -1.2520697,
    -1.1554351,
    -1.4457918,
    -0.38163397,
    -1.3265272,
    -2.6471865,
    0.33752015,
    -0.024949715,
    -0.024228316,
    -0.09096827,
    0.036369875,
    0.06127662,
    0.20753954,
    -0.15602651,
    0.38449815,
    0.44087142,
    -0.1416285,
    -0.72993124,
    0.1605913,
    1.8260558,
    1.4085311,
    1.6873645,
    -0.23067553,
    1.8025221,
    2.1915245,
    0.68259877,
    1.5146484,
    0.60728025,
    0.6007257,
    0.6491273,
    0.2172983,
    0.6351415,
    0.4959009,
    0.77732676,
    2.8963873,
    0.00053430814,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_2KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.17443039,
    0.26413053,
    -0.11632248,
    -0.3047888,
    -0.63885003,
    -0.7748893,
    -0.7940393,
    1.9414567,
    1.752663,
    1.7806085,
    1.6346484,
    1.7077141,
    1.6981645,
    0.30509588,
    0.4500388,
    0.6122254,
    0.8137145,
    0.96956855,
    1.044271,
    0.83546025,
    0.72365224,
    0.9845236,
    1.206156,
    1.5785843,
    1.918545,
    0.36075157,
    0.50260246,
    0.5724817,
    0.59744096,
    0.67042345,
    0.708218,
    0.3709788,
    0.41769645,
    0.4432354,
    0.5259234,
    0.563642,
    0.58092237,
    3.5532544,
    1.1159707,
    2.1151593,
    0.70241207,
    1.7630984,
    0.37164068,
    0.92618483,
    1.3609756,
    1.4762393,
    0.20928916,
    -0.01818068,
    -0.323301,
    0.8920892,
    0.23191646,
    -0.081901245,
    -0.423391,
    0.58267105,
    0.6122973,
    0.8978532,
    0.5382122,
    0.2774341,
    0.55298597,
    0.9202023,
    0.7796743,
    0.38834977,
    -0.14789394,
    0.35141054,
    0.1888186,
    -0.35126996,
    -0.11756822,
    -0.2840878,
    -0.11472245,
    -0.3221791,
    -0.033048123,
    -0.04785179,
    -0.010724615,
    -0.25706393,
    -0.36625272,
    -0.97757536,
    -0.44434938,
    0.002249254,
    0.030922217,
    0.35235444,
    1.1571245,
    1.2540244,
    1.483147,
    1.9820656,
    1.029635,
    0.20880914,
    1.0485411,
    1.7639854,
    1.5179541,
    1.2883708,
    1.0963544,
    0.95794284,
    0.68986976,
    0.55284494,
    0.24022655,
    0.8235937,
    0.854073,
    0.88586414,
    0.84889114,
    0.79516256,
    0.8042407,
    0.78512937,
    0.80519664,
    0.8434816,
    -0.21677443,
    -0.20892629,
    -0.005124872,
    0.24029344,
    0.01446453,
    0.158169,
    -0.01211989,
    1.5668453,
    0.6920032,
    0.048688,
    0.13718265,
    0.022177782,
    -0.13929981,
    0.030702261,
    -0.13399546,
    -0.12888756,
    0.0011965558,
    -0.19212766,
    -0.15179175,
    -0.14130825,
    -0.053512003,
    0.09033196,
    0.26309386,
    0.35243118,
    0.03820586,
    0.030695086,
    0.06288062,
    0.21231689,
    0.36455595,
    -0.4683749,
    -0.31370404,
    -0.16085951,
    0.048605032,
    0.38355705,
    0.59875673,
    -0.49855846,
    -0.45408413,
    -0.18975142,
    0.12254473,
    0.46041277,
    0.698461,
    -0.025925754,
    -0.048625384,
    0.13482045,
    0.27174804,
    0.4433429,
    0.5316602,
    -0.0413688,
    -0.27298847,
    -0.03201142,
    0.22287163,
    0.55029446,
    0.6831518,
    -0.07232079,
    -0.42375225,
    -0.08560977,
    0.19244337,
    0.55081624,
    0.7475301,
    0.0511586,
    -0.0954228,
    -0.098833226,
    -0.11916446,
    -0.11400253,
    0.08294721,
    -0.55757195,
    -0.56068736,
    -0.37266988,
    -0.1508284,
    0.12940484,
    0.37364766,
    -0.47135237,
    -0.49532,
    -0.31100515,
    -0.080232315,
    0.15511955,
    0.502966,
    0.48274153,
    0.15422699,
    0.03409073,
    0.06950607,
    0.1376494,
    -0.30973426,
    -0.34708783,
    -0.20029686,
    0.0446313,
    0.3712889,
    -0.51025397,
    -0.41792196,
    -0.24316238,
    0.060464468,
    0.3717823,
    -0.035483263,
    0.038370147,
    0.19449934,
    0.09301184,
    0.09421008,
    0.18375587,
    -0.035718612,
    -0.08376349,
    -0.21546791,
    -0.40472835,
    -0.33444023,
    -0.22697097,
    -0.66360825,
    -0.71799093,
    -0.29721323,
    -0.39037347,
    -0.2921447,
    -0.30161637,
    -0.008776911,
    0.006379608,
    -0.0034764553,
    -0.0019571641,
    -0.0020065904,
    -0.0007181382,
    -0.002883594,
    0.0066047404,
    -0.00401304,
    -1.9504095,
    -1.8162606,
    -1.8624536,
    -1.7276186,
    -1.787234,
    -1.7683471,
    -0.6105721,
    -0.9206872,
    -1.0330033,
    -1.1839273,
    -1.3360872,
    -1.4207557,
    -0.5564878,
    -0.7338341,
    -1.0221269,
    -1.1902902,
    -1.601727,
    -1.9136806,
    -0.4951736,
    -0.5418464,
    -0.58853287,
    -0.68590844,
    -0.6715277,
    -0.7114192,
    -0.35095832,
    -0.43131617,
    -0.4555349,
    -0.5283865,
    -0.57238775,
    -0.57059264,
    -3.1267273,
    -0.58342725,
    -2.1735027,
    -0.27527606,
    -1.6040609,
    0.25314602,
    -0.6768546,
    -1.3539826,
    -1.3038627,
    -0.27481553,
    -0.13432594,
    0.32568794,
    -0.97716576,
    -0.28515512,
    0.021567319,
    0.473786,
    -0.42908496,
    -0.7073049,
    -1.2745456,
    -0.65708494,
    -0.42131767,
    -0.4248459,
    -0.43411648,
    -0.60932773,
    -0.50542545,
    0.2693675,
    -0.32510915,
    -0.10461944,
    0.34596306,
    0.21643847,
    0.47405204,
    0.078885816,
    0.3191895,
    -0.058751084,
    -0.1954215,
    0.030683888,
    0.27273038,
    0.4585856,
    0.60027087,
    0.4911542,
    -0.21211335,
    -0.09186639,
    -0.607294,
    -0.77068347,
    -0.9489335,
    -1.366292,
    -0.21634439,
    -0.16939193,
    -0.0057478575,
    -1.6628841,
    -1.4133005,
    -1.144585,
    -1.0333625,
    -0.79556763,
    -0.6313233,
    -0.37643108,
    -0.49751198,
    -0.15866171,
    -1.3496794,
    -1.3528047,
    -1.32465,
    -1.3171387,
    -1.2941186,
    -1.265877,
    -1.3176728,
    -1.3910259,
    -1.5040389,
    0.1954488,
    0.21720576,
    0.0008899905,
    -0.23027645,
    -0.020912295,
    -0.15321323,
    -0.003987732,
    -1.5471567,
    -0.48237023,
    -0.022054339,
    -0.089417145,
    -0.09195609,
    0.114305265,
    -0.03151959,
    0.18302527,
    0.13960351,
    0.005889902,
    0.18241554,
    0.1352905,
    0.07163419,
    -0.04457137,
    -0.18593487,
    -0.35721084,
    -0.22105859,
    -0.033097226,
    -0.013876687,
    -0.029055959,
    -0.15853119,
    -0.33797136,
    0.30388457,
    0.24848904,
    0.12006142,
    -0.095777534,
    -0.36399186,
    -0.5947675,
    0.5090725,
    0.39336106,
    0.1621167,
    -0.09704025,
    -0.41940686,
    -0.685515,
    -0.033637933,
    -0.12438491,
    -0.25775793,
    -0.35100842,
    -0.5066103,
    -0.5436776,
    -0.042821985,
    0.23692055,
    -0.07802916,
    -0.26620454,
    -0.53324336,
    -0.689394,
    -0.060220815,
    0.21591602,
    0.01267774,
    -0.24562424,
    -0.58071136,
    -0.7893159,
    -0.13682197,
    0.11622034,
    0.15330213,
    0.20857233,
    0.1047806,
    0.02046529,
    0.42341527,
    0.4753936,
    0.32802737,
    0.16889405,
    -0.06337538,
    -0.42365065,
    0.38684347,
    0.38983798,
    0.23584816,
    0.05086433,
    -0.13321523,
    -0.43078867,
    -0.41006896,
    -0.16754067,
    -0.03335729,
    -0.051114224,
    -0.14171606,
    0.28924665,
    0.30530298,
    0.18164986,
    -0.03772783,
    -0.26575866,
    0.41713098,
    0.36681774,
    0.22850555,
    -0.009353505,
    -0.3185092,
    0.018665463,
    -0.05970846,
    -0.19327492,
    -0.015451997,
    -0.0988638,
    -0.15585107,
    0.11144405,
    0.14876072,
    0.23821689,
    0.35464954,
    0.17417018,
    0.02745687,
    0.47438303,
    0.16760823,
    -0.009051787,
    0.21214512,
    -0.018253172,
    0.15877892,
    0.009574549,
    -0.0005557751,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_2KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.19618513,
    -0.12603372,
    -0.015536889,
    0.1261336,
    0.39343518,
    0.54471564,
    -0.15491426,
    -0.27759033,
    -0.0069163186,
    -0.0036204353,
    0.2059794,
    0.3110437,
    -0.42611456,
    -0.6068721,
    -0.49104723,
    -0.05461399,
    0.1272986,
    -0.00822559,
    0.1884023,
    -0.13636926,
    -0.13377881,
    0.30591944,
    0.487582,
    0.54234695,
    -1.3201939,
    -0.9234476,
    -0.88198483,
    0.3082681,
    0.94588137,
    2.3325715,
    -1.9623413,
    -0.81226206,
    -1.1284567,
    -0.12128122,
    1.1671778,
    3.1298351,
    -0.39097193,
    0.07514274,
    -0.06557368,
    -0.20560668,
    -0.13817734,
    -0.15567772,
    -1.6164923,
    1.0326616,
    0.21477142,
    -2.8077223,
    -2.551806,
    -0.13339965,
    0.38691,
    -0.30760485,
    0.06981112,
    -0.06082517,
    0.08143008,
    0.050636236,
    -0.19882275,
    0.03367009,
    0.3332777,
    0.6907215,
    0.6812265,
    -0.115635045,
    -0.117798366,
    -0.006480599,
    0.08968755,
    -0.014623408,
    -0.24321537,
    -0.06481637,
    -0.4970192,
    -0.21534547,
    0.51982844,
    1.7268767,
    0.004423392,
    0.30211067,
    -0.06706835,
    0.03738013,
    0.28384575,
    0.4953554,
    0.5341444,
    -0.38101324,
    -0.4474343,
    -0.41911015,
    -0.14857827,
    0.30844328,
    0.6750072,
    -0.97720045,
    -0.56535405,
    -0.17083597,
    0.54298985,
    1.5395478,
    1.096076,
    0.45582753,
    0.016415296,
    -0.33029875,
    0.44426945,
    -0.32968402,
    0.9531575,
    0.41011214,
    0.1216629,
    0.6917996,
    0.18339105,
    0.065131195,
    -0.6355726,
    1.5640646,
    0.46537867,
    1.1751071,
    -0.08667284,
    -0.22987743,
    -0.7127392,
    0.4810418,
    0.8214628,
    0.9918113,
    -0.09119934,
    -0.27208114,
    -0.13251854,
    2.426638,
    -0.104075655,
    2.1405137,
    3.3990076,
    0.45329964,
    -4.655621,
    -0.74131274,
    0.7973329,
    1.3661869,
    0.46773735,
    0.5741953,
    0.087222114,
    0.30638045,
    0.33453366,
    0.08256739,
    0.04432858,
    0.3225368,
    -0.021882322,
    0.32148007,
    0.31549633,
    -1.5004859,
    -0.13966632,
    0.45546106,
    -0.40373558,
    -0.24551375,
    0.18895926,
    0.07625407,
    0.0052082036,
    -0.0012640925,
    0.34141248,
    0.15663096,
    2.02077,
    -2.6822398,
    -1.6883273,
    -1.9041578,
    -0.1886726,
    0.25378472,
    0.5179474,
    1.0816803,
    -2.2359698,
    -1.5015856,
    -0.5805032,
    0.79634327,
    0.31051883,
    -1.2014942,
    0.25040248,
    1.1517992,
    1.6989455,
    1.3853481,
    1.6036713,
    0.7625884,
    -0.92504823,
    -0.5216621,
    0.36561957,
    1.1321492,
    1.6092598,
    0.61432403,
    -2.0228667,
    -0.8177022,
    -1.254545,
    -1.1593713,
    -1.2931123,
    -0.3154228,
    -1.1602424,
    -1.9565928,
    0.32626602,
    -0.028468128,
    -0.036849245,
    -0.112456985,
    0.043217946,
    0.08309858,
    0.24185763,
    -0.17654309,
    0.23051652,
    0.17497836,
    0.30518794,
    -0.17468643,
    -0.17940004,
    1.8823787,
    1.3385825,
    1.6534553,
    0.046787873,
    1.9449157,
    1.957238,
    0.5685186,
    1.369992,
    0.49561453,
    0.5704975,
    0.5515624,
    0.14864062,
    0.68902594,
    0.98338044,
    0.8225161,
    2.7357512,
    0.00053430814,
];
