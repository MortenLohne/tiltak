use std::{array, mem};

use half::f16;

use crate::{
    evaluation::policy_eval::sigmoid,
    position::{num_line_symmetries, num_square_symmetries, Komi},
};

use super::policy_eval::policy_offset;

pub const NUM_VALUE_FEATURES_4S: usize = 264;
pub const NUM_POLICY_FEATURES_4S: usize = 176;

pub const NUM_VALUE_FEATURES_5S: usize = 344;
pub const NUM_POLICY_FEATURES_5S: usize = 200;

pub const NUM_VALUE_FEATURES_6S: usize = 368;
pub const NUM_POLICY_FEATURES_6S: usize = 208;

const fn value_padding<const S: usize>() -> usize {
    match S {
        4 => 2,
        5 => 2,
        6 => 6,
        _ => unimplemented!(),
    }
}

const fn policy_padding<const S: usize>() -> usize {
    match S {
        4 => 7,
        5 => 3,
        6 => 1,
        _ => unimplemented!(),
    }
}

#[derive(Clone, Copy)]
pub struct IndexPair {
    start: usize,
    length: usize,
}

impl IndexPair {
    pub const fn next(start: usize, length: usize) -> (Self, usize) {
        (Self { start, length }, start + length)
    }

    pub fn as_slice<'a, T>(&self, slice: &'a [T]) -> &'a [T] {
        &slice[self.start..self.start + self.length]
    }

    pub fn as_mut_slice<'a, T>(&self, slice: &'a mut [T]) -> &'a mut [T] {
        &mut slice[self.start..self.start + self.length]
    }
}

pub struct ValueIndexes<const S: usize> {
    pub first_ply: IndexPair,
    pub second_ply: IndexPair,
    pub flat_psqt: IndexPair,
    pub wall_psqt: IndexPair,
    pub cap_psqt: IndexPair,
    pub supports_psqt: IndexPair,
    pub captives_psqt: IndexPair,
    pub shallow_supports_per_piece: IndexPair,
    pub deep_supports_per_piece: IndexPair,
    pub shallow_captives_per_piece: IndexPair,
    pub deep_captives_per_piece: IndexPair,
    pub us_to_move_opening_flatstone_lead: IndexPair,
    pub them_to_move_opening_flatstone_lead: IndexPair,
    pub us_to_move_middlegame_flatstone_lead: IndexPair,
    pub them_to_move_middlegame_flatstone_lead: IndexPair,
    pub us_to_move_endgame_flatstone_lead: IndexPair,
    pub them_to_move_endgame_flatstone_lead: IndexPair,
    pub i_number_of_groups: IndexPair,
    pub critical_squares: IndexPair,
    pub critical_square_cap_attack: IndexPair,
    pub flat_next_to_our_stack: IndexPair,
    pub wall_next_to_our_stack: IndexPair,
    pub cap_next_to_our_stack: IndexPair,
    pub num_lines_occupied: IndexPair,
    pub line_control_empty: IndexPair,
    pub line_control_their_blocking_piece: IndexPair,
    pub line_control_other: IndexPair,
    pub sidelined_cap: IndexPair,
    pub fully_isolated_cap: IndexPair,
    pub semi_isolated_cap: IndexPair,
    pub padding: IndexPair,
}

impl<const S: usize> ValueIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;

        let (first_ply, i) = IndexPair::next(i, 1);
        let (second_ply, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (supports_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (captives_psqt, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (shallow_supports_per_piece, i) = IndexPair::next(i, 4);
        let (deep_supports_per_piece, i) = IndexPair::next(i, 4);
        let (shallow_captives_per_piece, i) = IndexPair::next(i, 4);
        let (deep_captives_per_piece, i) = IndexPair::next(i, 4);
        let (us_to_move_opening_flatstone_lead, i) = IndexPair::next(i, 7);
        let (them_to_move_opening_flatstone_lead, i) = IndexPair::next(i, 7);
        let (us_to_move_middlegame_flatstone_lead, i) = IndexPair::next(i, 7);
        let (them_to_move_middlegame_flatstone_lead, i) = IndexPair::next(i, 7);
        let (us_to_move_endgame_flatstone_lead, i) = IndexPair::next(i, 7);
        let (them_to_move_endgame_flatstone_lead, i) = IndexPair::next(i, 7);
        let (i_number_of_groups, i) = IndexPair::next(i, 3);
        let (critical_squares, i) = IndexPair::next(i, 4);
        let (critical_square_cap_attack, i) = IndexPair::next(i, 6);
        let (flat_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (wall_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (cap_next_to_our_stack, i) = IndexPair::next(i, 1);
        let (num_lines_occupied, i) = IndexPair::next(i, S + 1);
        let (line_control_empty, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_their_blocking_piece, i) =
            IndexPair::next(i, S * num_line_symmetries::<S>());
        let (line_control_other, i) = IndexPair::next(i, S * num_line_symmetries::<S>());
        let (sidelined_cap, i) = IndexPair::next(i, 3);
        let (fully_isolated_cap, i) = IndexPair::next(i, 3);
        let (semi_isolated_cap, i) = IndexPair::next(i, 3);
        let (padding, i) = IndexPair::next(i, value_padding::<S>() / 2);

        assert!(i == num_value_features::<S>() / 2);

        ValueIndexes {
            first_ply,
            second_ply,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            supports_psqt,
            captives_psqt,
            shallow_supports_per_piece,
            deep_supports_per_piece,
            shallow_captives_per_piece,
            deep_captives_per_piece,
            us_to_move_opening_flatstone_lead,
            them_to_move_opening_flatstone_lead,
            us_to_move_middlegame_flatstone_lead,
            them_to_move_middlegame_flatstone_lead,
            us_to_move_endgame_flatstone_lead,
            them_to_move_endgame_flatstone_lead,
            i_number_of_groups,
            critical_squares,
            critical_square_cap_attack,
            flat_next_to_our_stack,
            wall_next_to_our_stack,
            cap_next_to_our_stack,
            num_lines_occupied,
            line_control_empty,
            line_control_their_blocking_piece,
            line_control_other,
            sidelined_cap,
            fully_isolated_cap,
            semi_isolated_cap,
            padding,
        }
    }
}

pub const VALUE_INDEXES_4S: ValueIndexes<4> = ValueIndexes::new();
pub const VALUE_INDEXES_5S: ValueIndexes<5> = ValueIndexes::new();
pub const VALUE_INDEXES_6S: ValueIndexes<6> = ValueIndexes::new();

impl<const S: usize> ValueIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> ValueIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn value_indexes<const S: usize>() -> ValueIndexes<S> {
    match S {
        4 => VALUE_INDEXES_4S.downcast_size(),
        5 => VALUE_INDEXES_5S.downcast_size(),
        6 => VALUE_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

pub struct PolicyIndexes<const S: usize> {
    pub flat_psqt_white: IndexPair,
    pub flat_psqt_black: IndexPair,
    pub wall_psqt_white: IndexPair,
    pub wall_psqt_black: IndexPair,
    pub cap_psqt_white: IndexPair,
    pub cap_psqt_black: IndexPair,
    pub move_role_bonus_white: IndexPair,
    pub move_role_bonus_black: IndexPair,
    pub decline_win: IndexPair,
    pub place_to_win: IndexPair,
    pub place_to_draw: IndexPair,
    pub place_to_loss: IndexPair,
    pub place_to_allow_opponent_to_end: IndexPair,
    pub two_flats_left: IndexPair,
    pub three_flats_left: IndexPair,
    pub our_road_stones_in_line: IndexPair,
    pub their_road_stones_in_line: IndexPair,
    pub extend_single_group_base: IndexPair,
    pub extend_single_group_linear: IndexPair,
    pub extend_single_group_to_new_line_base: IndexPair,
    pub extend_single_group_to_new_line_linear: IndexPair,
    pub merge_two_groups_base: IndexPair,
    pub merge_two_groups_linear: IndexPair,
    pub block_merger_base: IndexPair,
    pub block_merger_linear: IndexPair,
    pub place_our_critical_square: IndexPair,
    pub place_their_critical_square: IndexPair,
    pub ignore_their_critical_square: IndexPair,
    pub next_to_our_last_stone: IndexPair,
    pub next_to_their_last_stone: IndexPair,
    pub diagonal_to_our_last_stone: IndexPair,
    pub diagonal_to_their_last_stone: IndexPair,
    pub attack_strong_flats: IndexPair,
    pub blocking_stone_blocks_extensions_of_two_flats: IndexPair,
    pub attack_strong_stack_with_wall: IndexPair,
    pub attack_strong_stack_with_cap: IndexPair,
    pub attack_last_movement: IndexPair,
    pub place_last_movement: IndexPair,
    pub simple_movement: IndexPair,
    pub simple_capture: IndexPair,
    pub simple_self_capture: IndexPair,
    pub pure_spread: IndexPair,
    pub fcd_highest_board: IndexPair,
    pub fcd_highest_stack: IndexPair,
    pub fcd_other: IndexPair,
    pub stack_captured_by_movement: IndexPair,
    pub stack_capture_in_strong_line: IndexPair,
    pub stack_capture_in_strong_line_cap: IndexPair,
    pub move_cap_onto_strong_line: IndexPair,
    pub move_cap_onto_strong_line_with_critical_square: IndexPair,
    pub recapture_stack_pure: IndexPair,
    pub recapture_stack_impure: IndexPair,
    pub move_last_placement: IndexPair,
    pub continue_spread: IndexPair,
    pub move_onto_critical_square: IndexPair,
    pub spread_that_connects_groups_to_win: IndexPair,
    pub padding: IndexPair,
}

pub const POLICY_INDEXES_4S: PolicyIndexes<4> = PolicyIndexes::new();
pub const POLICY_INDEXES_5S: PolicyIndexes<5> = PolicyIndexes::new();
pub const POLICY_INDEXES_6S: PolicyIndexes<6> = PolicyIndexes::new();

impl<const S: usize> PolicyIndexes<S> {
    pub const fn downcast_size<const N: usize>(self) -> PolicyIndexes<N> {
        if S == N {
            unsafe { mem::transmute(self) }
        } else {
            panic!()
        }
    }
}

pub const fn policy_indexes<const S: usize>() -> PolicyIndexes<S> {
    match S {
        4 => POLICY_INDEXES_4S.downcast_size(),
        5 => POLICY_INDEXES_5S.downcast_size(),
        6 => POLICY_INDEXES_6S.downcast_size(),
        _ => panic!(),
    }
}

impl<const S: usize> PolicyIndexes<S> {
    pub const fn new() -> Self {
        let i = 0;
        let (flat_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (flat_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (wall_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_white, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (cap_psqt_black, i) = IndexPair::next(i, num_square_symmetries::<S>());
        let (move_role_bonus_white, i) = IndexPair::next(i, 3);
        let (move_role_bonus_black, i) = IndexPair::next(i, 3);
        let (decline_win, i) = IndexPair::next(i, 1);
        let (place_to_win, i) = IndexPair::next(i, 1);
        let (place_to_draw, i) = IndexPair::next(i, 1);
        let (place_to_loss, i) = IndexPair::next(i, 1);
        let (place_to_allow_opponent_to_end, i) = IndexPair::next(i, 3);
        let (two_flats_left, i) = IndexPair::next(i, 2);
        let (three_flats_left, i) = IndexPair::next(i, 2);
        let (our_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (their_road_stones_in_line, i) = IndexPair::next(i, S * 3);
        let (extend_single_group_to_new_line_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_to_new_line_linear, i) = IndexPair::next(i, 3);
        let (extend_single_group_base, i) = IndexPair::next(i, 3);
        let (extend_single_group_linear, i) = IndexPair::next(i, 3);
        let (merge_two_groups_base, i) = IndexPair::next(i, 3);
        let (merge_two_groups_linear, i) = IndexPair::next(i, 3);
        let (block_merger_base, i) = IndexPair::next(i, 3);
        let (block_merger_linear, i) = IndexPair::next(i, 3);
        let (place_our_critical_square, i) = IndexPair::next(i, 1);
        let (place_their_critical_square, i) = IndexPair::next(i, 4);
        let (ignore_their_critical_square, i) = IndexPair::next(i, 2);
        let (next_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (next_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_our_last_stone, i) = IndexPair::next(i, 1);
        let (diagonal_to_their_last_stone, i) = IndexPair::next(i, 1);
        let (attack_strong_flats, i) = IndexPair::next(i, 1);
        let (blocking_stone_blocks_extensions_of_two_flats, i) = IndexPair::next(i, 1);
        let (attack_strong_stack_with_wall, i) = IndexPair::next(i, 6);
        let (attack_strong_stack_with_cap, i) = IndexPair::next(i, 6);
        let (attack_last_movement, i) = IndexPair::next(i, 4);
        let (place_last_movement, i) = IndexPair::next(i, 3);
        let (simple_movement, i) = IndexPair::next(i, 3);
        let (simple_capture, i) = IndexPair::next(i, 4);
        let (simple_self_capture, i) = IndexPair::next(i, 4);
        let (pure_spread, i) = IndexPair::next(i, 2);
        let (fcd_highest_board, i) = IndexPair::next(i, 6);
        let (fcd_highest_stack, i) = IndexPair::next(i, 6);
        let (fcd_other, i) = IndexPair::next(i, 8);
        let (stack_captured_by_movement, i) = IndexPair::next(i, 1);
        let (stack_capture_in_strong_line, i) = IndexPair::next(i, S - 3);
        let (stack_capture_in_strong_line_cap, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line, i) = IndexPair::next(i, S - 3);
        let (move_cap_onto_strong_line_with_critical_square, i) = IndexPair::next(i, S - 3);
        let (recapture_stack_pure, i) = IndexPair::next(i, 3);
        let (recapture_stack_impure, i) = IndexPair::next(i, 3);
        let (move_last_placement, i) = IndexPair::next(i, 3);
        let (continue_spread, i) = IndexPair::next(i, 3);
        let (move_onto_critical_square, i) = IndexPair::next(i, 3);
        let (spread_that_connects_groups_to_win, i) = IndexPair::next(i, 1);
        let (padding, i) = IndexPair::next(i, policy_padding::<S>());

        assert!(i == num_policy_features::<S>());

        PolicyIndexes {
            flat_psqt_white,
            flat_psqt_black,
            wall_psqt_white,
            wall_psqt_black,
            cap_psqt_white,
            cap_psqt_black,
            move_role_bonus_white,
            move_role_bonus_black,
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            attack_strong_stack_with_wall,
            attack_strong_stack_with_cap,
            attack_last_movement,
            place_last_movement,
            simple_movement,
            simple_capture,
            simple_self_capture,
            pure_spread,
            fcd_highest_board,
            fcd_highest_stack,
            fcd_other,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            recapture_stack_pure,
            recapture_stack_impure,
            move_last_placement,
            continue_spread,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
            padding,
        }
    }
}

pub trait ValueApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn finish(&mut self) -> f32;
}

#[derive(Debug, Clone)]
pub struct Value<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for Value<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Value {
            features: vec![f16::ZERO; num_value_features::<S>() / 2],
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn finish(&mut self) -> f32 {
        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>();

        self.features.fill(f16::ZERO);

        total_value
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalValue<const S: usize> {
    val: f32,
    parameters: &'static [f32],
}

impl<const S: usize> ValueApplier for IncrementalValue<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalValue {
            val: 0.0,
            parameters,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn finish(&mut self) -> f32 {
        let total_value = self.val;

        self.val = 0.0;

        total_value
    }
}

pub trait PolicyApplier {
    fn new(parameters: &'static [f32]) -> Self;
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16);
    fn eval_one(&mut self, index_pair: IndexPair, index: usize) {
        self.eval_i8(index_pair, index, 1)
    }
    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.eval(index_pair, index, f16::from(val))
    }
    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.eval(index_pair, index, f16::from_f32(val))
    }
    fn set_immediate_win(&mut self);
    fn has_immediate_win(&self) -> bool;
    fn finish(&mut self, is_placement: bool, num_placements: usize, num_movements: usize) -> f16;
}

#[derive(Debug, Clone)]
pub struct Policy<const S: usize> {
    pub features: Vec<f16>,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for Policy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        Policy {
            features: vec![f16::ZERO; num_policy_features::<S>()],
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        index_pair.as_mut_slice(&mut self.features)[index] += val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, is_placement: bool, num_placements: usize, num_movements: usize) -> f16 {
        if num_placements + num_movements < 2 {
            eprintln!(
                "Warning: Got {} legal moves",
                num_placements + num_movements,
            );
        }
        let offset = policy_offset(is_placement, num_placements, num_movements);

        const SIMD_WIDTH: usize = 8;
        assert_eq!(self.features.len() % SIMD_WIDTH, 0);
        assert_eq!(self.features.len(), self.parameters.len());

        let partial_sums: [f32; SIMD_WIDTH] = self
            .features
            .chunks_exact(SIMD_WIDTH)
            .zip(self.parameters.chunks_exact(SIMD_WIDTH))
            .fold([0.0; SIMD_WIDTH], |acc, (c, p)| {
                array::from_fn(|i| acc[i] + c[i].to_f32() * p[i])
            });

        let total_value = partial_sums.iter().sum::<f32>() + offset;

        self.features.fill(f16::ZERO);
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

#[derive(Debug, Clone)]
pub struct IncrementalPolicy<const S: usize> {
    val: f32,
    parameters: &'static [f32],
    has_immediate_win: bool,
}

impl<const S: usize> PolicyApplier for IncrementalPolicy<S> {
    fn new(parameters: &'static [f32]) -> Self {
        IncrementalPolicy {
            val: 0.0,
            parameters,
            has_immediate_win: false,
        }
    }
    fn eval(&mut self, index_pair: IndexPair, index: usize, val: f16) {
        self.val += index_pair.as_slice(self.parameters)[index] * val.to_f32()
    }

    fn eval_i8(&mut self, index_pair: IndexPair, index: usize, val: i8) {
        self.val += index_pair.as_slice(self.parameters)[index] * val as f32
    }

    fn eval_f32(&mut self, index_pair: IndexPair, index: usize, val: f32) {
        self.val += index_pair.as_slice(self.parameters)[index] * val
    }

    fn set_immediate_win(&mut self) {
        self.has_immediate_win = true
    }

    fn has_immediate_win(&self) -> bool {
        self.has_immediate_win
    }

    fn finish(&mut self, is_placement: bool, num_placements: usize, num_movements: usize) -> f16 {
        if num_placements + num_movements < 2 {
            eprintln!(
                "Warning: Got {} legal moves",
                num_placements + num_movements
            );
        }
        let offset = policy_offset(is_placement, num_placements, num_movements);
        let total_value = self.val + offset;

        self.val = 0.0;
        self.has_immediate_win = false;

        f16::from_f32(sigmoid(total_value))
    }
}

pub const fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub const fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn value_features_4s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_4S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_4S_0KOMI,
        4 => &VALUE_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn policy_features_4s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_4S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_4S_0KOMI,
        4 => &POLICY_PARAMS_4S_2KOMI,
        _ => unimplemented!("4s is not supported for 0 komi."),
    }
}

pub fn value_features_5s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_5S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_5S_0KOMI,
        4 => &VALUE_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn policy_features_5s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_5S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_5S_0KOMI,
        4 => &POLICY_PARAMS_5S_2KOMI,
        _ => unimplemented!("5s is not supported for 0 komi."),
    }
}

pub fn value_features_6s(komi: Komi) -> &'static [f32; NUM_VALUE_FEATURES_6S] {
    match komi.half_komi() {
        0 => &VALUE_PARAMS_6S_0KOMI,
        4 => &VALUE_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

pub fn policy_features_6s(komi: Komi) -> &'static [f32; NUM_POLICY_FEATURES_6S] {
    match komi.half_komi() {
        0 => &POLICY_PARAMS_6S_0KOMI,
        4 => &POLICY_PARAMS_6S_2KOMI,
        _ => unimplemented!("6s is not supported for 0 komi."),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_0KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    1.9409509,
    2.5836546,
    1.9985255,
    1.4159507,
    1.8143432,
    1.9256793,
    1.951033,
    0.3683646,
    0.80544466,
    1.2641435,
    -0.0059250165,
    -0.00050385203,
    -0.00651386,
    0.6767142,
    0.80998373,
    1.0252832,
    0.38568202,
    0.574464,
    0.7910536,
    0.9400617,
    1.3611631,
    0.005999675,
    -0.0073812627,
    0.3702887,
    -0.14082688,
    -0.008598236,
    0.0018530292,
    -0.5629635,
    -0.19429813,
    0.005024814,
    0.0038007405,
    -0.57506186,
    -0.4272353,
    -0.0034531043,
    0.0013212701,
    0.73173213,
    0.9804175,
    0.7813389,
    0.7664318,
    0.72420144,
    0.6549173,
    0.6211394,
    0.027796824,
    -0.8590809,
    -0.47861835,
    -0.6834614,
    -0.6440356,
    -0.76208335,
    -0.70787066,
    1.1016115,
    0.7041521,
    0.5656353,
    0.37572533,
    0.33355224,
    0.14685422,
    0.29170617,
    -0.53528243,
    -0.41594657,
    -0.84620404,
    -0.9339876,
    -1.0888306,
    -1.2203138,
    -1.3798703,
    0.3608769,
    0.53578436,
    0.7182224,
    1.0179892,
    1.2663513,
    1.5393084,
    1.4230598,
    -1.2253615,
    -1.2559431,
    -0.9518179,
    -0.85807997,
    -0.5732023,
    -0.19270273,
    -0.028769711,
    -0.24103934,
    0.2916287,
    0.13999885,
    0.23800765,
    0.4356818,
    0.16020086,
    0.17718792,
    -0.00023208652,
    0.008934194,
    -0.0025578667,
    0.0032768678,
    0.0059308577,
    0.0015515061,
    -0.025164666,
    -0.18759361,
    0.00015021767,
    -0.34680966,
    -0.2702838,
    -0.032575924,
    0.1923558,
    0.53781945,
    0.10817823,
    -0.36676946,
    0.34377947,
    1.1191981,
    0.023024809,
    -0.095661655,
    0.4093885,
    0.8904827,
    -0.80886996,
    -0.6421359,
    -0.22580053,
    0.3188041,
    -0.7164817,
    -0.5601373,
    -0.1260821,
    0.23873386,
    -0.14963682,
    -0.33230755,
    0.06962944,
    0.7415705,
    -0.56224245,
    -0.37483564,
    0.2270166,
    0.82763237,
    0.008161059,
    0.005203385,
    -0.0016289,
    0.0021942016,
    -0.0044462606,
    0.005722007,
    0.0051122922,
    0.0010959748,
    0.0020771455,
    0.0074368455,
    -0.0066757104,
    0.004355209,
    -0.0077824043,
    0.0070885587,
    -1.8229011,
    -1.8864347,
    -1.984581,
    -0.35624105,
    -0.9245472,
    -1.6304601,
    -0.002478423,
    -0.002353027,
    0.008927224,
    -0.6130919,
    -0.8627575,
    -1.0025952,
    -0.44253945,
    -0.5868237,
    -0.7457921,
    -0.8361581,
    -1.3911389,
    0.008508706,
    -0.0008124877,
    -0.32023993,
    0.09974575,
    -0.0064589093,
    0.0060925093,
    0.5754897,
    0.20959927,
    0.0039970186,
    -0.005868571,
    0.54366684,
    0.45753413,
    0.0032783058,
    0.00051479787,
    -0.70737964,
    -0.76204926,
    -0.6566807,
    -0.6806741,
    -0.46464846,
    -0.85718,
    0.033645924,
    0.61439383,
    0.6498051,
    0.7189244,
    0.779143,
    0.79415566,
    0.98174405,
    0.74382424,
    -1.3792604,
    -1.2087936,
    -1.0998956,
    -0.93295026,
    -0.83311915,
    -0.4246461,
    -0.54084057,
    0.2961658,
    0.14024776,
    0.33785194,
    0.37585056,
    0.55301857,
    0.71262705,
    1.1001962,
    -0.037146017,
    -0.19126387,
    -0.56679887,
    -0.8649167,
    -0.9413223,
    -1.2466263,
    -1.2306463,
    1.419056,
    1.5376407,
    1.26959,
    1.0202111,
    0.72357213,
    0.52823204,
    0.34407583,
    0.20820455,
    -0.099154636,
    -0.22552924,
    -0.15910499,
    -0.05221089,
    -0.14736125,
    -0.030817153,
    -0.0034764553,
    -0.0019571641,
    -0.0020065904,
    -0.0007181382,
    -0.002883594,
    0.0066047404,
    -0.0026648683,
    0.20565566,
    -0.00031996984,
    0.49426976,
    0.23227301,
    0.0985766,
    -0.18153764,
    -0.54590803,
    0.11115913,
    0.3062169,
    -0.4493276,
    -1.2081151,
    0.029416107,
    0.22840826,
    -0.26083237,
    -0.9226378,
    0.6311025,
    0.60080254,
    0.15166031,
    -0.2621261,
    0.89027685,
    0.60339516,
    0.0953462,
    -0.3971867,
    0.4817219,
    0.4881041,
    0.0029094364,
    -0.63152856,
    0.5155037,
    0.3962865,
    -0.17455572,
    -0.8012166,
    0.0035818908,
    -0.005072944,
    0.0015890719,
    0.0015812209,
    0.009482224,
    0.0059623104,
    -0.008494556,
    -0.001817584,
    -0.009368448,
    -0.006632633,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_0KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    -0.06596815,
    0.14143576,
    0.2643506,
    0.14499849,
    0.107681885,
    0.11073599,
    -0.19013828,
    -0.40654242,
    0.3318426,
    -0.16691944,
    -0.3575065,
    0.23800719,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.33601677,
    -0.041274536,
    0.0013449714,
    -0.29418692,
    -0.54222,
    0.0075244084,
    -2.7454162,
    1.2056162,
    0.74540424,
    -3.2504718,
    -2.7729948,
    0.068721116,
    0.47504744,
    -0.16477276,
    0.18019468,
    -0.13531236,
    0.14152104,
    0.032580495,
    -0.22254677,
    0.49075425,
    1.1202906,
    -0.07768215,
    -0.10285486,
    -0.28730598,
    -0.60267043,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    0.1747276,
    -0.3360676,
    0.35788158,
    1.2172985,
    -0.7322632,
    -0.5023849,
    -0.49644548,
    0.63201225,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    0.6639308,
    0.34448573,
    -0.0077813696,
    -1.4789531,
    -0.5449256,
    0.0020160126,
    0.20559156,
    -0.025478715,
    -0.0057330895,
    0.48247886,
    0.27221236,
    0.0008187201,
    0.79267675,
    1.5803065,
    -0.002397363,
    0.2934291,
    -0.9169082,
    0.00303144,
    0.18601592,
    0.47252977,
    -0.008103551,
    -0.54003847,
    -0.6874615,
    -0.009149382,
    2.5997837,
    0.21279974,
    1.0009149,
    0.00917124,
    0.5581906,
    -3.4829595,
    -0.7885469,
    0.29876935,
    1.3653431,
    0.3458327,
    0.23525056,
    0.27667275,
    0.6695998,
    0.2019845,
    0.33065692,
    -0.2599935,
    0.50598747,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.32448876,
    0.06516934,
    -0.00813673,
    -0.009886575,
    0.04560957,
    -0.2841685,
    0.00021132734,
    -1.8742533,
    -1.0128005,
    0.0011727996,
    0.07729849,
    0.14006491,
    -0.008626261,
    -0.006473,
    -1.0160459,
    -0.7020004,
    -0.0051336214,
    -0.0013411185,
    0.15417725,
    -1.3802054,
    0.25305972,
    1.4399757,
    1.8268988,
    1.968561,
    2.796725,
    1.1202828,
    -1.7660865,
    -0.804423,
    0.20100431,
    1.3501571,
    0.9508624,
    0.054124333,
    -1.1339825,
    -1.1712068,
    -2.0318532,
    -1.4227827,
    -2.0454004,
    -0.13430345,
    -1.5658052,
    -1.0156312,
    0.39389312,
    -0.0530978,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.397977,
    0.7746763,
    -0.002408173,
    0.22021821,
    1.53287,
    0.0077593178,
    0.2637508,
    0.88056475,
    -0.0054027913,
    0.3666799,
    0.14289705,
    0.0036244253,
    -0.39640427,
    -0.31697965,
    0.16356713,
    3.3073342,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S_2KOMI: [f32; NUM_VALUE_FEATURES_4S] = [
    0.68730813,
    0.9012036,
    0.18391019,
    -0.21322744,
    1.5548674,
    1.6263833,
    1.6748143,
    -0.23218739,
    0.481211,
    1.1647894,
    -0.0059250165,
    -0.00050385203,
    -0.00651386,
    0.54067135,
    0.6300513,
    0.7181684,
    0.2733849,
    0.50610757,
    0.59466034,
    0.73527896,
    1.3122082,
    0.005999675,
    -0.0073812627,
    0.18266772,
    -0.32259944,
    -0.008598236,
    0.0018530292,
    -0.58516675,
    -0.21558392,
    0.005024814,
    0.0038007405,
    -0.43189234,
    -0.14988242,
    -0.0034531043,
    0.0013212701,
    2.4693215,
    0.29167253,
    0.33348116,
    -0.39841512,
    -0.5501832,
    -1.0210544,
    -0.07910879,
    -0.21428928,
    2.4569664,
    0.18990888,
    -0.04821031,
    -0.9149379,
    -1.1503036,
    -1.4737551,
    1.1679419,
    1.0258985,
    0.2224197,
    0.26139176,
    -0.107859686,
    -0.53140056,
    -0.77614945,
    -0.45501992,
    0.010654574,
    0.29535928,
    -0.58555925,
    -0.56120896,
    -0.7851361,
    -1.2478626,
    -1.9331878,
    -0.9044909,
    -0.2953635,
    -0.003386617,
    0.7604545,
    1.8879119,
    3.064815,
    -0.8879658,
    -1.5765656,
    -1.0042984,
    -0.28199583,
    0.48124117,
    0.8709994,
    1.9050633,
    -0.26260093,
    0.18005556,
    0.09792848,
    0.34008676,
    0.088823356,
    0.14916663,
    0.068463586,
    -0.00023208652,
    0.008934194,
    -0.0025578667,
    0.0032768678,
    0.0059308577,
    0.0015515061,
    0.005728688,
    -0.122995205,
    0.00015021767,
    -0.46004966,
    -0.14797106,
    -0.10311913,
    0.1024593,
    0.4494036,
    -0.031776488,
    -0.4053327,
    0.30629334,
    0.9091749,
    0.027731886,
    -0.23111142,
    0.28899425,
    0.6218204,
    -0.60990375,
    -0.6332786,
    -0.16787846,
    0.28473368,
    -0.6783713,
    -0.53580153,
    -0.1325463,
    0.41561016,
    -0.4369075,
    -0.3071065,
    0.12276082,
    0.6653267,
    -0.69379234,
    -0.3282713,
    0.16236387,
    0.7846343,
    0.008161059,
    0.005203385,
    -0.0016289,
    0.0021942016,
    -0.0044462606,
    0.005722007,
    0.0051122922,
    0.0010959748,
    0.0020771455,
    0.0074368455,
    -0.0066757104,
    0.004355209,
    -0.0077824043,
    0.0070885587,
    -1.654877,
    -1.7428908,
    -1.6291279,
    -1.1078428,
    -1.5827323,
    -1.9209257,
    -0.002478423,
    -0.002353027,
    0.008927224,
    -0.654542,
    -0.78002083,
    -0.7478986,
    -0.26752612,
    -0.43079856,
    -0.43211246,
    -0.86366713,
    -1.221811,
    0.008508706,
    -0.0008124877,
    -0.18302476,
    0.116653144,
    -0.0064589093,
    0.0060925093,
    0.46839976,
    0.17276782,
    0.0039970186,
    -0.005868571,
    0.27876514,
    0.22170733,
    0.0032783058,
    0.00051479787,
    -0.0077517964,
    -0.0077192923,
    -0.009022991,
    -0.0026162418,
    0.010974629,
    -0.18338971,
    -0.9444824,
    -0.00079395995,
    0.0012055086,
    -0.0018659113,
    0.0045112595,
    0.007755907,
    -0.080556914,
    1.1357703,
    0.0029043844,
    0.008424118,
    -0.0020352914,
    -0.001752215,
    0.19276734,
    -1.8356823,
    -1.6915855,
    0.0054334905,
    -0.006010456,
    -0.0051033087,
    0.02068157,
    0.03629523,
    0.91456544,
    0.29069462,
    -0.0075576873,
    -0.00044307671,
    0.009311614,
    -0.0030187848,
    0.17495666,
    0.7141849,
    -1.372416,
    0.0056339707,
    0.005903894,
    -0.00087182014,
    0.027413346,
    0.037272673,
    1.0286895,
    1.4526631,
    0.16293004,
    -0.03559536,
    -0.14718166,
    -0.10142493,
    -0.2702627,
    -0.11958308,
    0.14973296,
    -0.0034764553,
    -0.0019571641,
    -0.0020065904,
    -0.0007181382,
    -0.002883594,
    0.0066047404,
    -0.012563092,
    0.31837335,
    -0.00031996984,
    0.22667207,
    0.25494626,
    0.064463876,
    -0.15381072,
    -0.53436726,
    -0.028795619,
    0.40083984,
    -0.13649848,
    -0.9215062,
    0.034123853,
    0.3615181,
    -0.19331282,
    -0.58106685,
    0.47009245,
    0.39860567,
    0.24154048,
    -0.17220476,
    0.21815142,
    0.2590832,
    -0.11563664,
    -0.45170942,
    0.2955577,
    0.29144457,
    -0.24816777,
    -0.8479564,
    0.62715954,
    0.3831083,
    -0.20787951,
    -0.6108353,
    0.0035818908,
    -0.005072944,
    0.0015890719,
    0.0015812209,
    0.009482224,
    0.0059623104,
    -0.008494556,
    -0.001817584,
    -0.009368448,
    -0.006632633,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S_2KOMI: [f32; NUM_POLICY_FEATURES_4S] = [
    0.3835006,
    0.21164729,
    0.5567637,
    0.14972319,
    0.008378243,
    -0.43465084,
    -0.7308303,
    -0.8912839,
    0.46212968,
    -0.43907836,
    0.26626498,
    0.5782282,
    -0.0005412027,
    0.0021412876,
    -0.0075254655,
    0.0028945897,
    -0.005422716,
    -0.0038055968,
    -0.4975553,
    0.15077943,
    0.0013449714,
    -0.4241401,
    -0.4088393,
    0.0075244084,
    -3.2364414,
    0.9161514,
    0.5318693,
    -2.230449,
    -4.504568,
    -0.487717,
    0.6291668,
    -0.73886293,
    0.26118273,
    -0.27261165,
    0.12881532,
    0.1777136,
    -0.011507088,
    0.41689792,
    1.1819894,
    -0.14281727,
    -0.12822403,
    -0.4899795,
    -0.7057814,
    0.006474953,
    0.007961744,
    -0.0059215473,
    -0.0042123506,
    -0.038640175,
    -0.48866045,
    0.18388642,
    2.1011872,
    -0.47701856,
    -0.35595262,
    -0.5488175,
    -0.12425026,
    0.009884935,
    0.005978748,
    0.008157708,
    -0.0015837355,
    -0.0737323,
    1.6342262,
    -0.0077813696,
    0.8013023,
    -0.2317711,
    0.0020160126,
    0.59806335,
    -0.9970204,
    -0.0057330895,
    0.07285249,
    0.6827554,
    0.0008187201,
    0.9157639,
    0.626506,
    -0.002397363,
    -0.088837735,
    0.38987082,
    0.00303144,
    0.2895544,
    -0.16646424,
    -0.008103551,
    -0.26244026,
    -0.4901274,
    -0.009149382,
    2.3455992,
    -0.7211382,
    1.9804211,
    0.00917124,
    0.5224504,
    -4.4372244,
    -0.8496559,
    0.4749193,
    1.473498,
    0.45706263,
    0.046547048,
    0.25537905,
    0.77724373,
    0.07417753,
    0.39354962,
    -0.6581425,
    0.71233255,
    0.0049233297,
    0.0010997606,
    -0.0033995532,
    0.006593518,
    0.008852346,
    0.009353582,
    0.007925572,
    0.0061481707,
    0.5941038,
    -0.046199616,
    -0.00813673,
    -0.009886575,
    0.1387866,
    -0.22598192,
    0.00021132734,
    -2.1441894,
    -1.8108326,
    0.0011727996,
    -0.16316642,
    0.30345392,
    -0.008626261,
    -0.006473,
    -1.3621367,
    -0.119089246,
    -0.0051336214,
    -0.0013411185,
    0.010755843,
    -1.2026048,
    0.38548076,
    1.398525,
    1.9160999,
    2.1099184,
    2.0770369,
    1.4328448,
    -1.7100422,
    -0.6515236,
    0.332164,
    0.62545145,
    0.0065994086,
    -0.005360393,
    -0.9618395,
    -1.1140851,
    -1.7814239,
    -0.5971449,
    -1.9552374,
    -0.23968147,
    -1.2191556,
    -1.1778564,
    0.42183256,
    -0.11105158,
    -3.0069612e-5,
    -0.0075867055,
    0.009821016,
    1.4999874,
    0.31543893,
    -0.002408173,
    -0.93778354,
    1.1441715,
    0.0077593178,
    0.79672486,
    0.83366203,
    -0.0054027913,
    0.49028045,
    0.045144238,
    0.0036244253,
    -0.30533037,
    -0.3648391,
    0.09491095,
    3.3036993,
    0.0025543617,
    -0.0051145433,
    0.006005943,
    0.0047588134,
    0.00012727268,
    -0.0025886176,
    -0.006784751,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_0KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    1.2593943,
    1.8627175,
    1.292426,
    1.5362533,
    0.95136255,
    0.9049196,
    0.9754853,
    1.6996223,
    1.7570151,
    1.6828125,
    1.6875616,
    1.6435776,
    1.6029851,
    0.11425956,
    0.5652899,
    0.70066494,
    1.0849437,
    1.2214123,
    1.4809589,
    -0.21608356,
    0.51984954,
    0.7599935,
    1.2764245,
    1.5917814,
    1.907897,
    0.23037083,
    0.30362028,
    0.30735594,
    0.33362797,
    0.4116128,
    0.5136652,
    0.3865981,
    0.5299344,
    0.5247821,
    0.58568805,
    0.6081001,
    0.6135858,
    1.1556141,
    1.5574108,
    2.4625921,
    1.9022138,
    0.7045307,
    0.3243982,
    -6.39979,
    0.40553302,
    -0.5592541,
    -0.20300679,
    -0.2749532,
    -0.10782366,
    -0.43230358,
    -0.49780673,
    -0.7145088,
    -0.48829848,
    0.7086003,
    0.54333186,
    0.6666447,
    0.72747606,
    0.8399004,
    1.1045505,
    1.1505497,
    -0.6098362,
    -0.57087743,
    -0.7117611,
    -0.6082295,
    -0.50944877,
    -0.4310844,
    0.040503092,
    1.2421293,
    0.9742344,
    0.7711356,
    0.5706777,
    0.34961542,
    0.15517253,
    -0.0667419,
    0.07131676,
    -0.09706752,
    -0.34222147,
    -0.5237532,
    -0.7535297,
    -0.96639323,
    -1.2198559,
    0.37325937,
    0.43383667,
    0.46511963,
    0.4975657,
    0.5912995,
    0.58604497,
    0.6609594,
    -1.0277917,
    -0.963155,
    -0.88438296,
    -0.8833709,
    -0.85136527,
    -0.73727834,
    -0.7141828,
    -0.25753924,
    -0.13705023,
    0.009643937,
    0.33003953,
    0.16256665,
    0.16773845,
    0.030669935,
    5.5672226,
    1.3212966,
    0.09757615,
    0.19582753,
    -0.017171724,
    -0.3085678,
    0.014262272,
    -0.1628776,
    -0.12825955,
    0.0012913607,
    -0.77667946,
    -0.32694867,
    -0.008022131,
    0.36167565,
    0.79596394,
    0.060016796,
    -0.2804216,
    0.12626736,
    0.6758158,
    1.1188554,
    0.04196486,
    -0.4235579,
    0.10202902,
    0.6764797,
    1.0369984,
    0.012109855,
    -0.6260151,
    -0.06860905,
    0.6017611,
    1.0787838,
    -0.6461361,
    -0.76427007,
    -0.4694936,
    -0.20889829,
    0.30680284,
    -0.8434996,
    -0.8685786,
    -0.42677024,
    0.09655036,
    0.72435,
    -0.84432673,
    -0.81535065,
    -0.30605972,
    0.26508904,
    0.80113405,
    -0.22428846,
    -0.27673933,
    -0.11182044,
    0.24814424,
    0.54803544,
    -0.5607655,
    -0.65334475,
    -0.17293032,
    0.4212777,
    0.9443866,
    -0.73933464,
    -0.70221597,
    -0.17768376,
    0.44951805,
    1.1339633,
    -0.32834798,
    -0.050773147,
    -0.009658644,
    -1.0537618,
    -0.35338074,
    -0.39772326,
    -0.43364286,
    -0.16759397,
    -0.33177692,
    0.009177124,
    -0.006355319,
    0.001523626,
    -0.00079395995,
    0.0012055086,
    -0.0018659113,
    0.004368524,
    0.0076928716,
    -1.7186073,
    -1.6298292,
    -1.6407894,
    -1.6778404,
    -1.690667,
    -1.5529233,
    -0.22279696,
    -0.54928297,
    -0.7839325,
    -1.1371778,
    -1.2956151,
    -1.3986776,
    -0.1437706,
    -0.43396783,
    -0.42457163,
    -1.3416569,
    -1.5876827,
    -1.915625,
    -0.7148251,
    -0.86111116,
    -0.8499382,
    -0.83895224,
    -0.8451308,
    -0.8580049,
    -0.4496005,
    -0.5356285,
    -0.4862363,
    -0.6455291,
    -0.6309081,
    -0.6366141,
    -0.6417309,
    -0.9971391,
    -1.5333191,
    -1.3561672,
    -0.1791297,
    0.23483019,
    -0.6290351,
    0.12512456,
    0.51978457,
    0.20967194,
    -0.00895697,
    0.118547425,
    0.310352,
    0.44838592,
    1.50433,
    0.27448446,
    0.054500926,
    -0.43435997,
    -0.50972086,
    -0.61615884,
    -0.72303843,
    -0.5666339,
    -0.6120124,
    1.1532276,
    1.1177183,
    0.83095527,
    0.7382851,
    0.6563251,
    0.5371224,
    0.7268326,
    -1.2028335,
    -0.9809445,
    -0.7580027,
    -0.5208234,
    -0.3450754,
    -0.08568218,
    0.08158789,
    -0.06617874,
    0.1598076,
    0.36065403,
    0.5770468,
    0.76974386,
    0.9682111,
    1.2392344,
    -0.70374185,
    -0.7422544,
    -0.8565895,
    -0.8760445,
    -0.88169956,
    -0.9552286,
    -1.0277611,
    0.6491881,
    0.58678526,
    0.5729968,
    0.49116594,
    0.46464947,
    0.4250262,
    0.379521,
    0.27567396,
    0.1454341,
    -0.00097470765,
    -0.20299864,
    -0.060878407,
    -0.11129153,
    -0.059648704,
    -7.050286,
    -0.7684775,
    -0.10116114,
    -0.15921997,
    -0.014121242,
    0.2885259,
    -0.014914835,
    0.17197052,
    0.13998519,
    0.165829,
    0.5845871,
    0.34194013,
    0.033992313,
    -0.33157346,
    -0.7545918,
    0.054673694,
    0.3497138,
    0.0034576159,
    -0.5698257,
    -1.109022,
    0.026947355,
    0.46855676,
    -0.11159945,
    -0.6694978,
    -1.0663328,
    0.01591444,
    0.6098815,
    0.07311412,
    -0.60547245,
    -1.0193312,
    0.7059109,
    0.846223,
    0.47693744,
    0.19630301,
    -0.10458818,
    0.86760813,
    0.9267678,
    0.4005259,
    -0.08122326,
    -0.64450645,
    0.85072803,
    0.76938975,
    0.2878627,
    -0.18797062,
    -0.7772891,
    0.11508973,
    0.2792275,
    0.07337197,
    -0.41827032,
    -0.7826155,
    0.5673442,
    0.62915313,
    0.14990808,
    -0.45805162,
    -0.9422911,
    0.7461937,
    0.70887136,
    0.14870481,
    -0.5101492,
    -1.0487158,
    0.24796419,
    0.34799385,
    0.19573776,
    0.6157165,
    0.44078323,
    0.3752458,
    0.36513525,
    0.16848719,
    0.35751247,
    -0.008103551,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_0KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    -0.39242405,
    0.17292726,
    -0.118879646,
    0.30571583,
    0.11689908,
    -0.16052142,
    -0.26285124,
    -0.034955982,
    -0.06879756,
    0.3084932,
    0.19127133,
    -0.0071840463,
    -0.69386244,
    -0.47026828,
    -0.28037366,
    0.08748486,
    0.26749507,
    0.5662972,
    -0.29026765,
    -0.34343344,
    -0.28690696,
    0.122188434,
    0.18335158,
    0.15221457,
    -2.880995,
    -0.8511819,
    -0.6342784,
    0.7688207,
    1.2396692,
    2.3946486,
    -0.7487078,
    -1.3920617,
    -1.491034,
    0.556493,
    1.3479542,
    2.7024465,
    -0.40481746,
    0.17647587,
    -0.05657958,
    -0.40887004,
    -0.06325247,
    -0.317176,
    -3.0760412,
    0.47539485,
    -0.2997481,
    -4.310232,
    -4.50781,
    -0.83141685,
    -0.47583637,
    -0.7949446,
    0.11697162,
    -0.64735466,
    0.0754615,
    0.15956424,
    -0.28933063,
    -0.20317718,
    0.11679336,
    0.34841248,
    0.045489173,
    -0.12136831,
    -0.20899639,
    -0.38595858,
    -1.3775934,
    0.38097653,
    0.17123851,
    0.49516088,
    1.4066678,
    -0.41903606,
    0.45585486,
    -0.17364006,
    -0.17990167,
    0.059360262,
    -0.032817367,
    -0.290421,
    -0.5960685,
    -0.7628087,
    -0.4202165,
    0.02534143,
    -0.8240704,
    -0.746444,
    -0.48993802,
    0.36129656,
    3.7057257,
    0.9485732,
    0.388712,
    1.4400712,
    -0.4441796,
    -1.139254,
    -2.3501673,
    0.01958142,
    -0.16244018,
    -0.49962524,
    0.3078247,
    -0.04367806,
    -0.29325184,
    1.4433393,
    0.42668614,
    0.9846589,
    -0.4784579,
    -0.60837936,
    -1.1139276,
    0.5216471,
    0.813074,
    1.191223,
    -0.48972568,
    -0.86174524,
    -0.25714234,
    2.3773978,
    0.3255597,
    2.085547,
    0.9485119,
    0.6919356,
    -4.170583,
    -0.44999284,
    0.6616457,
    1.5477815,
    0.44725206,
    0.41207153,
    0.09728432,
    0.31761327,
    0.2691948,
    0.25251853,
    -0.09765753,
    0.4182366,
    -0.044430263,
    0.4543443,
    0.19260603,
    -1.6073925,
    -0.5418127,
    0.86772287,
    -0.2747209,
    -0.023375733,
    0.23898327,
    0.029960938,
    0.007810466,
    -0.006842167,
    0.3233365,
    0.15309153,
    1.6051224,
    -3.9506395,
    -2.0329146,
    -2.5438266,
    -0.36889085,
    -0.23733355,
    0.09852674,
    0.49800298,
    -2.497408,
    -1.780061,
    -1.107391,
    0.46881068,
    0.19397628,
    -1.2879937,
    0.47631887,
    1.4270701,
    1.6591804,
    1.1957574,
    1.5696936,
    0.20022237,
    -0.6136545,
    -0.26016378,
    0.90944964,
    1.5581576,
    1.5609925,
    0.027707716,
    -1.2809566,
    -0.64735025,
    -0.7871485,
    -0.8447625,
    -1.288629,
    -0.3228822,
    -1.4454833,
    -4.142872,
    0.40692762,
    -0.01677021,
    -0.11279167,
    0.034975097,
    0.12029149,
    0.25905403,
    0.5116241,
    -0.48493227,
    0.064624324,
    1.7033144,
    0.73374623,
    1.2881091,
    -0.14399116,
    1.511385,
    1.8959774,
    0.24196468,
    0.98227185,
    0.09033907,
    0.31439173,
    0.38245478,
    0.0979845,
    0.26300216,
    0.4111469,
    1.0183893,
    3.3724473,
    -0.0031571696,
    -0.0045039677,
    -0.0037830565,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S_2KOMI: [f32; NUM_VALUE_FEATURES_5S] = [
    0.86404234,
    1.0060893,
    0.25114247,
    0.36052856,
    -0.08987311,
    -0.2169063,
    0.054910846,
    1.4432182,
    1.4165692,
    1.5103794,
    1.445208,
    1.4903096,
    1.3197496,
    0.28298473,
    0.47832674,
    0.47065982,
    0.6720313,
    0.80320525,
    0.76139486,
    0.41438812,
    0.5492986,
    0.67085683,
    1.2291167,
    1.525432,
    1.614712,
    0.69547194,
    0.76456314,
    0.83184105,
    0.8296274,
    0.9077065,
    0.9266116,
    0.37758046,
    0.4577511,
    0.45941266,
    0.55829,
    0.60193545,
    0.5399868,
    0.5399525,
    0.8591117,
    1.806642,
    1.2176979,
    0.0016580644,
    -0.39716285,
    1.1284708,
    -0.218952,
    -0.46060172,
    -0.11190512,
    -0.13526487,
    -0.052068494,
    -0.43906993,
    -0.34137583,
    -1.076906,
    -0.40727422,
    -0.29236495,
    -0.32549575,
    -0.1791264,
    0.22298945,
    0.4841468,
    0.567656,
    1.0916277,
    -0.0063198344,
    -0.34650818,
    -0.31049517,
    -0.34768727,
    0.0425382,
    0.22627778,
    0.3153184,
    1.3254939,
    0.83761907,
    0.7112434,
    0.16911083,
    -0.16016622,
    -0.5931026,
    -1.0760242,
    0.7546206,
    0.37850752,
    0.04605712,
    -0.13971172,
    -0.7272369,
    -1.0258566,
    -1.5758702,
    -0.019666016,
    0.13673285,
    0.21280077,
    0.32740647,
    0.5816652,
    0.6873806,
    0.8752539,
    -0.915647,
    -0.6903835,
    -0.51944864,
    -0.42697486,
    -0.29906648,
    -0.12690228,
    0.04924081,
    -0.2783557,
    -0.13089544,
    0.016589887,
    0.237034,
    0.09466718,
    0.11139549,
    0.047242526,
    4.462656,
    1.0957205,
    0.10381128,
    0.18074408,
    -0.03139494,
    -0.30855414,
    0.011684184,
    -0.13323753,
    -0.119205445,
    0.0012913607,
    -0.7152119,
    -0.36242986,
    -0.0996647,
    0.29201698,
    0.71553785,
    -0.061129835,
    -0.5219154,
    -0.05876983,
    0.5384801,
    1.0196311,
    -0.018658485,
    -0.5606476,
    -0.027475009,
    0.5291663,
    0.96223843,
    -0.039670635,
    -0.5643139,
    -0.10776286,
    0.5640631,
    0.99168646,
    -0.79535156,
    -0.8270462,
    -0.4160649,
    -0.04080888,
    0.39385086,
    -0.81256926,
    -0.84697086,
    -0.3748203,
    0.13707848,
    0.6903675,
    -0.76072997,
    -0.77669394,
    -0.32756793,
    0.18411528,
    0.66458714,
    -0.13485111,
    -0.33017492,
    -0.07838418,
    0.30936012,
    0.6736355,
    -0.5749286,
    -0.6000184,
    -0.15719397,
    0.39728925,
    0.92017055,
    -0.66004664,
    -0.6578244,
    -0.11678893,
    0.46009654,
    0.99383074,
    -0.37141338,
    -0.4807495,
    -0.44856906,
    -0.6551888,
    -0.32206795,
    -0.179849,
    -0.1982925,
    0.017124029,
    -0.4205497,
    0.009177124,
    -0.006355319,
    0.001523626,
    -0.00079395995,
    0.0012055086,
    -0.0018659113,
    0.004368524,
    0.0076928716,
    -1.5528889,
    -1.5960697,
    -1.529174,
    -1.5206736,
    -1.5077267,
    -1.4453316,
    -0.5600923,
    -0.96371305,
    -0.9449847,
    -1.3438042,
    -1.4276397,
    -1.4815545,
    0.09782116,
    -0.48309955,
    -0.48860604,
    -1.1937431,
    -1.4142576,
    -1.7012352,
    -0.6015175,
    -0.77928114,
    -0.86607295,
    -0.7621354,
    -0.8442144,
    -0.8098054,
    -0.34570426,
    -0.4532123,
    -0.4818013,
    -0.5045218,
    -0.55222535,
    -0.533059,
    -0.5701495,
    -0.9390544,
    -1.7440732,
    -1.25775,
    -0.15485708,
    0.20601952,
    -0.4531453,
    0.2422265,
    0.49856353,
    0.1767035,
    0.31543258,
    0.083215475,
    0.23882088,
    0.39004666,
    0.8991213,
    0.25942594,
    0.009882869,
    -0.0012246752,
    0.00716334,
    -0.000495675,
    -0.008961034,
    0.009112287,
    -0.44902694,
    -0.0035235141,
    0.0071501285,
    -0.0013148449,
    0.008539425,
    -0.00934294,
    -0.0031121755,
    1.5906694,
    0.00928643,
    -0.008306455,
    -0.0072861155,
    -0.00029071618,
    -0.04510516,
    -1.692104,
    -0.5257804,
    0.002645051,
    0.004003441,
    0.009720305,
    -0.004755194,
    0.107306354,
    0.13879609,
    0.9687465,
    0.010658918,
    0.008139802,
    0.028971022,
    0.19815353,
    -0.44111532,
    -1.2043905,
    -1.5113853,
    -0.008494407,
    -0.0012730968,
    0.07168082,
    0.30775326,
    0.7532118,
    1.4181584,
    0.22182395,
    0.23190649,
    0.1642544,
    0.023308812,
    -0.19628377,
    -0.064061776,
    -0.14374758,
    0.069532104,
    -2.0719056,
    -0.53130674,
    -0.046946295,
    -0.11397967,
    -0.0059667383,
    0.16209309,
    -0.021468155,
    0.20159376,
    0.18498407,
    -0.0063391924,
    0.61876935,
    0.32270402,
    -0.00025009862,
    -0.35799438,
    -0.75190693,
    -0.06647306,
    0.26126423,
    -0.07272447,
    -0.44147035,
    -0.89220643,
    -0.03367494,
    0.37796193,
    -0.08221428,
    -0.54891926,
    -0.9192264,
    -0.03586619,
    0.49403378,
    0.0805117,
    -0.42932087,
    -0.99287605,
    0.3741297,
    0.518511,
    0.26572868,
    0.057942096,
    -0.4848808,
    0.6489896,
    0.69313186,
    0.25801003,
    -0.16300914,
    -0.6041786,
    0.7182206,
    0.6418668,
    0.24355154,
    -0.1799199,
    -0.8045713,
    0.27426535,
    0.32100496,
    0.10970845,
    -0.18087223,
    -0.3588042,
    0.5345679,
    0.52750164,
    0.120939344,
    -0.36396143,
    -0.81408185,
    0.65692985,
    0.60406584,
    0.14557838,
    -0.38638383,
    -0.90983564,
    0.14342579,
    0.059769213,
    -0.0013102568,
    0.5153426,
    0.069358595,
    0.31370854,
    0.09019465,
    0.0069586174,
    0.2026839,
    -0.008103551,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S_2KOMI: [f32; NUM_POLICY_FEATURES_5S] = [
    0.13053814,
    0.2594758,
    0.24701957,
    0.32714072,
    0.2772792,
    -0.13828218,
    -0.10215987,
    0.098732464,
    0.019896906,
    -0.056102987,
    -0.07790267,
    -0.42510068,
    -0.30549508,
    -0.45333365,
    -0.52566814,
    -0.29246622,
    -0.28865135,
    -0.26258516,
    0.11082738,
    0.17156202,
    -0.038298223,
    0.46970895,
    0.49330792,
    0.45982635,
    -1.5306015,
    -0.70623446,
    -1.6051459,
    1.1686573,
    1.569235,
    2.0058358,
    -2.5606222,
    -1.2750763,
    -2.0411723,
    0.8546261,
    1.8828146,
    2.5776637,
    -0.54405427,
    0.17359827,
    -0.07840562,
    -0.24876921,
    -0.18755311,
    -0.26911703,
    -3.0770643,
    1.1082592,
    0.26119882,
    -2.5300553,
    -2.871422,
    0.03775389,
    0.4238567,
    -0.33088768,
    0.10647789,
    -0.13209525,
    0.08560816,
    0.0468911,
    -0.21627295,
    0.05250266,
    0.38945135,
    0.81790227,
    -0.23717421,
    -0.22604689,
    -0.19218688,
    -0.20800717,
    -0.033787068,
    0.122389324,
    -0.10022763,
    -0.073142864,
    0.6767682,
    -0.04690488,
    0.33146432,
    -0.22365022,
    -0.0036192038,
    0.46967515,
    0.51455325,
    -0.2567931,
    -0.40734252,
    -0.42442977,
    -0.001470779,
    0.22078364,
    -1.2574711,
    -0.85755,
    -0.74906814,
    -0.17770536,
    3.6172705,
    0.54112595,
    0.6423261,
    0.9667451,
    0.199188,
    -1.3389384,
    0.16624917,
    0.19690222,
    -0.4323959,
    -0.23050337,
    0.34784153,
    0.61946857,
    -0.7219571,
    1.2463146,
    0.5738733,
    2.0701928,
    0.049495548,
    -0.42689493,
    -1.0372397,
    0.26199716,
    0.7308859,
    1.6175814,
    -0.0076032556,
    -0.68225515,
    0.12284207,
    2.349499,
    0.1210995,
    2.3559947,
    1.0110165,
    0.4826661,
    -4.137684,
    -0.87189615,
    0.58148867,
    1.5087106,
    0.51515806,
    0.27801824,
    0.1363943,
    0.39705855,
    0.3311712,
    0.13834442,
    -0.009231192,
    0.37948412,
    0.013899716,
    0.34986228,
    0.20538929,
    -1.3363253,
    -0.6954224,
    -0.26191995,
    -0.23036456,
    -0.17417376,
    0.21034743,
    0.08639803,
    0.009099964,
    0.0013535284,
    0.37892112,
    0.085819654,
    1.4048743,
    -2.3133554,
    -1.2493757,
    -1.597994,
    -0.20851141,
    -0.025360083,
    0.2432856,
    0.7032871,
    -1.9057463,
    -1.1427703,
    -0.49652052,
    0.84754634,
    0.08384458,
    -1.2245532,
    0.5221889,
    1.2940357,
    1.6118815,
    1.3088297,
    1.4081663,
    -0.2697331,
    -0.76520354,
    -0.34188744,
    0.6127755,
    1.3039353,
    1.4138254,
    0.12542252,
    -1.4124713,
    -0.9411064,
    -0.9240627,
    -0.92811567,
    -1.1624233,
    -0.3372181,
    -1.4078445,
    -2.251844,
    0.36175016,
    -0.023277655,
    -0.08955618,
    0.0533145,
    0.14049543,
    -0.019719895,
    -0.007010526,
    -0.096855216,
    -0.22378309,
    1.7177029,
    0.7570125,
    1.2928087,
    0.07078977,
    1.540554,
    1.9195119,
    0.41963235,
    0.9632119,
    0.60895467,
    0.32042414,
    0.36884412,
    0.16893406,
    0.3075245,
    -0.011423582,
    0.7850744,
    3.0451703,
    0.0,
    0.0,
    0.0,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_0KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.61250436,
    1.2268925,
    0.7759812,
    0.73142904,
    0.4849856,
    0.34015587,
    0.2746116,
    1.5019422,
    1.5177906,
    1.5112706,
    1.5111177,
    1.5925332,
    1.5365841,
    0.8305864,
    0.7868882,
    0.87267846,
    0.8414478,
    0.9840646,
    1.0742406,
    0.5775224,
    0.3594183,
    0.5763685,
    0.6805632,
    1.0856569,
    1.3365833,
    0.40705347,
    0.50765264,
    0.5960288,
    0.56008875,
    0.70031434,
    0.8051328,
    0.36566386,
    0.41401497,
    0.4970273,
    0.50928426,
    0.5944124,
    0.59140646,
    0.6062328,
    0.82522565,
    1.6450222,
    1.0798209,
    0.06141288,
    -0.099442616,
    -0.5541163,
    -0.006102959,
    -0.45497555,
    -0.12398592,
    -0.56449217,
    -0.0760806,
    -0.2581818,
    -0.26194078,
    -0.8259715,
    -0.43569782,
    0.59889394,
    0.50885457,
    0.44987452,
    0.48810267,
    0.5860134,
    0.8867791,
    0.643796,
    0.21123257,
    -0.6373356,
    -0.48202094,
    -0.50282437,
    -0.43430227,
    -0.34950864,
    0.0221353,
    0.7634238,
    0.70334244,
    0.50793314,
    0.41002935,
    0.3032606,
    0.1387248,
    0.17239892,
    -0.1924569,
    -0.17878608,
    -0.23831503,
    -0.45526206,
    -0.56295455,
    -0.66745615,
    -0.8172947,
    0.3901698,
    0.37754574,
    0.38922042,
    0.36213657,
    0.3307399,
    0.28049943,
    0.28200078,
    -0.57644445,
    -0.581507,
    -0.58589125,
    -0.5879917,
    -0.6056004,
    -0.625696,
    -0.6915167,
    -0.26835164,
    -0.21183866,
    -0.04975697,
    0.1775887,
    0.019665288,
    0.15922034,
    0.031175388,
    1.5649399,
    0.59243315,
    0.108914085,
    0.15123442,
    0.061476417,
    -0.14202207,
    0.026688498,
    -0.10902538,
    -0.10678087,
    0.0012913607,
    -0.31533962,
    -0.16790408,
    -0.13735433,
    -0.0061757476,
    0.21499887,
    0.43571505,
    0.06780039,
    -0.19397075,
    -0.02926731,
    0.18941699,
    0.58293283,
    0.81609076,
    0.030884117,
    -0.17560399,
    0.04734733,
    0.3218216,
    0.60860705,
    0.5987422,
    0.037299145,
    -0.20586933,
    0.0029179452,
    0.3237198,
    0.61426824,
    0.7381314,
    -0.6059764,
    -0.6915274,
    -0.52397186,
    -0.37850943,
    -0.09004335,
    0.0539691,
    -0.5984745,
    -0.62717074,
    -0.3896771,
    -0.18917724,
    -0.062433567,
    0.2670196,
    -0.60977405,
    -0.5995519,
    -0.4054154,
    -0.18122369,
    0.046066877,
    0.35004848,
    -0.04360057,
    -0.07767804,
    -0.046013135,
    0.0726061,
    0.3163232,
    0.6246134,
    -0.30907825,
    -0.31971672,
    -0.1397893,
    0.10511811,
    0.38659155,
    0.45985028,
    -0.43477806,
    -0.42756706,
    -0.20979592,
    0.019824266,
    0.40123168,
    0.57717776,
    -0.58894205,
    0.0296355,
    -0.25948173,
    -0.5591364,
    -0.34799913,
    0.12702554,
    -0.5183862,
    -0.20295429,
    -0.10158247,
    0.0029043844,
    0.008424118,
    -0.0050589656,
    -0.0051581357,
    0.007047029,
    -0.0010688612,
    -0.007828684,
    0.0054334905,
    -0.006010456,
    -0.0055280733,
    -1.6148472,
    -1.5427204,
    -1.5621883,
    -1.5405574,
    -1.5766615,
    -1.5377735,
    0.07837255,
    -0.35755655,
    -0.40218708,
    -0.78787035,
    -0.8338526,
    -0.92779005,
    0.119389154,
    0.061181385,
    -0.34954876,
    -0.8190899,
    -1.2343053,
    -1.4403461,
    -0.46707365,
    -0.46140507,
    -0.58938926,
    -0.57848406,
    -0.6946745,
    -0.6597643,
    -0.47202137,
    -0.43504012,
    -0.46581575,
    -0.56069905,
    -0.60315686,
    -0.5862558,
    -0.5595594,
    -0.7785521,
    -1.4065125,
    -1.0836109,
    -0.23930681,
    0.031478863,
    0.63869387,
    -0.042809095,
    0.4600938,
    0.13338968,
    0.28455546,
    0.08504253,
    0.11952016,
    0.16660027,
    1.5286512,
    0.34199095,
    0.020632764,
    -0.3431571,
    -0.43245125,
    -0.51862305,
    -0.48116985,
    -0.6339932,
    0.20319241,
    0.65959054,
    0.9009716,
    0.5810289,
    0.49437702,
    0.4560747,
    0.51321924,
    0.61697555,
    -0.8079988,
    -0.6815026,
    -0.5610909,
    -0.44900036,
    -0.24420707,
    -0.1753151,
    -0.18875742,
    0.17979813,
    0.1453159,
    0.29863027,
    0.40961754,
    0.48893386,
    0.68913627,
    0.7675897,
    -0.69176453,
    -0.6359413,
    -0.5974868,
    -0.58072126,
    -0.5916606,
    -0.5866365,
    -0.5799778,
    0.27670467,
    0.28237316,
    0.31863233,
    0.36625156,
    0.38900614,
    0.3720818,
    0.3905822,
    0.23452045,
    0.18206196,
    0.010896973,
    -0.21865013,
    0.0068891784,
    -0.15269269,
    -0.044195373,
    -1.8007929,
    -0.7707695,
    -0.0016923085,
    -0.028940087,
    -0.14515047,
    0.28891546,
    -0.026244696,
    0.11723393,
    0.09897163,
    0.5977192,
    -0.08715796,
    -0.0424634,
    -0.023211718,
    -0.07025953,
    -0.15229864,
    -0.22332284,
    0.07056886,
    0.22943081,
    0.16676648,
    -0.02181567,
    -0.3179219,
    -0.4433935,
    0.04047445,
    0.20188384,
    -0.028002886,
    -0.21273929,
    -0.46892592,
    -0.5653474,
    0.029843856,
    0.24718265,
    0.037132133,
    -0.21043265,
    -0.5676391,
    -0.6542062,
    0.3274471,
    0.27758774,
    0.11513081,
    0.040216476,
    -0.089228235,
    -0.35586846,
    0.6417258,
    0.49622503,
    0.36054546,
    0.16259627,
    -0.082368754,
    -0.262107,
    0.678735,
    0.5368774,
    0.3099695,
    0.10655954,
    -0.10465651,
    -0.29917997,
    0.16792159,
    0.1577304,
    0.16804223,
    0.10388793,
    -0.13632257,
    -0.42181656,
    0.30137855,
    0.28907153,
    0.14327319,
    -0.08602849,
    -0.39151397,
    -0.5207711,
    0.43153358,
    0.39453915,
    0.2394928,
    -0.05691166,
    -0.3905136,
    -0.6860466,
    0.3522324,
    0.11313553,
    0.08444513,
    0.29406506,
    0.12684472,
    0.052540373,
    0.28221342,
    -0.08347226,
    0.23164485,
    0.0010997606,
    -0.0033995532,
    0.006593518,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_0KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.5300793,
    -0.26639053,
    -0.20059928,
    0.27584556,
    0.43829525,
    0.46093768,
    -0.47241032,
    -0.29763353,
    -0.21779417,
    0.13908759,
    0.37783194,
    0.5415614,
    -1.0139028,
    -0.57713884,
    -0.52716523,
    0.28546932,
    0.40981755,
    0.5783491,
    -0.36181673,
    -0.38462636,
    -0.25784114,
    0.23288245,
    0.32873884,
    0.42994198,
    -2.4680722,
    -0.9004318,
    -0.79354334,
    0.32922253,
    0.79266435,
    2.8930957,
    -1.3108174,
    -0.91241705,
    -1.0420836,
    0.41660392,
    0.81711787,
    3.3525617,
    -0.25112832,
    0.14870307,
    -0.07646196,
    -0.2748452,
    0.044683922,
    -0.32787788,
    -3.344259,
    0.34881493,
    -0.6249808,
    -4.41257,
    -4.6246653,
    -1.226076,
    -0.6769607,
    -1.0256125,
    0.094013914,
    -0.7970725,
    0.074733235,
    0.13644445,
    -0.29019982,
    -0.23004213,
    -0.046379678,
    0.26287532,
    0.65430385,
    -0.10233868,
    -0.21957281,
    -0.30608168,
    -0.31329083,
    -0.5348425,
    -0.2415654,
    0.2505291,
    -0.23968278,
    0.080551274,
    0.50174356,
    2.0182993,
    -0.26016024,
    0.48775527,
    0.021042023,
    -0.070382535,
    -0.009149918,
    0.1027655,
    -0.049955886,
    -0.15451877,
    -0.39465973,
    -0.6298259,
    -0.5666343,
    -0.18417655,
    0.20768863,
    -0.99855494,
    -0.711143,
    -0.267215,
    0.1957835,
    1.5090208,
    2.615495,
    0.6883255,
    0.053332604,
    0.815144,
    0.29860216,
    -0.22568327,
    -0.5128472,
    0.1445651,
    0.06427663,
    -0.46426046,
    0.14175251,
    -0.023036735,
    -0.58625793,
    1.4717165,
    0.48201957,
    0.62599576,
    -0.3833655,
    -0.3931764,
    -1.2397534,
    0.60044265,
    0.6434905,
    0.82031107,
    -0.36341557,
    -0.4224276,
    -0.30220035,
    2.458721,
    0.064232655,
    2.1706302,
    1.8125877,
    0.5612944,
    -4.3658104,
    -0.63122606,
    0.9910339,
    1.5085628,
    0.5680532,
    0.54854614,
    0.04353203,
    0.3938119,
    0.29791978,
    0.16167186,
    -0.07575204,
    0.36369878,
    -0.036046263,
    0.34923273,
    0.19948052,
    -1.1746663,
    0.05753199,
    0.7066424,
    -0.5216636,
    0.26382822,
    0.23252624,
    0.046185624,
    0.0052082036,
    -0.0012640925,
    0.29350677,
    0.12739302,
    1.9190608,
    -4.2342024,
    -2.1124291,
    -2.4865856,
    -0.3627463,
    0.16832653,
    0.2014534,
    0.79317755,
    -2.4558628,
    -1.5565073,
    -1.185372,
    0.79127586,
    0.41451842,
    -1.1614832,
    0.16879827,
    1.2650084,
    1.8491275,
    1.5199188,
    1.864483,
    0.5860953,
    -0.7540468,
    -0.37384555,
    0.6666168,
    1.3968543,
    1.907213,
    0.5204881,
    -1.9525396,
    -0.8587045,
    -1.2524264,
    -1.0704786,
    -1.4257281,
    -0.2685503,
    -1.4052665,
    -3.0950375,
    0.35444495,
    -0.0054863133,
    -0.026691409,
    -0.14870097,
    0.050324872,
    0.10252323,
    0.19942729,
    -0.021447422,
    0.4429318,
    -0.066466354,
    -1.471951,
    -1.331358,
    -0.24344291,
    1.892406,
    1.370992,
    1.7016317,
    -0.34030855,
    1.862254,
    2.2458806,
    0.32454157,
    1.322506,
    -0.2741965,
    0.55089074,
    0.544816,
    0.112018235,
    0.7090234,
    1.0328413,
    1.0646367,
    3.1588268,
    0.00053430814,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S_2KOMI: [f32; NUM_VALUE_FEATURES_6S] = [
    0.21771327,
    0.33326373,
    -0.13893488,
    -0.37206796,
    -0.7595758,
    -0.90744543,
    -0.9712849,
    1.5432602,
    1.503901,
    1.5160416,
    1.5399754,
    1.595653,
    1.5719197,
    0.1317611,
    0.3291699,
    0.52267575,
    0.7169358,
    0.88873005,
    0.9788595,
    0.40546015,
    0.44296974,
    0.7177308,
    1.1134155,
    1.4809518,
    1.8105962,
    0.49592593,
    0.63850325,
    0.7156919,
    0.75050515,
    0.835758,
    0.895494,
    0.38134584,
    0.43369085,
    0.46916795,
    0.55294234,
    0.5986495,
    0.62445456,
    0.554356,
    0.7918262,
    1.3394507,
    1.0156143,
    0.19241498,
    -0.34006578,
    0.7649411,
    -0.0049555413,
    -0.52573544,
    -0.1062514,
    -0.21063712,
    -0.078920215,
    -0.23281954,
    -0.33606315,
    -1.1998382,
    -0.3995681,
    -0.6972785,
    -0.7575521,
    -0.14436156,
    0.18405795,
    0.61631423,
    1.1986846,
    0.69289875,
    -0.63400215,
    -0.42460698,
    -0.96323276,
    -0.31901908,
    0.08603423,
    0.45847222,
    1.0608453,
    0.8673481,
    0.5462466,
    0.27521232,
    0.066046,
    -0.025843382,
    -0.26299998,
    -0.5083845,
    0.32928777,
    0.2071674,
    -0.11443509,
    -0.33960712,
    -0.5853146,
    -0.64771473,
    -0.9795732,
    0.6023414,
    0.59769094,
    0.55067134,
    0.49976894,
    0.563401,
    0.5275263,
    0.5640124,
    -0.4658632,
    -0.41722664,
    -0.40644306,
    -0.44651064,
    -0.47395122,
    -0.45916176,
    -0.45766142,
    -0.2594969,
    -0.21761401,
    -0.0034146358,
    0.21625893,
    0.045820706,
    0.1512922,
    0.0170186,
    2.7411926,
    0.8303613,
    0.058052763,
    0.13505153,
    0.016490733,
    -0.23082528,
    0.0273496,
    -0.10570964,
    -0.110919446,
    0.0012913607,
    -0.32397804,
    -0.22567214,
    -0.17108192,
    -0.02073143,
    0.19037749,
    0.42841044,
    -0.062533036,
    -0.29521182,
    -0.1396083,
    0.17354535,
    0.5217456,
    0.81835455,
    -0.027616277,
    -0.3038773,
    -0.066986,
    0.19677092,
    0.53473675,
    0.7071984,
    -0.04563913,
    -0.43020785,
    -0.1459292,
    0.14944674,
    0.5331293,
    0.7797819,
    -0.54358786,
    -0.59012425,
    -0.4049465,
    -0.23254016,
    -0.044507444,
    0.3026171,
    -0.6734591,
    -0.7002609,
    -0.4570858,
    -0.19750746,
    0.11377126,
    0.39230385,
    -0.60856223,
    -0.6438954,
    -0.40065745,
    -0.12439705,
    0.1568851,
    0.5518892,
    -0.03719101,
    -0.24184074,
    -0.19907442,
    -0.02622535,
    0.24592608,
    0.5051881,
    -0.33540815,
    -0.4040114,
    -0.19142991,
    0.063356936,
    0.41885734,
    0.65227956,
    -0.56078666,
    -0.50991786,
    -0.25419512,
    0.086666636,
    0.4517077,
    0.7581691,
    -0.3960331,
    -0.33967716,
    -0.35263127,
    -0.74672,
    -0.69646794,
    -0.24195258,
    -0.4157162,
    -0.28031626,
    -0.32132256,
    0.0029043844,
    0.008424118,
    -0.0050589656,
    -0.0051581357,
    0.007047029,
    -0.0010688612,
    -0.007828684,
    0.0054334905,
    -0.006010456,
    -0.0055280733,
    -1.592934,
    -1.5846157,
    -1.616794,
    -1.6229805,
    -1.6623796,
    -1.6272088,
    -0.4607488,
    -0.8031129,
    -0.95388097,
    -1.0679191,
    -1.252348,
    -1.3556193,
    -0.20125386,
    -0.49362025,
    -0.80274826,
    -1.1120025,
    -1.5157037,
    -1.8145785,
    -0.56862533,
    -0.6115173,
    -0.66370785,
    -0.7603393,
    -0.7658738,
    -0.82061154,
    -0.35664788,
    -0.43347198,
    -0.4678089,
    -0.535728,
    -0.59038955,
    -0.59741217,
    -0.5785484,
    -0.9131074,
    -1.4603455,
    -1.0801275,
    -0.32872465,
    0.35500956,
    -0.19403705,
    0.019682093,
    0.53383565,
    0.16144808,
    0.23172675,
    0.0869403,
    0.25918213,
    0.47888902,
    0.76280504,
    0.4593772,
    -0.0056089186,
    0.008402593,
    0.00928643,
    -0.008366895,
    0.0031475304,
    -0.024913076,
    -0.7315003,
    0.009508491,
    0.008153329,
    0.002645051,
    0.004003441,
    0.0071725287,
    0.0049608946,
    1.115488,
    0.0015487336,
    -0.007857392,
    0.011343886,
    -0.17193107,
    -0.7056745,
    -0.8940067,
    -0.35821572,
    0.009482224,
    0.0059623104,
    -0.00848626,
    0.005141116,
    -0.09408875,
    -0.021840531,
    1.0413871,
    0.2250753,
    -0.00016550612,
    -0.37540585,
    -0.656015,
    -0.83109736,
    -0.75119776,
    -0.7476631,
    0.11239064,
    0.42419666,
    1.1048877,
    1.212036,
    0.44699875,
    0.28609467,
    0.3021342,
    0.23989184,
    0.23368469,
    0.0020356704,
    -0.21245985,
    -0.05143337,
    -0.15283386,
    -0.027937401,
    -4.372348,
    -0.60359216,
    -0.029195886,
    -0.08714327,
    -0.08679265,
    0.2038601,
    -0.027649192,
    0.15264365,
    0.12088541,
    -0.0071793436,
    0.30558452,
    0.21091536,
    0.10481686,
    -0.056549124,
    -0.24375142,
    -0.4614209,
    -0.059764456,
    0.10376962,
    -0.03561752,
    -0.27222878,
    -0.583521,
    -0.78329664,
    -0.018025763,
    0.15710847,
    -0.022750739,
    -0.21994932,
    -0.5076862,
    -0.6911871,
    -0.053093974,
    0.30506957,
    0.07669968,
    -0.19887789,
    -0.57484144,
    -0.81090623,
    0.43923476,
    0.5688951,
    0.42293522,
    0.29808083,
    0.039763622,
    -0.19336492,
    0.562874,
    0.6127301,
    0.41511586,
    0.20599967,
    -0.069962375,
    -0.44308704,
    0.5613552,
    0.5535467,
    0.330386,
    0.095503606,
    -0.14240289,
    -0.4810482,
    0.07721207,
    0.19243094,
    0.1709831,
    0.034228005,
    -0.21956746,
    -0.4550257,
    0.31448203,
    0.34237906,
    0.17372973,
    -0.076771274,
    -0.35763162,
    -0.65126604,
    0.53321373,
    0.46962327,
    0.25678197,
    -0.03129034,
    -0.39866894,
    -0.7420189,
    0.33665696,
    0.12931053,
    0.06298426,
    0.5389631,
    0.2112735,
    0.0074162423,
    0.23177682,
    -0.03205811,
    0.16746394,
    0.0010997606,
    -0.0033995532,
    0.006593518,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S_2KOMI: [f32; NUM_POLICY_FEATURES_6S] = [
    -0.46621975,
    -0.21953388,
    -0.049345642,
    0.12113982,
    0.4562789,
    0.6810874,
    -0.44628957,
    -0.42155886,
    -0.09137924,
    -0.06394674,
    0.21630517,
    0.36891073,
    -0.7464322,
    -0.7136133,
    -0.51781636,
    -0.025716957,
    0.21453443,
    0.1986902,
    -0.2096131,
    -0.31386226,
    -0.2186628,
    0.23330052,
    0.48525426,
    0.62263805,
    -1.3440803,
    -0.9781214,
    -0.84503055,
    0.3223637,
    0.95747316,
    2.3684132,
    -1.9835778,
    -0.78683573,
    -1.1318843,
    -0.114133544,
    1.1960261,
    3.2024868,
    -0.3831638,
    0.22290155,
    0.0032807298,
    -0.15951066,
    -0.00013717831,
    -0.17790513,
    -1.7816588,
    0.12240937,
    -0.71592146,
    -4.227533,
    -3.8901203,
    -1.2702625,
    -0.66282433,
    -1.0496584,
    0.055807117,
    -0.7702264,
    0.06705794,
    0.19492789,
    -0.19812866,
    -0.17473157,
    -0.046466466,
    0.2037545,
    0.18126658,
    -0.006768252,
    -0.17946,
    -0.28238845,
    -0.34336048,
    -0.5264929,
    -0.64011717,
    0.009408881,
    -0.4604069,
    -0.1990555,
    0.54002315,
    1.7357463,
    0.1109954,
    0.45902598,
    -0.043361578,
    -0.14167598,
    -0.080821306,
    0.02012464,
    -0.05754008,
    -0.14499447,
    -0.4182893,
    -0.63592994,
    -0.576742,
    -0.25527242,
    0.04702399,
    -0.81394917,
    -0.45762315,
    -0.123777255,
    0.5290472,
    1.5117865,
    1.0824629,
    0.6176924,
    0.5120528,
    -0.30515155,
    0.35663006,
    -0.6240013,
    1.0142072,
    0.19208543,
    -0.39459687,
    0.52772784,
    0.13685693,
    0.30078232,
    -0.60063595,
    1.3776233,
    0.4386929,
    1.0784527,
    -0.31660357,
    -0.45561,
    -0.7900989,
    0.59406656,
    0.8392558,
    1.0265702,
    -0.339949,
    -0.52938634,
    -0.14286774,
    2.248951,
    -0.01999118,
    2.283183,
    3.2649517,
    0.512375,
    -4.61881,
    -0.6685727,
    1.0275832,
    1.5325874,
    0.5696004,
    0.610791,
    0.039477374,
    0.36092016,
    0.3147769,
    0.102616265,
    -0.020740444,
    0.34050304,
    -0.05800955,
    0.32427162,
    0.38430604,
    -1.6891682,
    -0.114312604,
    -0.18890363,
    -0.42127228,
    -0.2298503,
    0.2149532,
    0.08493596,
    0.0052082036,
    -0.0012640925,
    0.35978326,
    0.09180474,
    2.1777563,
    -4.616872,
    -2.4099336,
    -2.8804834,
    -0.37933338,
    0.21186629,
    0.14238851,
    0.8612787,
    -2.8397324,
    -1.7114667,
    -1.1977332,
    0.69425607,
    0.4897461,
    -0.9942497,
    0.08917343,
    1.1856768,
    1.7801665,
    1.4506663,
    1.6789247,
    0.80407685,
    -0.7087827,
    -0.5009917,
    0.5912964,
    1.2690824,
    1.7248868,
    0.6200442,
    -2.0903971,
    -0.8028056,
    -1.1963563,
    -1.1463109,
    -1.3448905,
    -0.30830163,
    -1.2663715,
    -2.297255,
    0.3533146,
    -0.014453258,
    -0.028757986,
    -0.123589225,
    0.047525883,
    0.08420473,
    0.22862871,
    -0.059567694,
    0.36259696,
    0.3024903,
    0.25492752,
    -0.256868,
    -0.24972937,
    1.9721619,
    1.3509166,
    1.7723184,
    -0.06589763,
    1.922155,
    2.019531,
    0.19639046,
    1.2929707,
    -0.49186283,
    0.52118087,
    0.52641404,
    0.09441856,
    0.7761948,
    1.1083302,
    1.0604208,
    2.8965597,
    0.00053430814,
];
